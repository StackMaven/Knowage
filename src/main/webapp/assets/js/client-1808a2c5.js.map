{"version":3,"file":"client-1808a2c5.js","sources":["../../../../../node_modules/@stomp/stompjs/esm6/byte.js","../../../../../node_modules/@stomp/stompjs/esm6/frame-impl.js","../../../../../node_modules/@stomp/stompjs/esm6/parser.js","../../../../../node_modules/@stomp/stompjs/esm6/types.js","../../../../../node_modules/@stomp/stompjs/esm6/versions.js","../../../../../node_modules/@stomp/stompjs/esm6/augment-websocket.js","../../../../../node_modules/@stomp/stompjs/esm6/stomp-handler.js","../../../../../node_modules/@stomp/stompjs/esm6/client.js"],"sourcesContent":["/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport const BYTE = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00',\n};\n//# sourceMappingURL=byte.js.map","import { BYTE } from './byte';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nexport class FrameImpl {\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body;\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n//# sourceMappingURL=frame-impl.js.map","/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class Parser {\n    constructor(onFrame, onIncomingPing) {\n        this.onFrame = onFrame;\n        this.onIncomingPing = onIncomingPing;\n        this._encoder = new TextEncoder();\n        this._decoder = new TextDecoder();\n        this._token = [];\n        this._initState();\n    }\n    parseChunk(segment, appendMissingNULLonIncoming = false) {\n        let chunk;\n        if (segment instanceof ArrayBuffer) {\n            chunk = new Uint8Array(segment);\n        }\n        else {\n            chunk = this._encoder.encode(segment);\n        }\n        // See https://github.com/stomp-js/stompjs/issues/89\n        // Remove when underlying issue is fixed.\n        //\n        // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n        if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            const chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < chunk.length; i++) {\n            const byte = chunk[i];\n            this._onByte(byte);\n        }\n    }\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    _collectFrame(byte) {\n        if (byte === NULL) {\n            // Ignore\n            return;\n        }\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            // Incoming Ping\n            this.onIncomingPing();\n            return;\n        }\n        this._onByte = this._collectCommand;\n        this._reinjectByte(byte);\n    }\n    _collectCommand(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaders(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._setupCollectBody();\n            return;\n        }\n        this._onByte = this._collectHeaderKey;\n        this._reinjectByte(byte);\n    }\n    _reinjectByte(byte) {\n        this._onByte(byte);\n    }\n    _collectHeaderKey(byte) {\n        if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaderValue(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _setupCollectBody() {\n        const contentLengthHeader = this._results.headers.filter((header) => {\n            return header[0] === 'content-length';\n        })[0];\n        if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n        }\n        else {\n            this._onByte = this._collectBodyNullTerminated;\n        }\n    }\n    _collectBodyNullTerminated(byte) {\n        if (byte === NULL) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectBodyFixedSize(byte) {\n        // It is post decrement, so that we discard the trailing NULL octet\n        if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _retrievedBody() {\n        this._results.binaryBody = this._consumeTokenAsRaw();\n        this.onFrame(this._results);\n        this._initState();\n    }\n    // Rec Descent Parser helpers\n    _consumeByte(byte) {\n        this._token.push(byte);\n    }\n    _consumeTokenAsUTF8() {\n        return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n    _consumeTokenAsRaw() {\n        const rawResult = new Uint8Array(this._token);\n        this._token = [];\n        return rawResult;\n    }\n    _initState() {\n        this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined,\n        };\n        this._token = [];\n        this._headerKey = undefined;\n        this._onByte = this._collectFrame;\n    }\n}\n//# sourceMappingURL=parser.js.map","/**\n * Possible states for the IStompSocket\n */\nexport var StompSocketState;\n(function (StompSocketState) {\n    StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n    StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n    StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(StompSocketState || (StompSocketState = {}));\n/**\n * Possible activation state\n */\nexport var ActivationState;\n(function (ActivationState) {\n    ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n    ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n})(ActivationState || (ActivationState = {}));\n//# sourceMappingURL=types.js.map","/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Versions {\n    /**\n     * Takes an array of string of versions, typical elements '1.0', '1.1', or '1.2'\n     *\n     * You will an instance if this class if you want to override supported versions to be declared during\n     * STOMP handshake.\n     */\n    constructor(versions) {\n        this.versions = versions;\n    }\n    /**\n     * Used as part of CONNECT STOMP Frame\n     */\n    supportedVersions() {\n        return this.versions.join(',');\n    }\n    /**\n     * Used while creating a WebSocket\n     */\n    protocolVersions() {\n        return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n    }\n}\n/**\n * Indicates protocol version 1.0\n */\nVersions.V1_0 = '1.0';\n/**\n * Indicates protocol version 1.1\n */\nVersions.V1_1 = '1.1';\n/**\n * Indicates protocol version 1.2\n */\nVersions.V1_2 = '1.2';\n/**\n * @internal\n */\nVersions.default = new Versions([\n    Versions.V1_0,\n    Versions.V1_1,\n    Versions.V1_2,\n]);\n//# sourceMappingURL=versions.js.map","/**\n * @internal\n */\nexport function augmentWebsocket(webSocket, debug) {\n    webSocket.terminate = function () {\n        const noOp = () => { };\n        // set all callbacks to no op\n        this.onerror = noOp;\n        this.onmessage = noOp;\n        this.onopen = noOp;\n        const ts = new Date();\n        const origOnClose = this.onclose;\n        // Track delay in actual closure of the socket\n        this.onclose = closeEvent => {\n            const delay = new Date().getTime() - ts.getTime();\n            debug(`Discarded socket closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n        };\n        this.close();\n        origOnClose.call(this, {\n            code: 4001,\n            reason: 'Heartbeat failure, discarding the socket',\n            wasClean: false,\n        });\n    };\n}\n//# sourceMappingURL=augment-websocket.js.map","import { BYTE } from './byte';\nimport { FrameImpl } from './frame-impl';\nimport { Parser } from './parser';\nimport { StompSocketState, } from './types';\nimport { Versions } from './versions';\nimport { augmentWebsocket } from './augment-websocket';\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nexport class StompHandler {\n    constructor(_client, _webSocket, config = {}) {\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](http://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: frame => {\n                this.debug(`connected to server ${frame.headers.server}`);\n                this._connected = true;\n                this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (this._connectedVersion === Versions.V1_2) {\n                    this._escapeHeaderValues = true;\n                }\n                this._setupHeartbeat(frame.headers);\n                this.onConnect(frame);\n            },\n            // [MESSAGE Frame](http://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: frame => {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](http://www.rabbitmq.com/stomp.html)).\n                const subscription = frame.headers.subscription;\n                const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n                // bless the frame to be a Message\n                const message = frame;\n                const client = this;\n                const messageId = this._connectedVersion === Versions.V1_2\n                    ? message.headers.ack\n                    : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = (headers = {}) => {\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = (headers = {}) => {\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](http://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: frame => {\n                const callback = this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](http://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: frame => {\n                this.onStompError(frame);\n            },\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.configure(config);\n    }\n    get connectedVersion() {\n        return this._connectedVersion;\n    }\n    get connected() {\n        return this._connected;\n    }\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    }\n    start() {\n        const parser = new Parser(\n        // On Frame\n        rawFrame => {\n            const frame = FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!this.logRawCommunication) {\n                this.debug(`<<< ${frame}`);\n            }\n            const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        () => {\n            this.debug('<<< PONG');\n        });\n        this._webSocket.onmessage = (evt) => {\n            this.debug('Received data');\n            this._lastServerActivityTS = Date.now();\n            if (this.logRawCommunication) {\n                const rawChunkAsString = evt.data instanceof ArrayBuffer\n                    ? new TextDecoder().decode(evt.data)\n                    : evt.data;\n                this.debug(`<<< ${rawChunkAsString}`);\n            }\n            parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n        };\n        this._onclose = (closeEvent) => {\n            this.debug(`Connection closed to ${this._client.brokerURL}`);\n            this._cleanUp();\n            this.onWebSocketClose(closeEvent);\n        };\n        this._webSocket.onclose = this._onclose;\n        this._webSocket.onerror = (errorEvent) => {\n            this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = () => {\n            // Clone before updating\n            const connectHeaders = Object.assign({}, this.connectHeaders);\n            this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [\n                this.heartbeatOutgoing,\n                this.heartbeatIncoming,\n            ].join(',');\n            this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    }\n    _setupHeartbeat(headers) {\n        if (headers.version !== Versions.V1_1 &&\n            headers.version !== Versions.V1_2) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        const [serverOutgoing, serverIncoming] = headers['heart-beat']\n            .split(',')\n            .map((v) => parseInt(v, 10));\n        if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(`send PING every ${ttl}ms`);\n            this._pinger = setInterval(() => {\n                if (this._webSocket.readyState === StompSocketState.OPEN) {\n                    this._webSocket.send(BYTE.LF);\n                    this.debug('>>> PING');\n                }\n            }, ttl);\n        }\n        if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(`check PONG every ${ttl}ms`);\n            this._ponger = setInterval(() => {\n                const delta = Date.now() - this._lastServerActivityTS;\n                // We wait twice the TTL to be flexible on window's setInterval calls\n                if (delta > ttl * 2) {\n                    this.debug(`did not receive server activity for the last ${delta}ms`);\n                    this._closeOrDiscardWebsocket();\n                }\n            }, ttl);\n        }\n    }\n    _closeOrDiscardWebsocket() {\n        if (this.discardWebsocketOnCommFailure) {\n            this.debug('Discarding websocket, the underlying socket may linger for a while');\n            this._discardWebsocket();\n        }\n        else {\n            this.debug('Issuing close on the websocket');\n            this._closeWebsocket();\n        }\n    }\n    forceDisconnect() {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeOrDiscardWebsocket();\n            }\n        }\n    }\n    _closeWebsocket() {\n        this._webSocket.onmessage = () => { }; // ignore messages\n        this._webSocket.close();\n    }\n    _discardWebsocket() {\n        if (!this._webSocket.terminate) {\n            augmentWebsocket(this._webSocket, (msg) => this.debug(msg));\n        }\n        this._webSocket.terminate();\n    }\n    _transmit(params) {\n        const { command, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const frame = new FrameImpl({\n            command,\n            headers,\n            body,\n            binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader,\n        });\n        let rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(`>>> ${rawChunk}`);\n        }\n        else {\n            this.debug(`>>> ${frame}`);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            let out = rawChunk;\n            while (out.length > 0) {\n                const chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n            }\n        }\n    }\n    dispose() {\n        if (this.connected) {\n            try {\n                // clone before updating\n                const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = `close-${this._counter++}`;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, frame => {\n                    this._closeWebsocket();\n                    this._cleanUp();\n                    this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(`Ignoring error during disconnect ${error}`);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === StompSocketState.CONNECTING ||\n                this._webSocket.readyState === StompSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    }\n    _cleanUp() {\n        this._connected = false;\n        if (this._pinger) {\n            clearInterval(this._pinger);\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n        }\n    }\n    publish(params) {\n        const { destination, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const hdrs = Object.assign({ destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body,\n            binaryBody,\n            skipContentLengthHeader,\n        });\n    }\n    watchForReceipt(receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = `sub-${this._counter++}`;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers });\n        const client = this;\n        return {\n            id: headers.id,\n            unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            },\n        };\n    }\n    unsubscribe(id, headers = {}) {\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers });\n    }\n    begin(transactionId) {\n        const txId = transactionId || `tx-${this._counter++}`;\n        this._transmit({\n            command: 'BEGIN',\n            headers: {\n                transaction: txId,\n            },\n        });\n        const client = this;\n        return {\n            id: txId,\n            commit() {\n                client.commit(txId);\n            },\n            abort() {\n                client.abort(txId);\n            },\n        };\n    }\n    commit(transactionId) {\n        this._transmit({\n            command: 'COMMIT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    abort(transactionId) {\n        this._transmit({\n            command: 'ABORT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers });\n    }\n}\n//# sourceMappingURL=stomp-handler.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StompHandler } from './stomp-handler';\nimport { ActivationState, StompSocketState, } from './types';\nimport { Versions } from './versions';\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nexport class Client {\n    /**\n     * Create an instance.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP versions to attempt during STOMP handshake. By default versions `1.0`, `1.1`, and `1.2` are attempted.\n         *\n         * Example:\n         * ```javascript\n         *        // Try only versions 1.0 and 1.1\n         *        client.stompVersions = new Versions(['1.0', '1.1'])\n         * ```\n         */\n        this.stompVersions = Versions.default;\n        /**\n         * Will retry if Stomp connection is not established in specified milliseconds.\n         * Default 0, which implies wait for ever.\n         */\n        this.connectionTimeout = 0;\n        /**\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * This switches on a non standard behavior while sending WebSocket packets.\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n         * Only Java Spring brokers seems to use this mode.\n         *\n         * WebSockets, by itself, split large (text) packets,\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\n         * Actually setting it for such broker will cause large messages to fail.\n         *\n         * `false` by default.\n         *\n         * Binary frames are never split.\n         */\n        this.splitLargeFrames = false;\n        /**\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Usually the\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n         * is automatically decided by type of the payload.\n         * Default is `false`, which should work with all compliant brokers.\n         *\n         * Set this flag to force binary frames.\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * A bug in ReactNative chops a string on occurrence of a NULL.\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n         * This makes incoming WebSocket messages invalid STOMP packets.\n         * Setting this flag attempts to reverse the damage by appending a NULL.\n         * If the broker splits a large message into multiple WebSocket messages,\n         * this flag will cause data loss and abnormal termination of connection.\n         *\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Activation state.\n         *\n         * It will usually be ACTIVE or INACTIVE.\n         * When deactivating it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n         */\n        this.state = ActivationState.INACTIVE;\n        // Dummy callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Underlying WebSocket instance, READONLY.\n     */\n    get webSocket() {\n        return this._stompHandler ? this._stompHandler._webSocket : undefined;\n    }\n    /**\n     * Disconnection headers.\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * `true` if there is a active connection with STOMP Broker\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n    get active() {\n        return this.state === ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Update configuration.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    activate() {\n        if (this.state === ActivationState.DEACTIVATING) {\n            this.debug('Still DEACTIVATING, please await call to deactivate before trying to re-activate');\n            throw new Error('Still DEACTIVATING, can not activate now');\n        }\n        if (this.active) {\n            this.debug('Already ACTIVE, ignoring request to activate');\n            return;\n        }\n        this._changeState(ActivationState.ACTIVE);\n        this._connect();\n    }\n    _connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.connected) {\n                this.debug('STOMP: already connected, nothing to do');\n                return;\n            }\n            yield this.beforeConnect();\n            if (!this.active) {\n                this.debug('Client has been marked inactive, will not attempt to connect');\n                return;\n            }\n            // setup connection watcher\n            if (this.connectionTimeout > 0) {\n                // clear first\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                }\n                this._connectionWatcher = setTimeout(() => {\n                    if (this.connected) {\n                        return;\n                    }\n                    // Connection not established, close the underlying socket\n                    // a reconnection will be attempted\n                    this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                    this.forceDisconnect();\n                }, this.connectionTimeout);\n            }\n            this.debug('Opening Web Socket...');\n            // Get the actual WebSocket (or a similar object)\n            const webSocket = this._createWebSocket();\n            this._stompHandler = new StompHandler(this, webSocket, {\n                debug: this.debug,\n                stompVersions: this.stompVersions,\n                connectHeaders: this.connectHeaders,\n                disconnectHeaders: this._disconnectHeaders,\n                heartbeatIncoming: this.heartbeatIncoming,\n                heartbeatOutgoing: this.heartbeatOutgoing,\n                splitLargeFrames: this.splitLargeFrames,\n                maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n                forceBinaryWSFrames: this.forceBinaryWSFrames,\n                logRawCommunication: this.logRawCommunication,\n                appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n                discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n                onConnect: frame => {\n                    // Successfully connected, stop the connection watcher\n                    if (this._connectionWatcher) {\n                        clearTimeout(this._connectionWatcher);\n                        this._connectionWatcher = undefined;\n                    }\n                    if (!this.active) {\n                        this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                        this._disposeStompHandler();\n                        return;\n                    }\n                    this.onConnect(frame);\n                },\n                onDisconnect: frame => {\n                    this.onDisconnect(frame);\n                },\n                onStompError: frame => {\n                    this.onStompError(frame);\n                },\n                onWebSocketClose: evt => {\n                    this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                    if (this.state === ActivationState.DEACTIVATING) {\n                        // Mark deactivation complete\n                        this._resolveSocketClose();\n                        this._resolveSocketClose = undefined;\n                        this._changeState(ActivationState.INACTIVE);\n                    }\n                    this.onWebSocketClose(evt);\n                    // The callback is called before attempting to reconnect, this would allow the client\n                    // to be `deactivated` in the callback.\n                    if (this.active) {\n                        this._schedule_reconnect();\n                    }\n                },\n                onWebSocketError: evt => {\n                    this.onWebSocketError(evt);\n                },\n                onUnhandledMessage: message => {\n                    this.onUnhandledMessage(message);\n                },\n                onUnhandledReceipt: frame => {\n                    this.onUnhandledReceipt(frame);\n                },\n                onUnhandledFrame: frame => {\n                    this.onUnhandledFrame(frame);\n                },\n            });\n            this._stompHandler.start();\n        });\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this.reconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                this._connect();\n            }, this.reconnectDelay);\n        }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if underlying STOMP connection was connected.\n     *\n     * This call is async, it will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after underlying websocket is properly disposed.\n     *\n     * To reactivate you can call [Client#activate]{@link Client#activate}.\n     */\n    deactivate() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let retPromise;\n            if (this.state !== ActivationState.ACTIVE) {\n                this.debug(`Already ${ActivationState[this.state]}, ignoring call to deactivate`);\n                return Promise.resolve();\n            }\n            this._changeState(ActivationState.DEACTIVATING);\n            // Clear if a reconnection was scheduled\n            if (this._reconnector) {\n                clearTimeout(this._reconnector);\n            }\n            if (this._stompHandler &&\n                this.webSocket.readyState !== StompSocketState.CLOSED) {\n                // we need to wait for underlying websocket to close\n                retPromise = new Promise((resolve, reject) => {\n                    this._resolveSocketClose = resolve;\n                });\n            }\n            else {\n                // indicate that auto reconnect loop should terminate\n                this._changeState(ActivationState.INACTIVE);\n                return Promise.resolve();\n            }\n            this._disposeStompHandler();\n            return retPromise;\n        });\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different than a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n            this._stompHandler = null;\n        }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body use binaryBody parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect if message body has NULL octet(s)\n     * and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(params) {\n        this._stompHandler.publish(params);\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use. Typically a sequence, a UUID, a\n     * random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based in the value of the receipt-id.\n     *\n     * This method allow watching for a receipt and invoke the callback\n     * when corresponding receipt has been received.\n     *\n     * The actual {@link FrameImpl} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    watchForReceipt(receiptId, callback) {\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each received message with\n     * the {@link IMessage} as argument.\n     *\n     * Note: The library will generate an unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the headers argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    subscribe(destination, callback, headers = {}) {\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: http://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    unsubscribe(id, headers = {}) {\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    begin(transactionId) {\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    commit(transactionId) {\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    abort(transactionId) {\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n//# sourceMappingURL=client.js.map"],"names":["this"],"mappings":"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"}