{"version":3,"file":"WorkspaceDataView-7da91cbb.js","sources":["../../../../modules/workspace/views/dataView/datasetWizard/WorkspaceDatasetWizardStepOne.vue","../../../../modules/workspace/views/dataView/datasetWizard/WorkspaceDatasetWizardStepTwo.vue","../../../../modules/workspace/views/dataView/datasetWizard/WorkspaceDatasetWizardStepThree.vue","../../../../modules/workspace/views/dataView/datasetWizard/WorkspaceDatasetWizardStepFour.vue","../../../../modules/workspace/views/dataView/datasetWizard/WorkspaceDatasetWizardContainer.vue","../../../../modules/workspace/views/dataView/dialogs/WorkspaceDataShareDialog.vue","../../../../modules/workspace/views/dataView/WorkspaceDataView.vue"],"sourcesContent":["<template>\r\n    <Card class=\"p-mt-4\">\r\n        <template #content>\r\n            <div class=\"p-d-flex\">\r\n                <div class=\"p-field\" :style=\"dataViewDescriptor.style.maxwidth\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"fileName\" class=\"kn-material-input\" :style=\"dataViewDescriptor.style.maxwidth\" v-model.trim=\"dataset.fileName\" :disabled=\"true\" @change=\"$emit('touched')\" />\r\n                        <label for=\"fileName\" class=\"kn-material-input-label\"> {{ $t('downloadsDialog.columns.fileName') }} </label>\r\n                    </span>\r\n                </div>\r\n                <Button icon=\"fas fa-upload fa-2x\" class=\"p-button-text p-button-plain p-ml-2\" @click=\"setUploadType\" />\r\n                <Button icon=\"fas fa-download fa-2x\" class=\"p-button-text y p-button-plain p-ml-2\" @click=\"downloadDatasetFile\" />\r\n                <KnInputFile v-if=\"!uploading\" :changeFunction=\"uploadDatasetFile\" accept=\".csv, .xls, .xlsx\" :triggerInput=\"triggerUpload\" />\r\n            </div>\r\n\r\n            <div v-if=\"dataset.fileType && dataset.fileType == 'CSV'\" class=\"p-fluid p-formgrid p-grid p-mt-3\">\r\n                <span class=\"p-field p-float-label p-col\">\r\n                    <Dropdown id=\"csvDelimiter\" class=\"kn-material-input workspace-wizard-step-one-input\" :options=\"dataViewDescriptor.csvDelimiterCharacterTypes\" optionLabel=\"name\" optionValue=\"value\" v-model=\"dataset.csvDelimiter\" />\r\n                    <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanCsvDelimiter') }} </label>\r\n                </span>\r\n                <span class=\"p-field p-float-label p-col\">\r\n                    <Dropdown id=\"csvQuote\" class=\"kn-material-input workspace-wizard-step-one-input\" :options=\"dataViewDescriptor.csvQuoteCharacterTypes\" optionLabel=\"name\" optionValue=\"value\" v-model=\"dataset.csvQuote\" />\r\n                    <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanCsvQuote') }} </label>\r\n                </span>\r\n                <span class=\"p-field p-float-label p-col\">\r\n                    <Dropdown id=\"csvEncoding\" class=\"kn-material-input workspace-wizard-step-one-input\" :options=\"dataViewDescriptor.csvEncodingTypes\" optionLabel=\"name\" optionValue=\"value\" v-model=\"dataset.csvEncoding\" />\r\n                    <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanCsvEncoding') }} </label>\r\n                </span>\r\n                <span class=\"p-field p-float-label p-col\">\r\n                    <Dropdown id=\"dateFormat\" class=\"kn-material-input workspace-wizard-step-one-input\" :options=\"dataViewDescriptor.dateFormatTypes\" optionLabel=\"name\" optionValue=\"value\" v-model=\"dataset.dateFormat\" />\r\n                    <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanDateFormat') }} </label>\r\n                </span>\r\n                <span class=\"p-field p-float-label p-col\">\r\n                    <Dropdown id=\"timestampFormat\" class=\"kn-material-input workspace-wizard-step-one-input\" :options=\"dataViewDescriptor.timestampFormatTypes\" optionLabel=\"name\" optionValue=\"value\" v-model=\"dataset.timestampFormat\" />\r\n                    <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.timestampFormat') }} </label>\r\n                </span>\r\n            </div>\r\n            <div v-if=\"dataset.fileType == 'XLS' || dataset.fileType == 'XLSX'\" class=\"p-fluid p-formgrid p-grid p-mt-3\">\r\n                <div class=\"p-field p-col-12 p-xl-4\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"skipRows\" class=\"kn-material-input\" type=\"number\" v-model.trim=\"dataset.skipRows\" @change=\"$emit('touched')\" />\r\n                        <label for=\"skipRows\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanSkipRows') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col-12 p-xl-4\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"limitRows\" class=\"kn-material-input\" type=\"number\" v-model.trim=\"dataset.limitRows\" @change=\"$emit('touched')\" />\r\n                        <label for=\"limitRows\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanLimitRows') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col-12 p-xl-4\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"sheetnumber\" class=\"kn-material-input\" type=\"number\" v-model.trim=\"dataset.xslSheetNumber\" @change=\"$emit('touched')\" />\r\n                        <label for=\"sheetnumber\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanXslSheetNumber') }} </label>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { AxiosResponse } from 'axios'\r\nimport { defineComponent } from 'vue'\r\nimport { downloadDirect } from '@/helpers/commons/fileHelper'\r\nimport useValidate from '@vuelidate/core'\r\nimport dataViewDescriptor from './WorkspaceDatasetWizardDescriptor.json'\r\nimport Card from 'primevue/card'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport KnInputFile from '@/components/UI/KnInputFile.vue'\r\nimport mainStore from '../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    components: { Card, KnInputFile, Dropdown },\r\n    props: { selectedDataset: { type: Object as any } },\r\n    emits: ['touched', 'fileUploaded', 'closeDialog'],\r\n    data() {\r\n        return {\r\n            v$: useValidate() as any,\r\n            dataViewDescriptor,\r\n            dataset: {} as any,\r\n            triggerUpload: false,\r\n            uploading: false,\r\n            loading: false,\r\n            expandTableCard: true,\r\n            columns: [] as any,\r\n            rows: [] as any\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n        }\r\n    },\r\n    methods: {\r\n        //#region ===================== File Upload/Download ====================================================\r\n        setUploadType() {\r\n            this.triggerUpload = false\r\n            setTimeout(() => (this.triggerUpload = true), 200)\r\n        },\r\n        uploadDatasetFile(event) {\r\n            this.uploading = true\r\n            let uploadedFile = event.target.files[0]\r\n            if (uploadedFile.name.includes(this.dataset.fileName)) {\r\n                this.store.setError({ title: this.$t('common.toast.errorTitle'), msg: this.$t('common.error.sameFileName') })\r\n                this.triggerUpload = false\r\n            } else {\r\n                this.startUpload(uploadedFile)\r\n            }\r\n            this.triggerUpload = false\r\n            setTimeout(() => (this.uploading = false), 200)\r\n        },\r\n        async startUpload(uploadedFile) {\r\n            var formData = new FormData()\r\n            formData.append('file', uploadedFile)\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `/selfservicedatasetupload/fileupload`, formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundaryFYwjkDOpT85ZFN3L'\r\n                    }\r\n                })\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.store.setInfo({ title: this.$t('common.uploading'), msg: this.$t('importExport.import.successfullyCompleted') })\r\n                    this.dataset.fileType = response.data.fileType\r\n                    this.dataset.fileName = response.data.fileName\r\n                    this.$emit('fileUploaded')\r\n                    // this.resetFields()\r\n                })\r\n                .catch()\r\n                .finally(() => {\r\n                    this.triggerUpload = false\r\n                })\r\n        },\r\n        async downloadDatasetFile() {\r\n            var encodedLabel = encodeURI(this.dataset.label)\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/datasets/download/file?dsLabel=${encodedLabel}&type=${this.dataset.fileType}`, {\r\n                    headers: {\r\n                        Accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',\r\n                        'X-Disable-Errors': 'true'\r\n                    }\r\n                })\r\n                .then(\r\n                    (response: AxiosResponse<any>) => {\r\n                        if (response.data.errors) {\r\n                            this.store.setError({ title: this.$t('common.error.downloading'), msg: this.$t('common.error.errorCreatingPackage') })\r\n                        } else {\r\n                            this.store.setInfo({ title: this.$t('common.toast.success') })\r\n                            if (response.headers) {\r\n                                downloadDirect(response.data, this.createCompleteFileName(response), response.headers['content-type'])\r\n                            }\r\n                        }\r\n                    },\r\n                    (error) =>\r\n                        this.store.setError({\r\n                            title: this.$t('common.error.downloading'),\r\n                            msg: this.$t(error)\r\n                        })\r\n                )\r\n        },\r\n        createCompleteFileName(response) {\r\n            var contentDisposition = response.headers['content-disposition']\r\n            var fileAndExtension = contentDisposition.match(/filename[^;\\n=]*=((['\"]).*?\\2|[^;\\n]*)/i)[1]\r\n            var completeFileName = fileAndExtension.replaceAll('\"', '')\r\n            return completeFileName\r\n        },\r\n        resetFields() {\r\n            this.dataset.csvEncoding = 'UTF-8'\r\n            this.dataset.csvDelimiter = ','\r\n            this.dataset.dateFormat = 'dd/MM/yyyy'\r\n            this.dataset.timestampFormat = 'dd/MM/yyyy HH:mm:ss'\r\n            this.dataset.csvQuote = '\"'\r\n            this.dataset.skipRows = 0\r\n            this.dataset.limitRows = null\r\n            this.dataset.xslSheetNumber = 1\r\n\r\n            if (this.dataset.fileType == 'XLS' || this.dataset.fileType == 'XLSX') {\r\n                this.dataset.limitRows = ''\r\n                this.dataset.csvDelimiter = ''\r\n                this.dataset.dateFormat = ''\r\n                this.dataset.timestampFormat = ''\r\n                this.dataset.csvQuote = ''\r\n            }\r\n        }\r\n        //#endregion ================================================================================================\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.workspace-wizard-step-one-input {\r\n    min-width: 100px;\r\n}\r\n</style>\r\n","<template>\r\n    <Card class=\"p-mt-4\">\r\n        <template #content>\r\n            <DataTable v-if=\"dataset.meta\" class=\"p-datatable-sm kn-table\" :scrollable=\"true\" scrollHeight=\"40vh\" :value=\"fieldsMetadata\" stripedRows rowHover>\r\n                <Column field=\"fieldAlias\" :header=\"$t('managers.datasetManagement.fieldAlias')\" :sortable=\"true\">\r\n                    <template #body=\"{ data }\"> {{ data.fieldAlias }} </template>\r\n                </Column>\r\n                <Column field=\"Type\" :header=\"$t('importExport.catalogFunction.column.type')\" :sortable=\"true\">\r\n                    <template #body=\"{ data }\">\r\n                        <Dropdown class=\"kn-material-input\" :style=\"wizardDescriptor.style.maxwidth\" v-model=\"data.Type\" :options=\"valueTypes\" optionLabel=\"value\" optionValue=\"name\" @change=\"saveFieldsMetadata\" :disabled=\"true\" />\r\n                    </template>\r\n                </Column>\r\n                <Column field=\"fieldType\" :header=\"$t('managers.datasetManagement.fieldType')\" :sortable=\"true\">\r\n                    <template #body=\"{ data }\">\r\n                        <Dropdown class=\"kn-material-input\" :style=\"wizardDescriptor.style.maxwidth\" v-model=\"data.fieldType\" :options=\"fieldMetadataTypes\" optionLabel=\"value\" optionValue=\"value\" @change=\"saveFieldsMetadata\" />\r\n                    </template>\r\n                </Column>\r\n            </DataTable>\r\n            <div v-else>\r\n                <Message severity=\"info\" :closable=\"false\">{{ $t('managers.datasetManagement.metadataInfo') }}</Message>\r\n            </div>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport wizardDescriptor from './WorkspaceDatasetWizardDescriptor.json'\r\nimport Card from 'primevue/card'\r\nimport DataTable from 'primevue/datatable'\r\nimport Column from 'primevue/column'\r\nimport Message from 'primevue/message'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport mainStore from '../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    components: { Card, Column, DataTable, Message, Dropdown },\r\n    props: {\r\n        selectedDataset: { type: Object as any }\r\n    },\r\n    computed: {},\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            wizardDescriptor,\r\n            fieldMetadataTypes: wizardDescriptor.fieldsMetadataTypes,\r\n            valueTypes: wizardDescriptor.valueTypes,\r\n            dataset: {} as any,\r\n            fieldsMetadata: [] as any\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n        this.dataset.meta ? this.exctractFieldsMetadata(this.dataset.meta.columns) : ''\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n            this.dataset.meta ? this.exctractFieldsMetadata(this.dataset.meta.columns) : ''\r\n        }\r\n    },\r\n    methods: {\r\n        exctractFieldsMetadata(array) {\r\n            var object = {}\r\n\r\n            for (var item in array) {\r\n                var element = object[array[item].column]\r\n                if (!element) {\r\n                    element = {}\r\n                    object[array[item].column] = element\r\n                    element['column'] = array[item].column\r\n                }\r\n                element[array[item].pname] = array[item].pvalue\r\n            }\r\n\r\n            var fieldsMetadata = new Array()\r\n\r\n            for (item in object) {\r\n                fieldsMetadata.push(object[item])\r\n            }\r\n\r\n            this.fieldsMetadata = fieldsMetadata\r\n        },\r\n        saveFieldsMetadata() {\r\n            var numberOfSpatialAttribute = 0\r\n            for (let i = 0; i < this.fieldsMetadata.length; i++) {\r\n                if (this.fieldsMetadata[i].fieldType == 'SPATIAL_ATTRIBUTE') {\r\n                    numberOfSpatialAttribute++\r\n                    if (numberOfSpatialAttribute > 1) {\r\n                        this.store.setError({ title: this.$t('common.error.saving'), msg: this.$t('managers.datasetManagement.duplicateSpatialAttribute') })\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n            for (let i = 0; i < this.fieldsMetadata.length; i++) {\r\n                for (let j = 0; j < this.dataset.meta.columns.length; j++) {\r\n                    if (this.fieldsMetadata[i].column == this.dataset.meta.columns[j].column && this.dataset.meta.columns[j].pname == 'fieldType') {\r\n                        this.dataset.meta.columns[j].pvalue = this.fieldsMetadata[i].fieldType\r\n                    }\r\n                }\r\n            }\r\n            for (let i = 0; i < this.fieldsMetadata.length; i++) {\r\n                for (let j = 0; j < this.dataset.meta.columns.length; j++) {\r\n                    if (this.fieldsMetadata[i].column == this.dataset.meta.columns[j].column && this.dataset.meta.columns[j].pname == 'Type') {\r\n                        this.dataset.meta.columns[j].pvalue = this.fieldsMetadata[i].Type\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-mt-4\">\r\n        <template #content>\r\n            <DataTable :value=\"rows\" class=\"p-datatable-sm kn-table\" responsiveLayout=\"scroll\" :loading=\"loading\" stripedRows rowHover>\r\n                <Column v-for=\"col of columns\" :field=\"col.name\" :header=\"col.header\" :key=\"col.dataIndex\" class=\"kn-truncated\" :sortable=\"true\" />\r\n            </DataTable>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport Card from 'primevue/card'\r\nimport DataTable from 'primevue/datatable'\r\nimport Column from 'primevue/column'\r\n\r\nexport default defineComponent({\r\n    components: { DataTable, Column, Card },\r\n    props: { gridForPreview: { type: Object as any } },\r\n    computed: {},\r\n    emits: ['close'],\r\n    data() {\r\n        return {\r\n            columns: [] as any,\r\n            rows: [] as any,\r\n            loading: false\r\n        }\r\n    },\r\n    created() {\r\n        this.getPreviewData()\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.getPreviewData()\r\n        }\r\n    },\r\n    methods: {\r\n        getPreviewData() {\r\n            this.loading = true\r\n            let previewColumns = this.gridForPreview.metaData.fields\r\n            previewColumns.forEach((el: any) => {\r\n                typeof el != 'object' ? '' : this.columns.push(el)\r\n            })\r\n            this.rows = this.gridForPreview.rows\r\n            this.loading = false\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-mt-4\">\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field  p-col-12\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"name\" class=\"kn-material-input\" type=\"text\" maxLength=\"50\" v-model=\"v$.dataset.name.$model\" :class=\"{ 'p-invalid': v$.dataset.name.$invalid && v$.dataset.name.$dirty }\" @blur=\"v$.dataset.name.$touch()\" @change=\"$emit('touched')\" data-test=\"name-input\" />\r\n                        <label for=\"name\" class=\"kn-material-input-label\"> {{ $t('common.name') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.name\" :additionalTranslateParams=\"{ fieldName: $t('common.name') }\" />\r\n                </div>\r\n                <div class=\"p-field  p-col-12\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"description\" class=\"kn-material-input\" type=\"text\" maxLength=\"50\" v-model=\"dataset.description\" data-test=\"description-input\" />\r\n                        <label for=\"description\" class=\"kn-material-input-label\"> {{ $t('common.description') }} </label>\r\n                    </span>\r\n                </div>\r\n                <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-mt-1 p-mx-2\" :style=\"dataViewDescriptor.style.maxwidth\">\r\n                    <template #start>\r\n                        <InputSwitch v-model=\"dataset.exportToHdfs\" class=\"p-mr-2\" @change=\"$emit('touched')\" />\r\n                        <span>{{ $t('managers.datasetManagement.isPersistedHDFS') }}</span>\r\n                    </template>\r\n                </Toolbar>\r\n                <div class=\"persistence-container\" :style=\"dataViewDescriptor.style.maxwidth\">\r\n                    <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-mt-3 p-mx-2\">\r\n                        <template #start>\r\n                            <InputSwitch v-model=\"dataset.persist\" :disabled=\"disablePersist\" class=\"p-mr-2\" @change=\"$emit('touched')\" />\r\n                            <span>{{ $t('managers.datasetManagement.isPersisted') }} </span>\r\n                        </template>\r\n                    </Toolbar>\r\n                    <div v-if=\"dataset.persist\" class=\"p-field\">\r\n                        <span class=\"p-float-label p-mt-3 p-mx-2\">\r\n                            <InputText\r\n                                id=\"persistTableName\"\r\n                                class=\"kn-material-input\"\r\n                                type=\"text\"\r\n                                maxLength=\"50\"\r\n                                v-model=\"dataset.tableName\"\r\n                                :class=\"{\r\n                                    'p-invalid': v$.dataset.tableName.$invalid && v$.dataset.tableName.$dirty\r\n                                }\"\r\n                                @blur=\"v$.dataset.tableName.$touch()\"\r\n                                @change=\"$emit('touched')\"\r\n                            />\r\n                            <label for=\"persistTableName\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.persistTableName') }} *</label>\r\n                        </span>\r\n                        <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.tableName\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.persistTableName') }\" />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { defineComponent } from 'vue'\r\n    import { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\n    import useValidate from '@vuelidate/core'\r\n    import KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\n    import dataViewDescriptor from './WorkspaceDatasetWizardDescriptor.json'\r\n    import Card from 'primevue/card'\r\n    import InputSwitch from 'primevue/inputswitch'\r\n\r\n    export default defineComponent({\r\n        components: { Card, KnValidationMessages, InputSwitch },\r\n        props: { selectedDataset: { type: Object as any } },\r\n        data() {\r\n            return {\r\n                v$: useValidate() as any,\r\n                dataViewDescriptor,\r\n                dataset: {} as any\r\n            }\r\n        },\r\n        created() {\r\n            this.dataset = this.selectedDataset\r\n        },\r\n        watch: {\r\n            selectedDataset() {\r\n                this.dataset = this.selectedDataset\r\n            }\r\n        },\r\n        validations() {\r\n            const wizardFieldsRequired = (value) => {\r\n                return value\r\n            }\r\n            const persistFieldsRequired = (value) => {\r\n                return !this.dataset.isPersisted || value\r\n            }\r\n            const customValidators: ICustomValidatorMap = {\r\n                'wizard-field-required': wizardFieldsRequired,\r\n                'persist-field-required': persistFieldsRequired\r\n            }\r\n            const validationObject = {\r\n                dataset: createValidations('dataset', dataViewDescriptor.validations.dataset, customValidators)\r\n            }\r\n            return validationObject\r\n        }\r\n    })\r\n</script>\r\n","<template>\r\n    <Dialog class=\"kn-dialog--toolbar--primary importExportDialog\" :style=\"dataViewDescriptor.style.dialog\" v-bind:visible=\"visible\" footer=\"footer\" :header=\"$t('workspace.myData.wizardTitle')\" :closable=\"false\" modal>\r\n        <span v-if=\"wizardStep === 1\">\r\n            <StepOne :selectedDataset=\"dataset\" @fileUploaded=\"onFileUpload\" />\r\n        </span>\r\n        <span v-if=\"wizardStep === 2\">\r\n            <StepTwo :selectedDataset=\"dataset\" />\r\n        </span>\r\n        <span v-if=\"wizardStep === 3\">\r\n            <StepThree :gridForPreview=\"gridForPreview\" />\r\n        </span>\r\n        <span v-if=\"wizardStep === 4\">\r\n            <StepFour :selectedDataset=\"dataset\" />\r\n        </span>\r\n\r\n        <template #footer>\r\n            <div>\r\n                <Button class=\"kn-button kn-button--secondary\" :label=\"$t('common.cancel')\" @click=\"$emit('closeDialog')\" />\r\n                <Button class=\"kn-button kn-button--secondary\" v-if=\"wizardStep > 1\" :label=\"$t('common.back')\" @click=\"wizardStep--\" />\r\n                <Button class=\"kn-button kn-button--primary\" :label=\"$t('common.next')\" :disabled=\"!fileUploaded\" @click=\"documentFields\" />\r\n            </div>\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { AxiosResponse } from 'axios'\r\nimport { defineComponent } from 'vue'\r\nimport dataViewDescriptor from './WorkspaceDatasetWizardDescriptor.json'\r\nimport StepOne from './WorkspaceDatasetWizardStepOne.vue'\r\nimport StepTwo from './WorkspaceDatasetWizardStepTwo.vue'\r\nimport StepThree from './WorkspaceDatasetWizardStepThree.vue'\r\nimport StepFour from './WorkspaceDatasetWizardStepFour.vue'\r\nimport Dialog from 'primevue/dialog'\r\nimport mainStore from '../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    components: { Dialog, StepOne, StepTwo, StepThree, StepFour },\r\n    emits: ['touched', 'fileUploaded', 'closeDialog', 'closeDialogAndReload'],\r\n    props: { selectedDataset: { type: Object as any }, visible: { type: Boolean as any } },\r\n    computed: {\r\n        documentFields(): any {\r\n            switch (this.wizardStep) {\r\n                case 1:\r\n                    return this.submitStepOne\r\n                case 2:\r\n                    return this.submitStepTwo\r\n                case 3:\r\n                    return this.submitStepThree\r\n                case 4:\r\n                    return this.submitStepFour\r\n                default:\r\n                    return this.$emit('closeDialog')\r\n            }\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            dataViewDescriptor,\r\n            dataset: {} as any,\r\n            gridForPreview: {} as any,\r\n            datasetColumns: [] as any,\r\n            editingDatasetFile: false,\r\n            newFileUploaded: false,\r\n            fileUploaded: false,\r\n            wizardStep: 1\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n        this.dataset.id ? this.getSelectedDataset() : this.initializeDatasetWizard(undefined, false)\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n            this.dataset.id ? this.getSelectedDataset() : this.initializeDatasetWizard(undefined, false)\r\n        }\r\n    },\r\n    methods: {\r\n        onFileUpload() {\r\n            this.fileUploaded = true\r\n            this.newFileUploaded = true\r\n        },\r\n        async getSelectedDataset() {\r\n            this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets/dataset/id/${this.selectedDataset.id}`)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.dataset = response.data[0] ? { ...response.data[0] } : {}\r\n                    this.initializeDatasetWizard(this.dataset, true)\r\n                })\r\n                .catch()\r\n        },\r\n        initializeDatasetWizard(dataset, isEdited) {\r\n            this.editingDatasetFile = isEdited\r\n            isEdited ? (this.fileUploaded = true) : (this.fileUploaded = false)\r\n            this.dataset.csvEncoding = dataset != undefined ? dataset.csvEncoding : 'UTF-8'\r\n            this.dataset.csvDelimiter = dataset != undefined ? dataset.csvDelimiter : ','\r\n            this.dataset.csvQuote = dataset != undefined ? dataset.csvQuote : '\"'\r\n            this.dataset.skipRows = dataset != undefined ? dataset.skipRows : null\r\n            this.dataset.dateFormat = dataset != undefined && dataset.dateFormat != undefined ? dataset.dateFormat : 'dd/MM/yyyy'\r\n            this.dataset.timestampFormat = dataset != undefined && dataset.timestampFormat != undefined ? dataset.timestampFormat : 'dd/MM/yyyy HH:mm:ss'\r\n            if (dataset != undefined) {\r\n                if (dataset.limitRows != null && dataset.limitRows != '') {\r\n                    this.dataset.limitRows = dataset.limitRows\r\n                } else {\r\n                    this.dataset.limitRows = dataset.limitRows\r\n                }\r\n            } else {\r\n                this.dataset.limitRows = null\r\n            }\r\n            this.dataset.xslSheetNumber = dataset != undefined ? dataset.xslSheetNumber : 1\r\n            this.dataset.catTypeVn = dataset != undefined ? dataset.catTypeVn : null\r\n            this.dataset.catTypeId = dataset != undefined ? dataset.catTypeId : null\r\n            this.dataset.id = dataset != undefined ? dataset.id : ''\r\n            this.dataset.label = dataset != undefined ? dataset.label : ''\r\n            this.dataset.name = dataset != undefined ? dataset.name : ''\r\n            this.dataset.description = dataset != undefined ? dataset.description : ''\r\n            this.dataset.meta = dataset != undefined ? dataset.meta : []\r\n            this.dataset.persist = dataset != undefined && dataset.isPersisted ? dataset.isPersisted : false\r\n            this.dataset.tableName = dataset != undefined && dataset.persistTableName ? dataset.persistTableName : ''\r\n        },\r\n        submitStepOne() {\r\n            let params = {} as any\r\n            params.SBI_EXECUTION_ID = -1\r\n            params.isTech = false\r\n            params.showOnlyOwner = true\r\n            params.showDerivedDataset = false\r\n            this.dataset.type = 'File'\r\n            this.dataset.exportToHdfs = false\r\n            this.dataset.limitPreview = true\r\n            this.dataset.tablePrefix = ''\r\n            this.dataset.persist ? '' : (this.dataset.persist = false)\r\n            this.dataset.tableName ? '' : (this.dataset.tableName = '')\r\n            this.dataset.skipRows == null ? (this.dataset.skipRows = '') : ''\r\n            this.dataset.limitRows == null ? (this.dataset.limitRows = '') : ''\r\n            this.dataset.xslSheetNumber == null ? (this.dataset.xslSheetNumber = '') : ''\r\n            this.dataset.meta = JSON.stringify(this.dataset.meta)\r\n            this.newFileUploaded ? (this.dataset.fileUploaded = true) : ''\r\n            console.log(this.dataset)\r\n            this.$http({\r\n                method: 'POST',\r\n                url: import.meta.env.VITE_RESTFUL_SERVICES_PATH + 'selfservicedataset/testDataSet',\r\n                data: this.dataset,\r\n                params: params,\r\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'X-Disable-Errors': 'true' },\r\n                transformRequest: function (obj) {\r\n                    var str = [] as any\r\n                    for (var p in obj) str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]))\r\n                    return str.join('&')\r\n                }\r\n            })\r\n                .then((response: AxiosResponse<any>) => {\r\n                    if (!response.data.errors) {\r\n                        this.gridForPreview = response.data.gridForPreview\r\n                        this.dataset.meta = response.data.meta\r\n                        this.datasetColumns = response.data.datasetColumns\r\n                        this.wizardStep++\r\n                    } else {\r\n                        this.dataset.meta = []\r\n                    }\r\n                })\r\n                .catch((error: any) => {\r\n                    this.dataset.meta = []\r\n                    error.message == 'error.mesage.description.data.set.parsing.error' ? this.store.setError({ title: this.$t('common.toast.errorTitle'), msg: this.$t('workspace.myData.parseError') }) : this.store.setError({ title: this.$t('common.toast.errorTitle'), msg: this.$t(error.message) })\r\n                })\r\n        },\r\n        submitStepTwo() {\r\n            this.dataset.isPublicDS = false\r\n            this.dataset.datasetMetadata = {}\r\n            this.dataset.datasetMetadata.version = 1\r\n            this.dataset.datasetMetadata.dataset = []\r\n            this.dataset.datasetMetadata.columns = []\r\n            this.dataset.datasetMetadata.dataset = [...this.dataset.meta.dataset]\r\n            this.dataset.datasetMetadata.columns = [...this.dataset.meta.columns]\r\n            let c = this.dataset.datasetMetadata.columns\r\n            for (var i = 0; i < c.length; i++) {\r\n                delete c[i].columnView\r\n                delete c[i].pvalueView\r\n                delete c[i].pnameView\r\n                delete c[i].dsMetaValue\r\n            }\r\n            let d = this.dataset.datasetMetadata.dataset\r\n            for (i = 0; i < d.length; i++) {\r\n                delete d[i].pvalueView\r\n                delete d[i].pnameView\r\n            }\r\n            this.dataset.datasetMetadata = JSON.stringify(this.dataset.datasetMetadata)\r\n            this.dataset.limitPreview = true\r\n            this.dataset.page = 1\r\n            this.dataset.start = ''\r\n            this.dataset.page = 10\r\n\r\n            if (this.editingDatasetFile == true && this.dataset.fileUploaded == true) {\r\n                this.dataset.label = ''\r\n            }\r\n            var params = {} as any\r\n            params.SBI_EXECUTION_ID = -1\r\n            this.wizardStep++\r\n        },\r\n        submitStepThree() {\r\n            this.wizardStep++\r\n        },\r\n        async submitStepFour() {\r\n            let dsToSend = { ...this.dataset }\r\n            dsToSend.isPublicDS = false\r\n            dsToSend.meta = this.dataset.datasetMetadata\r\n            dsToSend.fileUploaded = this.fileUploaded\r\n            delete dsToSend['datasetMetadata']\r\n            var d = new Date()\r\n            var label = 'ds__' + (d.getTime() % 10000000)\r\n            if (dsToSend.label === '') {\r\n                dsToSend.label = label\r\n            }\r\n            var params = {} as any\r\n            params.showDerivedDataset = false\r\n            params.SBI_EXECUTION_ID = -1\r\n            params.isTech = false\r\n            params.showOnlyOwner = true\r\n\r\n            await this.$http({\r\n                method: 'POST',\r\n                url: import.meta.env.VITE_RESTFUL_SERVICES_PATH + 'selfservicedataset/save',\r\n                data: dsToSend,\r\n                params: params,\r\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'X-Disable-Errors': 'true' },\r\n\r\n                transformRequest: function (obj) {\r\n                    var str = [] as any\r\n                    for (var p in obj) str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]))\r\n                    return str.join('&')\r\n                }\r\n            })\r\n                .then((response: AxiosResponse<any>) => {\r\n                    if (dsToSend.exportToHdfs) {\r\n                        this.$http.post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/hdfs/${response.data.id}`, { headers: { 'X-Disable-Errors': 'true' } }).catch((responseHDFS: any) => {\r\n                            this.store.setError({ title: this.$t('common.toast.errorTitle'), msg: responseHDFS.data.errors[0].message })\r\n                        })\r\n                    }\r\n                    this.$emit('closeDialogAndReload')\r\n                })\r\n                .catch((error: any) => {\r\n                    this.store.setError({ title: this.$t('common.toast.errorTitle'), msg: this.$t('common.error.uploading') })\r\n                })\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Dialog class=\"p-fluid kn-dialog--toolbar--primary\" :contentStyle=\"workspaceDataShareDialogDescriptor.dialog.style\" :visible=\"visible\" :modal=\"true\" :closable=\"false\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--primary p-p-0 p-m-0 p-col-12\">\r\n                <template #start>\r\n                    {{ $t('workspace.myData.shareDataset') }}\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n\r\n        <Message class=\"p-m-4\" severity=\"info\" :closable=\"false\" :style=\"workspaceDataShareDialogDescriptor.styles.message\">\r\n            {{ $t('workspace.myData.shareDatasetHint') }}\r\n        </Message>\r\n\r\n        <div class=\"p-m-4\">\r\n            <span>\r\n                <Dropdown class=\"kn-material-input\" v-model=\"dataset.catTypeId\" :options=\"datasetCategories\" optionLabel=\"VALUE_NM\" optionValue=\"VALUE_ID\" />\r\n            </span>\r\n        </div>\r\n\r\n        <template #footer>\r\n            <div class=\"p-d-flex p-flex-row p-jc-end\">\r\n                <Button class=\"kn-button kn-button--primary\" @click=\"shareDataset(false)\">{{ $t('workspace.myData.unshareDataset') }}</Button>\r\n                <Button class=\"kn-button kn-button--primary\" @click=\"closeDialog\"> {{ $t('common.cancel') }}</Button>\r\n                <Button class=\"kn-button kn-button--primary\" @click=\"shareDataset(true)\" :disabled=\"!dataset.catTypeId\">{{ $t('common.save') }}</Button>\r\n            </div>\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { defineComponent } from 'vue'\r\n    import Dialog from 'primevue/dialog'\r\n    import Dropdown from 'primevue/dropdown'\r\n    import Message from 'primevue/message'\r\n    import workspaceDataShareDialogDescriptor from './WorkspaceDataShareDialogDescriptor.json'\r\n\r\n    export default defineComponent({\r\n        name: 'workspace-repository-move-dialog',\r\n        components: { Dialog, Dropdown, Message },\r\n        props: { visible: { type: Boolean }, propDataset: { type: Object }, datasetCategories: { type: Array } },\r\n        emits: ['close', 'share'],\r\n        data() {\r\n            return {\r\n                workspaceDataShareDialogDescriptor,\r\n                dataset: {} as any\r\n            }\r\n        },\r\n        watch: {\r\n            propDataset() {\r\n                this.loadDataset()\r\n            }\r\n        },\r\n        created() {\r\n            this.loadDataset()\r\n        },\r\n        methods: {\r\n            loadDataset() {\r\n                if (this.propDataset) {\r\n                    this.dataset = { ...this.propDataset }\r\n                }\r\n            },\r\n            closeDialog() {\r\n                this.loadDataset()\r\n                this.$emit('close')\r\n            },\r\n            shareDataset(share: boolean) {\r\n                if (!share) {\r\n                    this.dataset.catTypeId = null\r\n                }\r\n                this.$emit('share', this.dataset)\r\n            }\r\n        }\r\n    })\r\n</script>\r\n","<template>\r\n    <Toolbar class=\"kn-toolbar kn-toolbar--secondary\" :style=\"mainDescriptor.style.maxWidth\">\r\n        <template #start>\r\n            <Button id=\"showSidenavIcon\" icon=\"fas fa-bars\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"$emit('showMenu')\" />\r\n            {{ $t('workspace.myData.title') }}\r\n        </template>\r\n        <template #end>\r\n            <Button v-if=\"toggleCardDisplay\" icon=\"fas fa-list\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"toggleDisplayView\" />\r\n            <Button v-if=\"!toggleCardDisplay\" icon=\"fas fa-th-large\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"toggleDisplayView\" />\r\n            <KnFabButton v-if=\"tableMode === 'My Datasets'\" icon=\"fas fa-plus\" data-test=\"new-folder-button\" @click=\"showCreationMenu\" />\r\n        </template>\r\n    </Toolbar>\r\n    <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar p-ml-2\" v-if=\"loading\" data-test=\"progress-bar\" />\r\n\r\n    <div class=\"p-d-flex p-flex-row p-ai-center p-flex-wrap\">\r\n        <InputText class=\"kn-material-input p-m-3 model-search\" :style=\"mainDescriptor.style.filterInput\" v-model=\"searchWord\" type=\"text\" :placeholder=\"$t('common.search')\" @input=\"searchItems\" data-test=\"search-input\" />\r\n        <span class=\"p-float-label p-mr-auto model-search\">\r\n            <MultiSelect class=\"kn-material-input kn-width-full\" :style=\"mainDescriptor.style.multiselect\" v-model=\"selectedCategories\" :options=\"datasetCategories\" optionLabel=\"VALUE_CD\" @change=\"searchItems\" :filter=\"true\" />\r\n            <label class=\"kn-material-input-label\"> {{ $t('common.type') }} </label>\r\n        </span>\r\n        <SelectButton class=\"p-mx-2\" v-model=\"tableMode\" :options=\"selectButtonOptions\" @click=\"getDatasetsByFilter\" data-test=\"dataset-select\" />\r\n    </div>\r\n\r\n    <div class=\"kn-overflow\">\r\n        <DataTable v-if=\"!toggleCardDisplay\" class=\"p-datatable-sm kn-table p-mx-2\" :value=\"filteredDatasets\" :loading=\"loading\" dataKey=\"objId\" responsiveLayout=\"stack\" breakpoint=\"600px\" data-test=\"datasets-table\">\r\n            <template #empty>\r\n                {{ $t('common.info.noDataFound') }}\r\n            </template>\r\n            <Column field=\"label\" :header=\"$t('importExport.catalogFunction.column.label')\" class=\"kn-truncated\" :sortable=\"true\" />\r\n            <Column field=\"name\" :header=\"$t('importExport.gallery.column.name')\" class=\"kn-truncated\" :sortable=\"true\" />\r\n            <Column field=\"dsTypeCd\" :header=\"$t('importExport.gallery.column.type')\" :sortable=\"true\" />\r\n            <Column field=\"tags\" :header=\"$t('importExport.gallery.column.tags')\" :sortable=\"true\">\r\n                <template #body=\"slotProps\">\r\n                    <span v-if=\"slotProps.data.tags.length > 0\">\r\n                        <Chip v-for=\"(tag, index) of slotProps.data.tags\" :key=\"index\"> {{ tag.name }} </Chip>\r\n                    </span>\r\n                </template>\r\n            </Column>\r\n            <Column :header=\"$t('workspace.myData.parametrical')\">\r\n                <template #body=\"slotProps\">\r\n                    <i v-if=\"slotProps.data.pars.length > 0 || slotProps.data.drivers.length > 0\" class=\"fas fa-check p-button-link\" />\r\n                </template>\r\n            </Column>\r\n            <Column :style=\"mainDescriptor.style.iconColumn\">\r\n                <template #header> &ensp; </template>\r\n                <template #body=\"slotProps\">\r\n                    <Button icon=\"far fa-circle-check\" v-if=\"isAvroLoaded(slotProps.data.id)\" class=\"p-button-link\" v-tooltip.left=\"$t('workspace.advancedData.avroReady')\" />\r\n                    <Button icon=\"fa-solid fa-spinner\" v-if=\"isAvroLoading(slotProps.data.id)\" class=\"p-button-link\" v-tooltip.left=\"$t('workspace.advancedData.avroLoading')\" />\r\n                    <Button icon=\"fas fa-ellipsis-v\" class=\"p-button-link\" @click.stop=\"showMenu($event, slotProps.data)\" />\r\n                    <Button icon=\"fas fa-info-circle\" class=\"p-button-link\" v-tooltip.left=\"$t('workspace.myModels.showInfo')\" @click.stop=\"showSidebar(slotProps.data)\" :data-test=\"'info-button-' + slotProps.data.name\" />\r\n                    <Button icon=\"fas fa-eye\" class=\"p-button-link\" @click.stop=\"previewDataset(slotProps.data)\" />\r\n                </template>\r\n            </Column>\r\n        </DataTable>\r\n        <div v-if=\"toggleCardDisplay\" class=\"p-grid p-m-2\" data-test=\"card-container\">\r\n            <Message v-if=\"filteredDatasets.length === 0\" class=\"kn-flex p-m-2\" severity=\"info\" :closable=\"false\" :style=\"mainDescriptor.style.message\">\r\n                {{ $t('common.info.noDataFound') }}\r\n            </Message>\r\n            <template v-else>\r\n                <WorkspaceCard\r\n                    v-for=\"(dataset, index) of filteredDatasets\"\r\n                    :key=\"index\"\r\n                    :viewType=\"'dataset'\"\r\n                    :document=\"dataset\"\r\n                    :isAvroReady=\"isAvroReady(dataset.id)\"\r\n                    @previewDataset=\"previewDataset\"\r\n                    @editDataset=\"editDataset\"\r\n                    @openDatasetInQBE=\"openDatasetInQBE($event)\"\r\n                    @exportToXlsx=\"prepareDatasetForExport($event, 'xls')\"\r\n                    @exportToCsv=\"prepareDatasetForExport($event, 'csv')\"\r\n                    @downloadDatasetFile=\"downloadDatasetFile\"\r\n                    @shareDataset=\"shareDataset\"\r\n                    @cloneDataset=\"cloneDataset\"\r\n                    @deleteDataset=\"deleteDatasetConfirm\"\r\n                    @openDataPreparation=\"openDataPreparation\"\r\n                    @openSidebar=\"showSidebar\"\r\n                    @monitoring=\"showMonitoring = !showMonitoring\"\r\n                />\r\n            </template>\r\n        </div>\r\n    </div>\r\n\r\n    <DetailSidebar\r\n        :visible=\"showDetailSidebar\"\r\n        :viewType=\"'dataset'\"\r\n        :document=\"selectedDataset\"\r\n        :isAvroReady=\"isAvroReady(selectedDataset.id)\"\r\n        :datasetCategories=\"datasetCategories\"\r\n        @previewDataset=\"previewDataset\"\r\n        @editDataset=\"editDataset\"\r\n        @openDatasetInQBE=\"openDatasetInQBE($event)\"\r\n        @exportToXlsx=\"prepareDatasetForExport($event, 'xls')\"\r\n        @exportToCsv=\"prepareDatasetForExport($event, 'csv')\"\r\n        @downloadDatasetFile=\"downloadDatasetFile\"\r\n        @shareDataset=\"shareDataset\"\r\n        @cloneDataset=\"cloneDataset\"\r\n        @deleteDataset=\"deleteDatasetConfirm\"\r\n        @openDataPreparation=\"openDataPreparation\"\r\n        @close=\"showDetailSidebar = false\"\r\n        data-test=\"detail-sidebar\"\r\n        @monitoring=\"showMonitoring = !showMonitoring\"\r\n    />\r\n\r\n    <div v-if=\"parameterSidebarVisible\" id=\"document-execution-backdrop\" @click=\"parameterSidebarVisible = false\"></div>\r\n    <KnParameterSidebar\r\n        v-if=\"parameterSidebarVisible\"\r\n        style=\"height: 100%; top: 0 !important\"\r\n        class=\"workspace-parameter-sidebar kn-overflow-y\"\r\n        :filtersData=\"filtersData\"\r\n        :propDocument=\"selectedDataset\"\r\n        :propMode=\"'workspaceView'\"\r\n        :propQBEParameters=\"selectedDataset.pars\"\r\n        :userRole=\"userRole\"\r\n        :dataset=\"selectedDataset\"\r\n        @execute=\"onExecute\"\r\n        @roleChanged=\"onRoleChange\"\r\n    />\r\n\r\n    <DatasetWizard v-if=\"showDatasetDialog\" :selectedDataset=\"selectedDataset\" :visible=\"showDatasetDialog\" @closeDialog=\"showDatasetDialog = false\" @closeDialogAndReload=\"closeWizardAndRealod\" />\r\n    <EditPreparedDatasetDialog :dataset=\"selectedDataset\" :visible=\"showEditPreparedDatasetDialog\" @save=\"updatePreparedDataset\" @cancel=\"showEditPreparedDatasetDialog = false\" />\r\n    <Menu id=\"optionsMenu\" ref=\"optionsMenu\" :model=\"menuButtons\" />\r\n    <Menu id=\"creationMenu\" ref=\"creationMenu\" :model=\"creationMenuButtons\" />\r\n\r\n    <WorkspaceDataCloneDialog :visible=\"cloneDialogVisible\" :propDataset=\"selectedDataset\" @close=\"cloneDialogVisible = false\" @clone=\"handleDatasetClone\"></WorkspaceDataCloneDialog>\r\n    <WorkspaceDataShareDialog :visible=\"shareDialogVisible\" :propDataset=\"selectedDataset\" :datasetCategories=\"datasetCategories\" @close=\"shareDialogVisible = false\" @share=\"handleDatasetShare\"></WorkspaceDataShareDialog>\r\n    <WorkspaceDataPreviewDialog v-if=\"previewDialogVisible\" :visible=\"previewDialogVisible\" :propDataset=\"selectedDataset\" @close=\"previewDialogVisible = false\" previewType=\"workspace\"></WorkspaceDataPreviewDialog>\r\n    <WorkspaceWarningDialog :visible=\"warningDialogVisbile\" :title=\"$t('workspace.myData.title')\" :warningMessage=\"warningMessage\" @close=\"closeWarningDialog\"></WorkspaceWarningDialog>\r\n\r\n    <QBE v-if=\"qbeVisible\" :visible=\"qbeVisible\" :dataset=\"selectedQbeDataset\" @close=\"closeQbe\" />\r\n    <DataPreparationMonitoringDialog v-model:visibility=\"showMonitoring\" @close=\"showMonitoring = false\" @save=\"updateDatasetWithNewCronExpression\" :dataset=\"selectedDataset\"></DataPreparationMonitoringDialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { filterDefault } from '@/helpers/commons/filterHelper'\r\nimport KnFabButton from '@/components/UI/KnFabButton.vue'\r\nimport DatasetWizard from './datasetWizard/WorkspaceDatasetWizardContainer.vue'\r\nimport EditPreparedDatasetDialog from './dialogs/EditPreparedDatasetDialog.vue'\r\nimport mainDescriptor from '@/modules/workspace/WorkspaceDescriptor.json'\r\nimport DetailSidebar from '@/modules/workspace/genericComponents/DetailSidebar.vue'\r\nimport WorkspaceCard from '@/modules/workspace/genericComponents/WorkspaceCard.vue'\r\nimport DataTable from 'primevue/datatable'\r\nimport Column from 'primevue/column'\r\nimport Chip from 'primevue/chip'\r\nimport Menu from 'primevue/contextmenu'\r\nimport Message from 'primevue/message'\r\nimport WorkspaceDataCloneDialog from './dialogs/WorkspaceDataCloneDialog.vue'\r\nimport WorkspaceDataPreviewDialog from './dialogs/WorkspaceDataPreviewDialog.vue'\r\nimport WorkspaceDataShareDialog from './dialogs/WorkspaceDataShareDialog.vue'\r\nimport WorkspaceWarningDialog from '../../genericComponents/WorkspaceWarningDialog.vue'\r\nimport { AxiosResponse } from 'axios'\r\nimport { downloadDirectFromResponseWithCustomName } from '@/helpers/commons/fileHelper'\r\nimport SelectButton from 'primevue/selectbutton'\r\nimport QBE from '@/modules/qbe/QBE.vue'\r\nimport DataPreparationMonitoringDialog from '@/modules/workspace/dataPreparation/DataPreparationMonitoring/DataPreparationMonitoringDialog.vue'\r\nimport MultiSelect from 'primevue/multiselect'\r\nimport moment from 'moment'\r\nimport KnParameterSidebar from '@/components/UI/KnParameterSidebar/KnParameterSidebar.vue'\r\nimport { mapState, mapActions } from 'pinia'\r\n\r\nimport mainStore from '../../../../App.store'\r\nimport workspaceStore from '@/modules/workspace/Workspace.store.js'\r\nimport { Client } from '@stomp/stompjs'\r\n\r\nexport default defineComponent({\r\n    components: {\r\n        QBE,\r\n        MultiSelect,\r\n        DataTable,\r\n        Column,\r\n        Chip,\r\n        DataPreparationMonitoringDialog,\r\n        EditPreparedDatasetDialog,\r\n        DetailSidebar,\r\n        WorkspaceCard,\r\n        Menu,\r\n        KnFabButton,\r\n        DatasetWizard,\r\n        WorkspaceDataCloneDialog,\r\n        WorkspaceWarningDialog,\r\n        WorkspaceDataShareDialog,\r\n        WorkspaceDataPreviewDialog,\r\n        SelectButton,\r\n        Message,\r\n        KnParameterSidebar\r\n    },\r\n    emits: ['toggleDisplayView'],\r\n    props: { toggleCardDisplay: { type: Boolean } },\r\n    computed: {\r\n        ...mapState(mainStore, ['user']),\r\n        ...mapState(workspaceStore, ['dataPreparation', 'isAvroLoaded', 'isAvroLoading', 'isAvroReady']),\r\n        isDatasetOwner(): any {\r\n            return this.user.userId === this.selectedDataset.owner\r\n        },\r\n        showCkanIntegration(): any {\r\n            return this.user.functionalities.indexOf('CkanIntegrationFunctionality') > -1\r\n        },\r\n        showQbeEditButton(): any {\r\n            return this.user.userId === this.selectedDataset.owner && (this.selectedDataset.dsTypeCd == 'Federated' || this.selectedDataset.dsTypeCd == 'Qbe')\r\n        },\r\n        datasetHasDrivers(): any {\r\n            return this.selectedDataset.drivers && this.selectedDataset.length > 0\r\n        },\r\n        datasetHasParams(): any {\r\n            return this.selectedDataset.pars && this.selectedDataset.pars > 0\r\n        },\r\n        datasetIsIterable(): any {\r\n            // in order to export to XLSX, dataset must implement an iterator (BE side)\r\n            let notIterableDataSets = ['Federated']\r\n            if (notIterableDataSets.includes(this.selectedDataset.dsTypeCd)) return false\r\n            else return true\r\n        },\r\n        canLoadData(): any {\r\n            if (this.selectedDataset.actions) {\r\n                for (let i = 0; i < this.selectedDataset.actions.length; i++) {\r\n                    const action = this.selectedDataset.actions[i]\r\n                    if (action.name == 'loaddata') {\r\n                        return true\r\n                    }\r\n                }\r\n            }\r\n            return false\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            mainDescriptor,\r\n            loading: false,\r\n            showDetailSidebar: false,\r\n            showDatasetDialog: false,\r\n            showEditPreparedDatasetDialog: false,\r\n            datasetList: [] as any,\r\n            selectedCategories: [] as any,\r\n            selectedCategoryIds: [] as any,\r\n            filteredDatasets: [] as any,\r\n            datasetCategories: [] as any,\r\n            selectedDataset: {} as any,\r\n            menuButtons: [] as any,\r\n            creationMenuButtons: [] as any,\r\n            filters: {\r\n                global: [filterDefault]\r\n            } as Object,\r\n            cloneDialogVisible: false,\r\n            shareDialogVisible: false,\r\n            previewDialogVisible: false,\r\n            warningDialogVisbile: false,\r\n            warningMessage: '',\r\n            tableMode: 'My Datasets',\r\n            selectButtonOptions: ['My Datasets', 'Enterprise', 'Shared', 'All Datasets'],\r\n            searchWord: '' as string,\r\n            qbeVisible: false,\r\n            client: {} as any,\r\n            selectedQbeDataset: null,\r\n            showMonitoring: false,\r\n            filtersData: {} as any,\r\n            userRole: null,\r\n            parameterSidebarVisible: false,\r\n            exportFormat: ''\r\n        }\r\n    },\r\n    async created() {\r\n        this.userRole = this.user.sessionRole !== this.$t('role.defaultRolePlaceholder') ? this.user.sessionRole : null\r\n        await this.getAllData()\r\n\r\n        if (this.user?.functionalities.includes('DataPreparation')) {\r\n            var url = new URL(window.location.origin)\r\n            url.protocol = url.protocol.replace('http', 'ws')\r\n            let uri = url + 'knowage-data-preparation/ws?' + import.meta.env.VITE_DEFAULT_AUTH_HEADER + '=' + localStorage.getItem('token')\r\n            this.client = new Client({\r\n                brokerURL: uri,\r\n                connectHeaders: {},\r\n                heartbeatIncoming: 4000,\r\n                heartbeatOutgoing: 4000\r\n            })\r\n\r\n            this.client.onConnect = (frame) => {\r\n                // Do something, all subscribes must be done is this callback\r\n                // This is needed because this will be executed after a (re)connect\r\n                console.log(frame)\r\n\r\n                this.client.subscribe('/user/queue/prepare', (message) => {\r\n                    // called when the client receives a STOMP message from the server\r\n                    if (message.body) {\r\n                        let avroJobResponse = JSON.parse(message.body)\r\n                        if (avroJobResponse.statusOk) {\r\n                            this.setInfo({ title: 'Dataset prepared successfully' })\r\n                            this.addToLoadedAvros(avroJobResponse.dsId)\r\n                            this.addToAvroDatasets(avroJobResponse.dsId)\r\n                        } else {\r\n                            this.setError({ title: 'Cannot prepare dataset', msg: avroJobResponse.errorMessage })\r\n                        }\r\n                        this.removeFromLoadingAvros(avroJobResponse.dsId)\r\n                    } else {\r\n                        this.setError({ title: 'Websocket error', msg: 'got empty message' })\r\n                    }\r\n                })\r\n            }\r\n\r\n            this.client.onStompError = function (frame) {\r\n                // Will be invoked in case of error encountered at Broker\r\n                // Bad login/passcode typically will cause an error\r\n                // Complaint brokers will set `message` header with a brief message. Body may contain details.\r\n                // Compliant brokers will terminate the connection after any error\r\n                console.log('Broker reported error: ' + frame.headers['message'])\r\n                console.log('Additional details: ' + frame.body)\r\n            }\r\n            this.client.activate()\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        ...mapActions(mainStore, ['setInfo', 'setError']),\r\n        ...mapActions(workspaceStore, ['addToLoadedAvros', 'addToLoadingAvros', 'addToAvroDatasets', 'removeFromLoadingAvros', 'removeFromLoadedAvros', 'setAvroDatasets', 'setLoadedAvros']),\r\n        async updatePreparedDataset(newDataset) {\r\n            this.showEditPreparedDatasetDialog = false\r\n            this.selectedDataset.name = newDataset.name\r\n            this.selectedDataset.description = newDataset.description\r\n            this.selectedDataset.type = 'PreparedDataset'\r\n\r\n            await this.$http({\r\n                method: 'POST',\r\n                url: import.meta.env.VITE_RESTFUL_SERVICES_PATH + 'selfservicedataset/update',\r\n                data: this.selectedDataset,\r\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'X-Disable-Errors': 'true' },\r\n\r\n                transformRequest: function (obj) {\r\n                    var str = [] as any\r\n                    for (var p in obj) str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]))\r\n                    return str.join('&')\r\n                }\r\n            })\r\n                .then(() => {\r\n                    this.setInfo({ title: 'Updated successfully' })\r\n                })\r\n                .catch(() => {\r\n                    this.setError({ title: 'Save error', msg: 'Cannot update Prepared Dataset' })\r\n                })\r\n            await this.getAllData()\r\n        },\r\n\r\n        getDatasets(filter: string) {\r\n            this.loading = true\r\n            return this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `3.0/datasets/${filter}/`)\r\n        },\r\n        async getAllAvroDataSets() {\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `3.0/datasets/avro`)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.setAvroDatasets(response.data)\r\n                    this.setLoadedAvros(response.data)\r\n                })\r\n                .catch(() => {})\r\n        },\r\n        async getAllData() {\r\n            await this.getDatasetsByFilter()\r\n            await this.getDatasetCategories()\r\n            // this.loading = false\r\n        },\r\n        async getDatasetCategories() {\r\n            this.loading = true\r\n            return this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `domainsforfinaluser/ds-categories`).then((response: AxiosResponse<any>) => {\r\n                this.datasetCategories = [...response.data]\r\n            })\r\n        },\r\n        async loadDataset(datasetLabel: string) {\r\n            this.loading = true\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets/${datasetLabel}`)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.selectedDataset = response.data[0]\r\n                })\r\n                .catch(() => {})\r\n            this.loading = false\r\n        },\r\n        async loadDatasetDrivers(dataset) {\r\n            let hasError = false\r\n            if (dataset.label && dataset.id && dataset.dsTypeCd !== 'Prepared') {\r\n                await this.$http\r\n                    .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `3.0/datasets/${dataset.label}/filters`, { role: this.userRole })\r\n                    .then((response: AxiosResponse<any>) => {\r\n                        this.filtersData = response.data\r\n                        if (this.filtersData.filterStatus) {\r\n                            this.filtersData.filterStatus = this.filtersData.filterStatus.filter((filter: any) => filter.id)\r\n                        }\r\n                    })\r\n                    .catch(() => {\r\n                        hasError = true\r\n                    })\r\n                await this.formatDrivers()\r\n            }\r\n            return hasError\r\n        },\r\n        formatDrivers() {\r\n            this.filtersData?.filterStatus?.forEach((el: any) => {\r\n                el.parameterValue = el.multivalue ? [] : [{ value: '', description: '' }]\r\n                if (el.driverDefaultValue?.length > 0) {\r\n                    let valueIndex = '_col0'\r\n                    let descriptionIndex = 'col1'\r\n                    if (el.metadata?.colsMap) {\r\n                        valueIndex = Object.keys(el.metadata?.colsMap).find((key: string) => el.metadata.colsMap[key] === el.metadata.valueColumn) as any\r\n                        descriptionIndex = Object.keys(el.metadata?.colsMap).find((key: string) => el.metadata.colsMap[key] === el.metadata.descriptionColumn) as any\r\n                    }\r\n                    el.parameterValue = el.driverDefaultValue.map((defaultValue: any) => {\r\n                        return { value: defaultValue.value ?? defaultValue[valueIndex], description: defaultValue.desc ?? defaultValue[descriptionIndex] }\r\n                    })\r\n                    if (el.type === 'DATE' && !el.selectionType && el.valueSelection === 'man_in' && el.showOnPanel === 'true') {\r\n                        el.parameterValue[0].value = moment(el.parameterValue[0].description?.split('#')[0]).toDate() as any\r\n                    }\r\n                }\r\n                if (el.data) {\r\n                    el.data = el.data.map((data: any) => {\r\n                        return this.formatParameterDataOptions(el, data)\r\n                    })\r\n                    if (el.data.length === 1) {\r\n                        el.parameterValue = [...el.data]\r\n                    }\r\n                }\r\n                if ((el.selectionType === 'COMBOBOX' || el.selectionType === 'LIST') && el.multivalue && el.mandatory && el.data.length === 1) {\r\n                    el.showOnPanel = 'false'\r\n                }\r\n                if (!el.parameterValue) {\r\n                    el.parameterValue = [{ value: '', description: '' }]\r\n                }\r\n                if (el.parameterValue[0] && !el.parameterValue[0].description) {\r\n                    el.parameterValue[0].description = el.parameterDescription ? el.parameterDescription[0] : ''\r\n                }\r\n            })\r\n        },\r\n        formatParameterDataOptions(parameter: any, data: any) {\r\n            const valueColumn = parameter.metadata.valueColumn\r\n            const descriptionColumn = parameter.metadata.descriptionColumn\r\n            const valueIndex = Object.keys(parameter.metadata.colsMap).find((key: string) => parameter.metadata.colsMap[key] === valueColumn)\r\n            const descriptionIndex = Object.keys(parameter.metadata.colsMap).find((key: string) => parameter.metadata.colsMap[key] === descriptionColumn)\r\n            return { value: valueIndex ? data[valueIndex] : '', description: descriptionIndex ? data[descriptionIndex] : '' }\r\n        },\r\n        getFormattedDrivers(parameters) {\r\n            let formattedParameters = {} as any\r\n            Object.keys(parameters.filterStatus).forEach((key: any) => {\r\n                const parameter = parameters.filterStatus[key]\r\n                if (!parameter.multivalue) {\r\n                    // formattedParameters.push({ label: parameter.label, value: parameter.parameterValue[0].value, description: parameter.parameterValue[0].description ?? '' })\r\n                    formattedParameters[parameter.urlName] = []\r\n                    formattedParameters[parameter.urlName].push({ value: parameter.parameterValue[0].value, description: parameter.parameterValue[0].description ?? parameter.parameterValue[0].value })\r\n                } else {\r\n                    // formattedParameters.push({ label: parameter.label, value: parameter.parameterValue?.map((el: any) => el.value), description: parameter.parameterDescription ?? '' })\r\n                    formattedParameters[parameter.urlName] = []\r\n                    formattedParameters[parameter.urlName].push({ value: parameter.parameterValue?.map((el: any) => el.value), description: parameter.parameterDescription ?? parameter.parameterValue[0].value })\r\n                }\r\n            })\r\n            return formattedParameters\r\n        },\r\n        async onExecute(parameters, drivers) {\r\n            const postData = { drivers: this.getFormattedDrivers(drivers), parameters: parameters }\r\n            this.exportDataset(postData)\r\n        },\r\n        async prepareDatasetForExport(dataset: any, format: string) {\r\n            this.exportFormat = format\r\n            await this.loadDataset(dataset.label)\r\n            await this.loadDatasetDrivers(this.selectedDataset)\r\n            if (this.selectedDataset.pars.length > 0 || this.filtersData.filterStatus.length > 0) {\r\n                this.parameterSidebarVisible = true\r\n            } else this.exportDataset()\r\n        },\r\n        async exportDataset(postData?) {\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/export/dataset/${this.selectedDataset.id}/${this.exportFormat}`, postData ?? {}, { headers: { Accept: 'application/json, text/plain, */*', 'Content-Type': 'application/json;charset=UTF-8' } })\r\n                .then(() => {\r\n                    this.setInfo({\r\n                        title: this.$t('common.toast.updateTitle'),\r\n                        msg: this.$t('workspace.myData.exportSuccess')\r\n                    })\r\n                })\r\n                .catch(() => {})\r\n                .finally(() => (this.parameterSidebarVisible = false))\r\n        },\r\n        toggleDisplayView() {\r\n            this.$emit('toggleDisplayView')\r\n        },\r\n        showSidebar(clickedDataset) {\r\n            this.selectedDataset = clickedDataset\r\n            this.showDetailSidebar = true\r\n        },\r\n        showCreationMenu(event) {\r\n            this.createCreationMenuButtons()\r\n            // eslint-disable-next-line\r\n            // @ts-ignore\r\n            this.$refs.creationMenu.toggle(event)\r\n        },\r\n        showMenu(event, clickedDocument) {\r\n            this.selectedDataset = clickedDocument\r\n            this.createMenuItems(clickedDocument)\r\n            // eslint-disable-next-line\r\n            // @ts-ignore\r\n            this.$refs.optionsMenu.toggle(event)\r\n        },\r\n        // prettier-ignore\r\n        createMenuItems(clickedDocument: any) {\r\n\r\n        let tmp = [] as any\r\n        tmp.push(\r\n            { key: '0', label: this.$t('workspace.myAnalysis.menuItems.showDsDetails'), icon: 'fas fa-pen', command: this.editDataset, visible: this.isDatasetOwner && (this.selectedDataset.dsTypeCd == 'File' || this.selectedDataset.dsTypeCd == 'Prepared') },\r\n            { key: '1', label: this.$t('workspace.myModels.openInQBE'), icon: 'fas fa-pen', command: () => this.openDatasetInQBE(clickedDocument), visible: this.showQbeEditButton },\r\n            { key: '2', label: this.$t('workspace.myData.xlsxExport'), icon: 'fas fa-file-excel', command: () => this.prepareDatasetForExport(clickedDocument, 'xls'), visible: this.canLoadData && !this.datasetHasDrivers && !this.datasetHasParams && this.selectedDataset.dsTypeCd != 'File' && this.datasetIsIterable },\r\n            { key: '3', label: this.$t('workspace.myData.csvExport'), icon: 'fas fa-file-csv', command: () => this.prepareDatasetForExport(clickedDocument, 'csv'), visible: this.canLoadData && !this.datasetHasDrivers && !this.datasetHasParams && this.selectedDataset.dsTypeCd != 'File' },\r\n            { key: '4', label: this.$t('workspace.myData.fileDownload'), icon: 'fas fa-download', command: () => this.downloadDatasetFile(clickedDocument), visible: this.selectedDataset.dsTypeCd == 'File' },\r\n            { key: '5', label: this.$t('workspace.myData.shareDataset'), icon: 'fas fa-share-alt', command: () => this.shareDataset(), visible: this.canLoadData && this.isDatasetOwner && this.selectedDataset.dsTypeCd != 'Prepared' },\r\n            { key: '6', label: this.$t('workspace.myData.cloneDataset'), icon: 'fas fa-clone', command: () => this.cloneDataset(clickedDocument), visible: this.canLoadData && this.selectedDataset.dsTypeCd == 'Qbe' },\r\n\r\n            { key: '9', label: this.$t('workspace.myData.deleteDataset'), icon: 'fas fa-trash', command: () => this.deleteDatasetConfirm(clickedDocument), visible: this.isDatasetOwner }\r\n        )\r\n\r\n        if (this.user?.functionalities.includes('DataPreparation')) {\r\n            tmp.push({ key: '7', label: this.$t('workspace.myData.openDataPreparation'), icon: 'fas fa-cogs', command: () => this.openDataPreparation(clickedDocument), visible: this.canLoadData && (this.selectedDataset.pars && this.selectedDataset.pars.length == 0) })\r\n        }\r\n\r\n        tmp = tmp.sort((a,b)=>a.key.localeCompare(b.key))\r\n\r\n        this.menuButtons = tmp\r\n\r\n    },\r\n        createCreationMenuButtons() {\r\n            this.creationMenuButtons = []\r\n            this.creationMenuButtons.push({ key: '0', label: this.$t('managers.businessModelManager.uploadFile'), command: this.toggleDatasetDialog, visible: true }, { key: '1', label: this.$t('workspace.myData.openData'), command: this.openDatasetInQBE, visible: this.showCkanIntegration })\r\n        },\r\n        toggleDatasetDialog() {\r\n            this.selectedDataset = {}\r\n            this.showDatasetDialog = true\r\n        },\r\n        async previewDataset(dataset: any) {\r\n            await this.loadDataset(dataset.label)\r\n            if (this.selectedDataset) this.selectedDataset.drivers = dataset.drivers\r\n            this.previewDialogVisible = true\r\n        },\r\n        editDataset() {\r\n            if (this.selectedDataset.dsTypeCd == 'File') this.showDatasetDialog = true\r\n            else if (this.selectedDataset.dsTypeCd == 'Prepared') this.showEditPreparedDatasetDialog = true\r\n        },\r\n\r\n        async generateAvro(dsId: Number) {\r\n            // launch avro export job\r\n            this.$http\r\n                .post(\r\n                    import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/data-preparation/prepare/${dsId}`,\r\n                    {},\r\n                    {\r\n                        headers: {\r\n                            Accept: 'application/json, text/plain, */*',\r\n                            'Content-Type': 'application/json;charset=UTF-8'\r\n                        }\r\n                    }\r\n                )\r\n                .then(() => {\r\n                    this.setInfo({\r\n                        title: this.$t('workspace.myData.isPreparing')\r\n                    })\r\n                    this.addToLoadingAvros(dsId)\r\n                    let idx = this.dataPreparation.loadedAvros.indexOf(dsId)\r\n                    if (idx >= 0) this.removeFromLoadedAvros(idx)\r\n                })\r\n                .catch(() => {})\r\n\r\n            // listen on websocket for avro export job to be finished\r\n            if (this.user?.functionalities.includes('DataPreparation') && Object.keys(this.client).length > 0) this.client.publish({ destination: '/app/prepare', body: dsId })\r\n        },\r\n        openDataPreparation(dataset: any) {\r\n            if (dataset.dsTypeCd == 'Prepared') {\r\n                //edit existing data prep\r\n                this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `3.0/datasets/advanced/${dataset.id}`).then(\r\n                    (response: AxiosResponse<any>) => {\r\n                        let instanceId = response.data.configuration.dataPrepInstanceId\r\n                        this.$http.get(import.meta.env.VITE_DATA_PREPARATION_PATH + `1.0/process/by-instance-id/${instanceId}`).then(\r\n                            (response: AxiosResponse<any>) => {\r\n                                let transformations = response.data.definition\r\n                                let processId = response.data.id\r\n                                let datasetId = response.data.instance.dataSetId\r\n                                if (this.isAvroReady(datasetId))\r\n                                    // check if Avro file has been deleted or not\r\n                                    this.$router.push({ name: 'data-preparation', params: { id: datasetId, transformations: JSON.stringify(transformations), processId: processId, instanceId: instanceId, dataset: JSON.stringify(dataset) } })\r\n                                else {\r\n                                    this.generateAvro(datasetId)\r\n                                }\r\n                            },\r\n                            () => {\r\n                                this.setError({ title: 'Save error', msg: 'Cannot create process' })\r\n                            }\r\n                        )\r\n                    },\r\n                    () => {\r\n                        this.setError({\r\n                            title: 'Cannot open data preparation'\r\n                        })\r\n                    }\r\n                )\r\n            } else if (this.isAvroReady(dataset.id)) {\r\n                // original dataset already exported in Avro\r\n                this.$router.push({ name: 'data-preparation', params: { id: dataset.id } })\r\n            } else {\r\n                this.generateAvro(dataset.id)\r\n            }\r\n        },\r\n        openDatasetInQBE(dataset: any) {\r\n            this.selectedQbeDataset = dataset\r\n            this.qbeVisible = true\r\n        },\r\n        async downloadDatasetFile(dataset: any) {\r\n            await this.loadDataset(dataset.label)\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/datasets/download/file?dsLabel=${this.selectedDataset.label}&type=${this.selectedDataset.fileType.toLowerCase()}`, {\r\n                    headers: {\r\n                        Accept: 'application/json, text/plain, */*'\r\n                    },\r\n                    responseType: 'blob'\r\n                })\r\n                .then((response: AxiosResponse<any>) => {\r\n                    if (response.data.errors) {\r\n                        this.setError({\r\n                            title: this.$t('common.error.downloading'),\r\n                            msg: this.$t('common.error.downloading')\r\n                        })\r\n                    } else {\r\n                        let fileName = response.headers['content-disposition'].split('fileName=')[1].split(';')[0]\r\n                        downloadDirectFromResponseWithCustomName(response, fileName)\r\n                        this.setInfo({ title: this.$t('common.toast.success') })\r\n                    }\r\n                })\r\n        },\r\n        getFileType(type: string) {\r\n            switch (type) {\r\n                case 'csv':\r\n                    return 'text/csv'\r\n                case 'xls':\r\n                    return 'application/vnd.ms-excel'\r\n                case 'xlsx':\r\n                    return 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\r\n            }\r\n        },\r\n        shareDataset() {\r\n            this.shareDialogVisible = true\r\n        },\r\n        async handleDatasetShare(dataset: any) {\r\n            this.loading = true\r\n\r\n            const url = dataset.catTypeId ? `selfservicedataset/share/?catTypeId=${dataset.catTypeId}&id=${dataset.id}` : `selfservicedataset/share/?id=${dataset.id}`\r\n\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url)\r\n                .then(() => {\r\n                    this.setInfo({\r\n                        title: this.$t('common.toast.updateTitle'),\r\n                        msg: this.$t('common.toast.success')\r\n                    })\r\n                    this.showDetailSidebar = false\r\n                    this.shareDialogVisible = false\r\n                    this.getDatasetsByFilter()\r\n                })\r\n                .catch(() => {})\r\n            this.loading = false\r\n        },\r\n        async cloneDataset(dataset: any) {\r\n            await this.loadDataset(dataset.label)\r\n            this.cloneDialogVisible = true\r\n        },\r\n        async handleDatasetClone(dataset: any) {\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets`, dataset, { headers: { 'X-Disable-Errors': 'true' } })\r\n                .then(() => {\r\n                    this.setInfo({\r\n                        title: this.$t('common.toast.deleteTitle'),\r\n                        msg: this.$t('common.toast.success')\r\n                    })\r\n                    this.showDetailSidebar = false\r\n                    this.cloneDialogVisible = false\r\n                    this.getDatasetsByFilter()\r\n                })\r\n                .catch((response: any) => {\r\n                    this.warningDialogVisbile = true\r\n                    this.warningMessage = response\r\n                })\r\n        },\r\n        datasetPreparation(dataset: any) {\r\n            this.$router.push({ name: 'data-preparation', params: { id: dataset.id } })\r\n        },\r\n\r\n        deleteDatasetConfirm(dataset: any) {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.toast.deleteTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: async () => await this.deleteDataset(dataset)\r\n            })\r\n        },\r\n        async deleteDataset(dataset: any) {\r\n            this.loading = true\r\n            await this.$http\r\n                .delete(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets/${dataset.label}`)\r\n                .then(() => {\r\n                    this.setInfo({\r\n                        title: this.$t('common.toast.deleteTitle'),\r\n                        msg: this.$t('common.toast.success')\r\n                    })\r\n                    this.showDetailSidebar = false\r\n                    this.getDatasetsByFilter()\r\n                })\r\n                .catch(() => {})\r\n            this.loading = false\r\n        },\r\n        closeWarningDialog() {\r\n            this.warningMessage = ''\r\n            this.warningDialogVisbile = false\r\n        },\r\n        closeWizardAndRealod() {\r\n            this.showDatasetDialog = false\r\n            this.getDatasetsByFilter()\r\n        },\r\n        async getDatasetsByFilter() {\r\n            await this.getAllAvroDataSets()\r\n            this.searchWord = ''\r\n            this.selectedCategoryIds = [] as any\r\n            this.selectedCategories = [] as any\r\n            switch (this.tableMode) {\r\n                case 'My Datasets':\r\n                    this.datasetList = this.getDatasets('owned')\r\n                        .then((response: AxiosResponse<any>) => {\r\n                            this.datasetList = [...response.data.root]\r\n                            this.filteredDatasets = [...this.datasetList]\r\n                        })\r\n                        .finally(() => (this.loading = false))\r\n                    break\r\n                case 'Enterprise':\r\n                    this.datasetList = this.getDatasets('enterprise')\r\n                        .then((response: AxiosResponse<any>) => {\r\n                            this.datasetList = [...response.data.root]\r\n                            this.filteredDatasets = [...this.datasetList]\r\n                        })\r\n                        .finally(() => (this.loading = false))\r\n                    break\r\n                case 'Shared':\r\n                    this.datasetList = this.getDatasets('shared')\r\n                        .then((response: AxiosResponse<any>) => {\r\n                            this.datasetList = [...response.data.root]\r\n                            this.filteredDatasets = [...this.datasetList]\r\n                        })\r\n                        .finally(() => (this.loading = false))\r\n                    break\r\n                case 'All Datasets':\r\n                    this.datasetList = this.getDatasets('mydata')\r\n                        .then((response: AxiosResponse<any>) => {\r\n                            this.datasetList = [...response.data.root]\r\n                            this.filteredDatasets = [...this.datasetList]\r\n                        })\r\n                        .finally(() => (this.loading = false))\r\n            }\r\n        },\r\n        searchItems(event?) {\r\n            setTimeout(() => {\r\n                if (event.value) {\r\n                    this.selectedCategoryIds = [] as any\r\n                    event.value.forEach((el) => {\r\n                        this.selectedCategoryIds.push(el.VALUE_ID)\r\n                    })\r\n                }\r\n                if (!this.searchWord.trim().length && this.selectedCategoryIds.length == 0) {\r\n                    this.filteredDatasets = [...this.datasetList] as any[]\r\n                } else if (this.selectedCategoryIds.length > 0) {\r\n                    this.filteredDatasets = this.datasetList.filter((el: any) => {\r\n                        return (\r\n                            this.selectedCategoryIds.includes(el.catTypeId) &&\r\n                            (el.label?.toLowerCase().includes(this.searchWord.toLowerCase()) || el.name?.toLowerCase().includes(this.searchWord.toLowerCase()) || el.dsTypeCd?.toLowerCase().includes(this.searchWord.toLowerCase()) || this.datasetTagFound(el))\r\n                        )\r\n                    })\r\n                } else {\r\n                    this.filteredDatasets = this.datasetList.filter((el: any) => {\r\n                        return el.label?.toLowerCase().includes(this.searchWord.toLowerCase()) || el.name?.toLowerCase().includes(this.searchWord.toLowerCase()) || el.dsTypeCd?.toLowerCase().includes(this.searchWord.toLowerCase()) || this.datasetTagFound(el)\r\n                    })\r\n                }\r\n            }, 250)\r\n        },\r\n        closeQbe() {\r\n            this.qbeVisible = false\r\n            this.selectedQbeDataset = null\r\n        },\r\n        datasetTagFound(dataset: any) {\r\n            let tagFound = false\r\n            for (let i = 0; i < dataset.tags.length; i++) {\r\n                const tempTag = dataset.tags[i]\r\n                if (tempTag.name.toLowerCase().includes(this.searchWord.toLowerCase())) {\r\n                    tagFound = true\r\n                    break\r\n                }\r\n            }\r\n            return tagFound\r\n        },\r\n        handleMonitoring(selectedDataset) {\r\n            this.selectedDataset = selectedDataset\r\n            this.showMonitoring = !this.showMonitoring\r\n        },\r\n        async updateDatasetWithNewCronExpression(newCron) {\r\n            this.showMonitoring = false\r\n\r\n            await this.$http.post(import.meta.env.VITE_DATA_PREPARATION_PATH + '1.0/process', newCron).then(\r\n                () => {\r\n                    this.loadDataset(this.selectedDataset.label)\r\n                    this.setInfo({ title: this.$t('common.save'), msg: this.$t('common.toast.updateSuccess') })\r\n                },\r\n                () => {\r\n                    this.setError({ title: this.$t('common.error.saving'), msg: this.$t('managers.workspaceManagement.dataPreparation.errors.updatingSchedulation') })\r\n                }\r\n            )\r\n        }\r\n    },\r\n    unmounted() {\r\n        if (this.user?.functionalities.includes('DataPreparation') && this.client && Object.keys(this.client).length > 0) {\r\n            this.client.deactivate()\r\n            this.client = {}\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.model-search {\r\n    flex: 0.3;\r\n}\r\n#document-execution-backdrop {\r\n    background-color: rgba(33, 33, 33, 1);\r\n    opacity: 0.48;\r\n    z-index: 50;\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    left: 0;\r\n}\r\n</style>\r\n"],"names":["_sfc_main","Card","Dropdown","useValidate","mainStore","_hoisted_3","_hoisted_6","_hoisted_8","_hoisted_10","_openBlock","_createBlock","_withCtx","_createElementVNode","_hoisted_1","_normalizeStyle","_hoisted_2","_createVNode","_toDisplayString","_createElementBlock","_hoisted_4","_hoisted_5","_hoisted_7","_hoisted_9","_createCommentVNode","Column","DataTable","Message","wizardDescriptor","_Fragment","_renderList","InputSwitch","_normalizeClass","Dialog","MultiSelect","Chip","Menu","SelectButton","moment","_withDirectives","_withModifiers"],"mappings":"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"}