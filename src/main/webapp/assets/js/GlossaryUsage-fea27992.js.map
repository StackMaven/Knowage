{"version":3,"file":"GlossaryUsage-fea27992.js","sources":["../../../../modules/managers/glossaryUsage/GlossaryUsageInfoDialogWordsColumnList.vue","../../../../modules/managers/glossaryUsage/GlossaryUsageInfoDialog.vue","../../../../modules/managers/glossaryUsage/card/GlossaryUsageNavigationCard.vue","../../../../modules/managers/glossaryUsage/card/GlossaryUsageLinkTree.vue","../../../../modules/managers/glossaryUsage/card/GlossaryUsageLinkCard.vue","../../../../modules/managers/glossaryUsage/GlossaryUsageDetail.vue","../../../../modules/managers/glossaryUsage/GlossaryUsage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <li>\r\n            <span>{{ $t('managers.glossary.glossaryUsage.associatedWord') }}:</span>\r\n            <ul class=\"p-my-3\">\r\n                <li v-for=\"(column, index) in wordsList\" :key=\"index\" class=\"glossary-info-word\" :class=\"{ 'selected-word': wordIsSelected(column) }\">\r\n                    <span>{{ column.WORD }}</span>\r\n                </li>\r\n            </ul>\r\n        </li>\r\n        <li v-if=\"columnField\">\r\n            <span>{{ $t('managers.glossary.glossaryUsage.column') }}:</span>\r\n            <ul class=\"p-my-3\">\r\n                <li v-for=\"(column, index) in columnList\" :key=\"index\">\r\n                    {{ column[columnField] }}\r\n                    <ul>\r\n                        <li v-for=\"(word, index) in column.word\" :key=\"index\" class=\"glossary-info-word\" :class=\"{ 'selected-word': wordIsSelected(word) }\">\r\n                            <span>{{ word.WORD }}</span>\r\n                        </li>\r\n                    </ul>\r\n                </li>\r\n            </ul>\r\n        </li>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n    name: 'glossary-usage-info-dialog-words-columns-list',\r\n    props: {\r\n        selectedWords: { type: Array, required: true },\r\n        wordsList: { type: Array },\r\n        columnList: { type: Array },\r\n        columnField: { type: String }\r\n    },\r\n    data() {\r\n        return {}\r\n    },\r\n    methods: {\r\n        wordIsSelected(word: any) {\r\n            return this.selectedWords.findIndex((el: any) => word.WORD_ID === el.WORD_ID) > -1\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\nul {\r\n    list-style: none;\r\n}\r\n\r\nspan {\r\n    font-weight: 600;\r\n    text-transform: capitalize;\r\n}\r\n\r\np {\r\n    margin: 1rem 0 1rem 1.5rem;\r\n}\r\n\r\n.glossary-info-word {\r\n    background-color: var(--kn-color-warning);\r\n    padding: 0 8px;\r\n}\r\n.selected-word {\r\n    color: red;\r\n}\r\n</style>\r\n","<template>\r\n    <div>\r\n        <Dialog :style=\"glossaryUsageDescriptor.dialog.style\" :header=\"$t('managers.glossary.glossaryUsage.details')\" :visible=\"visible\" :modal=\"true\" class=\"p-fluid kn-dialog--toolbar--primary\" :closable=\"false\">\r\n            <div v-if=\"contentInfo && contentInfo.CONTENT_ID\">\r\n                <ul>\r\n                    <li>\r\n                        <span>{{ $t('common.name') }}:</span>\r\n                        <p>{{ contentInfo.CONTENT_NM }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.common.code') }}:</span>\r\n                        <p>{{ contentInfo.CONTENT_CD }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('common.description') }}:</span>\r\n                        <p>{{ contentInfo.CONTENT_DS }}</p>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div v-else-if=\"contentInfo.WORD_ID\">\r\n                <ul>\r\n                    <li>\r\n                        <span>{{ $tc('managers.glossary.common.word', 1) }}:</span>\r\n                        <p>{{ contentInfo.WORD }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.common.status') }}:</span>\r\n                        <p v-if=\"contentInfo.STATE_NM\">{{ $t(glossaryUsageDescriptor.translation[contentInfo.STATE_NM]) }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.common.category') }}:</span>\r\n                        <p v-if=\"contentInfo.CATEGORY_NM\">{{ $t(glossaryUsageDescriptor.translation[contentInfo.CATEGORY_NM]) }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('common.description') }}:</span>\r\n                        <p>{{ contentInfo.DESCR }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.common.formula') }}:</span>\r\n                        <p>{{ contentInfo.FORMULA }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.common.link') }}:</span>\r\n                        <ul>\r\n                            <li v-for=\"(link, index) in contentInfo.LINK\" :key=\"index\">\r\n                                <span>\r\n                                    <p>{{ link.WORD }}</p>\r\n                                    <a v-if=\"index != contentInfo.LINK.length - 1\">-</a>\r\n                                </span>\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.common.attributes') }}:</span>\r\n                        <ul>\r\n                            <li v-for=\"(attribute, index) in contentInfo.SBI_GL_WORD_ATTR\" :key=\"index\">\r\n                                <p>{{ attribute.ATTRIBUTE_NM }}:</p>\r\n                                <p></p>\r\n                                <ul>\r\n                                    <li>{{ attribute.VALUE }}</li>\r\n                                </ul>\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div v-else-if=\"contentInfo.type && contentInfo.type === 'document'\">\r\n                <ul>\r\n                    <li>\r\n                        <span>{{ $t('common.label') }}:</span>\r\n                        <p>{{ contentInfo.data.label }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('common.name') }}:</span>\r\n                        <p>{{ contentInfo.data.name }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.glossaryUsage.hierarchyScope') }}:</span>\r\n                        <p>{{ contentInfo.data.functionalities[0] }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.glossaryUsage.profiledVisibility') }}:</span>\r\n                        <ul class=\"p-mt-3\">\r\n                            <li class=\"inline-list-item\" v-for=\"(link, index) in contentInfo.data.access\" :key=\"index\">{{ link }}</li>\r\n                        </ul>\r\n                    </li>\r\n                    <GlossaryUsageInfoDialogWordsColumnList :selectedWords=\"selectedWords\" :wordsList=\"contentInfo.data.words\"></GlossaryUsageInfoDialogWordsColumnList>\r\n                </ul>\r\n            </div>\r\n            <div v-else-if=\"contentInfo.type && contentInfo.type === 'dataset'\">\r\n                <ul>\r\n                    <li>\r\n                        <span>{{ $t('common.label') }}:</span>\r\n                        <p>{{ contentInfo.data.DataSet.label }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('common.name') }}:</span>\r\n                        <p>{{ contentInfo.data.DataSet.name }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('common.type') }}:</span>\r\n                        <p>{{ contentInfo.data.DataSet.type }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.glossaryUsage.dataSource') }}:</span>\r\n                        <p>{{ contentInfo.data.DataSet.configuration.dataSource }}</p>\r\n                    </li>\r\n                    <GlossaryUsageInfoDialogWordsColumnList :selectedWords=\"selectedWords\" :wordsList=\"contentInfo.data.Word\" :columnList=\"contentInfo.data.SbiGlDataSetWlist\" :columnField=\"'alias'\"></GlossaryUsageInfoDialogWordsColumnList>\r\n                </ul>\r\n            </div>\r\n            <div v-else-if=\"contentInfo.type && contentInfo.type === 'businessClass'\">\r\n                <ul>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.glossaryUsage.metaModel') }}:</span>\r\n                        <p>{{ contentInfo.data.metaBc.sbiMetaModel.name }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.glossaryUsage.businessClass') }}:</span>\r\n                        <p>{{ contentInfo.data.metaBc.name }}</p>\r\n                    </li>\r\n                    <GlossaryUsageInfoDialogWordsColumnList :selectedWords=\"selectedWords\" :wordsList=\"contentInfo.data.words\" :columnList=\"contentInfo.data.sbiGlBnessClsWlist\" :columnField=\"'name'\"></GlossaryUsageInfoDialogWordsColumnList>\r\n                </ul>\r\n            </div>\r\n            <div v-else-if=\"contentInfo.type && contentInfo.type === 'table'\">\r\n                <ul>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.glossaryUsage.metaSource') }}:</span>\r\n                        <p>{{ contentInfo.data.metaSource.name }}</p>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('common.label') }}:</span>\r\n                        <p>{{ contentInfo.data.metaTable.name }}</p>\r\n                    </li>\r\n                    <GlossaryUsageInfoDialogWordsColumnList :selectedWords=\"selectedWords\" :wordsList=\"contentInfo.data.words\" :columnList=\"contentInfo.data.sbiGlTableWlist\" :columnField=\"'name'\"></GlossaryUsageInfoDialogWordsColumnList>\r\n                </ul>\r\n            </div>\r\n            <template #footer>\r\n                <Button class=\"kn-button kn-button--primary\" @click=\"$emit('close')\"> {{ $t('common.close') }}</Button>\r\n            </template>\r\n        </Dialog>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport Dialog from 'primevue/dialog'\r\nimport glossaryUsageDescriptor from './GlossaryUsageDescriptor.json'\r\nimport GlossaryUsageInfoDialogWordsColumnList from './GlossaryUsageInfoDialogWordsColumnList.vue'\r\n\r\nexport default defineComponent({\r\n    name: 'glossary-usage-info-dialog',\r\n    components: { Dialog, GlossaryUsageInfoDialogWordsColumnList },\r\n    emits: ['close'],\r\n    props: {\r\n        visible: { type: Boolean },\r\n        contentInfo: { type: Object },\r\n        selectedWords: { type: Array }\r\n    },\r\n    data() {\r\n        return {\r\n            glossaryUsageDescriptor\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\nul {\r\n    list-style: none;\r\n}\r\n\r\nspan {\r\n    font-weight: 600;\r\n    text-transform: capitalize;\r\n}\r\n\r\np {\r\n    margin: 1rem 0 1rem 1.5rem;\r\n}\r\n\r\n.inline-list-item {\r\n    display: inline-block;\r\n    margin-right: 1rem;\r\n}\r\n\r\n.selected-word {\r\n    color: red;\r\n}\r\n</style>\r\n","<template>\r\n    <Card>\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    {{ title }}\r\n                </template>\r\n                <template #end>\r\n                    <Button v-if=\"canSeeLinkTable\" class=\"kn-button p-button-text\" @click=\"$emit('linkClicked', type)\">{{ $t('managers.glossary.glossaryUsage.link') }}</Button>\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n        <template #content>\r\n            <DataTable\r\n                :value=\"items\"\r\n                class=\"p-datatable-sm kn-table\"\r\n                dataKey=\"id\"\r\n                v-model:selection=\"selectedItems\"\r\n                selectionMode=\"multiple\"\r\n                :metaKeySelection=\"false\"\r\n                v-model:filters=\"filters\"\r\n                :globalFilterFields=\"glossaryUsageNavigationCardDescriptor.globalFilterFields\"\r\n                :paginator=\"items.length > 5\"\r\n                :rows=\"5\"\r\n                responsiveLayout=\"stack\"\r\n                breakpoint=\"960px\"\r\n                @rowSelect=\"onItemsSelected\"\r\n                @rowUnselect=\"onItemsSelected\"\r\n            >\r\n                <template #header>\r\n                    <div class=\"table-header p-d-flex p-ai-center\">\r\n                        <span id=\"search-container\" class=\"p-input-icon-left p-mr-3\">\r\n                            <i class=\"pi pi-search\" />\r\n                            <InputText class=\"kn-material-input\" v-model=\"filters['global'].value\" type=\"text\" :placeholder=\"$t('common.search')\" data-test=\"search-input\" />\r\n                        </span>\r\n                    </div>\r\n                </template>\r\n                <template #empty\r\n                    ><div id=\"no-words-present-info\">\r\n                        <p>{{ $t('managers.glossary.glossaryUsage.noWordsPresent', { type: title }) }}</p>\r\n                    </div></template\r\n                >\r\n                <Column class=\"kn-truncated\" field=\"label\" key=\"label\"></Column>\r\n                <Column class=\"p-text-right\">\r\n                    <template #body=\"slotProps\">\r\n                        <Button icon=\"pi pi-info-circle\" class=\"p-button-link\" @click.stop=\"$emit('infoClicked', slotProps.data)\" :data-test=\"'info-button-' + slotProps.data.id\" />\r\n                    </template>\r\n                </Column>\r\n            </DataTable>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { filterDefault } from '@/helpers/commons/filterHelper'\r\nimport Card from 'primevue/card'\r\nimport Column from 'primevue/column'\r\nimport DataTable from 'primevue/datatable'\r\nimport glossaryUsageNavigationCardDescriptor from './GlossaryUsageNavigationCardDescriptor.json'\r\nimport mainStore from '../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'glossary-usage-navigation-card',\r\n    components: { Card, Column, DataTable },\r\n    props: {\r\n        items: { type: Object },\r\n        type: { type: String },\r\n        glossaryChanged: { type: Boolean }\r\n    },\r\n    emits: ['infoClicked', 'linkClicked', 'selected'],\r\n    data() {\r\n        return {\r\n            glossaryUsageNavigationCardDescriptor,\r\n            filters: { global: [filterDefault] } as Object,\r\n            selectedItems: [],\r\n            user: {} as any\r\n        }\r\n    },\r\n    watch: {\r\n        glossaryChanged() {\r\n            this.selectedItems = []\r\n        }\r\n    },\r\n    computed: {\r\n        title(): string {\r\n            switch (this.type) {\r\n                case 'document':\r\n                    return this.$t('managers.glossary.glossaryUsage.documents')\r\n                case 'dataset':\r\n                    return this.$t('managers.glossary.glossaryUsage.dataset')\r\n                case 'businessClass':\r\n                    return this.$t('managers.glossary.glossaryUsage.businessClass')\r\n                case 'table':\r\n                    return this.$t('managers.glossary.glossaryUsage.tables')\r\n                default:\r\n                    return ''\r\n            }\r\n        },\r\n        canSeeLinkTable(): boolean {\r\n            let index = -1\r\n            if (this.user.functionalities) {\r\n                index = this.user.functionalities.findIndex((el: string) => el === 'ManageGlossaryTechnical')\r\n            }\r\n            return index !== -1\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.user = (this.store.$state as any).user\r\n    },\r\n    methods: {\r\n        onItemsSelected() {\r\n            this.$emit('selected', this.selectedItems)\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.label {\r\n    text-transform: uppercase;\r\n}\r\n\r\n#no-words-present-info {\r\n    margin: 0 2rem;\r\n    font-size: 0.8rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    border: 1px solid rgba(59, 103, 140, 0.1);\r\n    border-color: #c2c2c2;\r\n    border-radius: 2px;\r\n    background-color: #eaf0f6;\r\n    color: var(--kn-color-primary);\r\n    p {\r\n        margin: 0.3rem;\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <Tree id=\"glossary-link-tree\" :value=\"nodes\" :expandedKeys=\"expandedKeys\">\r\n        <template #default=\"slotProps\">\r\n            <div\r\n                class=\"p-d-flex p-flex-row p-ai-center\"\r\n                :class=\"{ dropzone: dropzoneActive[slotProps.node.key] }\"\r\n                @drop=\"onDragDrop($event, slotProps.node, slotProps.node.key)\"\r\n                @dragover.prevent=\"\"\r\n                @dragenter.prevent=\"setDropzoneClass(true, slotProps.node)\"\r\n                @dragleave.prevent=\"setDropzoneClass(false, slotProps.node)\"\r\n            >\r\n                <div class=\"p-d-flex p-flex-column\">\r\n                    <span>{{ slotProps.node.label }}</span>\r\n                </div>\r\n                <div class=\"p-ml-2\">\r\n                    <Button v-if=\"slotProps.node.leaf\" icon=\"far fa-trash-alt\" v-tooltip.top=\"$t('common.delete')\" class=\"p-button-link p-button-sm p-p-0\" @click.stop=\"deleteWordConfirm(slotProps.node)\" />\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </Tree>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { iNode } from '../GlossaryUsage'\r\nimport Tree from 'primevue/tree'\r\n\r\nexport default defineComponent({\r\n    name: 'glossary-usage-link-tree',\r\n    components: { Tree },\r\n    props: { treeWords: { type: Array } },\r\n    emits: ['delete', 'wordDropped'],\r\n    data() {\r\n        return {\r\n            nodes: [] as iNode[],\r\n            expandedKeys: {},\r\n            dropzoneActive: [] as boolean[]\r\n        }\r\n    },\r\n    watch: {\r\n        treeWords: {\r\n            handler() {\r\n                this.loadAssociatedWords()\r\n            },\r\n            deep: true\r\n        }\r\n    },\r\n    created() {\r\n        this.loadAssociatedWords()\r\n    },\r\n    methods: {\r\n        loadAssociatedWords() {\r\n            this.nodes = (this.treeWords as any) as any[]\r\n            if (this.nodes) {\r\n                this.expandAll()\r\n            }\r\n        },\r\n        expandAll() {\r\n            for (let node of this.nodes) {\r\n                this.expandNode(node)\r\n            }\r\n            this.expandedKeys = { ...this.expandedKeys }\r\n        },\r\n        expandNode(node: iNode) {\r\n            if (node.children && node.children.length) {\r\n                this.expandedKeys[node.key] = true\r\n                for (let child of node.children) {\r\n                    this.expandNode(child)\r\n                }\r\n            }\r\n        },\r\n        deleteWordConfirm(word: any) {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.toast.deleteTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => this.deleteWord(word)\r\n            })\r\n        },\r\n        deleteWord(word: any) {\r\n            word.organization = word.parent.organization\r\n            word.datasetId = word.parent.id\r\n            this.$emit('delete', word)\r\n        },\r\n        async onDragDrop(event: any, item: any, key: any) {\r\n            const tempItem = item.leaf ? item.parent : item\r\n            this.$emit('wordDropped', { event: event, item: tempItem })\r\n            this.dropzoneActive[key] = false\r\n        },\r\n        setDropzoneClass(value: boolean, node: any) {\r\n            if (!node.leaf) {\r\n                this.dropzoneActive[node.key] = value\r\n            }\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.dropzone {\r\n    background-color: #c2c2c2;\r\n    color: white;\r\n    width: 200px;\r\n    height: 30px;\r\n    border: 1px dashed;\r\n}\r\n</style>\r\n","<template>\r\n    <Card>\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    {{ title }}\r\n                </template>\r\n                <template #end>\r\n                    <Button class=\"kn-button p-button-text\" @click=\"$emit('close')\">{{ $t('common.close') }}</Button>\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n        <template #content>\r\n            <div class=\"p-d-flex p-flex-row\">\r\n                <DataTable\r\n                    :value=\"items\"\r\n                    id=\"link-table\"\r\n                    class=\"p-datatable-sm kn-table p-mr-3\"\r\n                    v-model:selection=\"selectedItem\"\r\n                    selectionMode=\"single\"\r\n                    v-model:expandedRows=\"expandedRows\"\r\n                    :loading=\"loading\"\r\n                    dataKey=\"id\"\r\n                    v-model:filters=\"filters\"\r\n                    :globalFilterFields=\"glossaryUsageLinkCardDescriptor.globalFilterFields\"\r\n                    :paginator=\"true\"\r\n                    :rows=\"20\"\r\n                    responsiveLayout=\"stack\"\r\n                    breakpoint=\"960px\"\r\n                    @rowSelect=\"onRowExpand\"\r\n                    @rowExpand=\"onRowExpand\"\r\n                >\r\n                    <template #header>\r\n                        <div class=\"table-header p-d-flex p-ai-center\">\r\n                            <span id=\"search-container\" class=\"p-input-icon-left p-mr-3\">\r\n                                <i class=\"pi pi-search\" />\r\n                                <InputText class=\"kn-material-input\" v-model=\"filters['global'].value\" type=\"text\" :placeholder=\"$t('common.search')\" />\r\n                            </span>\r\n                        </div>\r\n                    </template>\r\n                    <template #empty>{{ $t('common.info.noDataFound') }}</template>\r\n                    <template #loading> {{ $t('common.info.dataLoading') }}</template>\r\n                    <template #expansion=\"slotProps\">\r\n                        <div :style=\"glossaryUsageLinkCardDescriptor.dropZoneStyle\" @drop=\"onDragDrop($event, slotProps.data)\" @dragover.prevent @dragenter.prevent>\r\n                            <Chip class=\"p-m-2\" v-for=\"word in associatedWords[slotProps.data.id]\" :key=\"word.WORD_ID\" :label=\"word.WORD\">\r\n                                <span>{{ word.WORD }}</span>\r\n                                <i class=\"pi pi-times-circle chip-icon p-ml-3\" @click=\"deleteWordConfirm(word.WORD_ID, slotProps.data)\" />\r\n                            </Chip>\r\n                        </div>\r\n                    </template>\r\n                    <Column :expander=\"true\" :headerStyle=\"glossaryUsageLinkCardDescriptor.expanderHeaderStyle\" />\r\n                    <Column class=\"kn-truncated\" v-for=\"col of glossaryUsageLinkCardDescriptor.columns\" :field=\"col.field\" :header=\"$t(col.header)\" :key=\"col.field\" :sortable=\"true\"></Column>\r\n                    <Column v-if=\"showModelColumn\" class=\"kn-truncated\" field=\"model\" :header=\"'model'\" :sortable=\"true\"></Column>\r\n                </DataTable>\r\n                <div class=\"kn-flex\" v-if=\"selectedItem && selectedItem.id && selectedItem.itemType !== 'document'\">\r\n                    <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                        <template #start>\r\n                            {{ $t('managers.glossary.glossaryUsage.column') }}\r\n                        </template>\r\n                    </Toolbar>\r\n                    <GlossaryUsageLinkTree :treeWords=\"associatedWordsTree[selectedItem.id]\" @delete=\"deleteTreeWord\" @wordDropped=\"onDragDrop($event.event, $event.item)\"></GlossaryUsageLinkTree>\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { filterDefault } from '@/helpers/commons/filterHelper'\r\nimport { iLinkTableItem, iWord } from '../GlossaryUsage'\r\nimport { AxiosResponse } from 'axios'\r\nimport Card from 'primevue/card'\r\nimport Chip from 'primevue/chip'\r\nimport Column from 'primevue/column'\r\nimport DataTable from 'primevue/datatable'\r\nimport glossaryUsageLinkCardDescriptor from './GlossaryUsageLinkCardDescriptor.json'\r\nimport GlossaryUsageLinkTree from './GlossaryUsageLinkTree.vue'\r\nimport mainStore from '../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'glossary-usage-link-card',\r\n    components: { Card, Chip, Column, DataTable, GlossaryUsageLinkTree },\r\n    props: {\r\n        title: { type: String },\r\n        items: { type: Array },\r\n        showModelColumn: { type: Boolean },\r\n        words: { type: Object },\r\n        treeWords: { type: Object }\r\n    },\r\n    emits: ['selected'],\r\n    data() {\r\n        return {\r\n            glossaryUsageLinkCardDescriptor,\r\n            filters: { global: [filterDefault] } as Object,\r\n            selectedItem: null as iLinkTableItem | null,\r\n            associatedWords: {} as any,\r\n            expandedRows: [] as iLinkTableItem[],\r\n            associatedWordsTree: {} as any,\r\n            loading: false\r\n        }\r\n    },\r\n    watch: {\r\n        words: {\r\n            handler() {\r\n                this.loadAssociatedWords()\r\n            },\r\n            deep: true\r\n        },\r\n        treeWords: {\r\n            handler() {\r\n                this.loadAssociatedWordsTree()\r\n            },\r\n            deep: true\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.loadAssociatedWords()\r\n        this.loadAssociatedWordsTree()\r\n    },\r\n    methods: {\r\n        loadAssociatedWords() {\r\n            this.associatedWords = { ...this.words } as any\r\n        },\r\n        loadAssociatedWordsTree() {\r\n            this.associatedWordsTree = { ...this.treeWords } as any\r\n        },\r\n        async onDragDrop(event: any, item: any) {\r\n            switch (item.itemType) {\r\n                case 'document':\r\n                    await this.addAssociatedWordDocument(item, JSON.parse(event.dataTransfer.getData('text/plain')))\r\n                    break\r\n                case 'dataset':\r\n                    await this.addAssociatedWordDataset(item, JSON.parse(event.dataTransfer.getData('text/plain')), '.SELF', 'array')\r\n                    break\r\n                case 'datasetTree':\r\n                    await this.addAssociatedWordDataset(item, JSON.parse(event.dataTransfer.getData('text/plain')), item.data.alias, 'tree')\r\n                    break\r\n                case 'businessClass':\r\n                    await this.addAssociatedWordBusinessClass(item, JSON.parse(event.dataTransfer.getData('text/plain')), '.SELF', 'array')\r\n                    break\r\n                case 'businessClassTree':\r\n                    await this.addAssociatedWordBusinessClass(item, JSON.parse(event.dataTransfer.getData('text/plain')), item.label, 'tree')\r\n                    break\r\n                case 'table':\r\n                    await this.addAssociatedWordTables(item, JSON.parse(event.dataTransfer.getData('text/plain')), '.SELF', 'array')\r\n                    break\r\n                case 'tableTree':\r\n                    await this.addAssociatedWordTables(item, JSON.parse(event.dataTransfer.getData('text/plain')), item.label, 'tree')\r\n            }\r\n        },\r\n        onRowExpand(item: any) {\r\n            this.selectedItem = item.data\r\n            this.$emit('selected', item.data)\r\n        },\r\n        async addAssociatedWord(linkItem: any, word: iWord, type: string, url: string, postData: any, itemType: string) {\r\n            this.loading = true\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url, postData)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    if (response.data.Status !== 'NON OK') {\r\n                        type === 'tree'\r\n                            ? linkItem.children.push({\r\n                                  key: word.WORD_ID,\r\n                                  id: word.WORD_ID,\r\n                                  label: word.WORD,\r\n                                  children: [] as any[],\r\n                                  data: word,\r\n                                  style: glossaryUsageLinkCardDescriptor.node.style,\r\n                                  leaf: true,\r\n                                  parent: linkItem,\r\n                                  itemType: itemType\r\n                              })\r\n                            : this.associatedWords[linkItem.id].push(word)\r\n                        this.store.setInfo({\r\n                            title: this.$t('common.toast.createTitle'),\r\n                            msg: this.$t('common.toast.success')\r\n                        })\r\n                    } else {\r\n                        this.store.setError({\r\n                            title: this.$t('common.error.generic'),\r\n                            msg: response.data.Message === 'sbi.glossary.word.new.name.duplicate' ? this.$t('managers.glossary.glossaryUsage.duplicateWord') : response.data.Message\r\n                        })\r\n                    }\r\n                })\r\n                .catch(() => {})\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async addAssociatedWordDocument(document: any, word: iWord) {\r\n            const postData = { DOCUMENT_ID: document.id, WORD_ID: word.WORD_ID }\r\n            await this.addAssociatedWord(document, word, 'array', '1.0/glossary/addDocWlist', postData, '')\r\n        },\r\n        async addAssociatedWordDataset(dataset: any, word: iWord, column: string, type: string) {\r\n            const postData = { COLUMN_NAME: column, DATASET_ID: dataset.id, ORGANIZATION: dataset.organization, WORD_ID: word.WORD_ID }\r\n            await this.addAssociatedWord(dataset, word, type, '1.0/glossary/addDataSetWlist', postData, 'datasetTree')\r\n        },\r\n        async addAssociatedWordBusinessClass(businessClass: any, word: iWord, column: string, type: string) {\r\n            const id = type === 'tree' ? businessClass.businessClassId : businessClass.id\r\n            const postData = { COLUMN_NAME: column, META_BC_ID: id, WORD_ID: word.WORD_ID }\r\n            await this.addAssociatedWord(businessClass, word, type, '1.0/glossary/addMetaBcWlist', postData, 'businessClassTree')\r\n        },\r\n        async addAssociatedWordTables(table: any, word: iWord, column: string, type: string) {\r\n            const id = type === 'tree' ? table.metasourceId : table.id\r\n            const postData = { COLUMN_NAME: column, META_TABLE_ID: id, WORD_ID: word.WORD_ID }\r\n            await this.addAssociatedWord(table, word, type, '1.0/glossary/addMetaTableWlist', postData, 'tableTree')\r\n        },\r\n        deleteWordConfirm(wordId: number, item: any) {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.toast.deleteTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => this.handleDelete(wordId, item)\r\n            })\r\n        },\r\n        async handleDelete(wordId: number, item: any) {\r\n            switch (item.itemType) {\r\n                case 'document':\r\n                    await this.deleteDocumentWord(wordId, item)\r\n                    break\r\n                case 'dataset':\r\n                    await this.deleteDatasetWord(wordId, item, '.SELF', 'array')\r\n                    break\r\n                case 'datasetTree':\r\n                    await this.deleteDatasetWord(wordId, item, item.parent.data.alias, 'tree')\r\n                    break\r\n                case 'businessClass':\r\n                    await this.deleteBusinessClassWord(wordId, item, '.SELF', 'array')\r\n                    break\r\n                case 'businessClassTree':\r\n                    await this.deleteBusinessClassWord(wordId, item, item.parent.label, 'tree')\r\n                    break\r\n                case 'table':\r\n                    await this.deleteTablesWord(wordId, item, '.SELF', 'array')\r\n                    break\r\n                case 'tableTree':\r\n                    await this.deleteTablesWord(wordId, item, item.parent.label, 'tree')\r\n            }\r\n        },\r\n        async deleteWord(linkItem: any, wordId: number, type: string, url: string, method: string) {\r\n            this.loading = true\r\n            await this.$http[method](import.meta.env.VITE_RESTFUL_SERVICES_PATH + url)\r\n                .then(() => {\r\n                    type === 'tree' ? this.removeWordFromTreeWords(wordId, linkItem.parent) : this.removeWordFromAssociatedWords(wordId, linkItem.id)\r\n                    this.store.setInfo({\r\n                        title: this.$t('common.toast.deleteTitle'),\r\n                        msg: this.$t('common.toast.deleteSuccess')\r\n                    })\r\n                })\r\n                .catch((response: AxiosResponse<any>) => {\r\n                    this.store.setError({\r\n                        title: this.$t('common.toast.deleteTitle'),\r\n                        msg: response\r\n                    })\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async deleteTablesWord(wordId: number, table: any, column: string, type: string) {\r\n            const id = type === 'tree' ? table.parent.metasourceId : table.id\r\n            const url = `1.0/glossary/deleteMetaTableWlist?WORD_ID=${wordId}&TABLE_ID=${id}&COLUMN=${column}`\r\n            await this.deleteWord(table, wordId, type, url, 'delete')\r\n        },\r\n        async deleteBusinessClassWord(wordId: number, businessClass: any, column: string, type: string) {\r\n            const id = type === 'tree' ? businessClass.parent.businessClassId : businessClass.id\r\n            const url = `1.0/glossary/deleteMetaBcWlist?WORD_ID=${wordId}&BC_ID=${id}&COLUMN=${column}`\r\n            await this.deleteWord(businessClass, wordId, type, url, 'delete')\r\n        },\r\n        async deleteDatasetWord(wordId: number, dataset: any, column: string, type: string) {\r\n            const url = `1.0/glossary/deleteDatasetWlist?WORD_ID=${wordId}&DATASET_ID=${dataset.datasetId}&ORGANIZATION=${dataset.organization}&COLUMN=${column}`\r\n            await this.deleteWord(dataset, wordId, type, url, 'post')\r\n        },\r\n        async deleteDocumentWord(wordId: number, document: any) {\r\n            const url = `1.0/glossary/deleteDocWlist?WORD_ID=${wordId}&DOCUMENT_ID=${document.id}`\r\n            await this.deleteWord(document, wordId, 'array', url, 'post')\r\n        },\r\n        removeWordFromAssociatedWords(wordId: number, documentId: number) {\r\n            const index = this.associatedWords[documentId].findIndex((el: any) => el.WORD_ID === wordId)\r\n            this.associatedWords[documentId].splice(index, 1)\r\n        },\r\n        removeWordFromTreeWords(wordId: number, parent: any) {\r\n            const index = parent.children.findIndex((el: any) => el.id === wordId)\r\n            parent.children.splice(index, 1)\r\n        },\r\n        deleteTreeWord(word: any) {\r\n            this.handleDelete(word.id, word)\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#link-table {\r\n    flex: 2;\r\n}\r\n\r\n.chip-icon {\r\n    font-size: 0.9rem;\r\n}\r\n</style>\r\n","<template>\r\n    <div>\r\n        <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar\" v-if=\"loading\" />\r\n        <div class=\"p-grid p-m-0\" v-if=\"!linkTableVisible\">\r\n            <div class=\"p-col-6\">\r\n                <GlossaryUsageNavigationCard class=\"p-m-2\" :type=\"'document'\" :items=\"documents\" :glossaryChanged=\"glossaryChanged\" @infoClicked=\"showDocumentInfo($event)\" @linkClicked=\"onLinkClicked($event)\" @selected=\"onDocumentsSelected\"></GlossaryUsageNavigationCard>\r\n            </div>\r\n            <div class=\"p-col-6\">\r\n                <GlossaryUsageNavigationCard class=\"p-m-2\" :type=\"'dataset'\" :items=\"datasets\" :glossaryChanged=\"glossaryChanged\" @infoClicked=\"showDatasetInfo($event)\" @linkClicked=\"onLinkClicked($event)\" @selected=\"onDatasetsSelected\"></GlossaryUsageNavigationCard>\r\n            </div>\r\n            <div class=\"p-col-6\">\r\n                <GlossaryUsageNavigationCard class=\"p-m-2\" :type=\"'businessClass'\" :items=\"businessClasses\" :glossaryChanged=\"glossaryChanged\" @infoClicked=\"showBusinessClassInfo($event)\" @linkClicked=\"onLinkClicked($event)\" @selected=\"onBusinessClassesSelected\"></GlossaryUsageNavigationCard>\r\n            </div>\r\n            <div class=\"p-col-6\">\r\n                <GlossaryUsageNavigationCard class=\"p-m-2\" :type=\"'table'\" :items=\"tables\" :glossaryChanged=\"glossaryChanged\" @infoClicked=\"showTableInfo($event)\" @linkClicked=\"onLinkClicked($event)\" @selected=\"onTablesSelected\"></GlossaryUsageNavigationCard>\r\n            </div>\r\n        </div>\r\n        <GlossaryUsageLinkCard v-else :title=\"linkTableTitle\" class=\"p-m-2\" :items=\"linkTableItems\" :words=\"selectedLinkItemWords\" :treeWords=\"selectedLinkItemTree\" :showModelColumn=\"showModelColumn\" @close=\"onLinkTableClose\" @selected=\"onLinkItemSelect\"></GlossaryUsageLinkCard>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { iNode, iLinkTableItem, iNavigationTableItem } from './GlossaryUsage'\r\nimport { AxiosResponse } from 'axios'\r\nimport GlossaryUsageNavigationCard from './card/GlossaryUsageNavigationCard.vue'\r\nimport GlossaryUsageLinkCard from './card/GlossaryUsageLinkCard.vue'\r\nimport glossaryUsageDescriptor from './GlossaryUsageDescriptor.json'\r\nimport mainStore from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'glossary-usage-detail',\r\n    components: { GlossaryUsageNavigationCard, GlossaryUsageLinkCard },\r\n    props: { glossaryId: { type: Number }, selectedWords: { type: Array } },\r\n    emits: ['infoClicked', 'linkClicked', 'wordsFiltered', 'loading'],\r\n    data() {\r\n        return {\r\n            glossaryUsageDescriptor,\r\n            documents: [] as iNavigationTableItem[],\r\n            selectedDocuments: [] as any[],\r\n            datasets: [] as iNavigationTableItem[],\r\n            selectedDatasets: [] as any[],\r\n            businessClasses: [] as iNavigationTableItem[],\r\n            selectedBusinessClasses: [] as any[],\r\n            tables: [] as iNavigationTableItem[],\r\n            selectedTables: [] as any[],\r\n            linkTableVisible: false,\r\n            linkTableTitle: '',\r\n            linkTableItems: [] as iLinkTableItem[],\r\n            selectedLinkItemWords: {} as any,\r\n            selectedLinkItemTree: {} as any,\r\n            showModelColumn: false,\r\n            glossaryChanged: false,\r\n            loading: false\r\n        }\r\n    },\r\n    watch: {\r\n        async glossaryId() {\r\n            this.linkTableVisible = false\r\n            this.resetSelected()\r\n            await this.loadNavigationItems('all', 'word')\r\n        },\r\n        selectedWords: {\r\n            async handler() {\r\n                await this.loadNavigationItems('all', 'word')\r\n            },\r\n            deep: true\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    async created() {\r\n        await this.loadNavigationItems('all', 'word')\r\n    },\r\n    methods: {\r\n        async loadNavigationItems(type: string, item: string) {\r\n            this.loading = true\r\n            this.$emit('loading', true)\r\n            const postData = {\r\n                type: type,\r\n                item: item,\r\n                word: {\r\n                    selected: this.selectedWords,\r\n                    search: '',\r\n                    item_number: 9223372036854775807,\r\n                    page: 1,\r\n                    GLOSSARY_ID: this.glossaryId\r\n                },\r\n                document: { selected: this.selectedDocuments, search: '', item_number: 9223372036854775807, page: 1, GLOSSARY_ID: this.glossaryId },\r\n                dataset: { selected: this.selectedDatasets, search: '', item_number: 9223372036854775807, page: 1, GLOSSARY_ID: this.glossaryId },\r\n                table: { selected: this.selectedTables, search: '', item_number: 9223372036854775807, page: 1, GLOSSARY_ID: this.glossaryId },\r\n                bness_cls: { selected: this.selectedBusinessClasses, search: '', item_number: 9223372036854775807, page: 1, GLOSSARY_ID: this.glossaryId }\r\n            }\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + '1.0/glossary/loadNavigationItem', postData)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.formatNavigationItems(response.data)\r\n                    if (response.data.word) {\r\n                        this.$emit('wordsFiltered', response.data.word)\r\n                    }\r\n                })\r\n                .catch((response: AxiosResponse<any>) => {\r\n                    this.store.setError({\r\n                        title: this.$t('common.error.generic'),\r\n                        msg: response\r\n                    })\r\n                })\r\n                .finally(() => {\r\n                    this.loading = false\r\n                    this.$emit('loading', false)\r\n                })\r\n        },\r\n        formatNavigationItems(data: any) {\r\n            if ('document' in data) {\r\n                this.documents = []\r\n                data.document.forEach((el: any) => this.documents.push({ id: el.DOCUMENT_ID, label: el.DOCUMENT_LABEL, type: 'document' }))\r\n            }\r\n            if ('dataset' in data) {\r\n                this.datasets = []\r\n                data.dataset.forEach((el: any) =>\r\n                    this.datasets.push({\r\n                        id: el.DATASET_ID,\r\n                        label: el.DATASET_NM,\r\n                        organization: el.DATASET_ORG,\r\n                        type: 'dataset'\r\n                    })\r\n                )\r\n            }\r\n            if ('bness_cls' in data) {\r\n                this.businessClasses = []\r\n                data.bness_cls.forEach((el: any) =>\r\n                    this.businessClasses.push({\r\n                        id: el.BC_ID,\r\n                        label: el.META_MODEL_NAME + '.' + el.BC_NAME,\r\n                        type: 'businessClass'\r\n                    })\r\n                )\r\n            }\r\n            if ('table' in data) {\r\n                this.tables = []\r\n                data.table.forEach((el: any) =>\r\n                    this.tables.push({\r\n                        id: el.TABLE_ID,\r\n                        label: el.META_SOURCE_NAME + '.' + el.TABLE_NM,\r\n                        type: 'table'\r\n                    })\r\n                )\r\n            }\r\n        },\r\n        async showDocumentInfo(document: iNavigationTableItem) {\r\n            this.loading = true\r\n            let tempDocument = null as any\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/documents/${document.label}`).then((response: AxiosResponse<any>) => (tempDocument = response.data))\r\n\r\n            if (tempDocument) {\r\n                await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/documents/${tempDocument.id}/roles`).then((response: AxiosResponse<any>) => (tempDocument.access = response.data))\r\n                this.$emit('infoClicked', { data: tempDocument, type: 'document' })\r\n            }\r\n            this.loading = false\r\n        },\r\n        async showDatasetInfo(dataset: iNavigationTableItem) {\r\n            this.loading = true\r\n            await this.loadDatasetInfo(dataset)\r\n                .then((response: AxiosResponse<any>) => this.$emit('infoClicked', { data: response.data, type: 'dataset' }))\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async showBusinessClassInfo(businessClass: iNavigationTableItem) {\r\n            this.loading = true\r\n            await this.loadBusinessClassInfo(businessClass)\r\n                .then((response: AxiosResponse<any>) => this.$emit('infoClicked', { data: response.data, type: 'businessClass' }))\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async showTableInfo(table: any) {\r\n            this.loading = true\r\n            await this.loadTableInfo(table)\r\n                .then((response: AxiosResponse<any>) => this.$emit('infoClicked', { data: response.data, type: 'table' }))\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async onLinkClicked(type: string) {\r\n            switch (type) {\r\n                case 'document':\r\n                    await this.loadDocuments()\r\n                    break\r\n                case 'dataset':\r\n                    await this.loadDatasets()\r\n                    break\r\n                case 'businessClass':\r\n                    await this.loadBusinessClasses()\r\n                    break\r\n                case 'table':\r\n                    await this.loadTables()\r\n            }\r\n        },\r\n        async loadDocuments() {\r\n            this.linkTableItems = []\r\n            this.showModelColumn = false\r\n            this.loading = true\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + '2.0/documents/listDocument?Page=1&ItemPerPage=&label=&scope=GLOSSARY')\r\n                .then((response: AxiosResponse<any>) => {\r\n                    response.data.item.forEach((el: any) =>\r\n                        this.linkTableItems.push({\r\n                            id: el.DOCUMENT_ID,\r\n                            name: el.DOCUMENT_LABEL,\r\n                            description: el.DOCUMENT_DESCR,\r\n                            type: '',\r\n                            author: el.DOCUMENT_AUTH,\r\n                            itemType: 'document'\r\n                        })\r\n                    )\r\n                    this.showLinkTable(this.$t('managers.glossary.glossaryUsage.documents'))\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async loadDatasets() {\r\n            this.linkTableItems = []\r\n            this.showModelColumn = false\r\n            this.loading = true\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + '2.0/datasets/?asPagedList=true&Page=1&ItemPerPage=&label=')\r\n                .then((response: AxiosResponse<any>) => {\r\n                    response.data.item.forEach((el: any) => {\r\n                        this.linkTableItems.push({\r\n                            id: el.id.dsId,\r\n                            datasetId: el.id.dsId,\r\n                            name: el.label,\r\n                            description: el.description,\r\n                            type: el.type,\r\n                            author: el.owner,\r\n                            organization: el.id.organization,\r\n                            itemType: 'dataset'\r\n                        })\r\n                    })\r\n                    this.showLinkTable(this.$t('managers.glossary.glossaryUsage.dataset'))\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async loadBusinessClasses() {\r\n            this.linkTableItems = []\r\n            this.showModelColumn = true\r\n            this.loading = true\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + '1.0/metaBC/listMetaBC?Page=1&ItemPerPage=&label=')\r\n                .then((response: AxiosResponse<any>) => {\r\n                    response.data.forEach((el: any) =>\r\n                        this.linkTableItems.push({\r\n                            id: el.id,\r\n                            name: el.name,\r\n                            description: '',\r\n                            type: '',\r\n                            author: '',\r\n                            itemType: 'businessClass',\r\n                            model: el.model\r\n                        })\r\n                    )\r\n                    this.showLinkTable(this.$t('managers.glossary.glossaryUsage.businessClass'))\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async loadTables() {\r\n            this.linkTableItems = []\r\n            this.showModelColumn = false\r\n            this.loading = true\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + '1.0/metaTable/listMetaTable?Page=1&ItemPerPage=&label=')\r\n                .then((response: AxiosResponse<any>) => {\r\n                    response.data.forEach((el: any) =>\r\n                        this.linkTableItems.push({\r\n                            id: el.tableId,\r\n                            name: el.name,\r\n                            description: '',\r\n                            type: '',\r\n                            author: '',\r\n                            itemType: 'table'\r\n                        })\r\n                    )\r\n                    this.showLinkTable(this.$t('managers.glossary.glossaryUsage.tables'))\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        showLinkTable(title: string) {\r\n            this.linkTableItems.sort((a: iLinkTableItem, b: iLinkTableItem) => (a.name > b.name ? 1 : -1))\r\n            this.linkTableTitle = title\r\n            this.linkTableVisible = true\r\n        },\r\n        onDocumentsSelected(documents: iNavigationTableItem[]) {\r\n            this.selectedDocuments = []\r\n            documents.forEach((el: iNavigationTableItem) => this.selectedDocuments.push({ DOCUMENT_ID: el.id, DOCUMENT_LABEL: el.label }))\r\n            this.loadNavigationItems('all', 'word')\r\n        },\r\n        onDatasetsSelected(datasets: iNavigationTableItem[]) {\r\n            this.selectedDatasets = []\r\n            datasets.forEach((el: iNavigationTableItem) => this.selectedDatasets.push({ DATASET_ID: el.id, DATASET_NM: el.label, DATASET_ORG: el.organization }))\r\n            this.loadNavigationItems('all', 'word')\r\n        },\r\n        onBusinessClassesSelected(businessClasses: iNavigationTableItem[]) {\r\n            this.selectedBusinessClasses = []\r\n            businessClasses.forEach((el: iNavigationTableItem) => {\r\n                const label = el.label.split('.')\r\n                this.selectedBusinessClasses.push({ BC_ID: el.id, META_MODEL_NAME: label[0], BC_NAME: label[1] })\r\n            })\r\n            this.loadNavigationItems('all', 'word')\r\n        },\r\n        onTablesSelected(tables: iNavigationTableItem[]) {\r\n            this.selectedTables = []\r\n            tables.forEach((el: iNavigationTableItem) => {\r\n                const label = el.label.split('.')\r\n                this.selectedTables.push({ TABLE_ID: el.id, META_SOURCE_NAME: label[0], TABLE_NM: label[1] })\r\n            })\r\n            this.loadNavigationItems('all', 'word')\r\n        },\r\n        async onLinkItemSelect(item: iLinkTableItem) {\r\n            switch (item.itemType) {\r\n                case 'document':\r\n                    await this.loadDocumentWords(item)\r\n                    break\r\n                case 'dataset':\r\n                    await this.loadDatasetWords(item)\r\n                    break\r\n                case 'businessClass':\r\n                    await this.loadBusinessClassWords(item)\r\n                    break\r\n                case 'table':\r\n                    await this.loadTableWords(item)\r\n            }\r\n        },\r\n        async loadDocumentWords(document: iLinkTableItem) {\r\n            this.loading = true\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/getDocumentInfo?DOCUMENT_ID=${document.id}`)\r\n                .then((response: AxiosResponse<any>) => (this.selectedLinkItemWords[document.id] = response.data.word))\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async loadDatasetWords(dataset: iLinkTableItem) {\r\n            this.loading = true\r\n            await this.loadDatasetInfo(dataset)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.selectedLinkItemWords[dataset.id] = response.data.Word\r\n                    this.selectedLinkItemTree[dataset.id] = []\r\n                    response.data.SbiGlDataSetWlist.forEach((el: any) => {\r\n                        const organization = el.organization\r\n                        const datasetId = el.datasetId\r\n                        const tempNode = { key: el.alias, id: datasetId, label: el.alias, children: [] as iNode[], data: el, leaf: false, style: '', organization: organization, itemType: 'datasetTree' }\r\n                        el.word.forEach((el: any) =>\r\n                            tempNode.children.push({ key: el.WORD_ID, id: el.WORD_ID, label: el.WORD, children: [] as iNode[], data: el, style: this.glossaryUsageDescriptor.node.style, leaf: true, parent: tempNode, organization: organization, datasetId: datasetId, itemType: 'datasetTree' } as any)\r\n                        )\r\n                        this.selectedLinkItemTree[dataset.id].push(tempNode)\r\n                    })\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async loadBusinessClassWords(businessClass: iLinkTableItem) {\r\n            this.loading = true\r\n            await this.loadBusinessClassInfo(businessClass)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.selectedLinkItemWords[businessClass.id] = response.data.words\r\n                    this.selectedLinkItemTree[businessClass.id] = []\r\n                    response.data.sbiGlBnessClsWlist.forEach((el: any) => {\r\n                        const tempNode = { key: el.columnId, id: el.columnId, label: el.name, children: [] as iNode[], data: el, leaf: false, style: '', businessClassId: response.data.metaBc.bcId, itemType: 'businessClassTree' }\r\n                        el.word.forEach((el: any) => tempNode.children.push({ key: el.WORD_ID, id: el.WORD_ID, label: el.WORD, children: [] as iNode[], data: el, style: this.glossaryUsageDescriptor.node.style, leaf: true, parent: tempNode, itemType: 'businessClassTree' }))\r\n                        this.selectedLinkItemTree[businessClass.id].push(tempNode)\r\n                    })\r\n                    this.selectedLinkItemTree[businessClass.id].sort((a: any, b: any) => (a.label.toUpperCase() > b.label.toUpperCase() ? 1 : -1))\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async loadTableWords(table: iLinkTableItem) {\r\n            this.loading = true\r\n            await this.loadTableInfo(table)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.selectedLinkItemWords[table.id] = response.data.words\r\n                    this.selectedLinkItemTree[table.id] = []\r\n                    response.data.sbiGlTableWlist.forEach((el: any) => {\r\n                        const tempNode = { key: el.columnId, id: el.columnId, label: el.name, children: [] as iNode[], data: el, leaf: false, style: '', metasourceId: response.data.metaTable.tableId, itemType: 'tableTree' }\r\n                        el.word.forEach((el: any) => tempNode.children.push({ key: el.WORD_ID, id: el.WORD_ID, label: el.WORD, children: [] as iNode[], data: el, style: this.glossaryUsageDescriptor.node.style, leaf: true, parent: tempNode, itemType: 'tableTree' }))\r\n                        this.selectedLinkItemTree[table.id].push(tempNode)\r\n                    })\r\n                    this.selectedLinkItemTree[table.id].sort((a: any, b: any) => (a.label.toUpperCase() > b.label.toUpperCase() ? 1 : -1))\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        loadDatasetInfo(dataset: any) {\r\n            return this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/getDataSetInfo?DATASET_ID=${dataset.id}&ORGANIZATION=${dataset.organization}`)\r\n        },\r\n        loadBusinessClassInfo(businessClass: any) {\r\n            return this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/getMetaBcInfo?META_BC_ID=${businessClass.id}`)\r\n        },\r\n        loadTableInfo(table: any) {\r\n            return this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/getMetaTableInfo?META_TABLE_ID=${table.id}`)\r\n        },\r\n        async onLinkTableClose() {\r\n            this.linkTableVisible = false\r\n            await this.loadNavigationItems('all', 'word')\r\n        },\r\n        resetSelected() {\r\n            this.selectedDocuments = []\r\n            this.selectedDatasets = []\r\n            this.selectedBusinessClasses = []\r\n            this.selectedTables = []\r\n            this.glossaryChanged = !this.glossaryChanged\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div class=\"kn-page\">\r\n        <Toolbar class=\"kn-toolbar kn-toolbar--primary p-col-12\">\r\n            <template #start>\r\n                {{ $t('managers.glossary.glossaryUsage.title') }}\r\n            </template>\r\n        </Toolbar>\r\n        <div class=\"p-grid p-m-0 kn-page-content\">\r\n            <div class=\"p-col-4 p-sm-4 p-md-3 p-p-0 kn-list\">\r\n                <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar\" v-if=\"loading\" data-test=\"progress-bar\" />\r\n                <div class=\"p-d-flex p-flex-column p-m-3\">\r\n                    <label v-if=\"selectedGlossaryId\" for=\"glossary\" class=\"kn-material-input-label\">{{ $t('managers.glossary.glossaryUsage.title') }}</label>\r\n                    <Dropdown id=\"glossary\" class=\"kn-material-input\" v-model=\"selectedGlossaryId\" :options=\"glossaryList\" optionLabel=\"GLOSSARY_NM\" optionValue=\"GLOSSARY_ID\" :placeholder=\"$t('managers.glossary.glossaryUsage.selectGlossary')\" />\r\n                </div>\r\n                <div>\r\n                    <div v-if=\"glossaryList.length === 0\" data-test=\"no-glossary-found-hint\">\r\n                        {{ $t('common.info.noDataFound') }}\r\n                    </div>\r\n                    <Message v-else-if=\"!selectedGlossaryId\" class=\"p-mx-3\" data-test=\"no-glossary-selected-tree-hint\">{{ $t('managers.glossary.glossaryUsage.glossaryHint') }}</Message>\r\n                    <div v-else>\r\n                        <div class=\"p-m-3\">\r\n                            <InputText id=\"search-input\" class=\"kn-material-input\" v-model=\"searchWord\" :placeholder=\"$t('common.search')\" @input=\"filterGlossaryTree\" data-test=\"search-input\" />\r\n                        </div>\r\n                        <Tree\r\n                            v-if=\"!loading\"\r\n                            id=\"glossary-tree\"\r\n                            :value=\"nodes\"\r\n                            selectionMode=\"multiple\"\r\n                            v-model:selectionKeys=\"selectedKeys\"\r\n                            :metaKeySelection=\"false\"\r\n                            :expandedKeys=\"expandedKeys\"\r\n                            @nodeExpand=\"listContents(selectedGlossaryId, $event)\"\r\n                            @nodeSelect=\"onNodeSelect\"\r\n                            @nodeUnselect=\"onNodeUnselect\"\r\n                            data-test=\"glossary-tree\"\r\n                        >\r\n                            <template #default=\"slotProps\">\r\n                                <div\r\n                                    class=\"p-d-flex p-flex-row p-ai-center\"\r\n                                    @mouseover=\"buttonVisible[slotProps.node.id] = true\"\r\n                                    @mouseleave=\"buttonVisible[slotProps.node.id] = false\"\r\n                                    :draggable=\"slotProps.node.leaf\"\r\n                                    @dragstart=\"onDragStart($event, slotProps.node)\"\r\n                                    :data-test=\"'tree-item-' + slotProps.node.id\"\r\n                                >\r\n                                    <span>{{ slotProps.node.label }}</span>\r\n                                    <div v-show=\"buttonVisible[slotProps.node.id]\" class=\"p-ml-2\">\r\n                                        <Button icon=\"pi pi-info-circle\" class=\"p-button-link p-button-sm p-p-0\" @click.stop=\"showInfo(slotProps.node.data)\" />\r\n                                    </div>\r\n                                </div>\r\n                            </template>\r\n                        </Tree>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <GlossaryUsageInfoDialog v-show=\"infoDialogVisible\" :visible=\"infoDialogVisible\" :contentInfo=\"contentInfo\" :selectedWords=\"selectedWords\" @close=\"infoDialogVisible = false\" @loading=\"setLoading\"></GlossaryUsageInfoDialog>\r\n\r\n            <div class=\"p-col-8 p-sm-8 p-md-9 p-p-0 p-m-0\">\r\n                <GlossaryUsageHint v-if=\"!selectedGlossaryId\" data-test=\"no-glossary-selected-hint\"></GlossaryUsageHint>\r\n                <GlossaryUsageDetail v-else :glossaryId=\"selectedGlossaryId\" :selectedWords=\"selectedWords\" @infoClicked=\"showNavigationItemInfo($event)\" @wordsFiltered=\"setFilteredWords\"></GlossaryUsageDetail>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { iGlossary, iNode } from './GlossaryUsage'\r\nimport { AxiosResponse } from 'axios'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport glossaryUsageDescriptor from './GlossaryUsageDescriptor.json'\r\nimport GlossaryUsageInfoDialog from './GlossaryUsageInfoDialog.vue'\r\nimport GlossaryUsageHint from './GlossaryUsageHint.vue'\r\nimport GlossaryUsageDetail from './GlossaryUsageDetail.vue'\r\nimport Message from 'primevue/message'\r\nimport Tree from 'primevue/tree'\r\n\r\nexport default defineComponent({\r\n    name: 'glossary-usage',\r\n    components: {\r\n        Dropdown,\r\n        GlossaryUsageInfoDialog,\r\n        GlossaryUsageHint,\r\n        GlossaryUsageDetail,\r\n        Message,\r\n        Tree\r\n    },\r\n    data() {\r\n        return {\r\n            glossaryUsageDescriptor,\r\n            glossaryList: [] as iGlossary[],\r\n            selectedGlossaryId: null as number | null,\r\n            nodes: [] as iNode[],\r\n            buttonVisible: [],\r\n            infoDialogVisible: false,\r\n            contentInfo: null,\r\n            searchWord: null,\r\n            timer: null as any,\r\n            expandedKeys: {},\r\n            selectedKeys: [],\r\n            selectedWords: [] as any[],\r\n            loading: false\r\n        }\r\n    },\r\n    async created() {\r\n        await this.loadGlossary()\r\n    },\r\n    methods: {\r\n        async loadGlossary() {\r\n            this.loading = true\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + '1.0/glossary/listGlossary')\r\n                .then((response: AxiosResponse<any>) => (this.glossaryList = response.data))\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async listContents(glossaryId: number, parent: any) {\r\n            this.loading = true\r\n\r\n            if (!parent) {\r\n                this.selectedWords = []\r\n                this.selectedKeys = []\r\n                this.loading = false\r\n                return\r\n            }\r\n\r\n            if (parent?.WORD_ID || this.searchWord) {\r\n                this.loading = false\r\n                return\r\n            }\r\n\r\n            const parentId = parent ? parent.id : null\r\n            let content = [] as iNode[]\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/listContents?GLOSSARY_ID=${glossaryId}&PARENT_ID=${parentId}`).then((response: AxiosResponse<any>) => {\r\n                response.data.forEach((el: any) => content.push(this.createNode(el)))\r\n                content.sort((a: iNode, b: iNode) => (a.label > b.label ? 1 : -1))\r\n            })\r\n\r\n            this.attachContentToTree(parent, content)\r\n            this.loading = false\r\n        },\r\n        attachContentToTree(parent: iNode, content: iNode[]) {\r\n            if (parent) {\r\n                parent.children = []\r\n                parent.children = content\r\n            } else {\r\n                this.nodes = []\r\n                this.nodes = content\r\n            }\r\n        },\r\n        async showInfo(content: any) {\r\n            this.loading = true\r\n            const url = content.CONTENT_ID ? `1.0/glossary/getContent?CONTENT_ID=${content.CONTENT_ID}` : `1.0/glossary/getWord?WORD_ID=${content.WORD_ID}`\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.contentInfo = response.data\r\n                    this.infoDialogVisible = true\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async filterGlossaryTree() {\r\n            if (this.timer) {\r\n                clearTimeout(this.timer)\r\n                this.timer = null\r\n            }\r\n            let tempData = []\r\n            this.timer = setTimeout(() => {\r\n                this.loading = true\r\n                this.$http\r\n                    .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/glosstreeLike?WORD=${this.searchWord}&GLOSSARY_ID=${this.selectedGlossaryId}`)\r\n                    .then((response: AxiosResponse<any>) => (tempData = response.data))\r\n                    .finally(() => {\r\n                        this.createGlossaryTree(tempData)\r\n                        this.loading = false\r\n                    })\r\n            }, 1000)\r\n        },\r\n        createGlossaryTree(data: any) {\r\n            this.nodes = []\r\n            this.expandedKeys = {}\r\n            data.GlossSearch.SBI_GL_CONTENTS.forEach((el: any) => {\r\n                const tempNode = this.createNode(el)\r\n                el.CHILD?.forEach((el: any) => {\r\n                    tempNode.children.push(this.createNode(el))\r\n                })\r\n                this.nodes.push(tempNode)\r\n            })\r\n            this.expandAll()\r\n        },\r\n        createNode(el: any) {\r\n            return {\r\n                key: el.CONTENT_ID ?? el.WORD_ID,\r\n                id: el.CONTENT_ID ?? el.WORD_ID,\r\n                label: el.CONTENT_NM ?? el.WORD,\r\n                children: [] as iNode[],\r\n                data: el,\r\n                style: this.glossaryUsageDescriptor.node.style,\r\n                leaf: !(el.HAVE_WORD_CHILD || el.HAVE_CONTENTS_CHILD),\r\n                selectable: !(el.HAVE_WORD_CHILD || el.HAVE_CONTENTS_CHILD)\r\n            }\r\n        },\r\n        expandAll() {\r\n            for (let node of this.nodes) {\r\n                this.expandNode(node)\r\n            }\r\n            this.expandedKeys = { ...this.expandedKeys }\r\n        },\r\n        expandNode(node: iNode) {\r\n            if (node.children && node.children.length) {\r\n                this.expandedKeys[node.key] = true\r\n                for (let child of node.children) {\r\n                    this.expandNode(child)\r\n                }\r\n            }\r\n        },\r\n        showNavigationItemInfo(info: any) {\r\n            this.contentInfo = info\r\n            this.infoDialogVisible = true\r\n        },\r\n        onNodeSelect(node: iNode) {\r\n            this.selectedWords.push(node.data)\r\n        },\r\n        onNodeUnselect(node: iNode) {\r\n            const index = this.selectedWords.findIndex((el: any) => el.id === node.data.WORD_ID)\r\n            this.selectedWords.splice(index, 1)\r\n        },\r\n        onDragStart(event: any, node: iNode) {\r\n            event.dataTransfer.setData('text/plain', JSON.stringify(node.data))\r\n            event.dataTransfer.dropEffect = 'move'\r\n            event.dataTransfer.effectAllowed = 'move'\r\n        },\r\n        setFilteredWords(words: any) {\r\n            this.loading = true\r\n            this.nodes = []\r\n            words.forEach((el: any) => this.nodes.push(this.createNode(el)))\r\n\r\n            this.loading = false\r\n        },\r\n        setLoading(value: boolean) {\r\n            this.loading = value\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#search-input {\r\n    width: 100%;\r\n}\r\n\r\n#glossary-tree {\r\n    border: none;\r\n}\r\n</style>\r\n"],"names":["_sfc_main","_hoisted_2","_openBlock","_createElementBlock","_createElementVNode","_toDisplayString","_hoisted_1","_Fragment","_renderList","_normalizeClass","_hoisted_3","_createTextVNode","Dialog","_hoisted_7","_createVNode","_normalizeStyle","_withCtx","_createCommentVNode","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","Card","Column","DataTable","mainStore","_withScopeId","_popScopeId","_createBlock","_withModifiers","Tree","_withDirectives","Chip","Dropdown","Message","_vShow"],"mappings":"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"}