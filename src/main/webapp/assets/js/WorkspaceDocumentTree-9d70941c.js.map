{"version":3,"file":"WorkspaceDocumentTree-9d70941c.js","sources":["../../../../modules/workspace/genericComponents/WorkspaceDocumentTree.vue"],"sourcesContent":["<template>\r\n    <Tree id=\"folders-tree\" :value=\"nodes\" selectionMode=\"single\" v-model:selectionKeys=\"selectedFolderKey\" @node-select=\"setSelectedFolder($event)\" @node-unselect=\"removeSelectedFolder\" @node-expand=\"setOpenFolderIcon($event)\" @node-collapse=\"setClosedFolderIcon($event)\">\r\n        <template #default=\"slotProps\">\r\n            <div class=\"p-d-flex p-flex-row p-ai-center\" @mouseover=\"buttonsVisible[slotProps.node.id] = true\" @mouseleave=\"buttonsVisible[slotProps.node.id] = false\">\r\n                <span>{{ slotProps.node.label }}</span>\r\n                <div v-show=\"mode === 'select' && buttonsVisible[slotProps.node.id]\" class=\"p-ml-2\">\r\n                    <Button icon=\"fa fa-plus\" class=\"p-button-link p-button-sm p-p-0\" @click.stop=\"createFolder(slotProps.node)\" />\r\n                    <Button icon=\"far fa-trash-alt\" class=\"p-button-link p-button-sm p-p-0\" @click.stop=\"deleteFolderConfirm(slotProps.node)\" />\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </Tree>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { IFolder } from '../Workspace'\r\nimport Tree from 'primevue/tree'\r\nimport workspaceDocumentTreeDescriptor from './WorkspaceDocumentTreeDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'workspace-document-tree',\r\n    components: { Tree },\r\n    props: { propFolders: { type: Array }, mode: { type: String }, selectedBreadcrumb: { type: Object } },\r\n    emits: ['folderSelected', 'delete', 'createFolder'],\r\n    data() {\r\n        return {\r\n            workspaceDocumentTreeDescriptor,\r\n            folders: [] as IFolder[],\r\n            nodes: [] as any[],\r\n            selectedFolderKey: {},\r\n            selectedFolder: null as any,\r\n            buttonsVisible: []\r\n        }\r\n    },\r\n    watch: {\r\n        propFolders() {\r\n            this.loadTree()\r\n        },\r\n        selectedBreadcrumb() {\r\n            this.onBreadcrumbSelected()\r\n        }\r\n    },\r\n    created() {\r\n        this.loadTree()\r\n    },\r\n    methods: {\r\n        loadTree() {\r\n            this.loadFolders()\r\n            this.createNodeTree()\r\n        },\r\n        loadFolders() {\r\n            this.folders = this.propFolders as IFolder[]\r\n        },\r\n        createNodeTree() {\r\n            this.nodes = [] as any[]\r\n            const foldersWithMissingParent = [] as IFolder[]\r\n            this.folders?.forEach((folder: IFolder) => {\r\n                const node = {\r\n                    key: folder.name,\r\n                    icon: 'pi pi-folder',\r\n                    id: folder.functId,\r\n                    parentId: folder.parentFunct,\r\n                    label: folder.name,\r\n                    path: folder.path,\r\n                    prog: folder.prog,\r\n                    children: [] as IFolder[],\r\n                    data: { name: folder.name, hasDocuments: false },\r\n                    style: this.workspaceDocumentTreeDescriptor.node.style\r\n                }\r\n                node.children = foldersWithMissingParent.filter((folder: any) => node.id === folder.parentId)\r\n                this.attachFolderToTree(node, foldersWithMissingParent)\r\n            })\r\n        },\r\n        attachFolderToTree(folder: any, foldersWithMissingParent: any[]) {\r\n            if (folder.parentId) {\r\n                let parentFolder = null as any\r\n                for (let i = 0; i < foldersWithMissingParent.length; i++) {\r\n                    if (folder.parentId === foldersWithMissingParent[i].id) {\r\n                        folder.data.parentFolder = foldersWithMissingParent[i]\r\n                        foldersWithMissingParent[i].children?.push(folder)\r\n                        break\r\n                    }\r\n                }\r\n                for (let i = 0; i < this.nodes.length; i++) {\r\n                    parentFolder = this.findParentFolder(folder, this.nodes[i])\r\n                    if (parentFolder) {\r\n                        folder.data.parentFolder = parentFolder\r\n                        parentFolder.children?.push(folder)\r\n                        break\r\n                    }\r\n                }\r\n                if (!parentFolder) {\r\n                    foldersWithMissingParent.push(folder)\r\n                }\r\n            } else {\r\n                this.nodes.push(folder)\r\n            }\r\n        },\r\n        findParentFolder(folderToAdd: any, folderToSearch: any) {\r\n            if (folderToAdd.parentId === folderToSearch.id) {\r\n                return folderToSearch\r\n            } else {\r\n                let tempFolder = null as any | null\r\n                if (folderToSearch.children) {\r\n                    for (let i = 0; i < folderToSearch.children.length; i++) {\r\n                        tempFolder = this.findParentFolder(folderToAdd, folderToSearch.children[i])\r\n                        if (tempFolder) {\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n                return tempFolder\r\n            }\r\n        },\r\n        setOpenFolderIcon(node: any) {\r\n            node.icon = 'pi pi-folder-open'\r\n        },\r\n        setClosedFolderIcon(node: any) {\r\n            node.icon = 'pi pi-folder'\r\n        },\r\n        setSelectedFolder(folder: any) {\r\n            this.selectedFolder = folder\r\n            this.$emit('folderSelected', this.selectedFolder)\r\n        },\r\n        removeSelectedFolder() {\r\n            this.selectedFolder = null\r\n            this.$emit('folderSelected', this.selectedFolder)\r\n        },\r\n        createFolder(folder: any) {\r\n            this.$emit('createFolder', folder)\r\n        },\r\n        deleteFolderConfirm(folder: any) {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.toast.deleteTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => this.$emit('delete', folder)\r\n            })\r\n        },\r\n        onBreadcrumbSelected() {\r\n            this.selectedFolder = this.selectedBreadcrumb?.node\r\n            this.selectedFolderKey = {}\r\n            this.selectedFolderKey[this.selectedFolder.key] = true\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#folders-tree {\r\n    border: none;\r\n}\r\n</style>\r\n"],"names":["Tree","_openBlock","_createBlock","_withCtx","_createElementVNode","_toDisplayString","_withDirectives","_createVNode","_withModifiers"],"mappings":"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"}