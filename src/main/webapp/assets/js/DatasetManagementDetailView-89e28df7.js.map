{"version":3,"file":"DatasetManagementDetailView-89e28df7.js","sources":["../../../../modules/managers/datasetManagement/detailView/detailCard/DatasetManagementDetailCard.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/tables/DatasetManagementParamTable.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/fileDataset/DatasetManagementFileDataset.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/queryDataset/DatasetManagementQueryHelpDialog.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/queryDataset/DatasetManagementQueryDataset.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/javaDataset/DatasetManagementJavaDataset.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/scriptDataset/DatasetManagementScriptDataset.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/qbeDataset/DatasetManagementQbeDataset.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/flatDataset/DatasetManagementFlatDataset.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/ckanDataset/DatasetManagementCkanDataset.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/infoDialogs/DatasetManagementJsonPathItemsInfoDialog.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/infoDialogs/DatasetManagementAttributesDirectInfoDialog.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/infoDialogs/DatasetManagementNgsiInfoDialog.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/tables/DatasetManagementRequestHeadersTable.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/infoDialogs/DatasetManagementJsonPathAttributesInfoDialog.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/tables/DatasetManagementJsonPathAttributesTable.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/restDataset/DatasetManagementRestDataset.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/sparqlDataset/DatasetManagementSparqlDataset.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/infoDialogs/DatasetManagementFacetInfoDialog.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/tables/DatasetManagementQueryParamTable.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/solrDataset/DatasetManagementSolrDataset.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/pythonDataset/DatasetManagementPythonDataset.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/preparedDataset/DatasetManagementPreparedDataset.vue","../../../../modules/managers/datasetManagement/detailView/typeCard/DatasetManagementTypeCard.vue","../../../../../node_modules/vuex/dist/vuex.esm-bundler.js","../../../../modules/managers/datasetManagement/detailView/advancedCard/DatasetManagementAdvancedCard.vue","../../../../modules/managers/datasetManagement/detailView/linkCard/DatasetManagementLinkCard.vue","../../../../modules/managers/datasetManagement/detailView/metadataCard/DatasetManagementMetadataCard.vue","../../../../modules/managers/datasetManagement/detailView/DatasetManagementDetailView.vue"],"sourcesContent":["<template>\r\n    <Card class=\"p-m-2\">\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-mt-1 p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"label\" class=\"kn-material-input\" type=\"text\" maxLength=\"50\" v-model=\"v$.dataset.label.$model\" :class=\"{ 'p-invalid': v$.dataset.label.$invalid && v$.dataset.label.$dirty }\" @blur=\"v$.dataset.label.$touch()\" @change=\"$emit('touched')\" data-test=\"label-input\" />\r\n                        <label for=\"label\" class=\"kn-material-input-label\"> {{ $t('common.label') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.label\" :additionalTranslateParams=\"{ fieldName: $t('common.label') }\" />\r\n                </div>\r\n                <div class=\"p-field p-mt-1 p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"name\" class=\"kn-material-input\" type=\"text\" maxLength=\"50\" v-model=\"v$.dataset.name.$model\" :class=\"{ 'p-invalid': v$.dataset.name.$invalid && v$.dataset.name.$dirty }\" @blur=\"v$.dataset.name.$touch()\" @change=\"$emit('touched')\" data-test=\"name-input\" />\r\n                        <label for=\"name\" class=\"kn-material-input-label\"> {{ $t('common.name') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.name\" :additionalTranslateParams=\"{ fieldName: $t('common.name') }\" />\r\n                </div>\r\n                <div class=\"p-field p-mt-1 p-col-12\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"description\"\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            maxLength=\"150\"\r\n                            v-model=\"v$.dataset.description.$model\"\r\n                            :class=\"{ 'p-invalid': v$.dataset.description.$invalid && v$.dataset.description.$dirty }\"\r\n                            @blur=\"v$.dataset.description.$touch()\"\r\n                            @change=\"$emit('touched')\"\r\n                            data-test=\"description-input\"\r\n                        />\r\n                        <label for=\"description\" class=\"kn-material-input-label\"> {{ $t('common.description') }} </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.description\" :additionalTranslateParams=\"{ fieldName: $t('common.description') }\" />\r\n                </div>\r\n                <div class=\"p-field p-mt-1 p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown\r\n                            id=\"scope\"\r\n                            class=\"kn-material-input\"\r\n                            :options=\"scopeTypes\"\r\n                            optionLabel=\"VALUE_CD\"\r\n                            optionValue=\"VALUE_CD\"\r\n                            v-model=\"v$.dataset.scopeCd.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.scopeCd.$invalid && v$.dataset.scopeCd.$dirty\r\n                            }\"\r\n                            @before-show=\"v$.dataset.scopeCd.$touch()\"\r\n                            @change=\"updateIdFromCd(this.scopeTypes, 'scopeId', $event.value), $emit('touched')\"\r\n                            data-test=\"scope-input\"\r\n                        />\r\n                        <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.scope') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages\r\n                        :vComp=\"v$.dataset.scopeCd\"\r\n                        :additionalTranslateParams=\"{\r\n                            fieldName: $t('managers.datasetManagement.scope')\r\n                        }\"\r\n                    />\r\n                </div>\r\n                <div class=\"p-field p-mt-1 p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown\r\n                            id=\"category\"\r\n                            class=\"kn-material-input\"\r\n                            :options=\"categoryTypes\"\r\n                            optionLabel=\"VALUE_CD\"\r\n                            optionValue=\"VALUE_CD\"\r\n                            v-model=\"v$.dataset.catTypeVn.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.catTypeVn.$invalid && v$.dataset.catTypeVn.$dirty\r\n                            }\"\r\n                            @before-show=\"v$.dataset.catTypeVn.$touch()\"\r\n                            @change=\"updateIdFromCd(this.categoryTypes, 'catTypeId', $event.value), $emit('touched')\"\r\n                            data-test=\"category-input\"\r\n                        />\r\n                        <label v-if=\"this.dataset.scopeCd == 'USER'\" for=\"category\" class=\"kn-material-input-label\"> {{ $t('common.category') }} </label>\r\n                        <label v-else for=\"category\" class=\"kn-material-input-label\"> {{ $t('common.category') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages\r\n                        :vComp=\"v$.dataset.catTypeVn\"\r\n                        :additionalTranslateParams=\"{\r\n                            fieldName: $t('managers.datasetManagement.scope')\r\n                        }\"\r\n                    />\r\n                </div>\r\n                <div class=\"p-field p-mt-1 p-col-12\">\r\n                    <span class=\"p-float-label kn-material-input\">\r\n                        <AutoComplete v-model=\"dataset.tags\" :suggestions=\"filteredTagsNames\" :multiple=\"true\" @complete=\"searchTag\" @keydown.enter=\"createTagChip\">\r\n                            <template #chip=\"slotProps\">\r\n                                {{ slotProps.value.name }}\r\n                            </template>\r\n                            <template #item=\"slotProps\">\r\n                                {{ slotProps.item.name }}\r\n                            </template>\r\n                        </AutoComplete>\r\n                        <label for=\"tags\" class=\"kn-material-input-label\">{{ $t('common.tags') }}</label>\r\n                    </span>\r\n                    <small id=\"username1-help\">{{ $t('managers.widgetGallery.tags.availableCharacters') }}</small>\r\n                </div>\r\n            </form>\r\n        </template>\r\n    </Card>\r\n    <Card class=\"p-m-2\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    {{ $t('managers.datasetManagement.oldVersions') }}\r\n                </template>\r\n                <template #end>\r\n                    <Button icon=\"fas fa-eraser\" class=\"p-button-text p-button-rounded p-button-plain\" :disabled=\"noDatasetVersions\" @click=\"deleteConfirm('deleteAll')\" />\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n        <template #content>\r\n            <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar\" v-if=\"loading\" data-test=\"versions-loading\" />\r\n            <DataTable v-if=\"!loading\" class=\"p-datatable-sm kn-table\" :value=\"selectedDatasetVersions\" :scrollable=\"true\" scrollHeight=\"400px\" :loading=\"loading\" dataKey=\"versNum\" responsiveLayout=\"stack\" breakpoint=\"960px\">\r\n                <template #empty>\r\n                    {{ $t('managers.datasetManagement.noVersions') }}\r\n                </template>\r\n                <Column field=\"userIn\" :header=\"$t('managers.datasetManagement.creationUser')\" :sortable=\"true\" />\r\n                <Column field=\"type\" :header=\"$t('importExport.gallery.column.type')\" :sortable=\"true\" />\r\n                <Column field=\"dateIn\" :header=\"$t('managers.mondrianSchemasManagement.headers.creationDate')\" dataType=\"date\" :sortable=\"true\">\r\n                    <template #body=\"{ data }\">\r\n                        {{ formatDate(data.dateIn) }}\r\n                    </template>\r\n                </Column>\r\n                <Column @rowClick=\"false\">\r\n                    <template #body=\"slotProps\">\r\n                        <Button v-if=\"slotProps.data.versNum !== 0\" icon=\"fas fa-retweet\" class=\"p-button-link\" @click=\"restoreVersionConfirm(slotProps.data)\" />\r\n                        <Button v-if=\"slotProps.data.versNum !== 0\" icon=\"pi pi-trash\" class=\"p-button-link\" @click=\"deleteConfirm('deleteOne', slotProps.data)\" />\r\n                    </template>\r\n                </Column>\r\n            </DataTable>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\nimport { AxiosResponse } from 'axios'\r\nimport useValidate from '@vuelidate/core'\r\nimport detailTabDescriptor from './DatasetManagementDetailCardDescriptor.json'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport Card from 'primevue/card'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport DataTable from 'primevue/datatable'\r\nimport Column from 'primevue/column'\r\nimport AutoComplete from 'primevue/autocomplete'\r\nimport { formatDateWithLocale } from '@/helpers/commons/localeHelper'\r\nimport mainStore from '../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    components: { Card, Dropdown, KnValidationMessages, DataTable, Column, AutoComplete },\r\n    props: {\r\n        scopeTypes: { type: Array as any, required: true },\r\n        categoryTypes: { type: Array as any, required: true },\r\n        selectedDataset: { type: Object as any },\r\n        selectedDatasetVersions: { type: Array as any },\r\n        availableTags: { type: Array as any },\r\n        loading: { type: Boolean }\r\n    },\r\n    computed: {\r\n        noDatasetVersions(): any {\r\n            if (this.selectedDatasetVersions.length > 0) {\r\n                return false\r\n            }\r\n            return true\r\n        }\r\n    },\r\n    emits: ['touched', 'reloadVersions', 'loadingOlderVersion', 'olderVersionLoaded'],\r\n    data() {\r\n        return {\r\n            detailTabDescriptor,\r\n            loadingVersion: false,\r\n            v$: useValidate() as any,\r\n            dataset: {} as any,\r\n            datasetVersions: [] as any,\r\n            availableTagsNames: [] as any,\r\n            selectedTagsNames: [] as any,\r\n            filteredTagsNames: null as any\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n            this.v$.dataset.label.$touch()\r\n            this.v$.dataset.name.$touch()\r\n        }\r\n    },\r\n    validations() {\r\n        const catTypeRequired = (value) => {\r\n            return this.dataset.scopeCd == 'USER' || value\r\n        }\r\n        const customValidators: ICustomValidatorMap = { 'cat-type-required': catTypeRequired }\r\n        const validationObject = { dataset: createValidations('dataset', detailTabDescriptor.validations.dataset, customValidators) }\r\n        return validationObject\r\n    },\r\n    methods: {\r\n        //#region ===================== Delete Versions Functionality ====================================================\r\n        deleteConfirm(deletetype, event) {\r\n            let msgDesc = ''\r\n            deletetype === 'deleteOne' ? (msgDesc = 'managers.datasetManagement.deleteOneVersionMsg') : (msgDesc = 'managers.datasetManagement.deleteAllVersionsMsg')\r\n            this.$confirm.require({\r\n                message: this.$t(msgDesc),\r\n                header: this.$t('common.uppercaseDelete'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => {\r\n                    deletetype === 'deleteOne' ? this.deleteSelectedVersion(event) : this.deleteAllVersions()\r\n                }\r\n            })\r\n        },\r\n        async deleteSelectedVersion(event) {\r\n            return this.$http\r\n                .delete(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets/${event.dsId}/version/${event.versNum}`)\r\n                .then(() => {\r\n                    this.store.setInfo({ title: this.$t('common.toast.deleteTitle'), msg: this.$t('common.toast.deleteSuccess') })\r\n                    this.$emit('reloadVersions')\r\n                })\r\n                .catch((error) => this.store.setError({ title: this.$t('common.error.generic'), msg: error.message }))\r\n        },\r\n        async deleteAllVersions() {\r\n            return this.$http\r\n                .delete(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets/${this.selectedDataset.id}/allversions/`)\r\n                .then(() => {\r\n                    this.store.setInfo({ title: this.$t('common.toast.deleteTitle'), msg: this.$t('managers.datasetManagement.deleteAllVersionsSuccess') })\r\n                    this.$emit('reloadVersions')\r\n                })\r\n                .catch((error) => this.store.setError({ title: this.$t('common.error.generic'), msg: error.message }))\r\n        },\r\n        //#endregion ================================================================================================\r\n\r\n        //#region ===================== Restore Versions Functionality ====================================================\r\n        restoreVersionConfirm(event) {\r\n            this.$confirm.require({\r\n                icon: 'pi pi-exclamation-triangle',\r\n                message: this.$t('managers.datasetManagement.restoreMsg'),\r\n                header: this.$t('managers.datasetManagement.restoreTitle'),\r\n                accept: () => this.restoreVersion(event)\r\n            })\r\n        },\r\n        async restoreVersion(dsToRestore) {\r\n            this.$emit('loadingOlderVersion')\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets/${this.dataset.id}/restore?versionId=${dsToRestore.versNum}`).then((response: AxiosResponse<any>) => {\r\n                this.dataset.dsTypeCd.toLowerCase() == 'file' ? this.refactorFileDatasetConfig(response.data[0]) : ''\r\n                this.$emit('olderVersionLoaded', response.data[0])\r\n            })\r\n            this.loadingVersion = false\r\n        },\r\n        refactorFileDatasetConfig(item) {\r\n            this.dataset.fileType = item != undefined ? item.fileType : ''\r\n            this.dataset.fileName = item != undefined ? item.fileName : ''\r\n            this.dataset.csvEncoding = item != undefined ? item.csvEncoding : 'UTF-8'\r\n            this.dataset.csvDelimiter = item != undefined ? item.csvDelimiter : ','\r\n            this.dataset.csvQuote = item != undefined ? item.csvQuote : '\"'\r\n            this.dataset.dateFormat = item != undefined && item.dateFormat != undefined ? item.dateFormat : 'dd/MM/yyyy'\r\n            this.dataset.timestampFormat = item != undefined && item.timestampFormat != undefined ? item.timestampFormat : 'dd/MM/yyyy HH:mm:ss'\r\n\r\n            if (item != undefined) {\r\n                if (item.limitRows != null && item.limitRows != '') {\r\n                    this.dataset.limitRows = Number(item.limitRows)\r\n                } else {\r\n                    this.dataset.limitRows = item.limitRows\r\n                }\r\n            } else {\r\n                this.dataset.limitRows = null\r\n            }\r\n\r\n            this.dataset.catTypeVn = item != undefined ? item.catTypeVn : ''\r\n\r\n            if (item != undefined) {\r\n                this.dataset.catTypeId = Number(item.catTypeId)\r\n                this.dataset.xslSheetNumber = Number(1)\r\n                this.dataset.skipRows = Number(item.skipRows)\r\n                this.dataset.limitRows = Number(null)\r\n            } else {\r\n                this.dataset.catTypeId = null\r\n                this.dataset.xslSheetNumber = null\r\n                this.dataset.skipRows = null\r\n                this.dataset.limitRows = null\r\n            }\r\n\r\n            this.dataset.id = item != undefined ? item.id : ''\r\n            this.dataset.label = item != undefined ? item.label : ''\r\n            this.dataset.name = item != undefined ? item.name : ''\r\n            this.dataset.description = item != undefined ? item.description : ''\r\n            this.dataset.meta = item != undefined ? item.meta : []\r\n\r\n            this.dataset.fileUploaded = false\r\n        },\r\n        //#endregion ================================================================================================\r\n\r\n        //#region ===================== Tags Functionality ====================================================\r\n        searchTag(event) {\r\n            setTimeout(() => {\r\n                if (!event.query.trim().length) {\r\n                    this.filteredTagsNames = [...this.availableTags]\r\n                } else {\r\n                    this.filteredTagsNames = this.availableTags.filter((tag) => {\r\n                        return tag.name.toLowerCase().startsWith(event.query.toLowerCase())\r\n                    })\r\n                }\r\n            }, 250)\r\n        },\r\n        createTagChip(event: any) {\r\n            if (event.target.value) {\r\n                const tempWord = this.availableTags.find((el) => el.name == event.target.value)\r\n                if (!tempWord) {\r\n                    this.dataset.tags.push(event.target.value)\r\n                    this.buildTagObject()\r\n                    event.target.value = ''\r\n                }\r\n            }\r\n        },\r\n        buildTagObject() {\r\n            this.dataset.tags = this.dataset.tags.map((tag) => {\r\n                if (typeof tag !== 'string') {\r\n                    return tag\r\n                } else {\r\n                    return { name: tag }\r\n                }\r\n            })\r\n        },\r\n        //#endregion ================================================================================================\r\n\r\n        formatDate(date) {\r\n            return formatDateWithLocale(date, { dateStyle: 'short', timeStyle: 'short' })\r\n        },\r\n        updateIdFromCd(optionsArray, fieldToUpdate, updatedField) {\r\n            const selectedField = optionsArray.find((option) => option.VALUE_CD === updatedField)\r\n            selectedField ? (this.dataset[fieldToUpdate] = selectedField.VALUE_ID) : ''\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-mt-2 p-mx-2\">\r\n        <template #start>\r\n            <Button v-if=\"!expandParamsCard\" icon=\"fas fa-chevron-right\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color:white\" @click=\"expandParamsCard = true\" />\r\n            <Button v-else icon=\"fas fa-chevron-down\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color:white\" @click=\"expandParamsCard = false\" />\r\n            {{ $t('managers.datasetManagement.params') }}\r\n        </template>\r\n        <template #end>\r\n            <Button icon=\"fas fa-plus\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"addNewParam\" />\r\n            <Button icon=\"fas fa-eraser\" class=\"p-button-text p-button-rounded p-button-plain\" :disabled=\"disableDeleteAll\" @click=\"removeAllParams\" />\r\n        </template>\r\n    </Toolbar>\r\n    <Card v-show=\"expandParamsCard\" class=\"p-mx-2\">\r\n        <template #content>\r\n            <DataTable class=\"p-datatable-sm kn-table\" editMode=\"cell\" :value=\"dataset.pars\" :scrollable=\"true\" scrollHeight=\"250px\" dataKey=\"versNum\" responsiveLayout=\"stack\" breakpoint=\"960px\" @cell-edit-complete=\"onCellEditComplete\">\r\n                <template #empty>\r\n                    {{ $t('managers.datasetManagement.tableEmpty') }}\r\n                </template>\r\n                <Column field=\"name\" :header=\"$t('kpi.alert.name')\" :sortable=\"true\">\r\n                    <template #editor=\"{data}\">\r\n                        <InputText class=\"kn-material-input\" :style=\"tableDescriptor.style.columnStyle\" v-model=\"data.name\" />\r\n                    </template>\r\n                </Column>\r\n                <Column field=\"type\" :header=\"$t('kpi.alert.type')\" :sortable=\"true\">\r\n                    <template #editor=\"{data}\">\r\n                        <Dropdown id=\"scope\" class=\"kn-material-input\" :style=\"tableDescriptor.style.columnStyle\" :options=\"datasetParamTypes\" optionLabel=\"value\" optionValue=\"value\" v-model=\"data.type\" />\r\n                    </template>\r\n                </Column>\r\n                <Column field=\"defaultValue\" :header=\"$t('managers.driversManagement.useModes.defaultValue')\" :sortable=\"true\">\r\n                    <template #editor=\"{data}\">\r\n                        <InputText v-if=\"data.multiValue === false\" class=\"kn-material-input\" :style=\"tableDescriptor.style.columnStyle\" v-model=\"data.defaultValue\" />\r\n                        <div v-else class=\"p-d-flex p-flex-column chipsContainer\">\r\n                            <Chips class=\"kn-border-none\"  v-model=\"data.defaultValue\"/>\r\n                            <small id=\"chips-help\">{{$t('common.chipsHint')}}</small>\r\n                        </div>\r\n                        \r\n                    </template>\r\n                    <template #body=\"{data}\">\r\n                        <InputText v-if=\"data.multiValue === false\" class=\"kn-material-input\" :style=\"tableDescriptor.style.columnStyle\" v-model=\"data.defaultValue\" />\r\n                        <div v-else class=\"p-d-flex p-flex-column chipsContainer\">\r\n                            <Chips class=\"kn-border-none\"  v-model=\"data.defaultValue\"/>\r\n                            <small id=\"chips-help\">{{$t('common.chipsHint')}}</small>\r\n                        </div>\r\n                    </template>\r\n                </Column>\r\n                <Column field=\"multiValue\" :header=\"$t('managers.profileAttributesManagement.form.multiValue')\" :sortable=\"true\">\r\n                    <template #body=\"{data}\">\r\n                        <Checkbox v-model=\"data.multiValue\" :binary=\"true\" @change=\"checkboxChange(data)\"/>\r\n                    </template>\r\n                    <template #editor=\"{data}\">\r\n                        <Checkbox v-model=\"data.multiValue\" :binary=\"true\" @change=\"checkboxChange(data)\"/>\r\n                    </template>\r\n                </Column>\r\n                <Column @rowClick=\"false\">\r\n                    <template #body=\"slotProps\">\r\n                        <Button icon=\"pi pi-trash\" class=\"p-button-link\" @click=\"deleteParam(slotProps)\" />\r\n                    </template>\r\n                </Column>\r\n            </DataTable>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, nextTick } from 'vue'\r\nimport tableDescriptor from './DatasetManagementTablesDescriptor.json'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Card from 'primevue/card'\r\nimport DataTable from 'primevue/datatable'\r\nimport Column from 'primevue/column'\r\nimport Checkbox from 'primevue/checkbox'\r\nimport Chips from 'primevue/chips'\r\n\r\nexport default defineComponent({\r\n    components: { Card, Chips, Dropdown, DataTable, Column, Checkbox },\r\n    props: {\r\n        selectedDataset: { type: Object as any }\r\n    },\r\n    computed: {\r\n        disableDeleteAll() {\r\n            if (!this.dataset.pars || this.dataset['pars'].length == 0) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    },\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            tableDescriptor,\r\n            dataset: {} as any,\r\n            expandParamsCard: true,\r\n            datasetParamTypes: tableDescriptor.datasetParamTypes\r\n        }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n        }\r\n    },\r\n    methods: {\r\n        addNewParam() {\r\n            if (this.dataset.isPersisted) {\r\n                this.$confirm.require({\r\n                    message: this.$t('managers.datasetManagement.disablePersistenceMsg'),\r\n                    header: this.$t('managers.datasetManagement.disablePersistence'),\r\n                    icon: 'pi pi-exclamation-triangle',\r\n                    accept: () => {\r\n                        this.dataset.isPersisted = false\r\n                        this.dataset.persistTableName = null\r\n                        this.insertParameter()\r\n                    }\r\n                })\r\n            } else {\r\n                this.insertParameter()\r\n            }\r\n        },\r\n        checkboxChange(data){\r\n            if(data.multiValue){\r\n                if(data.defaultValue) data.defaultValue = [data.defaultValue]\r\n            }else if(data.defaultValue) data.defaultValue = data.defaultValue.join('')  \r\n            this.$forceUpdate()       \r\n        },\r\n        insertParameter() {\r\n            this.dataset.pars ? '' : (this.dataset.pars = [])\r\n            const newParam = { ...tableDescriptor.newParam }\r\n            this.dataset.pars.push(newParam)\r\n        },\r\n        deleteParam(removedParam) {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.uppercaseDelete'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => (this.dataset.pars = this.dataset.pars.filter((paramToRemove) => removedParam.data.name !== paramToRemove.name))\r\n            })\r\n        },\r\n        removeAllParams() {\r\n            this.$confirm.require({\r\n                message: this.$t('managers.datasetManagement.deleteAllParamsMsg'),\r\n                header: this.$t('managers.datasetManagement.deleteAllParams'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => (this.dataset.pars = [])\r\n            })\r\n        },\r\n        onCellEditComplete(event) {\r\n            this.dataset.pars[event.index] = event.newData\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n    .chipsContainer {\r\n        width: 100%;\r\n        &:deep(.p-chips) {\r\n            width: 100%;\r\n        .p-chips-multiple-container{\r\n            width: 100%;\r\n        }\r\n    }\r\n    }\r\n    \r\n\r\n</style>","<template>\r\n    <Card class=\"p-m-2\">\r\n        <template #content>\r\n            <div class=\"p-d-flex\">\r\n                <div class=\"p-field\" :style=\"fileDescriptor.style.maxwidth\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"fileName\"\r\n                            class=\"kn-material-input\"\r\n                            :style=\"fileDescriptor.style.maxwidth\"\r\n                            v-model.trim=\"v$.dataset.fileName.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.fileName.$invalid && v$.dataset.fileName.$dirty\r\n                            }\"\r\n                            :disabled=\"true\"\r\n                            @blur=\"v$.dataset.fileName.$touch()\"\r\n                            @change=\"$emit('touched')\"\r\n                        />\r\n                        <label for=\"fileName\" class=\"kn-material-input-label\"> {{ $t('downloadsDialog.columns.fileName') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.fileName\" :additionalTranslateParams=\"{ fieldName: $t('downloadsDialog.columns.fileName') }\" />\r\n                </div>\r\n                <Button icon=\"fas fa-upload\" class=\"p-button-text p-button-plain p-ml-2\" @click=\"setUploadType\" />\r\n                <Button icon=\"fas fa-download\" class=\"p-button-text y p-button-plain p-ml-2\" @click=\"downloadDatasetFile\" />\r\n                <KnInputFile v-if=\"!uploading\" :changeFunction=\"uploadDatasetFile\" accept=\".csv, .xls, .xlsx\" :triggerInput=\"triggerUpload\" />\r\n            </div>\r\n\r\n            <div v-if=\"dataset.fileType && dataset.fileType == 'CSV'\" class=\"p-fluid p-formgrid p-grid p-mt-3\">\r\n                <span class=\"p-field p-float-label p-col\">\r\n                    <Dropdown id=\"csvDelimiter\" class=\"kn-material-input\" :options=\"fileDescriptor.csvDelimiterCharacterTypes\" optionLabel=\"name\" optionValue=\"value\" v-model=\"dataset.csvDelimiter\" @change=\"getPreviewData(false)\" />\r\n                    <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanCsvDelimiter') }} </label>\r\n                </span>\r\n                <span class=\"p-field p-float-label p-col\">\r\n                    <Dropdown id=\"csvQuote\" class=\"kn-material-input\" :options=\"fileDescriptor.csvQuoteCharacterTypes\" optionLabel=\"name\" optionValue=\"value\" v-model=\"dataset.csvQuote\" @change=\"getPreviewData(false)\" />\r\n                    <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanCsvQuote') }} </label>\r\n                </span>\r\n                <span class=\"p-field p-float-label p-col\">\r\n                    <Dropdown id=\"csvEncoding\" class=\"kn-material-input\" :options=\"fileDescriptor.csvEncodingTypes\" optionLabel=\"name\" optionValue=\"value\" v-model=\"dataset.csvEncoding\" @change=\"getPreviewData(false)\" />\r\n                    <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanCsvEncoding') }} </label>\r\n                </span>\r\n                <span class=\"p-field p-float-label p-col\">\r\n                    <Dropdown id=\"dateFormat\" class=\"kn-material-input\" :options=\"fileDescriptor.dateFormatTypes\" optionLabel=\"name\" optionValue=\"value\" v-model=\"dataset.dateFormat\" @change=\"getPreviewData(false)\" />\r\n                    <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanDateFormat') }} </label>\r\n                </span>\r\n                <span class=\"p-field p-float-label p-col\">\r\n                    <Dropdown id=\"timestampFormat\" class=\"kn-material-input\" :options=\"fileDescriptor.timestampFormatTypes\" optionLabel=\"name\" optionValue=\"value\" v-model=\"dataset.timestampFormat\" @change=\"getPreviewData(false)\" />\r\n                    <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.timestampFormat') }} </label>\r\n                </span>\r\n            </div>\r\n            <div v-if=\"dataset.fileType == 'XLS' || dataset.fileType == 'XLSX'\" class=\"p-fluid p-formgrid p-grid p-mt-3\">\r\n                <div class=\"p-field p-col\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"skipRows\" class=\"kn-material-input\" type=\"number\" v-model.trim=\"dataset.skipRows\" @change=\"getPreviewData(false)\" />\r\n                        <label for=\"skipRows\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanSkipRows') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"limitRows\" class=\"kn-material-input\" type=\"number\" v-model.trim=\"dataset.limitRows\" @change=\"getPreviewData(false)\" />\r\n                        <label for=\"limitRows\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanLimitRows') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"sheetnumber\" class=\"kn-material-input\" type=\"number\" v-model.trim=\"dataset.xslSheetNumber\" @change=\"getPreviewData(false)\" />\r\n                        <label for=\"sheetnumber\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanXslSheetNumber') }} </label>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </Card>\r\n\r\n    <div id=\"preview-container\" v-if=\"rows.length > 0\">\r\n        <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-mt-3\">\r\n            <template #start>\r\n                <Button v-if=\"!expandTableCard\" icon=\"fas fa-chevron-right\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color: white\" @click=\"expandTableCard = true\" />\r\n                <Button v-else icon=\"fas fa-chevron-down\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color: white\" @click=\"expandTableCard = false\" />\r\n                {{ $t('managers.lovsManagement.preview') }}\r\n            </template>\r\n            <template #end>\r\n                <Button icon=\"pi pi-refresh\" class=\"p-button-text p-button-rounded p-button-plain p-ml-auto\" v-tooltip.left=\"$t('common.refresh')\" @click=\"getPreviewData\"></Button>\r\n            </template>\r\n        </Toolbar>\r\n        <Card class=\"p-m-2\" v-show=\"expandTableCard\">\r\n            <template #content>\r\n                <DataTable :value=\"rows\" class=\"p-datatable-sm kn-table\" :loading=\"loading\" responsiveLayout=\"scroll\" :scrollable=\"true\" scrollDirection=\"both\" scrollHeight=\"800px\" stripedRows rowHover style=\"width: 70vw\">\r\n                    <Column v-for=\"col of columns\" :field=\"col.name\" :header=\"col.header\" :key=\"col.dataIndex\" class=\"kn-truncated\" style=\"width: 250px\" />\r\n                </DataTable>\r\n            </template>\r\n        </Card>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { AxiosResponse } from 'axios'\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\nimport { downloadDirect } from '@/helpers/commons/fileHelper'\r\nimport useValidate from '@vuelidate/core'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport fileDescriptor from './DatasetManagementFileDataset.json'\r\nimport Card from 'primevue/card'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport KnInputFile from '@/components/UI/KnInputFile.vue'\r\nimport DataTable from 'primevue/datatable'\r\nimport Column from 'primevue/column'\r\nimport mainStore from '../../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    components: { Card, KnValidationMessages, KnInputFile, Dropdown, DataTable, Column },\r\n    props: { selectedDataset: { type: Object as any }, dataSources: { type: Array as any } },\r\n    emits: ['touched', 'fileUploaded', 'checkFormulaForParams'],\r\n    data() {\r\n        return {\r\n            v$: useValidate() as any,\r\n            fileDescriptor,\r\n            dataset: {} as any,\r\n            triggerUpload: false,\r\n            uploading: false,\r\n            loading: false,\r\n            expandTableCard: true,\r\n            columns: [] as any,\r\n            rows: [] as any\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n        this.dataset.id ? this.getPreviewData() : ''\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n            this.dataset.id ? this.getPreviewData() : ''\r\n        }\r\n    },\r\n    validations() {\r\n        const fileFieldsRequired = (value) => {\r\n            return this.dataset.dsTypeCd != 'File' || value\r\n        }\r\n        const customValidators: ICustomValidatorMap = { 'file-fields-required': fileFieldsRequired }\r\n        const validationObject = { dataset: createValidations('dataset', fileDescriptor.validations.dataset, customValidators) }\r\n        return validationObject\r\n    },\r\n    methods: {\r\n        setUploadType() {\r\n            this.triggerUpload = false\r\n            setTimeout(() => (this.triggerUpload = true), 200)\r\n        },\r\n        uploadDatasetFile(event) {\r\n            this.uploading = true\r\n            let uploadedFile = event.target.files[0]\r\n            if (uploadedFile.name.includes(this.dataset.fileName)) {\r\n                this.store.setError({ title: this.$t('common.toast.errorTitle'), msg: this.$t('common.error.sameFileName') })\r\n                this.triggerUpload = false\r\n            } else {\r\n                this.startUpload(uploadedFile)\r\n            }\r\n            this.triggerUpload = false\r\n            setTimeout(() => (this.uploading = false), 200)\r\n        },\r\n        async startUpload(uploadedFile) {\r\n            var formData = new FormData()\r\n            formData.append('file', uploadedFile)\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `selfservicedatasetupload/fileupload`, formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundaryFYwjkDOpT85ZFN3L'\r\n                    }\r\n                })\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.store.setInfo({\r\n                        title: this.$t('common.uploading'),\r\n                        msg: this.$t('importExport.import.successfullyCompleted')\r\n                    })\r\n                    this.dataset.fileType = response.data.fileType\r\n                    this.dataset.fileName = response.data.fileName\r\n                    this.$emit('fileUploaded')\r\n                    this.resetFields()\r\n                    this.getPreviewData()\r\n                })\r\n                .catch()\r\n                .finally(() => {\r\n                    this.triggerUpload = false\r\n                })\r\n        },\r\n        resetFields() {\r\n            this.dataset.csvEncoding = 'UTF-8'\r\n            this.dataset.csvDelimiter = ','\r\n            this.dataset.dateFormat = 'dd/MM/yyyy'\r\n            this.dataset.timestampFormat = 'dd/MM/yyyy HH:mm:ss'\r\n            this.dataset.csvQuote = '\"'\r\n            this.dataset.skipRows = 0\r\n            this.dataset.limitRows = null\r\n            this.dataset.xslSheetNumber = 1\r\n\r\n            if (this.dataset.fileType == 'XLS' || this.dataset.fileType == 'XLSX') {\r\n                this.dataset.limitRows = ''\r\n                this.dataset.csvDelimiter = ''\r\n                this.dataset.dateFormat = ''\r\n                this.dataset.timestampFormat = ''\r\n                this.dataset.csvQuote = ''\r\n            }\r\n        },\r\n\r\n        async downloadDatasetFile() {\r\n            var encodedLabel = encodeURI(this.dataset.label)\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/datasets/download/file?dsLabel=${encodedLabel}&type=${this.dataset.fileType}`, {\r\n                    headers: {\r\n                        Accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'\r\n                    }\r\n                })\r\n                .then(\r\n                    (response: AxiosResponse<any>) => {\r\n                        if (response.data.errors) {\r\n                            this.store.setError({ title: this.$t('common.error.downloading'), msg: this.$t('common.error.errorCreatingPackage') })\r\n                        } else {\r\n                            this.store.setInfo({ title: this.$t('common.toast.success') })\r\n                            if (response.headers) {\r\n                                downloadDirect(response.data, this.createCompleteFileName(response), response.headers['content-type'])\r\n                            }\r\n                        }\r\n                    },\r\n                    (error) =>\r\n                        this.store.setError({\r\n                            title: this.$t('common.error.downloading'),\r\n                            msg: this.$t(error)\r\n                        })\r\n                )\r\n        },\r\n        createCompleteFileName(response) {\r\n            var contentDisposition = response.headers['content-disposition']\r\n            var fileAndExtension = contentDisposition.match(/filename[^;\\n=]*=((['\"]).*?\\2|[^;\\n]*)/i)[1]\r\n            var completeFileName = fileAndExtension.replaceAll('\"', '')\r\n            return completeFileName\r\n        },\r\n        async getPreviewData(metadata: Boolean = true) {\r\n            this.loading = true\r\n            this.dataset.limit = 10\r\n            if (!metadata) delete this.dataset.meta\r\n\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets/preview`, this.dataset, {\r\n                    headers: {\r\n                        Accept: 'application/json, text/plain, */*',\r\n                        'Content-Type': 'application/json;charset=UTF-8',\r\n                        'X-Disable-Errors': 'true'\r\n                    }\r\n                })\r\n                .then((response: AxiosResponse<any>) => {\r\n                    let previewColumns = response.data.metaData.fields\r\n                    previewColumns.forEach((el: any) => {\r\n                        typeof el != 'object' ? '' : this.columns.push(el)\r\n                    })\r\n\r\n                    this.rows = response.data.rows\r\n                })\r\n                .catch()\r\n                .finally(() => (this.loading = false))\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Dialog id=\"query-help-dialog\" class=\"p-fluid kn-dialog--toolbar--primary\" :visible=\"visible\" :modal=\"true\" :closable=\"false\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--primary p-p-0 p-m-0 p-col-12\">\r\n                <template #start> {{ $t('common.help') }} </template>\r\n            </Toolbar>\r\n        </template>\r\n\r\n        <div :style=\"queryDescriptor.style.dialog\" v-html=\"$t('managers.datasetManagement.queryHelpDialog.paragraph1')\" />\r\n        <div :style=\"queryDescriptor.style.dialog\" v-html=\"$t('managers.datasetManagement.queryHelpDialog.paragraph2')\" />\r\n        <div :style=\"queryDescriptor.style.dialog\" v-html=\"$t('managers.datasetManagement.queryHelpDialog.list1')\" />\r\n        <div :style=\"queryDescriptor.style.dialog\" v-html=\"$t('managers.datasetManagement.queryHelpDialog.list2')\" />\r\n        <div :style=\"queryDescriptor.style.dialog\" v-html=\"$t('managers.datasetManagement.queryHelpDialog.list3')\" />\r\n        <div :style=\"queryDescriptor.style.dialog\" v-html=\"$t('managers.datasetManagement.queryHelpDialog.list4')\" />\r\n\r\n        <template #footer>\r\n            <div class=\"p-d-flex p-flex-row p-jc-end\">\r\n                <Button class=\"kn-button kn-button--primary\" @click=\"$emit('close')\"> {{ $t('common.close') }}</Button>\r\n            </div>\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { defineComponent } from 'vue'\r\n    import Dialog from 'primevue/dialog'\r\n    import queryDescriptor from './DatasetManagementQueryDataset.json'\r\n\r\n    export default defineComponent({\r\n        components: { Dialog },\r\n        props: {},\r\n        emits: ['close'],\r\n        data() {\r\n            return {\r\n                queryDescriptor\r\n            }\r\n        }\r\n    })\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2\">\r\n        <template #content>\r\n            <div class=\"p-field\">\r\n                <span class=\"p-float-label\">\r\n                    <Dropdown\r\n                        id=\"dataSource\"\r\n                        class=\"kn-material-input\"\r\n                        :style=\"queryDescriptor.style.maxWidth\"\r\n                        :options=\"dataSources\"\r\n                        optionLabel=\"label\"\r\n                        optionValue=\"label\"\r\n                        v-model=\"v$.dataset.dataSource.$model\"\r\n                        :class=\"{\r\n                            'p-invalid': v$.dataset.dataSource.$invalid && v$.dataset.dataSource.$dirty\r\n                        }\"\r\n                        @before-show=\"v$.dataset.dataSource.$touch()\"\r\n                    />\r\n                    <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.businessModelManager.dataSource') }} * </label>\r\n                </span>\r\n                <KnValidationMessages\r\n                    :vComp=\"v$.dataset.dataSource\"\r\n                    :additionalTranslateParams=\"{\r\n                        fieldName: $t('managers.businessModelManager.dataSource')\r\n                    }\"\r\n                />\r\n            </div>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    <Button v-if=\"!expandQueryCard\" icon=\"fas fa-chevron-right\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color: white\" @click=\"expandQueryCard = true\" />\r\n                    <Button v-else icon=\"fas fa-chevron-down\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color: white\" @click=\"expandQueryCard = false\" />\r\n                    {{ $t('managers.datasetManagement.editQuery') }}\r\n                </template>\r\n                <template #end>\r\n                    <Button icon=\"fas fa-info-circle\" class=\"p-button-text p-button-rounded p-button-plain p-col-1\" @click=\"helpDialogVisible = true\" />\r\n                </template>\r\n            </Toolbar>\r\n            <Card v-show=\"expandQueryCard\">\r\n                <template #content>\r\n                    <VCodeMirror ref=\"codeMirror\" v-model:value=\"dataset.query\" :autoHeight=\"true\" :options=\"codemirrorOptions\" @keyup=\"$emit('queryEdited')\" />\r\n                </template>\r\n            </Card>\r\n\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-mt-2\">\r\n                <template #start>\r\n                    <Button v-if=\"!expandScriptCard\" icon=\"fas fa-chevron-right\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color: white\" @click=\"expandScriptCard = true\" />\r\n                    <Button v-else icon=\"fas fa-chevron-down\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color: white\" @click=\"expandScriptCard = false\" />\r\n                    {{ $t('managers.datasetManagement.editScript') }}\r\n                </template>\r\n            </Toolbar>\r\n            <Card v-show=\"expandScriptCard\">\r\n                <template #content>\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown id=\"queryScriptLanguage\" class=\"kn-material-input\" :style=\"queryDescriptor.style.maxWidth\" :options=\"scriptTypes\" optionLabel=\"VALUE_NM\" optionValue=\"VALUE_CD\" v-model=\"dataset.queryScriptLanguage\" @change=\"onLanguageChanged($event.value)\" />\r\n                        <label for=\"queryScriptLanguage\" class=\"kn-material-input-label\"> {{ $t('managers.lovsManagement.placeholderScript') }} </label>\r\n                    </span>\r\n                    <VCodeMirror class=\"p-mt-2\" ref=\"codeMirrorScript\" v-model:value=\"dataset.queryScript\" :autoHeight=\"true\" :options=\"scriptOptions\" @keyup=\"$emit('touched')\" />\r\n                </template>\r\n            </Card>\r\n        </template>\r\n    </Card>\r\n\r\n    <HelpDialog :visible=\"helpDialogVisible\" @close=\"helpDialogVisible = false\" />\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\nimport VCodeMirror from 'codemirror-editor-vue3'\r\nimport useValidate from '@vuelidate/core'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport queryDescriptor from './DatasetManagementQueryDataset.json'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Card from 'primevue/card'\r\nimport HelpDialog from './DatasetManagementQueryHelpDialog.vue'\r\n\r\nexport default defineComponent({\r\n    components: { Card, Dropdown, KnValidationMessages, VCodeMirror, HelpDialog },\r\n    props: { selectedDataset: { type: Object as any }, dataSources: { type: Array as any }, scriptTypes: { type: Array as any }, activeTab: { type: Number as any } },\r\n    emits: ['touched', 'queryEdited'],\r\n    data() {\r\n        return {\r\n            queryDescriptor,\r\n            dataset: {} as any,\r\n            codeMirror: {} as any,\r\n            codeMirrorScript: {} as any,\r\n            v$: useValidate() as any,\r\n            expandQueryCard: true,\r\n            expandScriptCard: true,\r\n            helpDialogVisible: false,\r\n            codemirrorOptions: {\r\n                mode: 'text/x-sql',\r\n                lineWrapping: true,\r\n                indentWithTabs: true,\r\n                smartIndent: true,\r\n                matchBrackets: true,\r\n                theme: 'eclipse',\r\n                lineNumbers: true\r\n            },\r\n            scriptOptions: {\r\n                mode: '',\r\n                indentWithTabs: true,\r\n                smartIndent: true,\r\n                lineWrapping: true,\r\n                matchBrackets: true,\r\n                autofocus: true,\r\n                theme: 'eclipse',\r\n                lineNumbers: true\r\n            }\r\n        }\r\n    },\r\n    created() {\r\n        const interval = setInterval(() => {\r\n            if (!this.$refs.codeMirror) return\r\n            this.codeMirror = (this.$refs.codeMirror as any).cminstance as any\r\n            if (!this.$refs.codeMirrorScript) return\r\n            this.codeMirrorScript = (this.$refs.codeMirrorScript as any).cminstance as any\r\n\r\n            this.loadDataset()\r\n            this.loadScriptMode()\r\n\r\n            clearInterval(interval)\r\n        }, 200)\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.loadDataset()\r\n            this.loadScriptMode()\r\n        },\r\n        activeTab() {\r\n            if (this.activeTab === 1 && this.codeMirror && this.codeMirrorScript) {\r\n                setTimeout(() => {\r\n                    this.codeMirror.refresh()\r\n                    this.codeMirrorScript.refresh()\r\n                }, 0)\r\n            }\r\n        }\r\n    },\r\n    validations() {\r\n        const queryFieldsRequired = (value) => {\r\n            return this.dataset.dsTypeCd != 'Query' || value\r\n        }\r\n        const customValidators: ICustomValidatorMap = { 'query-fields-required': queryFieldsRequired }\r\n        const validationObject = { dataset: createValidations('dataset', queryDescriptor.validations.dataset, customValidators) }\r\n        return validationObject\r\n    },\r\n    methods: {\r\n        loadDataset() {\r\n            this.dataset = this.selectedDataset\r\n            this.dataset.query ? '' : (this.dataset.query = '')\r\n            this.dataset.queryScript ? '' : (this.dataset.queryScript = '')\r\n        },\r\n        loadScriptMode() {\r\n            if (this.dataset.queryScriptLanguage) {\r\n                this.scriptOptions.mode = this.dataset.queryScriptLanguage === 'ECMAScript' ? 'text/javascript' : 'text/x-groovy'\r\n                this.codeMirrorScript.setOption('mode', this.dataset.queryScriptLanguage === 'ECMAScript' ? 'text/javascript' : 'text/x-groovy')\r\n            }\r\n        },\r\n        onLanguageChanged(value: string) {\r\n            const scriptMode = value === 'ECMAScript' ? 'text/javascript' : 'text/x-groovy'\r\n            this.codeMirrorScript.setOption('mode', scriptMode)\r\n            this.$emit('touched')\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2\">\r\n        <template #content>\r\n            <div class=\"p-field\">\r\n                <span class=\"p-float-label\">\r\n                    <InputText\r\n                        id=\"jClassName\"\r\n                        class=\"kn-material-input\"\r\n                        type=\"text\"\r\n                        :style=\"javaDatasetDescriptor.style.maxWidth\"\r\n                        v-model.trim=\"v$.dataset.jClassName.$model\"\r\n                        :class=\"{\r\n                            'p-invalid': v$.dataset.jClassName.$invalid && v$.dataset.jClassName.$dirty\r\n                        }\"\r\n                        @blur=\"v$.dataset.jClassName.$touch()\"\r\n                        @change=\"$emit('touched')\"\r\n                    />\r\n                    <label for=\"jClassName\" class=\"kn-material-input-label\"> {{ $t('managers.lovsManagement.javaClassName') }} * </label>\r\n                </span>\r\n                <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.jClassName\" :additionalTranslateParams=\"{ fieldName: $t('managers.lovsManagement.javaClassName') }\" />\r\n            </div>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\nimport useValidate from '@vuelidate/core'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport javaDatasetDescriptor from './DatasetManagementJavaDatasetDescriptor.json'\r\nimport Card from 'primevue/card'\r\nimport mainStore from '../../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    components: { Card, KnValidationMessages },\r\n    props: { selectedDataset: { type: Object as any } },\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            dataset: {} as any,\r\n            javaDatasetDescriptor,\r\n            v$: useValidate() as any\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n        }\r\n    },\r\n    validations() {\r\n        const javaClassFieldRequired = (value) => {\r\n            return this.dataset.dsTypeCd != 'Java Class' || value\r\n        }\r\n        const customValidators: ICustomValidatorMap = { 'java-class-field-required': javaClassFieldRequired }\r\n        const validationObject = { dataset: createValidations('dataset', javaDatasetDescriptor.validations.dataset, customValidators) }\r\n        return validationObject\r\n    },\r\n    methods: {\r\n        changeTypeWarning() {\r\n            this.store.setInfo({ title: this.$t('documentExecution.registry.warning'), msg: this.$t('managers.datasetManagement.changeTypeMsg') })\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2\">\r\n        <template #content>\r\n            <span class=\"p-float-label\">\r\n                <div class=\"p-field\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown\r\n                            id=\"scriptLanguage\"\r\n                            class=\"kn-material-input\"\r\n                            :style=\"queryDescriptor.style.maxWidth\"\r\n                            :options=\"scriptTypes\"\r\n                            optionLabel=\"VALUE_NM\"\r\n                            optionValue=\"VALUE_CD\"\r\n                            v-model=\"v$.dataset.scriptLanguage.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.scriptLanguage.$invalid && v$.dataset.scriptLanguage.$dirty\r\n                            }\"\r\n                            @before-show=\"v$.dataset.scriptLanguage.$touch()\"\r\n                            @change=\"onLanguageChanged($event.value)\"\r\n                        />\r\n                        <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.lovsManagement.language') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages\r\n                        :vComp=\"v$.dataset.scriptLanguage\"\r\n                        :additionalTranslateParams=\"{\r\n                            fieldName: $t('managers.lovsManagement.language')\r\n                        }\"\r\n                    />\r\n                </div>\r\n            </span>\r\n            <VCodeMirror class=\"p-mt-2\" ref=\"codeMirrorScriptType\" v-model:value=\"dataset.script\" :autoHeight=\"true\" :options=\"scriptOptions\" @keyup=\"$emit('touched')\" />\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\nimport VCodeMirror from 'codemirror-editor-vue3'\r\nimport useValidate from '@vuelidate/core'\r\nimport queryDescriptor from './DatasetManagementScriptDataset.json'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Card from 'primevue/card'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\n\r\nexport default defineComponent({\r\n    components: { Card, Dropdown, VCodeMirror, KnValidationMessages },\r\n    props: { selectedDataset: { type: Object as any }, scriptTypes: { type: Array as any }, activeTab: { type: Number as any } },\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            queryDescriptor,\r\n            dataset: {} as any,\r\n            v$: useValidate() as any,\r\n            codeMirrorScriptType: {} as any,\r\n            scriptOptions: {\r\n                mode: '',\r\n                indentWithTabs: true,\r\n                smartIndent: true,\r\n                lineWrapping: true,\r\n                matchBrackets: true,\r\n                autofocus: true,\r\n                theme: 'eclipse',\r\n                lineNumbers: true\r\n            }\r\n        }\r\n    },\r\n    created() {\r\n        this.loadDataset()\r\n        const interval = setInterval(() => {\r\n            if (!this.$refs.codeMirrorScriptType) return\r\n            this.codeMirrorScriptType = (this.$refs.codeMirrorScriptType as any).cminstance as any\r\n\r\n            this.loadDataset()\r\n            this.loadScriptMode()\r\n\r\n            clearInterval(interval)\r\n        }, 200)\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.loadDataset()\r\n            this.loadScriptMode()\r\n        },\r\n        activeTab() {\r\n            if (this.activeTab === 1 && this.codeMirrorScriptType) {\r\n                setTimeout(() => {\r\n                    this.codeMirrorScriptType.refresh()\r\n                }, 0)\r\n            }\r\n        }\r\n    },\r\n    validations() {\r\n        const scriptFieldsRequired = (value) => {\r\n            return this.dataset.dsTypeCd != 'Script' || value\r\n        }\r\n        const customValidators: ICustomValidatorMap = { 'script-fields-required': scriptFieldsRequired }\r\n        const validationObject = { dataset: createValidations('dataset', queryDescriptor.validations.dataset, customValidators) }\r\n        return validationObject\r\n    },\r\n    methods: {\r\n        loadDataset() {\r\n            this.dataset = this.selectedDataset\r\n            this.dataset.script ? '' : (this.dataset.script = '')\r\n            this.dataset.scriptLanguage ? '' : (this.dataset.scriptLanguage = 'ECMAScript')\r\n        },\r\n        loadScriptMode() {\r\n            if (this.dataset.scriptLanguage) {\r\n                this.scriptOptions.mode = this.dataset.scriptLanguage === 'ECMAScript' ? 'text/javascript' : 'text/x-groovy'\r\n                this.codeMirrorScriptType.setOption('mode', this.dataset.queryScriptLanguage === 'ECMAScript' ? 'text/javascript' : 'text/x-groovy')\r\n            }\r\n        },\r\n        onLanguageChanged(value: string) {\r\n            const mode = value === 'ECMAScript' ? 'text/javascript' : 'text/x-groovy'\r\n            this.codeMirrorScriptType.setOption('mode', mode)\r\n            this.$emit('touched')\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2\">\r\n        <template #content>\r\n            <form v-if=\"dataset.dsTypeCd == 'Qbe'\" class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown\r\n                            id=\"qbeDataSource\"\r\n                            class=\"kn-material-input\"\r\n                            :options=\"dataSources\"\r\n                            optionLabel=\"label\"\r\n                            optionValue=\"label\"\r\n                            v-model=\"v$.dataset.qbeDataSource.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.qbeDataSource.$invalid && v$.dataset.qbeDataSource.$dirty\r\n                            }\"\r\n                            @before-show=\"v$.dataset.qbeDataSource.$touch()\"\r\n                        />\r\n                        <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.glossary.glossaryUsage.dataSource') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages\r\n                        :vComp=\"v$.dataset.qbeDataSource\"\r\n                        :additionalTranslateParams=\"{\r\n                            fieldName: $t('managers.glossary.glossaryUsage.dataSource')\r\n                        }\"\r\n                    />\r\n                </div>\r\n                <div class=\"p-field p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown\r\n                            id=\"qbeDatamarts\"\r\n                            class=\"kn-material-input\"\r\n                            :options=\"businessModels\"\r\n                            optionLabel=\"name\"\r\n                            optionValue=\"name\"\r\n                            v-model=\"v$.dataset.qbeDatamarts.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.qbeDatamarts.$invalid && v$.dataset.qbeDatamarts.$dirty\r\n                            }\"\r\n                            @change=\"getDriversData\"\r\n                            @before-show=\"v$.dataset.qbeDatamarts.$touch()\"\r\n                        />\r\n                        <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.qbeDatamarts') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages\r\n                        :vComp=\"v$.dataset.qbeDatamarts\"\r\n                        :additionalTranslateParams=\"{\r\n                            fieldName: $t('managers.datasetManagement.qbeDatamarts')\r\n                        }\"\r\n                    />\r\n                </div>\r\n            </form>\r\n            <div v-if=\"dataset.dsTypeCd == 'Qbe' || dataset.dsTypeCd == 'Federated'\">\r\n                <Button :label=\"$t('managers.datasetManagement.viewQbeButton')\" class=\"p-col-2 p-mr-2 p-button kn-button--primary\" style=\"max-height: 38px\" @click=\"openQbeQueryDialog\" />\r\n                <Button :label=\"$t('managers.datasetManagement.openQbeButton')\" class=\"p-col-2 p-button kn-button--primary\" :disabled=\"parentValid\" @click=\"openDatasetInQBE\" />\r\n            </div>\r\n        </template>\r\n    </Card>\r\n\r\n    <Dialog class=\"dmdialog\" :visible=\"qbeQueryDialogVisible\" :modal=\"true\" :closable=\"false\" :style=\"qbeDescriptor.style.codeMirror\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--primary p-col-12\">\r\n                <template #start>\r\n                    <span>{{ $t('managers.datasetManagement.viewQbeButton') }}</span>\r\n                </template>\r\n                <template #end>\r\n                    <Button icon=\"pi pi-times\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"qbeQueryDialogVisible = false\" />\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n        <VCodeMirror class=\"kn-height-full\" ref=\"codeMirror\" v-model:value=\"qbeQuery\" :options=\"codemirrorOptions\" />\r\n    </Dialog>\r\n\r\n    <QBE v-if=\"qbeVisible\" :visible=\"qbeVisible\" :dataset=\"qbeDataset\" :returnQueryMode=\"true\" :getQueryFromDatasetProp=\"getQueryFromDataset\" @querySaved=\"onQbeDialogSave\" @close=\"onQbeDialogClose\" />\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\nimport { AxiosResponse } from 'axios'\r\nimport VCodeMirror, { CodeMirror } from 'codemirror-editor-vue3'\r\nimport useValidate from '@vuelidate/core'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport qbeDescriptor from './DatasetManagementQbeDatasetDescriptor.json'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Card from 'primevue/card'\r\nimport Dialog from 'primevue/dialog'\r\nimport QBE from '@/modules/qbe/QBE.vue'\r\nimport deepcopy from 'deepcopy'\r\n\r\nexport default defineComponent({\r\n    components: { Card, Dropdown, KnValidationMessages, Dialog, VCodeMirror, QBE },\r\n    props: { parentValid: { type: Boolean }, selectedDataset: { type: Object as any }, dataSources: { type: Array as any }, businessModels: { type: Array as any } },\r\n    emits: ['touched', 'qbeDialogClosed', 'qbeDialogSaved'],\r\n    data() {\r\n        return {\r\n            qbeDescriptor,\r\n            dataset: {} as any,\r\n            v$: useValidate() as any,\r\n            qbeQuery: '' as any,\r\n            qbeQueryDialogVisible: false,\r\n            qbeVisible: false,\r\n            codeMirror: {} as any,\r\n            qbeDataset: {} as any,\r\n            selectedBusinessModel: {} as any,\r\n            datsetBmChanged: false,\r\n            getQueryFromDataset: false,\r\n            codemirrorOptions: {\r\n                readOnly: true,\r\n                mode: 'text/javascript',\r\n                indentWithTabs: true,\r\n                smartIndent: true,\r\n                lineWrapping: true,\r\n                matchBrackets: true,\r\n                autofocus: true,\r\n                theme: 'eclipse',\r\n                lineNumbers: true\r\n            }\r\n        }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n        this.setupCodeMirror()\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n            this.setupCodeMirror()\r\n        }\r\n    },\r\n    validations() {\r\n        const qbeFieldsRequired = (value) => {\r\n            return this.dataset.dsTypeCd != 'Qbe' || value\r\n        }\r\n        const customValidators: ICustomValidatorMap = { 'qbe-fields-required': qbeFieldsRequired }\r\n        const validationObject = { dataset: createValidations('dataset', qbeDescriptor.validations.dataset, customValidators) }\r\n        return validationObject\r\n    },\r\n    methods: {\r\n        setupCodeMirror() {\r\n            const interval = setInterval(() => {\r\n                if (!this.$refs.codeMirror) return\r\n                this.codeMirror = (this.$refs.codeMirror as any).cminstance as any\r\n                setTimeout(() => {\r\n                    this.codeMirror.refresh()\r\n                }, 0)\r\n                clearInterval(interval)\r\n            }, 200)\r\n        },\r\n        openQbeQueryDialog() {\r\n            if (typeof this.dataset.qbeJSONQuery === 'string') {\r\n                this.qbeQuery = JSON.stringify(JSON.parse(this.dataset.qbeJSONQuery), null, 2)\r\n            } else {\r\n                this.qbeQuery = JSON.stringify(this.dataset.qbeJSONQuery, null, 2)\r\n            }\r\n            this.qbeQueryDialogVisible = true\r\n        },\r\n        async getDriversData(event) {\r\n            this.datsetBmChanged = true\r\n            this.getQueryFromDataset = false\r\n            const bmId = this.businessModels.find((bm) => bm.name === event.value).id\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/businessmodels/${bmId}`)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.selectedBusinessModel = response.data\r\n                })\r\n                .catch()\r\n        },\r\n        openDatasetInQBE() {\r\n            if (this.$route.name === 'new-dataset') {\r\n                this.qbeDataset = deepcopy(this.selectedBusinessModel)\r\n                this.getQueryFromDataset ? (this.qbeDataset.qbeJSONQuery = this.dataset.qbeJSONQuery) : ''\r\n            } else {\r\n                if (this.datsetBmChanged) {\r\n                    this.qbeDataset = deepcopy(this.selectedBusinessModel)\r\n                } else {\r\n                    this.qbeDataset = deepcopy(this.dataset)\r\n                }\r\n            }\r\n            this.qbeDataset.pars = this.dataset.pars\r\n            this.qbeVisible = true\r\n        },\r\n        onQbeDialogClose() {\r\n            this.qbeVisible = false\r\n        },\r\n        onQbeDialogSave(query) {\r\n            this.dataset.qbeJSONQuery = query\r\n            this.datsetBmChanged = false\r\n            this.getQueryFromDataset = true\r\n            this.qbeVisible = false\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\">\r\n.dmdialog.p-dialog .p-dialog-header,\r\n.dmdialog.p-dialog .p-dialog-content {\r\n    padding: 0;\r\n}\r\n.dmdialog.p-dialog .p-dialog-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 1;\r\n}\r\n</style>\r\n","<template>\r\n    <Card class=\"p-m-2\">\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"flatTableName\"\r\n                            class=\"kn-material-input\"\r\n                            v-model.trim=\"v$.dataset.flatTableName.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.flatTableName.$invalid && v$.dataset.flatTableName.$dirty\r\n                            }\"\r\n                            @blur=\"v$.dataset.flatTableName.$touch()\"\r\n                            @change=\"$emit('touched')\"\r\n                        />\r\n                        <label for=\"flatTableName\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.flatTableName') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.flatTableName\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.flatTableName') }\" />\r\n                </div>\r\n                <div class=\"p-field p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown\r\n                            id=\"dataSourceFlat\"\r\n                            class=\"kn-material-input\"\r\n                            :options=\"dataSources\"\r\n                            optionLabel=\"label\"\r\n                            optionValue=\"label\"\r\n                            v-model=\"v$.dataset.dataSourceFlat.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.dataSourceFlat.$invalid && v$.dataset.dataSourceFlat.$dirty\r\n                            }\"\r\n                            @before-show=\"v$.dataset.dataSourceFlat.$touch()\"\r\n                        />\r\n                        <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.businessModelManager.dataSource') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages\r\n                        :vComp=\"v$.dataset.dataSourceFlat\"\r\n                        :additionalTranslateParams=\"{\r\n                            fieldName: $t('managers.businessModelManager.dataSource')\r\n                        }\"\r\n                    />\r\n                </div>\r\n            </form>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\nimport useValidate from '@vuelidate/core'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport flatTypeDescriptor from './DatasetManagementFlatDataset.json'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Card from 'primevue/card'\r\nimport mainStore from '../../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    components: { Card, Dropdown, KnValidationMessages },\r\n    props: { selectedDataset: { type: Object as any }, dataSources: { type: Array as any } },\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            flatTypeDescriptor,\r\n            dataset: {} as any,\r\n            v$: useValidate() as any\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n        }\r\n    },\r\n    validations() {\r\n        const flatFieldsRequired = (value) => {\r\n            return this.dataset.dsTypeCd != 'Flat' || value\r\n        }\r\n        const customValidators: ICustomValidatorMap = { 'flat-fields-required': flatFieldsRequired }\r\n        const validationObject = { dataset: createValidations('dataset', flatTypeDescriptor.validations.dataset, customValidators) }\r\n        return validationObject\r\n    },\r\n    methods: {\r\n        changeTypeWarning() {\r\n            this.store.setInfo({ title: this.$t('documentExecution.registry.warning'), msg: this.$t('managers.datasetManagement.changeTypeMsg') })\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-mt-3\">\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-12\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown\r\n                            id=\"ckanFileType\"\r\n                            class=\"kn-material-input\"\r\n                            :options=\"availableFileTypes\"\r\n                            optionLabel=\"name\"\r\n                            optionValue=\"name\"\r\n                            v-model=\"v$.dataset.ckanFileType.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.ckanFileType.$invalid && v$.dataset.ckanFileType.$dirty\r\n                            }\"\r\n                            @before-show=\"v$.dataset.ckanFileType.$touch()\"\r\n                        />\r\n                        <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.fileType') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages\r\n                        :vComp=\"v$.dataset.ckanFileType\"\r\n                        :additionalTranslateParams=\"{\r\n                            fieldName: $t('managers.datasetManagement.fileType')\r\n                        }\"\r\n                    />\r\n                </div>\r\n\r\n                <div v-if=\"dataset.ckanFileType == 'XLS'\" class=\"p-formgrid p-grid p-col-12\">\r\n                    <div class=\"p-field p-col-4\">\r\n                        <span class=\"p-float-label\">\r\n                            <InputText id=\"ckanSkipRows\" class=\"kn-material-input\" type=\"number\" v-model.trim=\"dataset.ckanSkipRows\" @change=\"$emit('touched')\" />\r\n                            <label for=\"ckanSkipRows\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanSkipRows') }} </label>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"p-field p-col-4\">\r\n                        <span class=\"p-float-label\">\r\n                            <InputText id=\"ckanLimitRows\" class=\"kn-material-input\" type=\"number\" v-model.trim=\"dataset.ckanLimitRows\" @change=\"$emit('touched')\" />\r\n                            <label for=\"ckanLimitRows\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanLimitRows') }} </label>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"p-field p-col-4\">\r\n                        <span class=\"p-float-label\">\r\n                            <InputText id=\"ckanXslSheetNumber\" class=\"kn-material-input\" type=\"number\" v-model.trim=\"dataset.ckanXslSheetNumber\" @change=\"$emit('touched')\" />\r\n                            <label for=\"ckanXslSheetNumber\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanXslSheetNumber') }} </label>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div v-if=\"dataset.ckanFileType == 'CSV'\" class=\"p-formgrid p-grid p-col-12\">\r\n                    <div class=\"p-field p-col-3\">\r\n                        <span class=\"p-float-label\">\r\n                            <Dropdown\r\n                                id=\"ckanCsvDelimiter\"\r\n                                class=\"kn-material-input\"\r\n                                :options=\"csvDelimiterCharacterTypes\"\r\n                                optionLabel=\"name\"\r\n                                optionValue=\"name\"\r\n                                v-model=\"v$.dataset.ckanCsvDelimiter.$model\"\r\n                                :class=\"{\r\n                                    'p-invalid': v$.dataset.ckanCsvDelimiter.$invalid && v$.dataset.ckanCsvDelimiter.$dirty\r\n                                }\"\r\n                                @before-show=\"v$.dataset.ckanCsvDelimiter.$touch()\"\r\n                            />\r\n                            <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanCsvDelimiter') }} * </label>\r\n                        </span>\r\n                        <KnValidationMessages\r\n                            :vComp=\"v$.dataset.ckanCsvDelimiter\"\r\n                            :additionalTranslateParams=\"{\r\n                                fieldName: $t('managers.datasetManagement.ckanCsvDelimiter')\r\n                            }\"\r\n                        />\r\n                    </div>\r\n                    <div class=\"p-field p-col-3\">\r\n                        <span class=\"p-float-label\">\r\n                            <Dropdown\r\n                                id=\"ckanCsvQuote\"\r\n                                class=\"kn-material-input\"\r\n                                :options=\"csvQuoteCharacterTypes\"\r\n                                optionLabel=\"name\"\r\n                                optionValue=\"name\"\r\n                                v-model=\"v$.dataset.ckanCsvQuote.$model\"\r\n                                :class=\"{\r\n                                    'p-invalid': v$.dataset.ckanCsvQuote.$invalid && v$.dataset.ckanCsvQuote.$dirty\r\n                                }\"\r\n                                @before-show=\"v$.dataset.ckanCsvQuote.$touch()\"\r\n                            />\r\n                            <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanCsvQuote') }} * </label>\r\n                        </span>\r\n                        <KnValidationMessages\r\n                            :vComp=\"v$.dataset.ckanCsvQuote\"\r\n                            :additionalTranslateParams=\"{\r\n                                fieldName: $t('managers.datasetManagement.ckanCsvQuote')\r\n                            }\"\r\n                        />\r\n                    </div>\r\n                    <div class=\"p-field p-col-3\">\r\n                        <span class=\"p-float-label\">\r\n                            <Dropdown\r\n                                id=\"ckanCsvEncoding\"\r\n                                class=\"kn-material-input\"\r\n                                :options=\"csvEncodingTypes\"\r\n                                optionLabel=\"name\"\r\n                                optionValue=\"name\"\r\n                                v-model=\"v$.dataset.ckanCsvEncoding.$model\"\r\n                                :class=\"{\r\n                                    'p-invalid': v$.dataset.ckanCsvEncoding.$invalid && v$.dataset.ckanCsvEncoding.$dirty\r\n                                }\"\r\n                                @before-show=\"v$.dataset.ckanCsvEncoding.$touch()\"\r\n                            />\r\n                            <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanCsvEncoding') }} * </label>\r\n                        </span>\r\n                        <KnValidationMessages\r\n                            :vComp=\"v$.dataset.ckanCsvEncoding\"\r\n                            :additionalTranslateParams=\"{\r\n                                fieldName: $t('managers.datasetManagement.ckanCsvEncoding')\r\n                            }\"\r\n                        />\r\n                    </div>\r\n                    <div class=\"p-field p-col-3\">\r\n                        <span class=\"p-float-label\">\r\n                            <Dropdown\r\n                                id=\"ckanDateFormat\"\r\n                                class=\"kn-material-input\"\r\n                                :options=\"ckanDateFormat\"\r\n                                optionLabel=\"name\"\r\n                                optionValue=\"name\"\r\n                                v-model=\"v$.dataset.ckanDateFormat.$model\"\r\n                                :class=\"{\r\n                                    'p-invalid': v$.dataset.ckanDateFormat.$invalid && v$.dataset.ckanDateFormat.$dirty\r\n                                }\"\r\n                                @before-show=\"v$.dataset.ckanDateFormat.$touch()\"\r\n                            />\r\n                            <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanDateFormat') }} * </label>\r\n                        </span>\r\n                        <KnValidationMessages\r\n                            :vComp=\"v$.dataset.ckanDateFormat\"\r\n                            :additionalTranslateParams=\"{\r\n                                fieldName: $t('managers.datasetManagement.ckanDateFormat')\r\n                            }\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div v-if=\"dataset.ckanFileType\" class=\"p-formgrid p-grid p-col-12\">\r\n                    <div class=\"p-field p-col-6\">\r\n                        <span class=\"p-float-label\">\r\n                            <InputText\r\n                                id=\"ckanId\"\r\n                                class=\"kn-material-input\"\r\n                                v-model.trim=\"v$.dataset.ckanId.$model\"\r\n                                :class=\"{\r\n                                    'p-invalid': v$.dataset.ckanId.$invalid && v$.dataset.ckanId.$dirty\r\n                                }\"\r\n                                @blur=\"v$.dataset.ckanId.$touch()\"\r\n                                @change=\"$emit('touched')\"\r\n                            />\r\n                            <label for=\"ckanId\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanId') }} * </label>\r\n                        </span>\r\n                        <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.ckanId\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.ckanId') }\" />\r\n                    </div>\r\n                    <div class=\"p-field p-col-6\">\r\n                        <span class=\"p-float-label\">\r\n                            <InputText\r\n                                id=\"ckanUrl\"\r\n                                class=\"kn-material-input\"\r\n                                v-model.trim=\"v$.dataset.ckanUrl.$model\"\r\n                                :class=\"{\r\n                                    'p-invalid': v$.dataset.ckanUrl.$invalid && v$.dataset.ckanUrl.$dirty\r\n                                }\"\r\n                                @blur=\"v$.dataset.ckanUrl.$touch()\"\r\n                                @change=\"$emit('touched')\"\r\n                            />\r\n                            <label for=\"ckanUrl\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.ckanUrl') }} * </label>\r\n                        </span>\r\n                        <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.ckanUrl\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.ckanUrl') }\" />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\nimport useValidate from '@vuelidate/core'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport ckanDescriptor from './DatasetManagementCkanDatasetDescriptor.json'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Card from 'primevue/card'\r\n\r\nexport default defineComponent({\r\n    components: { Card, Dropdown, KnValidationMessages },\r\n    props: { selectedDataset: { type: Object as any } },\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            v$: useValidate() as any,\r\n            ckanDescriptor,\r\n            dataset: {} as any,\r\n            ckanDateFormat: ckanDescriptor.ckanDateFormat,\r\n            availableFileTypes: ckanDescriptor.ckanFileTypes,\r\n            csvEncodingTypes: ckanDescriptor.csvEncodingTypes,\r\n            csvQuoteCharacterTypes: ckanDescriptor.csvQuoteCharacterTypes,\r\n            csvDelimiterCharacterTypes: ckanDescriptor.csvDelimiterCharacterTypes\r\n        }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n        }\r\n    },\r\n    validations() {\r\n        const ckanFieldsRequired = (value) => {\r\n            return this.dataset.dsTypeCd != 'Ckan' || value\r\n        }\r\n        const csvFieldsRequired = (value) => {\r\n            return this.dataset.ckanFileType != 'CSV' || value\r\n        }\r\n        const customValidators: ICustomValidatorMap = { 'ckan-fields-required': ckanFieldsRequired, 'csv-fields-required': csvFieldsRequired }\r\n        const validationObject = { dataset: createValidations('dataset', ckanDescriptor.validations.dataset, customValidators) }\r\n        return validationObject\r\n    },\r\n    methods: {}\r\n})\r\n</script>\r\n","<template>\r\n    <Dialog :header=\"$t('managers.datasetManagement.helpTitle')\" :style=\"detailDescriptor.style.infoDialog\" :visible=\"visible\" :modal=\"true\" class=\"p-fluid kn-dialog--toolbar--primary\" :closable=\"false\">\r\n        <div class=\"p-mt-3\">\r\n            <b>JSON Path Items</b> must indicate the place of items in the JSON, like rows of query. It uses <a href=\"https://github.com/jayway/JsonPath\" target=\"_blank\">JsonPath</a> language. It needs to be a single or list of JSON Objects. For example, in this JSON:\r\n            <pre>\r\n    {\r\n      \"contextResponses\": [\r\n        {\r\n          \"contextElement\": {\r\n            \"id\": \"pros6_Meter\",\r\n            \"type\": \"Meter\",\r\n            \"isPattern\": \"false\",\r\n            \"attributes\": [\r\n              {\r\n                \"name\": \"atTime\",\r\n                \"type\": \"timestamp\",\r\n                \"value\": \"2015-07-14T17:19:14.014+0200\"\r\n              },\r\n              {\r\n                \"name\": \"downstreamActivePower\",\r\n                \"type\": \"double\",\r\n                \"value\": \"4.8\"\r\n              },\r\n              {\r\n                \"name\": \"prosumerId\",\r\n                \"type\": \"string\",\r\n                \"value\": \"pros6\"\r\n              },\r\n              {\r\n                \"name\": \"unitOfMeasurement\",\r\n                \"type\": \"string\",\r\n                \"value\": \"kW\"\r\n              },\r\n              {\r\n                \"name\": \"upstreamActivePower\",\r\n                \"type\": \"double\",\r\n                \"value\": \"0\"\r\n              }\r\n            ]\r\n          },\r\n          \"statusCode\": {\r\n            \"reasonPhrase\": \"OK\",\r\n            \"code\": \"200\"\r\n          }\r\n        },\r\n        {\r\n          \"contextElement\": {\r\n            \"id\": \"pros1_Meter\",\r\n            \"type\": \"Meter\",\r\n            \"isPattern\": \"false\",\r\n            \"attributes\": [\r\n              {\r\n                \"name\": \"atTime\",\r\n                \"type\": \"timestamp\",\r\n                \"value\": \"2015-07-14T17:19:14.014+0200\"\r\n              },\r\n              {\r\n                \"name\": \"downstreamActivePower\",\r\n                \"type\": \"double\",\r\n                \"value\": \"3.5\"\r\n              },\r\n              {\r\n                \"name\": \"prosumerId\",\r\n                \"type\": \"string\",\r\n                \"value\": \"pros1\"\r\n              },\r\n              {\r\n                \"name\": \"unitOfMeasurement\",\r\n                \"type\": \"string\",\r\n                \"value\": \"kW\"\r\n              },\r\n              {\r\n                \"name\": \"upstreamActivePower\",\r\n                \"type\": \"double\",\r\n                \"value\": \"0\"\r\n              }\r\n            ]\r\n          },\r\n          \"statusCode\": {\r\n            \"reasonPhrase\": \"OK\",\r\n            \"code\": \"200\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n    </pre\r\n            >\r\n            if I want to take the two ContextElement items then the JSON Path Items will be:\r\n            <pre>\r\n    $.contextResponses[*].contextElement\r\n    </pre\r\n            >\r\n        </div>\r\n\r\n        <template #footer>\r\n            <Button class=\"kn-button kn-button--primary\" @click=\"$emit('close')\"> {{ $t('common.close') }}</Button>\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport Dialog from 'primevue/dialog'\r\nimport detailDescriptor from '../../DatasetManagementDetailViewDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'lovs-management-info-dialog',\r\n    components: { Dialog },\r\n    emits: ['close'],\r\n    props: {\r\n        visible: { type: Boolean }\r\n    },\r\n    data() {\r\n        return {\r\n            detailDescriptor\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Dialog :header=\"$t('managers.datasetManagement.helpTitle')\" :style=\"detailDescriptor.style.infoDialog\" :visible=\"visible\" :modal=\"true\" class=\"p-fluid kn-dialog--toolbar--primary\" :closable=\"false\">\r\n        <div class=\"p-mt-3\">\r\n            If the JSON response contains the data in simple list of objects format like:\r\n            <pre>\r\n  {\r\n    \"contextResponses\": [\r\n      {\r\n        \"a\":3,\r\n        \"c\":\"d\",\r\n        \"e\":\"f\"\r\n      },{\r\n        \"a\":2,\r\n        \"e\":\"r\",\r\n        \"f\":\"s\",\r\n        \"b\":\"q\"\r\n       }\r\n     ]\r\n  }\r\n      </pre\r\n            >\r\n            then it will be sufficient to define only the JSON Path Items and check <b>Use directly JSON Attributes</b>\r\n            without defining the attributes. The attributes will be retrieved automatically from the JSON Objects: the names will be the fields names, the values will be the fields values. In this examples, the JSON Path Items will be:\r\n            <pre>\r\n  $.contextResponses[*]\r\n      </pre\r\n            >\r\n            and the result DataSet content will have these objects (name: value):\r\n            <pre>\r\n  \"a\":3\r\n  \"c\":\"d\"\r\n  \"e\":\"f\"\r\n  ...\r\n      </pre\r\n            >\r\n        </div>\r\n\r\n        <template #footer>\r\n            <Button class=\"kn-button kn-button--primary\" @click=\"$emit('close')\"> {{ $t('common.close') }}</Button>\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport Dialog from 'primevue/dialog'\r\nimport detailDescriptor from '../../DatasetManagementDetailViewDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'lovs-management-info-dialog',\r\n    components: { Dialog },\r\n    emits: ['close'],\r\n    props: {\r\n        visible: { type: Boolean }\r\n    },\r\n    data() {\r\n        return {\r\n            detailDescriptor\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Dialog :header=\"$t('managers.datasetManagement.helpTitle')\" :style=\"detailDescriptor.style.infoDialog\" :visible=\"visible\" :modal=\"true\" class=\"p-fluid kn-dialog--toolbar--primary\" :closable=\"false\">\r\n        <div class=\"p-mt-3\">\r\n            This attribute is related to <a href=\"http://www.fiware.org\" target=\"_blank\">Fiware</a> project, more specifically to <a href=\"http://catalogue.fiware.org/enablers/publishsubscribe-context-broker-orion-context-broker\" target=\"_blank\"> Orion Context Broker (OCB)</a>. It permits to NOT\r\n            define JSON path Items, Attributes and Headers if the response is from OBC, a NGSI implementation. So if you use the REST DataSet to retrieve information from OCB then you don't need to define items and attributes because the format of JSON Response is well known.\r\n        </div>\r\n\r\n        <template #footer>\r\n            <Button class=\"kn-button kn-button--primary\" @click=\"$emit('close')\"> {{ $t('common.close') }}</Button>\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport Dialog from 'primevue/dialog'\r\nimport detailDescriptor from '../../DatasetManagementDetailViewDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'lovs-management-info-dialog',\r\n    components: { Dialog },\r\n    emits: ['close'],\r\n    props: {\r\n        visible: { type: Boolean }\r\n    },\r\n    data() {\r\n        return {\r\n            detailDescriptor\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-mt-2 p-mx-2\">\r\n        <template #start>\r\n            <Button v-if=\"!expandTableCard\" icon=\"fas fa-chevron-right\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color: white\" @click=\"expandTableCard = true\" />\r\n            <Button v-else icon=\"fas fa-chevron-down\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color: white\" @click=\"expandTableCard = false\" />\r\n            {{ $t('managers.datasetManagement.requestHeaders') }}\r\n        </template>\r\n        <template #end>\r\n            <Button icon=\"fas fa-plus\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"addNewParam\" />\r\n            <Button icon=\"fas fa-eraser\" class=\"p-button-text p-button-rounded p-button-plain\" :disabled=\"disableDeleteAll\" @click=\"removeAllParams\" />\r\n        </template>\r\n    </Toolbar>\r\n    <Card v-show=\"expandTableCard\" class=\"p-mx-2\">\r\n        <template #content>\r\n            <DataTable class=\"p-datatable-sm kn-table\" editMode=\"cell\" :value=\"dataset.restRequestHeaders\" :scrollable=\"true\" scrollHeight=\"250px\" dataKey=\"versNum\" responsiveLayout=\"stack\" breakpoint=\"960px\" @cell-edit-complete=\"onCellEditComplete\">\r\n                <template #empty>\r\n                    {{ $t('managers.datasetManagement.tableEmpty') }}\r\n                </template>\r\n                <Column field=\"name\" :header=\"$t('kpi.alert.name')\" :sortable=\"true\">\r\n                    <template #editor=\"{ data }\">\r\n                        <InputText class=\"kn-material-input\" :style=\"tableDescriptor.style.columnStyle\" v-model=\"data.name\" />\r\n                    </template>\r\n                </Column>\r\n                <Column field=\"value\" :header=\"$t('common.value')\" :sortable=\"true\">\r\n                    <template #editor=\"{ data }\">\r\n                        <InputText class=\"kn-material-input\" :style=\"tableDescriptor.style.columnStyle\" v-model=\"data.value\" />\r\n                    </template>\r\n                </Column>\r\n                <Column @rowClick=\"false\">\r\n                    <template #body=\"slotProps\">\r\n                        <Button icon=\"pi pi-trash\" class=\"p-button-link\" @click=\"deleteParam(slotProps)\" />\r\n                    </template>\r\n                </Column>\r\n            </DataTable>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport tableDescriptor from './DatasetManagementTablesDescriptor.json'\r\nimport Card from 'primevue/card'\r\nimport DataTable from 'primevue/datatable'\r\nimport Column from 'primevue/column'\r\n\r\nexport default defineComponent({\r\n    components: { Card, DataTable, Column },\r\n    props: {\r\n        selectedDataset: { type: Object as any }\r\n    },\r\n    computed: {\r\n        disableDeleteAll() {\r\n            if (!this.dataset.restRequestHeaders || this.dataset['restRequestHeaders'].length == 0) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    },\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            tableDescriptor,\r\n            dataset: {} as any,\r\n            expandTableCard: false\r\n        }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n        }\r\n    },\r\n    methods: {\r\n        addNewParam() {\r\n            this.dataset.restRequestHeaders ? '' : (this.dataset.restRequestHeaders = [])\r\n            const newParam = { ...tableDescriptor.newRequestHeader }\r\n            this.dataset.restRequestHeaders.push(newParam)\r\n        },\r\n        deleteParam(removedParam) {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.uppercaseDelete'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => (this.dataset.restRequestHeaders = this.dataset.restRequestHeaders.filter((paramToRemove) => removedParam.data.name !== paramToRemove.name))\r\n            })\r\n        },\r\n        removeAllParams() {\r\n            this.$confirm.require({\r\n                message: this.$t('managers.datasetManagement.deleteAllRequestHeaderMsg'),\r\n                header: this.$t('managers.datasetManagement.deleteAllRequestHeaderTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => (this.dataset.restRequestHeaders = [])\r\n            })\r\n        },\r\n\r\n        onCellEditComplete(event) {\r\n            this.dataset.restRequestHeaders[event.index] = event.newData\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Dialog :header=\"$t('managers.datasetManagement.helpTitle')\" :style=\"detailDescriptor.style.infoDialog\" :visible=\"visible\" :modal=\"true\" class=\"p-fluid kn-dialog--toolbar--primary\" :closable=\"false\">\r\n        <div class=\"p-mt-3\">\r\n            <b>JSON Path Attributes</b> indicates the fields of DataSet items in the <a href=\"https://github.com/jayway/JsonPath\" target=\"_blank\">JsonPath</a> format. For each attribute to retrieve you need to indicate:\r\n            <ul>\r\n                <li>name: the name of field. In this case if you use <b>id</b> name then it will have a particular meaning: it will be used as unique identifier</li>\r\n                <li>\r\n                    value: where to retrieve the value in the JSON response. It uses JSON Path format <b>related to the JSON Items previously specified</b> (the $. start if from the item object). For example, if you have this response:\r\n                    <pre>\r\n{\r\n  \"contextResponses\": [\r\n    {\r\n      \"contextElement\": {\r\n        \"id\": \"pros6_Meter\",\r\n        \"type\": \"Meter\",\r\n        \"isPattern\": \"false\",\r\n        \"attributes\": [\r\n          {\r\n            \"name\": \"atTime\",\r\n            \"type\": \"timestamp\",\r\n            \"value\": \"2015-07-14T17:19:14.014+0200\"\r\n          },\r\n          {\r\n            \"name\": \"downstreamActivePower\",\r\n            \"type\": \"double\",\r\n            \"value\": \"4.8\"\r\n          },\r\n          {\r\n            \"name\": \"prosumerId\",\r\n            \"type\": \"string\",\r\n            \"value\": \"pros6\"\r\n          },\r\n          {\r\n            \"name\": \"unitOfMeasurement\",\r\n            \"type\": \"string\",\r\n            \"value\": \"kW\"\r\n          },\r\n          {\r\n            \"name\": \"upstreamActivePower\",\r\n            \"type\": \"double\",\r\n            \"value\": \"0\"\r\n          }\r\n        ]\r\n      },\r\n      \"statusCode\": {\r\n        \"reasonPhrase\": \"OK\",\r\n        \"code\": \"200\"\r\n      }\r\n    },\r\n    {\r\n      \"contextElement\": {\r\n        \"id\": \"pros1_Meter\",\r\n        \"type\": \"Meter\",\r\n        \"isPattern\": \"false\",\r\n        \"attributes\": [\r\n          {\r\n            \"name\": \"atTime\",\r\n            \"type\": \"timestamp\",\r\n            \"value\": \"2015-07-14T17:19:14.014+0200\"\r\n          },\r\n          {\r\n            \"name\": \"downstreamActivePower\",\r\n            \"type\": \"double\",\r\n            \"value\": \"3.5\"\r\n          },\r\n          {\r\n            \"name\": \"prosumerId\",\r\n            \"type\": \"string\",\r\n            \"value\": \"pros1\"\r\n          },\r\n          {\r\n            \"name\": \"unitOfMeasurement\",\r\n            \"type\": \"string\",\r\n            \"value\": \"kW\"\r\n          },\r\n          {\r\n            \"name\": \"upstreamActivePower\",\r\n            \"type\": \"double\",\r\n            \"value\": \"0\"\r\n          }\r\n        ]\r\n      },\r\n      \"statusCode\": {\r\n        \"reasonPhrase\": \"OK\",\r\n        \"code\": \"200\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n</pre\r\n                    >\r\n                    and you use this JSON Path Items:\r\n                    <pre>\r\n\t$.contextResponses[*].contextElement\r\n</pre\r\n                    >\r\n                    then to retrieve the <i>downstreamActivePower</i> attribute for every item you need to specify this value:\r\n                    <pre>\r\n\t$.attributes[?(@.name==downstreamActivePower)].value\r\n</pre\r\n                    >\r\n                </li>\r\n                <li>\r\n                    type: the type of attribute (int, string, etc..). It can be directly specified or it can be in the JsonPath format if the type is contained in the response.\r\n                </li>\r\n            </ul>\r\n        </div>\r\n\r\n        <template #footer>\r\n            <Button class=\"kn-button kn-button--primary\" @click=\"$emit('close')\"> {{ $t('common.close') }}</Button>\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport Dialog from 'primevue/dialog'\r\nimport detailDescriptor from '../../DatasetManagementDetailViewDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'lovs-management-info-dialog',\r\n    components: { Dialog },\r\n    emits: ['close'],\r\n    props: {\r\n        visible: { type: Boolean }\r\n    },\r\n    data() {\r\n        return {\r\n            detailDescriptor\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-mt-3 p-mx-2\">\r\n        <template #start>\r\n            <Button v-if=\"!expandTableCard\" icon=\"fas fa-chevron-right\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color: white\" @click=\"expandTableCard = true\" />\r\n            <Button v-else icon=\"fas fa-chevron-down\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color: white\" @click=\"expandTableCard = false\" />\r\n            {{ $t('managers.datasetManagement.jsonPathAttributes') }}\r\n        </template>\r\n        <template #end>\r\n            <Button icon=\"fas fa-plus\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"addNewParam\" />\r\n            <Button icon=\"fas fa-info-circle\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"helpDialogVisible = true\" />\r\n            <Button icon=\"fas fa-eraser\" class=\"p-button-text p-button-rounded p-button-plain\" :disabled=\"disableDeleteAll\" @click=\"removeAllParams\" />\r\n        </template>\r\n    </Toolbar>\r\n    <Card v-show=\"expandTableCard\" class=\"p-mx-2\">\r\n        <template #content>\r\n            <DataTable class=\"p-datatable-sm kn-table\" editMode=\"cell\" :value=\"dataset.restJsonPathAttributes\" :scrollable=\"true\" scrollHeight=\"250px\" dataKey=\"versNum\" responsiveLayout=\"stack\" breakpoint=\"960px\" @cell-edit-complete=\"onCellEditComplete\">\r\n                <template #empty>\r\n                    {{ $t('managers.datasetManagement.tableEmpty') }}\r\n                </template>\r\n                <Column field=\"name\" :header=\"$t('kpi.alert.name')\" :sortable=\"true\">\r\n                    <template #editor=\"{ data }\">\r\n                        <InputText class=\"kn-material-input\" :style=\"tableDescriptor.style.columnStyle\" v-model=\"data.name\" />\r\n                    </template>\r\n                </Column>\r\n                <Column field=\"jsonPathValue\" :header=\"$t('managers.datasetManagement.jsonPathValue')\" :sortable=\"true\">\r\n                    <template #editor=\"{ data }\">\r\n                        <InputText class=\"kn-material-input\" :style=\"tableDescriptor.style.columnStyle\" v-model=\"data.jsonPathValue\" />\r\n                    </template>\r\n                </Column>\r\n                <Column field=\"typeOrJsonPathValue\" :header=\"$t('managers.datasetManagement.typeOrJsonPathValue')\" :sortable=\"true\">\r\n                    <template #body=\"slotProps\">\r\n                        {{ slotProps.data.jsonPathType }}\r\n                    </template>\r\n                    <template #editor=\"{ data }\">\r\n                        <Dropdown id=\"scope\" class=\"kn-material-input\" :style=\"tableDescriptor.style.columnStyle\" :options=\"jsonPathTypes\" v-model=\"data.jsonPathType\" />\r\n                    </template>\r\n                </Column>\r\n                <Column @rowClick=\"false\">\r\n                    <template #body=\"slotProps\">\r\n                        <Button icon=\"pi pi-trash\" class=\"p-button-link\" @click=\"deleteParam(slotProps)\" />\r\n                    </template>\r\n                </Column>\r\n            </DataTable>\r\n        </template>\r\n    </Card>\r\n\r\n    <HelpDialog :visible=\"helpDialogVisible\" @close=\"helpDialogVisible = false\" />\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport tableDescriptor from './DatasetManagementTablesDescriptor.json'\r\nimport HelpDialog from '../infoDialogs/DatasetManagementJsonPathAttributesInfoDialog.vue'\r\nimport Card from 'primevue/card'\r\nimport DataTable from 'primevue/datatable'\r\nimport Column from 'primevue/column'\r\nimport Dropdown from 'primevue/dropdown'\r\n\r\nexport default defineComponent({\r\n    components: { Card, DataTable, Column, Dropdown, HelpDialog },\r\n    props: {\r\n        selectedDataset: { type: Object as any }\r\n    },\r\n    computed: {\r\n        disableDeleteAll() {\r\n            if (!this.dataset.restJsonPathAttributes || this.dataset['restJsonPathAttributes'].length == 0) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    },\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            tableDescriptor,\r\n            dataset: {} as any,\r\n            expandTableCard: false,\r\n            datasetParamTypes: tableDescriptor.datasetParamTypes,\r\n            jsonPathTypes: tableDescriptor.jsonPathTypes,\r\n            helpDialogVisible: false\r\n        }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n        }\r\n    },\r\n    methods: {\r\n        addNewParam() {\r\n            //this.dataset.restJsonPathAttributes ? [] : (this.dataset.restJsonPathAttributes = [])\r\n            const newParam = { ...tableDescriptor.newJsonPathAttr }\r\n            this.dataset.restJsonPathAttributes.push(newParam)\r\n        },\r\n        deleteParam(removedParam) {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.uppercaseDelete'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => (this.dataset.restJsonPathAttributes = this.dataset.restJsonPathAttributes.filter((paramToRemove) => removedParam.data.name !== paramToRemove.name))\r\n            })\r\n        },\r\n        removeAllParams() {\r\n            this.$confirm.require({\r\n                message: this.$t('managers.datasetManagement.deleteAllRequestHeaderMsg'),\r\n                header: this.$t('managers.datasetManagement.deleteAllRequestHeaderTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => (this.dataset.restJsonPathAttributes = [])\r\n            })\r\n        },\r\n        onCellEditComplete(event) {\r\n            this.dataset.restJsonPathAttributes[event.index] = event.newData\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2\">\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"restAddress\"\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            v-model.trim=\"v$.dataset.restAddress.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.restAddress.$invalid && v$.dataset.restAddress.$dirty\r\n                            }\"\r\n                            @blur=\"v$.dataset.restAddress.$touch()\"\r\n                            @change=\"$emit('touched')\"\r\n                        />\r\n                        <label for=\"restAddress\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.restAddress') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.restAddress\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.restAddress') }\" />\r\n                </div>\r\n                <div class=\"p-field p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"solrCollection\" class=\"kn-material-input\" v-model.trim=\"dataset.solrCollection\" @change=\"$emit('touched')\" />\r\n                        <label for=\"solrCollection\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.solrCollection') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col-12\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"restRequestBody\" class=\"kn-material-input\" maxLength=\"2000\" v-model.trim=\"dataset.restRequestBody\" @change=\"$emit('touched')\" />\r\n                        <label for=\"restRequestBody\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.restRequestBody') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col-12\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown\r\n                            id=\"restHttpMethod\"\r\n                            class=\"kn-material-input\"\r\n                            :options=\"httpMethods\"\r\n                            optionLabel=\"value\"\r\n                            optionValue=\"value\"\r\n                            v-model=\"v$.dataset.restHttpMethod.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.restHttpMethod.$invalid && v$.dataset.restHttpMethod.$dirty\r\n                            }\"\r\n                            @before-show=\"v$.dataset.restHttpMethod.$touch()\"\r\n                        />\r\n                        <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.restHttpMethod') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages\r\n                        :vComp=\"v$.dataset.restHttpMethod\"\r\n                        :additionalTranslateParams=\"{\r\n                            fieldName: $t('managers.datasetManagement.restHttpMethod')\r\n                        }\"\r\n                    />\r\n                </div>\r\n            </form>\r\n        </template>\r\n    </Card>\r\n\r\n    <RequestHeadersTable :selectedDataset=\"selectedDataset\" />\r\n\r\n    <Card class=\"p-mt-3\">\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-col-12 p-field\" :style=\"restDescriptor.style.infoColumnsContainer\">\r\n                    <span class=\"p-float-label\" :style=\"restDescriptor.style.maxWidth\">\r\n                        <InputText id=\"restJsonPathItems\" class=\"kn-material-input\" :style=\"restDescriptor.style.maxWidth\" v-model.trim=\"dataset.restJsonPathItems\" @change=\"$emit('touched')\" />\r\n                        <label for=\"restJsonPathItems\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.restJsonPathItems') }} </label>\r\n                    </span>\r\n                    <Button icon=\"fas fa-info-circle\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"jsonItemsHelpVisible = true\" />\r\n                </div>\r\n                <div class=\"p-col-12\" :style=\"restDescriptor.style.infoColumnsContainer\">\r\n                    <span class=\"p-field-checkbox\">\r\n                        <label for=\"binary\">{{ $t('managers.datasetManagement.restDirectlyJSONAttributes') }}: </label>\r\n                        <Checkbox id=\"binary\" class=\"p-ml-2\" v-model=\"dataset.restDirectlyJSONAttributes\" :binary=\"true\" @change=\"$emit('touched')\" />\r\n                    </span>\r\n                    <Button icon=\"fas fa-info-circle\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"directAttributesHelpVisible = true\" />\r\n                </div>\r\n                <div class=\"p-col-12\" :style=\"restDescriptor.style.infoColumnsContainer\">\r\n                    <span class=\"p-field-checkbox\">\r\n                        <label for=\"binary\">{{ $t('managers.datasetManagement.restNGSI') }}: </label>\r\n                        <Checkbox id=\"binary\" class=\"p-ml-2\" v-model=\"dataset.restNGSI\" :binary=\"true\" @change=\"$emit('touched')\" />\r\n                    </span>\r\n                    <Button icon=\"fas fa-info-circle\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"ngsiHelpVisible = true\" />\r\n                </div>\r\n            </form>\r\n        </template>\r\n    </Card>\r\n\r\n    <JsonPathTable :selectedDataset=\"selectedDataset\" />\r\n\r\n    <Card class=\"p-mt-3\">\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-4\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"restOffset\" type=\"number\" class=\"kn-material-input\" v-model.trim=\"dataset.restOffset\" @change=\"$emit('touched')\" />\r\n                        <label for=\"restOffset\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.restOffset') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-col-4\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"restFetchSize\" type=\"number\" class=\"kn-material-input\" v-model.trim=\"dataset.restFetchSize\" @change=\"$emit('touched')\" />\r\n                        <label for=\"restFetchSize\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.restFetchSize') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-col-4\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"restMaxResults\" type=\"number\" class=\"kn-material-input\" v-model.trim=\"dataset.restMaxResults\" @change=\"$emit('touched')\" />\r\n                        <label for=\"restMaxResults\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.restMaxResults') }} </label>\r\n                    </span>\r\n                </div>\r\n            </form>\r\n        </template>\r\n    </Card>\r\n\r\n    <JsonItemsHelpDialog :visible=\"jsonItemsHelpVisible\" @close=\"jsonItemsHelpVisible = false\" />\r\n    <DirectAttributesHelpDialog :visible=\"directAttributesHelpVisible\" @close=\"directAttributesHelpVisible = false\" />\r\n    <NgsiHelpDialog :visible=\"ngsiHelpVisible\" @close=\"ngsiHelpVisible = false\" />\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\nimport useValidate from '@vuelidate/core'\r\nimport JsonItemsHelpDialog from '../infoDialogs/DatasetManagementJsonPathItemsInfoDialog.vue'\r\nimport DirectAttributesHelpDialog from '../infoDialogs/DatasetManagementAttributesDirectInfoDialog.vue'\r\nimport NgsiHelpDialog from '../infoDialogs/DatasetManagementNgsiInfoDialog.vue'\r\nimport RequestHeadersTable from '../tables/DatasetManagementRequestHeadersTable.vue'\r\nimport JsonPathTable from '../tables/DatasetManagementJsonPathAttributesTable.vue'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport restDescriptor from './DatasetManagementRestDatasetDescriptor.json'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Card from 'primevue/card'\r\nimport Checkbox from 'primevue/checkbox'\r\n\r\nexport default defineComponent({\r\n    components: { Card, Dropdown, KnValidationMessages, RequestHeadersTable, JsonPathTable, Checkbox, JsonItemsHelpDialog, DirectAttributesHelpDialog, NgsiHelpDialog },\r\n    props: { selectedDataset: { type: Object as any } },\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            restDescriptor,\r\n            dataset: {} as any,\r\n            v$: useValidate() as any,\r\n            ngsiHelpVisible: false,\r\n            jsonItemsHelpVisible: false,\r\n            directAttributesHelpVisible: false,\r\n            httpMethods: restDescriptor.httpMethods\r\n        }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n        }\r\n    },\r\n    validations() {\r\n        const restFieldsRequired = (value) => {\r\n            return this.dataset.dsTypeCd != 'REST' || value\r\n        }\r\n        const customValidators: ICustomValidatorMap = { 'rest-fields-required': restFieldsRequired }\r\n        const validationObject = { dataset: createValidations('dataset', restDescriptor.validations.dataset, customValidators) }\r\n        return validationObject\r\n    },\r\n    methods: {}\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2\">\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-12\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"sparqlEndpoint\"\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            v-model.trim=\"v$.dataset.sparqlEndpoint.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.sparqlEndpoint.$invalid && v$.dataset.sparqlEndpoint.$dirty\r\n                            }\"\r\n                            @blur=\"v$.dataset.sparqlEndpoint.$touch()\"\r\n                            @change=\"$emit('touched')\"\r\n                        />\r\n                        <label for=\"sparqlEndpoint\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.sparqlEndpoint') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.sparqlEndpoint\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.sparqlEndpoint') }\" />\r\n                </div>\r\n                <div class=\"p-field p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"sparqlDefaultGraphIri\" class=\"kn-material-input\" v-model.trim=\"dataset.sparqlDefaultGraphIri\" @change=\"$emit('touched')\" />\r\n                        <label for=\"sparqlDefaultGraphIri\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.sparqlDefaultGraphIri') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"sparqlExecutionTimeout\" class=\"kn-material-input\" type=\"number\" v-model.trim=\"dataset.sparqlExecutionTimeout\" @change=\"$emit('touched')\" />\r\n                        <label for=\"sparqlExecutionTimeout\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.sparqlExecutionTimeout') }} </label>\r\n                    </span>\r\n                </div>\r\n            </form>\r\n            <VCodeMirror class=\"p-mt-2\" ref=\"codeMirrorSparql\" v-model:value=\"dataset.sparqlQuery\" :autoHeight=\"true\" :options=\"sparqlOptions\" @keyup=\"$emit('touched')\" />\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\nimport VCodeMirror, { CodeMirror  } from 'codemirror-editor-vue3'\r\nimport useValidate from '@vuelidate/core'\r\nimport sparqlDescriptor from './DatasetManagementSparqlDataset.json'\r\nimport Card from 'primevue/card'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\n\r\nexport default defineComponent({\r\n    components: { Card, VCodeMirror, KnValidationMessages },\r\n    props: { selectedDataset: { type: Object as any } },\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            sparqlDescriptor,\r\n            dataset: {} as any,\r\n            v$: useValidate() as any,\r\n            codeMirrorSparql: {} as any,\r\n            sparqlOptions: {\r\n                mode: 'application/sparql-query',\r\n                lineWrapping: true,\r\n                indentWithTabs: true,\r\n                smartIndent: true,\r\n                matchBrackets: true,\r\n                theme: 'eclipse',\r\n                lineNumbers: true\r\n            }\r\n        }\r\n    },\r\n    created() {\r\n        this.loadDataset()\r\n        this.setupCodeMirror()\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.loadDataset()\r\n        }\r\n    },\r\n    validations() {\r\n        const sparqlFieldsRequired = (value) => {\r\n            return this.dataset.dsTypeCd != 'SPARQL' || value\r\n        }\r\n        const customValidators: ICustomValidatorMap = { 'sparql-fields-required': sparqlFieldsRequired }\r\n        const validationObject = { dataset: createValidations('dataset', sparqlDescriptor.validations.dataset, customValidators) }\r\n        return validationObject\r\n    },\r\n    methods: {\r\n        loadDataset() {\r\n            this.dataset = this.selectedDataset\r\n            this.dataset.sparqlQuery ? '' : (this.dataset.sparqlQuery = '')\r\n        },\r\n        setupCodeMirror() {\r\n            this.$refs.codeMirrorSparql ? (this.codeMirrorSparql = (this.$refs.codeMirrorSparql as any).editor as any) : ''\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Dialog :header=\"$t('managers.datasetManagement.helpTitle')\" :style=\"detailDescriptor.style.infoDialog\" :visible=\"visible\" :modal=\"true\" class=\"p-fluid kn-dialog--toolbar--primary\" :closable=\"false\">\r\n        <div class=\"p-mt-3\">\r\n            If you want to specify a single facet.query parameter just define in this way\r\n            <pre>price:[500 TO *]</pre>\r\n            If you want to specify multiple facet.query parameters you need to add also the prefix facet.query= and separate the values with &. You should also use same encoding like you are writing an URL. For example\r\n            <pre>facet.query=price:[*+TO+500]&facet.query=price:[500+TO+*]</pre>\r\n        </div>\r\n\r\n        <template #footer>\r\n            <Button class=\"kn-button kn-button--primary\" @click=\"$emit('close')\"> {{ $t('common.close') }}</Button>\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport Dialog from 'primevue/dialog'\r\nimport detailDescriptor from '../../DatasetManagementDetailViewDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'lovs-management-info-dialog',\r\n    components: { Dialog },\r\n    emits: ['close'],\r\n    props: {\r\n        visible: { type: Boolean }\r\n    },\r\n    data() {\r\n        return {\r\n            detailDescriptor\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-mt-2 p-mx-2\">\r\n        <template #start>\r\n            <Button v-if=\"!expandTableCard\" icon=\"fas fa-chevron-right\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color:white\" @click=\"expandTableCard = true\" />\r\n            <Button v-else icon=\"fas fa-chevron-down\" class=\"p-button-text p-button-rounded p-button-plain\" style=\"color:white\" @click=\"expandTableCard = false\" />\r\n            {{ $t('managers.datasetManagement.queryParamTable') }}\r\n        </template>\r\n        <template #end>\r\n            <Button icon=\"fas fa-plus\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"addNewParam\" />\r\n            <Button icon=\"fas fa-eraser\" class=\"p-button-text p-button-rounded p-button-plain\" :disabled=\"disableDeleteAll\" @click=\"removeAllParams\" />\r\n        </template>\r\n    </Toolbar>\r\n    <Card v-show=\"expandTableCard\" class=\"p-mx-2\">\r\n        <template #content>\r\n            <DataTable class=\"p-datatable-sm kn-table\" editMode=\"cell\" :value=\"dataset.restRequestAdditionalParameters\" :scrollable=\"true\" scrollHeight=\"250px\" dataKey=\"versNum\" responsiveLayout=\"stack\" breakpoint=\"960px\" @cell-edit-complete=\"onCellEditComplete\">\r\n                <template #empty>\r\n                    {{ $t('managers.datasetManagement.tableEmpty') }}\r\n                </template>\r\n                <Column field=\"name\" :header=\"$t('kpi.alert.name')\" :sortable=\"true\">\r\n                    <template #editor=\"{data}\">\r\n                        <InputText class=\"kn-material-input\" :style=\"tableDescriptor.style.columnStyle\" v-model=\"data.name\" />\r\n                    </template>\r\n                </Column>\r\n                <Column field=\"value\" :header=\"$t('common.value')\" :sortable=\"true\">\r\n                    <template #editor=\"{data}\">\r\n                        <InputText class=\"kn-material-input\" :style=\"tableDescriptor.style.columnStyle\" v-model=\"data.value\" />\r\n                    </template>\r\n                </Column>\r\n                <Column @rowClick=\"false\">\r\n                    <template #body=\"slotProps\">\r\n                        <Button icon=\"pi pi-trash\" class=\"p-button-link\" @click=\"deleteParam(slotProps)\" />\r\n                    </template>\r\n                </Column>\r\n            </DataTable>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport tableDescriptor from './DatasetManagementTablesDescriptor.json'\r\nimport Card from 'primevue/card'\r\nimport DataTable from 'primevue/datatable'\r\nimport Column from 'primevue/column'\r\n\r\nexport default defineComponent({\r\n    components: { Card, DataTable, Column },\r\n    props: {\r\n        selectedDataset: { type: Object as any }\r\n    },\r\n    computed: {\r\n        disableDeleteAll() {\r\n            if (!this.dataset.restRequestAdditionalParameters || this.dataset['restRequestAdditionalParameters'].length == 0) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        }\r\n    },\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            tableDescriptor,\r\n            dataset: {} as any,\r\n            expandTableCard: false\r\n        }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n        }\r\n    },\r\n    methods: {\r\n        addNewParam() {\r\n            this.dataset.restRequestAdditionalParameters ? '' : (this.dataset.restRequestAdditionalParameters = [])\r\n            const newParam = { ...tableDescriptor.newRequestHeader }\r\n            this.dataset.restRequestAdditionalParameters.push(newParam)\r\n        },\r\n        deleteParam(removedParam) {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.uppercaseDelete'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => (this.dataset.restRequestAdditionalParameters = this.dataset.restRequestAdditionalParameters.filter((paramToRemove) => removedParam.data.name !== paramToRemove.name))\r\n            })\r\n        },\r\n        removeAllParams() {\r\n            this.$confirm.require({\r\n                message: this.$t('managers.datasetManagement.deleteAllRequestHeaderMsg'),\r\n                header: this.$t('managers.datasetManagement.deleteAllRequestHeaderTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => (this.dataset.restRequestAdditionalParameters = [])\r\n            })\r\n        },\r\n        onCellEditComplete(event) {\r\n            this.dataset.restRequestAdditionalParameters[event.index] = event.newData\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2\">\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"restAddress\"\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            v-model.trim=\"v$.dataset.restAddress.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.restAddress.$invalid && v$.dataset.restAddress.$dirty\r\n                            }\"\r\n                            @blur=\"v$.dataset.restAddress.$touch()\"\r\n                            @change=\"$emit('touched')\"\r\n                        />\r\n                        <label for=\"restAddress\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.restAddress') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.restAddress\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.restAddress') }\" />\r\n                </div>\r\n                <div class=\"p-field p-col-6 p-float-label\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"solrCollection\"\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            v-model.trim=\"v$.dataset.solrCollection.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.solrCollection.$invalid && v$.dataset.solrCollection.$dirty\r\n                            }\"\r\n                            @blur=\"v$.dataset.solrCollection.$touch()\"\r\n                            @change=\"$emit('touched')\"\r\n                        />\r\n                        <label for=\"solrCollection\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.solrCollection') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.solrCollection\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.solrCollection') }\" />\r\n                </div>\r\n                <div class=\"p-field p-col-12 p-float-label\">\r\n                    <InputText id=\"restRequestBody\" class=\"kn-material-input\" type=\"text\" maxLength=\"2000\" v-model.trim=\"dataset.restRequestBody\" @change=\"$emit('touched')\" />\r\n                    <label for=\"restRequestBody\" class=\"kn-material-input-label\"> {{ $t('kpi.measureDefinition.query') }} </label>\r\n                </div>\r\n                <div class=\"p-field p-col-12 p-float-label\" v-if=\"dataset.solrType == 'DOCUMENTS'\">\r\n                    <InputText\r\n                        id=\"solrFieldList\"\r\n                        class=\"kn-material-input\"\r\n                        type=\"text\"\r\n                        v-model.trim=\"v$.dataset.solrFieldList.$model\"\r\n                        :class=\"{\r\n                            'p-invalid': v$.dataset.solrFieldList.$invalid && v$.dataset.solrFieldList.$dirty\r\n                        }\"\r\n                        @blur=\"v$.dataset.solrFieldList.$touch()\"\r\n                        @change=\"$emit('touched')\"\r\n                    />\r\n                    <label for=\"solrFieldList\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.solrFieldList') }} * </label>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.solrFieldList\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.solrFieldList') }\" />\r\n                </div>\r\n            </form>\r\n        </template>\r\n    </Card>\r\n\r\n    <RequestHeadersTable :selectedDataset=\"selectedDataset\" />\r\n    <QueryParamTable :selectedDataset=\"selectedDataset\" />\r\n    <FacetInfoDialog :visible=\"facetQueryHelpVisible\" @close=\"facetQueryHelpVisible = false\" />\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\nimport useValidate from '@vuelidate/core'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport solrDescriptor from './DatasetManagementSolrDatasetDescriptor.json'\r\nimport restDescriptor from '../restDataset/DatasetManagementRestDatasetDescriptor.json'\r\nimport FacetInfoDialog from '../infoDialogs/DatasetManagementFacetInfoDialog.vue'\r\nimport RequestHeadersTable from '../tables/DatasetManagementRequestHeadersTable.vue'\r\nimport QueryParamTable from '../tables/DatasetManagementQueryParamTable.vue'\r\nimport Card from 'primevue/card'\r\n\r\nexport default defineComponent({\r\n    components: { Card, KnValidationMessages, FacetInfoDialog, RequestHeadersTable, QueryParamTable },\r\n    props: {\r\n        parentValid: { type: Boolean },\r\n        selectedDataset: { type: Object as any },\r\n        dataSources: { type: Array as any },\r\n        businessModels: { type: Array as any }\r\n    },\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            restDescriptor,\r\n            solrDescriptor,\r\n            dataset: {} as any,\r\n            v$: useValidate() as any,\r\n            facetQueryHelpVisible: false\r\n        }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n        if (this.dataset.dsTypeCd === 'Solr' && (!this.dataset.solrType || this.dataset.solrType === 'FACETS')) this.dataset.solrType = 'DOCUMENTS'\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n        }\r\n    },\r\n    validations() {\r\n        const solrFieldsRequired = (value) => {\r\n            return this.dataset.dsTypeCd != 'Solr' || value\r\n        }\r\n        const documentFieldsRequired = (value) => {\r\n            return this.dataset.solrType != 'DOCUMENTS' || value\r\n        }\r\n        const customValidators: ICustomValidatorMap = { 'solr-fields-required': solrFieldsRequired, 'document-fields-required': documentFieldsRequired }\r\n        const validationObject = { dataset: createValidations('dataset', solrDescriptor.validations.dataset, customValidators) }\r\n        return validationObject\r\n    },\r\n    methods: {}\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2\">\r\n        <template #content>\r\n            <div class=\"p-field-radiobutton\">\r\n                <RadioButton name=\"Python\" value=\"python\" v-model=\"dataset.pythonDatasetType\" @click=\"resetPythonEnv\" />\r\n                <label for=\"Python\">Python</label>\r\n                <RadioButton name=\"R\" class=\"p-ml-3\" value=\"r\" v-model=\"dataset.pythonDatasetType\" @click=\"resetPythonEnv\" />\r\n                <label for=\"R\">R</label>\r\n            </div>\r\n            <form class=\"p-fluid p-formgrid p-grid p-mt-2\">\r\n                <div class=\"p-field p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown\r\n                            id=\"pythonEnvironment\"\r\n                            class=\"kn-material-input\"\r\n                            :options=\"datasetTypes\"\r\n                            optionLabel=\"label\"\r\n                            optionValue=\"label\"\r\n                            v-model=\"dataset.pythonEnvironment.label\"\r\n                            @change=\"updateValueFromLabel(datasetTypes, 'value', $event.value)\"\r\n                            :class=\"{\r\n                                'p-invalid': !dataset.pythonEnvironment.label || dataset.pythonEnvironment.label === ''\r\n                            }\"\r\n                        />\r\n                        <label for=\"pythonEnvironment\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.environment') }} * </label>\r\n                    </span>\r\n                    <small v-if=\"!dataset.pythonEnvironment.label || dataset.pythonEnvironment.label === ''\" for=\"pythonEnvironment\" class=\"p-error p-mt-2\"> {{ $t('managers.datasetManagement.envIsRequired') }} </small>\r\n                </div>\r\n                <div class=\"p-field p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"dataframeName\"\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            v-model.trim=\"v$.dataset.dataframeName.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.dataframeName.$invalid && v$.dataset.dataframeName.$dirty\r\n                            }\"\r\n                            @blur=\"v$.dataset.dataframeName.$touch()\"\r\n                            @change=\"$emit('touched')\"\r\n                        />\r\n                        <label for=\"dataframeName\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.dataframeName') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.dataframeName\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.dataframeName') }\" />\r\n                </div>\r\n            </form>\r\n            <Button :label=\"$t('managers.datasetManagement.checkEnvironment')\" class=\"p-button kn-button--primary\" :disabled=\"!dataset.pythonEnvironment.label\" @click=\"checkEnvironment\" />\r\n\r\n            <VCodeMirror class=\"p-mt-4\" ref=\"codeMirrorPython\" v-model:value=\"dataset.pythonScript\" :autoHeight=\"true\" :options=\"scriptOptions\" @keyup=\"$emit('touched')\" />\r\n\r\n            <Dialog :header=\"$t('managers.datasetManagement.availableLibraries')\" style=\"width: 60vw\" :visible=\"libListVisible\" :modal=\"false\" class=\"p-fluid kn-dialog--toolbar--primary\" :closable=\"false\">\r\n                <div class=\"p-mt-3\">\r\n                    <DataTable class=\"p-datatable-sm kn-table\" :value=\"pythonEnvLibs\" :scrollable=\"true\" responsiveLayout=\"stack\" breakpoint=\"960px\">\r\n                        <Column field=\"name\" :header=\"$t('kpi.alert.name')\" :sortable=\"true\">\r\n                            <template #body=\"{ data }\"> <span v-if=\"dataset.pythonDatasetType == 'python'\"></span> {{ data.name }} <span v-if=\"dataset.pythonDatasetType == 'r'\"></span> {{ data[0] }} </template>\r\n                        </Column>\r\n                        <Column field=\"version\" :header=\"$t('common.version')\" :sortable=\"true\">\r\n                            <template #body=\"{ data }\"> <span v-if=\"dataset.pythonDatasetType == 'python'\"></span> {{ data.version }} <span v-if=\"dataset.pythonDatasetType == 'r'\"></span> {{ data[1] }} </template>\r\n                        </Column>\r\n                    </DataTable>\r\n                </div>\r\n                <template #footer>\r\n                    <Button class=\"kn-button kn-button--primary\" @click=\"libListVisible = false\"> {{ $t('common.close') }}</Button>\r\n                </template>\r\n            </Dialog>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { AxiosResponse } from 'axios'\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\nimport VCodeMirror, { CodeMirror  } from 'codemirror-editor-vue3'\r\nimport useValidate from '@vuelidate/core'\r\nimport pythonDescriptor from './DatasetManagementPythonDataset.json'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Card from 'primevue/card'\r\nimport RadioButton from 'primevue/radiobutton'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport Dialog from 'primevue/dialog'\r\nimport DataTable from 'primevue/datatable'\r\nimport Column from 'primevue/column'\r\n\r\nexport default defineComponent({\r\n    components: { Card, Dropdown, VCodeMirror, RadioButton, KnValidationMessages, Dialog, DataTable, Column },\r\n    props: { selectedDataset: { type: Object as any }, pythonEnvironments: { type: Array as any }, rEnvironments: { type: Array as any } },\r\n    emits: ['touched'],\r\n    computed: {\r\n        datasetTypes(): any {\r\n            if (this.dataset.pythonDatasetType == 'python') {\r\n                return this.pythonEnvironments\r\n            } else {\r\n                return this.rEnvironments\r\n            }\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            pythonDescriptor,\r\n            v$: useValidate() as any,\r\n            dataset: {} as any,\r\n            codeMirrorPython: {} as any,\r\n            pythonEnvLibs: null as any,\r\n            libListVisible: false,\r\n            scriptOptions: {\r\n                theme: 'eclipse',\r\n                lineWrapping: true,\r\n                lineNumbers: true,\r\n                mode: 'text/x-python'\r\n            }\r\n        }\r\n    },\r\n    created() {\r\n        this.loadDataset()\r\n        this.setupCodeMirror()\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.loadDataset()\r\n        }\r\n    },\r\n    validations() {\r\n        const pythonFieldsRequired = (value) => {\r\n            return this.dataset.dsTypeCd != 'Python/R' || value\r\n        }\r\n        const customValidators: ICustomValidatorMap = { 'python-fields-required': pythonFieldsRequired }\r\n        const validationObject = { dataset: createValidations('dataset', pythonDescriptor.validations.dataset, customValidators) }\r\n        return validationObject\r\n    },\r\n    methods: {\r\n        loadDataset() {\r\n            this.dataset = this.selectedDataset\r\n            this.dataset.pythonDatasetType ? '' : (this.dataset.pythonDatasetType = 'python')\r\n            this.dataset.pythonScript ? '' : (this.dataset.pythonScript = '')\r\n        },\r\n        setupCodeMirror() {\r\n            const interval = setInterval(() => {\r\n                if (!this.$refs.codeMirrorPython) return\r\n                this.codeMirrorPython = (this.$refs.codeMirrorPython as any).editor as any\r\n                clearInterval(interval)\r\n            }, 200)\r\n        },\r\n        getEnvLibraries() {\r\n            if (this.dataset.pythonDatasetType == 'python') {\r\n                return this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/backendservices/widgets/python/libraries/${this.dataset.pythonEnvironment.label}`)\r\n            } else {\r\n                return this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/backendservices/widgets/RWidget/libraries/${this.dataset.pythonEnvironment.label}`)\r\n            }\r\n        },\r\n        async checkEnvironment() {\r\n            await this.$http\r\n            this.getEnvLibraries()\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.dataset.pythonDatasetType == 'python' ? (this.pythonEnvLibs = JSON.parse(response.data.result)) : (this.pythonEnvLibs = JSON.parse(response.data.result))\r\n                    this.libListVisible = true\r\n                })\r\n                .catch(() => {})\r\n        },\r\n        updateValueFromLabel(optionsArray, fieldToUpdate, updatedField) {\r\n            const selectedField = optionsArray.find((option) => option.label === updatedField)\r\n            selectedField ? (this.dataset.pythonEnvironment[fieldToUpdate] = selectedField.value) : ''\r\n        },\r\n        resetPythonEnv() {\r\n            this.dataset.pythonEnvironment = {\r\n                label: '',\r\n                value: ''\r\n            }\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2\">\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-4\">\r\n                    <Button :label=\"$t('managers.datasetManagement.monitoring')\" class=\"kn-button kn-button--primary\" @click=\"showMonitoringDialog = true\" />\r\n                </div>\r\n                <div class=\"p-field p-col-4\">\r\n                    <Button :label=\"$t('managers.datasetManagement.openDP')\" class=\"kn-button kn-button--primary\" @click=\"prepareForDataPreparation\" />\r\n                </div>\r\n            </form>\r\n        </template>\r\n    </Card>\r\n\r\n    <MonitoringDialog :visibility=\"showMonitoringDialog\" :dataset=\"selectedDataset\" @close=\"showMonitoringDialog = false\" @save=\"updateDatasetAndSave\" />\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { AxiosResponse } from 'axios'\r\nimport descriptor from './DatasetManagementPreparedDataset.json'\r\nimport Card from 'primevue/card'\r\nimport MonitoringDialog from '@/modules/workspace/dataPreparation/DataPreparationMonitoring/DataPreparationMonitoringDialog.vue'\r\nimport mainStore from '../../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    components: { Card, MonitoringDialog },\r\n    props: { selectedDataset: { type: Object as any }, dataSources: { type: Array as any } },\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            descriptor,\r\n            dataset: {} as any,\r\n            availableDatasets: [] as any,\r\n            avroDatasets: [] as any,\r\n            showMonitoringDialog: false\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n        }\r\n    },\r\n    methods: {\r\n        async loadDataset(datasetId: Number) {\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets/dataset/id/${datasetId}`)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.dataset = response.data[0]\r\n                })\r\n                .catch(() => {})\r\n        },\r\n        routeToDataPreparation() {\r\n            let path = ''\r\n            this.$confirm.require({\r\n                header: this.$t('managers.datasetManagement.openDP'),\r\n                message: this.$t('managers.datasetManagement.confirmMsg'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => {\r\n                    this.$router.push(path)\r\n                }\r\n            })\r\n        },\r\n\r\n        async getAllAvroDataSets() {\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `3.0/datasets/avro`)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.avroDatasets = response.data\r\n                })\r\n                .catch(() => {})\r\n        },\r\n\r\n        async prepareForDataPreparation() {\r\n            await this.getAllAvroDataSets()\r\n            await this.openDataPreparation(this.selectedDataset)\r\n        },\r\n\r\n        isAvroReady(dsId: Number) {\r\n            if (this.avroDatasets.indexOf(dsId) >= 0 || (dsId && this.avroDatasets.indexOf(dsId.toString())) >= 0) return true\r\n            else return false\r\n        },\r\n\r\n        openDataPreparation(dataset: any) {\r\n            if (dataset.dsTypeCd == 'Prepared') {\r\n                //edit existing data prep\r\n                this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `3.0/datasets/advanced/${dataset.id}`).then(\r\n                    (response: AxiosResponse<any>) => {\r\n                        let instanceId = response.data.configuration.dataPrepInstanceId\r\n                        this.$http.get(import.meta.env.VITE_DATA_PREPARATION_PATH + `1.0/process/by-instance-id/${instanceId}`).then(\r\n                            (response: AxiosResponse<any>) => {\r\n                                let transformations = response.data.definition\r\n                                let processId = response.data.id\r\n                                let datasetId = response.data.instance.dataSetId\r\n                                if (this.isAvroReady(datasetId))\r\n                                    // check if Avro file has been deleted or not\r\n                                    this.$router.push({ name: 'data-preparation', params: { id: datasetId, transformations: JSON.stringify(transformations), processId: processId, instanceId: instanceId, dataset: JSON.stringify(dataset) } })\r\n                                else {\r\n                                    this.store.setInfo({\r\n                                        title: 'Avro file is missing',\r\n                                        msg: 'Generate it again and then retry'\r\n                                    })\r\n                                }\r\n                            },\r\n                            () => {\r\n                                this.store.setError({ title: 'Save error', msg: 'Cannot create process' })\r\n                            }\r\n                        )\r\n                    },\r\n                    () => {\r\n                        this.store.setError({\r\n                            title: 'Cannot open data preparation'\r\n                        })\r\n                    }\r\n                )\r\n            } else if (this.isAvroReady(dataset.id)) {\r\n                // original dataset already exported in Avro\r\n                this.$router.push({ name: 'data-preparation', params: { id: dataset.id } })\r\n            } else {\r\n                this.store.setInfo({\r\n                    title: 'Avro file is missing',\r\n                    msg: 'Generate it again and then retry'\r\n                })\r\n            }\r\n        },\r\n        async updateDatasetAndSave(newConfig) {\r\n            this.showMonitoringDialog = false\r\n\r\n            await this.$http.patch(import.meta.env.VITE_DATA_PREPARATION_PATH + '1.0/instance/' + newConfig.instanceId, { config: newConfig.config }, { headers: { Accept: 'application/json, */*' } }).then(\r\n                () => {\r\n                    this.loadDataset(this.selectedDataset.id)\r\n                },\r\n                () => {\r\n                    this.store.setError({ title: this.$t('common.error.saving'), msg: this.$t('managers.workspaceManagement.dataPreparation.errors.updatingSchedulation') })\r\n                }\r\n            )\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div v-if=\"dataset.dsTypeCd == 'Federated'\">\r\n        <label>{{ $t('managers.datasetManagement.selectDatasetType') }}: </label> <b>Federated</b>\r\n    </div>\r\n    <div id=\"is-not-federated\" v-else>\r\n        <Card class=\"p-m-2\">\r\n            <template #content>\r\n                <div id=\"dropdownContainer\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown\r\n                            id=\"scope\"\r\n                            class=\"kn-material-input\"\r\n                            :style=\"typeTabDescriptor.style.maxWidth\"\r\n                            :options=\"datasetTypes\"\r\n                            optionLabel=\"VALUE_CD\"\r\n                            optionValue=\"VALUE_CD\"\r\n                            v-model=\"v$.dataset.dsTypeCd.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.dsTypeCd.$invalid && v$.dataset.dsTypeCd.$dirty\r\n                            }\"\r\n                            @before-show=\"v$.dataset.dsTypeCd.$touch()\"\r\n                            @change=\";((this.dataset.pars = []), (this.dataset.restJsonPathAttributes = []), (this.dataset.restRequestHeaders = [])), $emit('touched')\"\r\n                        />\r\n                        <label for=\"scope\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.selectDatasetType') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages\r\n                        :vComp=\"v$.dataset.dsTypeCd\"\r\n                        :additionalTranslateParams=\"{\r\n                            fieldName: $t('managers.datasetManagement.selectDatasetType')\r\n                        }\"\r\n                    />\r\n                </div>\r\n            </template>\r\n        </Card>\r\n    </div>\r\n    <FileDataset v-if=\"dataset.dsTypeCd == 'File'\" :selectedDataset=\"selectedDataset\" @fileUploaded=\"$emit('fileUploaded')\" />\r\n    <QueryDataset v-if=\"dataset.dsTypeCd == 'Query'\" :selectedDataset=\"selectedDataset\" :dataSources=\"dataSources\" :scriptTypes=\"scriptTypes\" :activeTab=\"activeTab\" @queryEdited=\"$emit('queryEdited')\" />\r\n    <JavaDataset v-if=\"dataset.dsTypeCd == 'Java Class'\" :selectedDataset=\"selectedDataset\" />\r\n    <ScriptDataset v-if=\"dataset.dsTypeCd == 'Script'\" :selectedDataset=\"selectedDataset\" :scriptTypes=\"scriptTypes\" :activeTab=\"activeTab\" />\r\n    <QbeDataset v-if=\"dataset.dsTypeCd == 'Qbe' || dataset.dsTypeCd == 'Federated'\" :selectedDataset=\"selectedDataset\" :businessModels=\"businessModels\" :dataSources=\"dataSources\" :parentValid=\"parentValid\" />\r\n    <FlatDataset v-if=\"dataset.dsTypeCd == 'Flat'\" :selectedDataset=\"selectedDataset\" :dataSources=\"dataSources\" />\r\n    <CkanDataset v-if=\"dataset.dsTypeCd == 'Ckan'\" :selectedDataset=\"selectedDataset\" />\r\n    <RestDataset v-if=\"dataset.dsTypeCd == 'REST'\" :selectedDataset=\"selectedDataset\" />\r\n    <SparqlDataset v-if=\"dataset.dsTypeCd == 'SPARQL'\" :selectedDataset=\"selectedDataset\" />\r\n    <SolrDataset v-if=\"dataset.dsTypeCd == 'Solr'\" :selectedDataset=\"selectedDataset\" />\r\n    <PythonDataset v-if=\"dataset.dsTypeCd == 'Python/R'\" :selectedDataset=\"selectedDataset\" :pythonEnvironments=\"pythonEnvironments\" :rEnvironments=\"rEnvironments\" />\r\n    <PreparedDataset v-if=\"dataset.dsTypeCd == 'Prepared'\" :selectedDataset=\"selectedDataset\" :pythonEnvironments=\"pythonEnvironments\" :rEnvironments=\"rEnvironments\" />\r\n    <ParamTable v-if=\"dataset.dsTypeCd && dataset.dsTypeCd != 'File' && dataset.dsTypeCd != 'Flat' && dataset.dsTypeCd != 'Prepared'\" :selectedDataset=\"selectedDataset\" />\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations } from '@/helpers/commons/validationHelper'\r\nimport useValidate from '@vuelidate/core'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Card from 'primevue/card'\r\nimport typeTabDescriptor from './DatasetManagementTypeCardDescriptor.json'\r\nimport ParamTable from './tables/DatasetManagementParamTable.vue'\r\nimport FileDataset from './fileDataset/DatasetManagementFileDataset.vue'\r\nimport QueryDataset from './queryDataset/DatasetManagementQueryDataset.vue'\r\nimport JavaDataset from './javaDataset/DatasetManagementJavaDataset.vue'\r\nimport ScriptDataset from './scriptDataset/DatasetManagementScriptDataset.vue'\r\nimport QbeDataset from './qbeDataset/DatasetManagementQbeDataset.vue'\r\nimport FlatDataset from './flatDataset/DatasetManagementFlatDataset.vue'\r\nimport CkanDataset from './ckanDataset/DatasetManagementCkanDataset.vue'\r\nimport RestDataset from './restDataset/DatasetManagementRestDataset.vue'\r\nimport SparqlDataset from './sparqlDataset/DatasetManagementSparqlDataset.vue'\r\nimport SolrDataset from './solrDataset/DatasetManagementSolrDataset.vue'\r\nimport PythonDataset from './pythonDataset/DatasetManagementPythonDataset.vue'\r\nimport PreparedDataset from './preparedDataset/DatasetManagementPreparedDataset.vue'\r\nexport default defineComponent({\r\n    components: { Card, Dropdown, KnValidationMessages, ParamTable, CkanDataset, QbeDataset, RestDataset, JavaDataset, FlatDataset, SolrDataset, QueryDataset, ScriptDataset, SparqlDataset, PythonDataset, FileDataset, PreparedDataset },\r\n    props: {\r\n        parentValid: { type: Boolean },\r\n        selectedDataset: { type: Object as any },\r\n        datasetTypes: { type: Array as any },\r\n        dataSources: { type: Array as any },\r\n        businessModels: { type: Array as any },\r\n        scriptTypes: { type: Array as any },\r\n        pythonEnvironments: { type: Array as any },\r\n        rEnvironments: { type: Array as any },\r\n        activeTab: { type: Number as any }\r\n    },\r\n    computed: {},\r\n    emits: ['touched', 'fileUploaded', 'qbeSaved', 'queryEdited'],\r\n    data() {\r\n        return {\r\n            typeTabDescriptor,\r\n            dataset: {} as any,\r\n            v$: useValidate() as any,\r\n            expandParamsCard: true\r\n        }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n        }\r\n    },\r\n    validations() {\r\n        const validationObject = {\r\n            dataset: createValidations('dataset', typeTabDescriptor.validations.dataset)\r\n        }\r\n        return validationObject\r\n    },\r\n    methods: {}\r\n})\r\n</script>\r\n","/*!\n * vuex v4.0.0\n * (c) 2021 Evan You\n * @license MIT\n */\nimport { inject, watch, reactive } from 'vue';\n\nvar storeKey = 'store';\n\nfunction useStore (key) {\n  if ( key === void 0 ) key = null;\n\n  return inject(key !== null ? key : storeKey)\n}\n\nvar target = typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n    ? global\n    : {};\nvar devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  }, { prepend: true });\n\n  store.subscribeAction(function (action, state) {\n    devtoolHook.emit('vuex:action', action, state);\n  }, { prepend: true });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\nfunction find (list, f) {\n  return list.filter(f)[0]\n}\n\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\nfunction deepCopy (obj, cache) {\n  if ( cache === void 0 ) cache = [];\n\n  // just return if obj is immutable value\n  if (obj === null || typeof obj !== 'object') {\n    return obj\n  }\n\n  // if obj is hit, it is in circular structure\n  var hit = find(cache, function (c) { return c.original === obj; });\n  if (hit) {\n    return hit.copy\n  }\n\n  var copy = Array.isArray(obj) ? [] : {};\n  // put the copy into cache at first\n  // because we want to refer it in recursive deepCopy\n  cache.push({\n    original: obj,\n    copy: copy\n  });\n\n  Object.keys(obj).forEach(function (key) {\n    copy[key] = deepCopy(obj[key], cache);\n  });\n\n  return copy\n}\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nfunction partial (fn, arg) {\n  return function () {\n    return fn(arg)\n  }\n}\n\n// Base data struct for store's module, package with some attribute and method\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  // Store some children item\n  this._children = Object.create(null);\n  // Store the origin module object which passed by programmer\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n\n  // Store the origin module's state\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors = { namespaced: { configurable: true } };\n\nprototypeAccessors.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.hasChild = function hasChild (key) {\n  return key in this._children\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.register([], rawRootModule, false);\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update([], this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  if ((process.env.NODE_ENV !== 'production')) {\n    assertRawModule(path, rawModule);\n  }\n\n  var newModule = new Module(rawModule, runtime);\n  if (path.length === 0) {\n    this.root = newModule;\n  } else {\n    var parent = this.get(path.slice(0, -1));\n    parent.addChild(path[path.length - 1], newModule);\n  }\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  var child = parent.getChild(key);\n\n  if (!child) {\n    if ((process.env.NODE_ENV !== 'production')) {\n      console.warn(\n        \"[vuex] trying to unregister module '\" + key + \"', which is \" +\n        \"not registered\"\n      );\n    }\n    return\n  }\n\n  if (!child.runtime) {\n    return\n  }\n\n  parent.removeChild(key);\n};\n\nModuleCollection.prototype.isRegistered = function isRegistered (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n\n  if (parent) {\n    return parent.hasChild(key)\n  }\n\n  return false\n};\n\nfunction update (path, targetModule, newModule) {\n  if ((process.env.NODE_ENV !== 'production')) {\n    assertRawModule(path, newModule);\n  }\n\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        if ((process.env.NODE_ENV !== 'production')) {\n          console.warn(\n            \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n            'manual reload is needed'\n          );\n        }\n        return\n      }\n      update(\n        path.concat(key),\n        targetModule.getChild(key),\n        newModule.modules[key]\n      );\n    }\n  }\n}\n\nvar functionAssert = {\n  assert: function (value) { return typeof value === 'function'; },\n  expected: 'function'\n};\n\nvar objectAssert = {\n  assert: function (value) { return typeof value === 'function' ||\n    (typeof value === 'object' && typeof value.handler === 'function'); },\n  expected: 'function or object with \"handler\" function'\n};\n\nvar assertTypes = {\n  getters: functionAssert,\n  mutations: functionAssert,\n  actions: objectAssert\n};\n\nfunction assertRawModule (path, rawModule) {\n  Object.keys(assertTypes).forEach(function (key) {\n    if (!rawModule[key]) { return }\n\n    var assertOptions = assertTypes[key];\n\n    forEachValue(rawModule[key], function (value, type) {\n      assert(\n        assertOptions.assert(value),\n        makeAssertionMessage(path, key, type, value, assertOptions.expected)\n      );\n    });\n  });\n}\n\nfunction makeAssertionMessage (path, key, type, value, expected) {\n  var buf = key + \" should be \" + expected + \" but \\\"\" + key + \".\" + type + \"\\\"\";\n  if (path.length > 0) {\n    buf += \" in module \\\"\" + (path.join('.')) + \"\\\"\";\n  }\n  buf += \" is \" + (JSON.stringify(value)) + \".\";\n  return buf\n}\n\nfunction createStore (options) {\n  return new Store(options)\n}\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  if ((process.env.NODE_ENV !== 'production')) {\n    assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n    assert(this instanceof Store, \"store must be called with the new operator.\");\n  }\n\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._actionSubscribers = [];\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._makeLocalGettersCache = Object.create(null);\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  var state = this._modules.root.state;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store state, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreState(this, state);\n\n  // apply plugins\n  plugins.forEach(function (plugin) { return plugin(this$1); });\n\n  var useDevtools = options.devtools !== undefined ? options.devtools : /* Vue.config.devtools */ true;\n  if (useDevtools) {\n    devtoolPlugin(this);\n  }\n};\n\nvar prototypeAccessors$1 = { state: { configurable: true } };\n\nStore.prototype.install = function install (app, injectKey) {\n  app.provide(injectKey || storeKey, this);\n  app.config.globalProperties.$store = this;\n};\n\nprototypeAccessors$1.state.get = function () {\n  return this._state.data\n};\n\nprototypeAccessors$1.state.set = function (v) {\n  if ((process.env.NODE_ENV !== 'production')) {\n    assert(false, \"use store.replaceState() to explicit replace store state.\");\n  }\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    if ((process.env.NODE_ENV !== 'production')) {\n      console.error((\"[vuex] unknown mutation type: \" + type));\n    }\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n\n  this._subscribers\n    .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe\n    .forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (\n    (process.env.NODE_ENV !== 'production') &&\n    options && options.silent\n  ) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    );\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n    var this$1 = this;\n\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var action = { type: type, payload: payload };\n  var entry = this._actions[type];\n  if (!entry) {\n    if ((process.env.NODE_ENV !== 'production')) {\n      console.error((\"[vuex] unknown action type: \" + type));\n    }\n    return\n  }\n\n  try {\n    this._actionSubscribers\n      .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe\n      .filter(function (sub) { return sub.before; })\n      .forEach(function (sub) { return sub.before(action, this$1.state); });\n  } catch (e) {\n    if ((process.env.NODE_ENV !== 'production')) {\n      console.warn(\"[vuex] error in before action subscribers: \");\n      console.error(e);\n    }\n  }\n\n  var result = entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload);\n\n  return new Promise(function (resolve, reject) {\n    result.then(function (res) {\n      try {\n        this$1._actionSubscribers\n          .filter(function (sub) { return sub.after; })\n          .forEach(function (sub) { return sub.after(action, this$1.state); });\n      } catch (e) {\n        if ((process.env.NODE_ENV !== 'production')) {\n          console.warn(\"[vuex] error in after action subscribers: \");\n          console.error(e);\n        }\n      }\n      resolve(res);\n    }, function (error) {\n      try {\n        this$1._actionSubscribers\n          .filter(function (sub) { return sub.error; })\n          .forEach(function (sub) { return sub.error(action, this$1.state, error); });\n      } catch (e) {\n        if ((process.env.NODE_ENV !== 'production')) {\n          console.warn(\"[vuex] error in error action subscribers: \");\n          console.error(e);\n        }\n      }\n      reject(error);\n    });\n  })\n};\n\nStore.prototype.subscribe = function subscribe (fn, options) {\n  return genericSubscribe(fn, this._subscribers, options)\n};\n\nStore.prototype.subscribeAction = function subscribeAction (fn, options) {\n  var subs = typeof fn === 'function' ? { before: fn } : fn;\n  return genericSubscribe(subs, this._actionSubscribers, options)\n};\n\nStore.prototype.watch = function watch$1 (getter, cb, options) {\n    var this$1 = this;\n\n  if ((process.env.NODE_ENV !== 'production')) {\n    assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  }\n  return watch(function () { return getter(this$1.state, this$1.getters); }, cb, Object.assign({}, options))\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._state.data = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule, options) {\n    if ( options === void 0 ) options = {};\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if ((process.env.NODE_ENV !== 'production')) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n    assert(path.length > 0, 'cannot register the root module by using registerModule.');\n  }\n\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path), options.preserveState);\n  // reset store to update getters...\n  resetStoreState(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if ((process.env.NODE_ENV !== 'production')) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  }\n\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    delete parentState[path[path.length - 1]];\n  });\n  resetStore(this);\n};\n\nStore.prototype.hasModule = function hasModule (path) {\n  if (typeof path === 'string') { path = [path]; }\n\n  if ((process.env.NODE_ENV !== 'production')) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  }\n\n  return this._modules.isRegistered(path)\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors$1 );\n\nfunction genericSubscribe (fn, subs, options) {\n  if (subs.indexOf(fn) < 0) {\n    options && options.prepend\n      ? subs.unshift(fn)\n      : subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n}\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset state\n  resetStoreState(store, state, hot);\n}\n\nfunction resetStoreState (store, state, hot) {\n  var oldState = store._state;\n\n  // bind store public getters\n  store.getters = {};\n  // reset local getters cache\n  store._makeLocalGettersCache = Object.create(null);\n  var wrappedGetters = store._wrappedGetters;\n  var computedObj = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    // direct inline function use will lead to closure preserving oldState.\n    // using partial to return function with only arguments preserved in closure environment.\n    computedObj[key] = partial(fn, store);\n    Object.defineProperty(store.getters, key, {\n      // TODO: use `computed` when it's possible. at the moment we can't due to\n      // https://github.com/vuejs/vuex/pull/1883\n      get: function () { return computedObj[key](); },\n      enumerable: true // for local getters\n    });\n  });\n\n  store._state = reactive({\n    data: state\n  });\n\n  // enable strict mode for new state\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldState) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldState.data = null;\n      });\n    }\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    if (store._modulesNamespaceMap[namespace] && (process.env.NODE_ENV !== 'production')) {\n      console.error((\"[vuex] duplicate namespace \" + namespace + \" for the namespaced module \" + (path.join('/'))));\n    }\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      if ((process.env.NODE_ENV !== 'production')) {\n        if (moduleName in parentState) {\n          console.warn(\n            (\"[vuex] state field \\\"\" + moduleName + \"\\\" was overridden by a module with the same name at \\\"\" + (path.join('.')) + \"\\\"\")\n          );\n        }\n      }\n      parentState[moduleName] = module.state;\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var type = action.root ? key : namespace + key;\n    var handler = action.handler || action;\n    registerAction(store, type, handler, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ((process.env.NODE_ENV !== 'production') && !store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ((process.env.NODE_ENV !== 'production') && !store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by state update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  if (!store._makeLocalGettersCache[namespace]) {\n    var gettersProxy = {};\n    var splitPos = namespace.length;\n    Object.keys(store.getters).forEach(function (type) {\n      // skip if the target getter is not match this namespace\n      if (type.slice(0, splitPos) !== namespace) { return }\n\n      // extract local getter type\n      var localType = type.slice(splitPos);\n\n      // Add a port to the getters proxy.\n      // Define as getter property because\n      // we do not want to evaluate the getters in this time.\n      Object.defineProperty(gettersProxy, localType, {\n        get: function () { return store.getters[type]; },\n        enumerable: true\n      });\n    });\n    store._makeLocalGettersCache[namespace] = gettersProxy;\n  }\n\n  return store._makeLocalGettersCache[namespace]\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload) {\n    var res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if ((process.env.NODE_ENV !== 'production')) {\n      console.error((\"[vuex] duplicate getter key: \" + type));\n    }\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  watch(function () { return store._state.data; }, function () {\n    if ((process.env.NODE_ENV !== 'production')) {\n      assert(store._committing, \"do not mutate vuex store state outside mutation handlers.\");\n    }\n  }, { deep: true, flush: 'sync' });\n}\n\nfunction getNestedState (state, path) {\n  return path.reduce(function (state, key) { return state[key]; }, state)\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  if ((process.env.NODE_ENV !== 'production')) {\n    assert(typeof type === 'string', (\"expects string as the type, but found \" + (typeof type) + \".\"));\n  }\n\n  return { type: type, payload: payload, options: options }\n}\n\n/**\n * Reduce the code which written in Vue.js for getting the state.\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.\n * @param {Object}\n */\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  if ((process.env.NODE_ENV !== 'production') && !isValidMap(states)) {\n    console.error('[vuex] mapState: mapper parameter must be either an Array or an Object');\n  }\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for committing the mutation\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept another params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.\n * @return {Object}\n */\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  if ((process.env.NODE_ENV !== 'production') && !isValidMap(mutations)) {\n    console.error('[vuex] mapMutations: mapper parameter must be either an Array or an Object');\n  }\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      // Get the commit method from store\n      var commit = this.$store.commit;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);\n        if (!module) {\n          return\n        }\n        commit = module.context.commit;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [commit].concat(args))\n        : commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for getting the getters\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} getters\n * @return {Object}\n */\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  if ((process.env.NODE_ENV !== 'production') && !isValidMap(getters)) {\n    console.error('[vuex] mapGetters: mapper parameter must be either an Array or an Object');\n  }\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    // The namespace has been mutated by normalizeNamespace\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if ((process.env.NODE_ENV !== 'production') && !(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val));\n        return\n      }\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\n/**\n * Reduce the code which written in Vue.js for dispatch the action\n * @param {String} [namespace] - Module's namespace\n * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.\n * @return {Object}\n */\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  if ((process.env.NODE_ENV !== 'production') && !isValidMap(actions)) {\n    console.error('[vuex] mapActions: mapper parameter must be either an Array or an Object');\n  }\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      // get dispatch function from store\n      var dispatch = this.$store.dispatch;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);\n        if (!module) {\n          return\n        }\n        dispatch = module.context.dispatch;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\n/**\n * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object\n * @param {String} namespace\n * @return {Object}\n */\nvar createNamespacedHelpers = function (namespace) { return ({\n  mapState: mapState.bind(null, namespace),\n  mapGetters: mapGetters.bind(null, namespace),\n  mapMutations: mapMutations.bind(null, namespace),\n  mapActions: mapActions.bind(null, namespace)\n}); };\n\n/**\n * Normalize the map\n * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]\n * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]\n * @param {Array|Object} map\n * @return {Object}\n */\nfunction normalizeMap (map) {\n  if (!isValidMap(map)) {\n    return []\n  }\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\n/**\n * Validate whether given map is valid or not\n * @param {*} map\n * @return {Boolean}\n */\nfunction isValidMap (map) {\n  return Array.isArray(map) || isObject(map)\n}\n\n/**\n * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.\n * @param {Function} fn\n * @return {Function}\n */\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\n/**\n * Search a special module from store by namespace. if module not exist, print error message.\n * @param {Object} store\n * @param {String} helper\n * @param {String} namespace\n * @return {Object}\n */\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if ((process.env.NODE_ENV !== 'production') && !module) {\n    console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace));\n  }\n  return module\n}\n\n// Credits: borrowed code from fcomb/redux-logger\n\nfunction createLogger (ref) {\n  if ( ref === void 0 ) ref = {};\n  var collapsed = ref.collapsed; if ( collapsed === void 0 ) collapsed = true;\n  var filter = ref.filter; if ( filter === void 0 ) filter = function (mutation, stateBefore, stateAfter) { return true; };\n  var transformer = ref.transformer; if ( transformer === void 0 ) transformer = function (state) { return state; };\n  var mutationTransformer = ref.mutationTransformer; if ( mutationTransformer === void 0 ) mutationTransformer = function (mut) { return mut; };\n  var actionFilter = ref.actionFilter; if ( actionFilter === void 0 ) actionFilter = function (action, state) { return true; };\n  var actionTransformer = ref.actionTransformer; if ( actionTransformer === void 0 ) actionTransformer = function (act) { return act; };\n  var logMutations = ref.logMutations; if ( logMutations === void 0 ) logMutations = true;\n  var logActions = ref.logActions; if ( logActions === void 0 ) logActions = true;\n  var logger = ref.logger; if ( logger === void 0 ) logger = console;\n\n  return function (store) {\n    var prevState = deepCopy(store.state);\n\n    if (typeof logger === 'undefined') {\n      return\n    }\n\n    if (logMutations) {\n      store.subscribe(function (mutation, state) {\n        var nextState = deepCopy(state);\n\n        if (filter(mutation, prevState, nextState)) {\n          var formattedTime = getFormattedTime();\n          var formattedMutation = mutationTransformer(mutation);\n          var message = \"mutation \" + (mutation.type) + formattedTime;\n\n          startMessage(logger, message, collapsed);\n          logger.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState));\n          logger.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation);\n          logger.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState));\n          endMessage(logger);\n        }\n\n        prevState = nextState;\n      });\n    }\n\n    if (logActions) {\n      store.subscribeAction(function (action, state) {\n        if (actionFilter(action, state)) {\n          var formattedTime = getFormattedTime();\n          var formattedAction = actionTransformer(action);\n          var message = \"action \" + (action.type) + formattedTime;\n\n          startMessage(logger, message, collapsed);\n          logger.log('%c action', 'color: #03A9F4; font-weight: bold', formattedAction);\n          endMessage(logger);\n        }\n      });\n    }\n  }\n}\n\nfunction startMessage (logger, message, collapsed) {\n  var startMessage = collapsed\n    ? logger.groupCollapsed\n    : logger.group;\n\n  // render\n  try {\n    startMessage.call(logger, message);\n  } catch (e) {\n    logger.log(message);\n  }\n}\n\nfunction endMessage (logger) {\n  try {\n    logger.groupEnd();\n  } catch (e) {\n    logger.log('—— log end ——');\n  }\n}\n\nfunction getFormattedTime () {\n  var time = new Date();\n  return (\" @ \" + (pad(time.getHours(), 2)) + \":\" + (pad(time.getMinutes(), 2)) + \":\" + (pad(time.getSeconds(), 2)) + \".\" + (pad(time.getMilliseconds(), 3)))\n}\n\nfunction repeat (str, times) {\n  return (new Array(times + 1)).join(str)\n}\n\nfunction pad (num, maxLength) {\n  return repeat('0', maxLength - num.toString().length) + num\n}\n\nvar index = {\n  version: '4.0.0',\n  Store: Store,\n  storeKey: storeKey,\n  createStore: createStore,\n  useStore: useStore,\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions,\n  createNamespacedHelpers: createNamespacedHelpers,\n  createLogger: createLogger\n};\n\nexport default index;\nexport { Store, createLogger, createNamespacedHelpers, createStore, mapActions, mapGetters, mapMutations, mapState, storeKey, useStore };\n","<template>\r\n    <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n        <template #start>\r\n            <InputSwitch v-model=\"isTransformable\" @change=\"setTransformationType\" class=\"p-mr-2\" />\r\n            <span>{{ $t('managers.datasetManagement.pivotTransformer') }}</span>\r\n        </template>\r\n    </Toolbar>\r\n    <Card v-if=\"isTransformable\">\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-3\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"pivotColName\"\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            v-model.trim=\"v$.dataset.pivotColName.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.pivotColName.$invalid && v$.dataset.pivotColName.$dirty\r\n                            }\"\r\n                            @blur=\"v$.dataset.pivotColName.$touch()\"\r\n                            @change=\"$emit('touched')\"\r\n                        />\r\n                        <label for=\"pivotColName\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.pivotColName') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.pivotColName\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.pivotColName') }\" />\r\n                </div>\r\n                <div class=\"p-field p-col-3\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"pivotColValue\"\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            v-model=\"dataset.pivotColValue\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.pivotColValue.$invalid && v$.dataset.pivotColValue.$dirty\r\n                            }\"\r\n                            @blur=\"v$.dataset.pivotColValue.$touch()\"\r\n                            @change=\"$emit('touched')\"\r\n                        />\r\n                        <label for=\"pivotColValue\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.pivotColValue') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.pivotColValue\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.pivotColValue') }\" />\r\n                </div>\r\n                <div class=\"p-field p-col-3\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"pivotRowName\"\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            v-model=\"dataset.pivotRowName\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.dataset.pivotRowName.$invalid && v$.dataset.pivotRowName.$dirty\r\n                            }\"\r\n                            @blur=\"v$.dataset.pivotRowName.$touch()\"\r\n                            @change=\"$emit('touched')\"\r\n                        />\r\n                        <label for=\"pivotRowName\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.pivotRowName') }} *</label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.pivotRowName\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.pivotRowName') }\" />\r\n                </div>\r\n\r\n                <span class=\"p-field-checkbox p-col-3\">\r\n                    <label for=\"pivotIsNumRows\">{{ $t('managers.datasetManagement.pivotIsNumRows') }}</label>\r\n                    <Checkbox id=\"pivotIsNumRows\" class=\"p-ml-2\" v-model=\"dataset.pivotIsNumRows\" :binary=\"true\" @change=\"$emit('touched')\" />\r\n                </span>\r\n            </form>\r\n        </template>\r\n    </Card>\r\n\r\n    <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-mt-3\">\r\n        <template #start>\r\n            <InputSwitch v-model=\"dataset.isPersistedHDFS\" class=\"p-mr-2\" @change=\"$emit('touched')\" />\r\n            <span>{{ $t('managers.datasetManagement.isPersistedHDFS') }}</span>\r\n        </template>\r\n    </Toolbar>\r\n\r\n    <div v-if=\"dataset.dsTypeCd != 'Flat'\">\r\n        <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-mt-3\">\r\n            <template #start>\r\n                <InputSwitch v-model=\"dataset.isPersisted\" :disabled=\"disablePersist\" class=\"p-mr-2\" @change=\"$emit('touched')\" />\r\n                <span v-tooltip.top=\"{ value: $t('managers.datasetManagement.peristenceWarning'), disabled: !disablePersist }\">{{ $t('managers.datasetManagement.isPersisted') }}</span>\r\n            </template>\r\n        </Toolbar>\r\n        <Card v-if=\"dataset.isPersisted\">\r\n            <template #content>\r\n                <form class=\"p-fluid p-formgrid p-grid\">\r\n                    <div class=\"p-field p-col-3\">\r\n                        <span class=\"p-float-label\">\r\n                            <InputText\r\n                                id=\"persistTableName\"\r\n                                class=\"kn-material-input\"\r\n                                type=\"text\"\r\n                                v-model=\"dataset.persistTableName\"\r\n                                :class=\"{\r\n                                    'p-invalid': v$.dataset.persistTableName.$invalid && v$.dataset.persistTableName.$dirty\r\n                                }\"\r\n                                @blur=\"v$.dataset.persistTableName.$touch()\"\r\n                                @change=\"$emit('touched')\"\r\n                            />\r\n                            <label for=\"persistTableName\" class=\"kn-material-input-label\"> {{ $t('managers.datasetManagement.persistTableName') }} *</label>\r\n                        </span>\r\n                        <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.dataset.persistTableName\" :additionalTranslateParams=\"{ fieldName: $t('managers.datasetManagement.persistTableName') }\" />\r\n                    </div>\r\n                </form>\r\n                <Toolbar class=\"kn-toolbar kn-toolbar--default p-mt-3\" v-if=\"isAbleToSeeIsScheduledToolbar\">\r\n                    <template #start>\r\n                        <InputSwitch v-model=\"dataset.isScheduled\" class=\"p-mr-2\" @change=\"$emit('touched')\" />\r\n                        <span>{{ $t('managers.datasetManagement.isScheduled') }}</span>\r\n                    </template>\r\n                </Toolbar>\r\n                <DatasetScheduler v-if=\"isAbleToSeeDatasetScheduler\" :selectedDataset=\"dataset\" :schedulingData=\"schedulingData\" />\r\n            </template>\r\n        </Card>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations, ICustomValidatorMap } from '@/helpers/commons/validationHelper'\r\nimport useValidate from '@vuelidate/core'\r\nimport advancedCardDescriptor from './DatasetManagementAdvancedCardDescriptor.json'\r\nimport DatasetScheduler from './DatasetManagementScheduler.vue'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport Card from 'primevue/card'\r\nimport Checkbox from 'primevue/checkbox'\r\nimport InputSwitch from 'primevue/inputswitch'\r\nimport { mapState } from 'vuex'\r\n\r\nexport default defineComponent({\r\n    components: { Card, InputSwitch, Checkbox, KnValidationMessages, DatasetScheduler },\r\n    props: {\r\n        selectedDataset: { type: Object as any },\r\n        transformationDataset: { type: Object as any },\r\n        schedulingData: { type: Object as any }\r\n    },\r\n    computed: {\r\n        ...mapState({\r\n            user: 'user'\r\n        }),\r\n        disablePersist() {\r\n            if (this.dataset['pars'] && this.dataset['pars'].length > 0) {\r\n                return true\r\n            }\r\n            return false\r\n        },\r\n        isAbleToSeeIsScheduledToolbar(): Boolean {\r\n            return this.user.functionalities.includes('SchedulingDatasetManagement') && this.dataset.isPersisted\r\n        },\r\n        isAbleToSeeDatasetScheduler(): Boolean {\r\n            return this.user.functionalities.includes('SchedulingDatasetManagement') && this.dataset.isPersisted && this.dataset.isScheduled\r\n        }\r\n    },\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            v$: useValidate() as any,\r\n            advancedCardDescriptor,\r\n            dataset: {} as any,\r\n            testInput: 'testinput',\r\n            testCheckbox: true,\r\n            isTransformable: false\r\n        }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n        this.isDatasetTransformable()\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n            this.isDatasetTransformable()\r\n        }\r\n    },\r\n    validations() {\r\n        const transformationFieldsRequired = (value) => {\r\n            return !this.isTransformable || value\r\n        }\r\n        const persistFieldsRequired = (value) => {\r\n            return !this.dataset.isPersisted || value\r\n        }\r\n        const customValidators: ICustomValidatorMap = {\r\n            'transformable-field-required': transformationFieldsRequired,\r\n            'persist-field-required': persistFieldsRequired\r\n        }\r\n        const validationObject = {\r\n            dataset: createValidations('dataset', advancedCardDescriptor.validations.advancedTab, customValidators)\r\n        }\r\n        return validationObject\r\n    },\r\n    methods: {\r\n        isDatasetTransformable() {\r\n            if (this.dataset.trasfTypeCd && this.dataset.trasfTypeCd == this.transformationDataset.VALUE_CD) {\r\n                this.isTransformable = true\r\n            } else {\r\n                this.isTransformable = false\r\n            }\r\n        },\r\n        setTransformationType() {\r\n            if (this.isTransformable) {\r\n                this.dataset.trasfTypeCd = this.transformationDataset.VALUE_CD\r\n            } else {\r\n                this.dataset.trasfTypeCd ? (this.dataset.trasfTypeCd = '') : null\r\n                this.dataset.pivotColName ? (this.dataset.pivotColName = '') : null\r\n                this.dataset.pivotColValue ? (this.dataset.pivotColValue = '') : null\r\n                this.dataset.pivotIsNumRows ? (this.dataset.pivotIsNumRows = '') : null\r\n                this.dataset.pivotRowName ? (this.dataset.pivotRowName = '') : null\r\n            }\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div class=\"p-grid p-m-2 table-list-container\">\r\n        <div class=\"p-col-6 p-d-flex p-flex-column\">\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    {{ $t('managers.datasetManagement.availableTables') }}\r\n                </template>\r\n            </Toolbar>\r\n            <Listbox\r\n                class=\"kn-list link-list kn-flex\"\r\n                :listStyle=\"linkTabDescriptor.style.listbox\"\r\n                :options=\"availableTables\"\r\n                :filter=\"true\"\r\n                :filterPlaceholder=\"$t('common.search')\"\r\n                optionLabel=\"name\"\r\n                filterMatchMode=\"contains\"\r\n                :filterFields=\"linkTabDescriptor.filterFields\"\r\n                :emptyFilterMessage=\"$t('common.info.noDataFound')\"\r\n            >\r\n                <template #option=\"slotProps\">\r\n                    <div class=\"kn-list-item\" @click=\"addTableToSelectedList(slotProps.option)\">\r\n                        <div class=\"kn-list-item-text\">\r\n                            <span>{{ slotProps.option.name }}</span>\r\n                        </div>\r\n                    </div>\r\n                </template>\r\n            </Listbox>\r\n        </div>\r\n        <div class=\"p-col-6 p-d-flex p-flex-column\">\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    {{ $t('managers.datasetManagement.selectedTables') }}\r\n                </template>\r\n            </Toolbar>\r\n            <Listbox\r\n                class=\"kn-list link-list kn-flex\"\r\n                :listStyle=\"linkTabDescriptor.style.listbox\"\r\n                :options=\"selectedTables\"\r\n                :filter=\"true\"\r\n                :filterPlaceholder=\"$t('common.search')\"\r\n                optionLabel=\"name\"\r\n                filterMatchMode=\"contains\"\r\n                :filterFields=\"linkTabDescriptor.filterFields\"\r\n                :emptyFilterMessage=\"$t('managers.datasetManagement.noLinkedTables')\"\r\n            >\r\n                <template #empty>{{ $t('common.info.noDataFound') }}</template>\r\n                <template #option=\"slotProps\">\r\n                    <div class=\"kn-list-item\" @click=\"removeTableFromSelectedList(slotProps.option)\">\r\n                        <div class=\"kn-list-item-text\">\r\n                            <span>{{ slotProps.option.name }}</span>\r\n                        </div>\r\n                    </div>\r\n                </template>\r\n            </Listbox>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { AxiosResponse } from 'axios'\r\nimport { defineComponent } from 'vue'\r\nimport linkTabDescriptor from './DatasetManagementLinkCardDescriptor.json'\r\nimport Listbox from 'primevue/listbox'\r\nimport mainStore from '../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    components: { Listbox },\r\n    props: {\r\n        selectedDataset: { type: Object as any },\r\n        metaSourceResource: { type: Array as any },\r\n        activeTab: { type: Number }\r\n    },\r\n    emits: ['removeTables', 'addTables'],\r\n    data() {\r\n        return {\r\n            linkTabDescriptor,\r\n            availableResources: null as any,\r\n            selectedResource: null,\r\n            dataset: {} as any,\r\n            availableTables: [] as any,\r\n            selectedTables: [] as any,\r\n            tablesToRemove: [] as any,\r\n            tablesToAdd: [] as any\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n        this.getSelectedTables()\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n            this.getSelectedTables()\r\n        },\r\n        activeTab() {\r\n            if (this.activeTab === 3) {\r\n                this.getAvailableSources()\r\n            }\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        async getSelectedTables() {\r\n            if (this.dataset.id) {\r\n                this.$http\r\n                    .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/metaDsRelationResource/dataset/${this.dataset.id}/`)\r\n                    .then((response: AxiosResponse<any>) => (this.selectedTables = response.data))\r\n                    .catch((error) => this.store.setError({ title: this.$t('common.toast.error'), msg: error }))\r\n            }\r\n        },\r\n        async getAvailableSources() {\r\n            this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/metaSourceResource/`)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    if (response.data.length > 0) {\r\n                        this.availableResources = [...response.data]\r\n                        this.availableResources.filter((resource) => (resource.name === this.dataset.dataSource.toLowerCase() ? this.getAvailableSourceTables(resource.sourceId) : ''))\r\n                    } else {\r\n                        this.store.setInfo({ title: this.$t('importExport.gallery.column.info'), msg: this.$t('managers.datasetManagement.noSourceTables') })\r\n                    }\r\n                })\r\n                .catch((error) => this.store.setError({ title: this.$t('common.toast.error'), msg: error }))\r\n        },\r\n        async getAvailableSourceTables(sourceId) {\r\n            this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/metaSourceResource/${sourceId}/metatables/`)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    if (response.data.length > 0) {\r\n                        this.availableTables = this.removeSelectedTablesFromAvailable(response.data, this.selectedTables)\r\n                    } else {\r\n                        this.store.setInfo({ title: this.$t('importExport.gallery.column.info'), msg: this.$t('managers.datasetManagement.noTablesToLink') })\r\n                    }\r\n                })\r\n                .catch((error) => this.store.setError({ title: this.$t('common.toast.error'), msg: error }))\r\n        },\r\n        removeSelectedTablesFromAvailable(availableTablesArray, selectedTablesArray) {\r\n            let filteredSelected = selectedTablesArray.map((selectedTable) => {\r\n                return selectedTable.tableId\r\n            })\r\n            let filteredArray = availableTablesArray.filter((availableTable) => !filteredSelected.includes(availableTable.tableId))\r\n            return filteredArray\r\n        },\r\n        moveTableToList(movedTableId, sourceList, targetList) {\r\n            const index = sourceList.findIndex((table) => table.tableId === movedTableId)\r\n            if (index >= 0) {\r\n                const tableToMove = sourceList[index]\r\n                sourceList.splice(index, 1)\r\n                targetList.unshift(tableToMove)\r\n            }\r\n        },\r\n        addTableToSelectedList(table) {\r\n            if (table.deleted && !table.added) {\r\n                table.deleted = false\r\n                this.tablesToRemove = this.tablesToRemove.filter((removedTable) => table.tableId !== removedTable.tableId)\r\n            } else {\r\n                table.deleted = false\r\n                table.added = true\r\n                this.tablesToAdd.push(table)\r\n            }\r\n            this.moveTableToList(table.tableId, this.availableTables, this.selectedTables)\r\n            this.$emit('addTables', this.tablesToAdd)\r\n        },\r\n        removeTableFromSelectedList(table) {\r\n            if (table.added && !table.deleted) {\r\n                delete table.added\r\n                this.tablesToAdd = this.tablesToAdd.filter((removedTable) => table.tableId !== removedTable.tableId)\r\n            } else {\r\n                table.deleted = true\r\n                this.tablesToRemove.push(table)\r\n            }\r\n            this.moveTableToList(table.tableId, this.selectedTables, this.availableTables)\r\n            this.$emit('removeTables', this.tablesToRemove)\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.table-list-container {\r\n    height: calc(100% - 1rem);\r\n    :deep(.p-card-body) {\r\n        padding: 0;\r\n        .p-card-content {\r\n            padding: 0;\r\n        }\r\n    }\r\n    .link-list {\r\n        border: 1px solid var(--kn-color-borders);\r\n        border-top: none;\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <Message v-if=\"showMetadataQueryInfoProp\" severity=\"info\" class=\"p-mx-2\" :closable=\"true\">{{ $t('managers.datasetManagement.showMetadataQueryInfo') }}</Message>\r\n\r\n    <Card class=\"p-m-2\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    {{ $t('managers.datasetManagement.fieldsMetadata') }}\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n        <template #content>\r\n            <DataTable v-if=\"dataset.meta && (dataset.meta.ccolumns || dataset.meta.dataset)\" class=\"p-datatable-sm kn-table kn-table-small-input\" :autoLayout=\"true\" :value=\"fieldsMetadata\" responsiveLayout=\"stack\" breakpoint=\"960px\">\r\n                <Column field=\"fieldAlias\" :header=\"$t('managers.datasetManagement.fieldAlias')\" :sortable=\"true\">\r\n                    <template #body=\"{ data }\"> {{ data.fieldAlias }} </template>\r\n                </Column>\r\n                <Column field=\"Type\" :header=\"$t('importExport.catalogFunction.column.type')\" :sortable=\"true\">\r\n                    <template #body=\"{ data }\">\r\n                        <Dropdown class=\"kn-material-input\" :style=\"linkTabDescriptor.style.maxwidth\" v-model=\"data.Type\" :options=\"valueTypes\" optionDisabled=\"disabled\" optionLabel=\"value\" optionValue=\"name\" @change=\"saveFieldsMetadata\" :disabled=\"true\" />\r\n                    </template>\r\n                </Column>\r\n                <Column field=\"fieldType\" :header=\"$t('managers.datasetManagement.fieldType')\" :sortable=\"true\">\r\n                    <template #body=\"{ data }\">\r\n                        <Dropdown class=\"kn-material-input\" :style=\"linkTabDescriptor.style.maxwidth\" v-model=\"data.fieldType\" :options=\"fieldMetadataTypes\" optionLabel=\"value\" optionValue=\"value\" @change=\"saveFieldsMetadata('fieldType')\" />\r\n                    </template>\r\n                </Column>\r\n                <Column field=\"personal\" :header=\"$t('managers.datasetManagement.personal')\" :sortable=\"true\">\r\n                    <template #body=\"{ data }\">\r\n                        <Checkbox id=\"personal\" v-model=\"data.personal\" :binary=\"true\" @change=\"saveFieldsMetadata('personal')\" />\r\n                    </template>\r\n                </Column>\r\n                <Column field=\"decrypt\" :header=\"$t('managers.datasetManagement.decrypt')\" :sortable=\"true\">\r\n                    <template #body=\"{ data }\">\r\n                        <Checkbox id=\"decrypt\" v-model=\"data.decrypt\" :binary=\"true\" @change=\"saveFieldsMetadata('decrypt')\" />\r\n                    </template>\r\n                </Column>\r\n                <Column field=\"subjectId\" :header=\"$t('managers.datasetManagement.subjectId')\" :sortable=\"true\">\r\n                    <template #body=\"{ data }\">\r\n                        <Checkbox id=\"subjectId\" v-model=\"data.subjectId\" :binary=\"true\" @change=\"saveFieldsMetadata('subjectId')\" />\r\n                    </template>\r\n                </Column>\r\n            </DataTable>\r\n            <div v-if=\"!dataset.meta || dataset.meta.length == 0\">\r\n                <Message severity=\"info\" :closable=\"false\">{{ $t('managers.datasetManagement.metadataInfo') }}</Message>\r\n            </div>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport linkTabDescriptor from './DatasetManagementMetadataCardDescriptor.json'\r\nimport Card from 'primevue/card'\r\nimport DataTable from 'primevue/datatable'\r\nimport Column from 'primevue/column'\r\nimport Message from 'primevue/message'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Checkbox from 'primevue/checkbox'\r\nimport mainStore from '../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    components: { Card, Column, DataTable, Message, Dropdown, Checkbox },\r\n    props: {\r\n        selectedDataset: { type: Object as any },\r\n        showMetadataQueryInfoProp: { type: Boolean as any }\r\n    },\r\n    computed: {},\r\n    emits: ['touched'],\r\n    data() {\r\n        return {\r\n            linkTabDescriptor,\r\n            fieldMetadataTypes: linkTabDescriptor.fieldsMetadataTypes,\r\n            valueTypes: linkTabDescriptor.valueTypes,\r\n            dataset: {} as any,\r\n            fieldsMetadata: [] as any\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.dataset = this.selectedDataset\r\n        this.dataset.meta ? this.exctractFieldsMetadata(this.dataset.meta.columns) : ''\r\n    },\r\n    watch: {\r\n        selectedDataset() {\r\n            this.dataset = this.selectedDataset\r\n            this.dataset.meta ? this.exctractFieldsMetadata(this.dataset.meta.columns) : ''\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        exctractFieldsMetadata(array) {\r\n            var object = {}\r\n\r\n            for (var item in array) {\r\n                var element = object[array[item].column]\r\n                if (!element) {\r\n                    element = {}\r\n                    object[array[item].column] = element\r\n                    element['column'] = array[item].column\r\n                }\r\n                element[array[item].pname] = array[item].pvalue\r\n            }\r\n\r\n            var fieldsMetadata = new Array()\r\n\r\n            for (item in object) {\r\n                fieldsMetadata.push(object[item])\r\n            }\r\n\r\n            this.fieldsMetadata = fieldsMetadata\r\n        },\r\n        saveFieldsMetadata(fieldName) {\r\n            this.warnForDuplicateSpatialFields()\r\n            this.applyMetadataChangesToFields(fieldName)\r\n        },\r\n        applyMetadataChangesToFields(fieldName) {\r\n            for (let i = 0; i < this.fieldsMetadata.length; i++) {\r\n                for (let j = 0; j < this.dataset.meta.columns.length; j++) {\r\n                    if (this.fieldsMetadata[i].column == this.dataset.meta.columns[j].column && this.dataset.meta.columns[j].pname == fieldName) {\r\n                        this.dataset.meta.columns[j].pvalue = this.fieldsMetadata[i][fieldName]\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        warnForDuplicateSpatialFields() {\r\n            var numberOfSpatialAttribute = 0\r\n            for (let i = 0; i < this.fieldsMetadata.length; i++) {\r\n                if (this.fieldsMetadata[i].fieldType == 'SPATIAL_ATTRIBUTE') {\r\n                    numberOfSpatialAttribute++\r\n                    if (numberOfSpatialAttribute > 1) {\r\n                        this.store.setError({ title: this.$t('common.error.saving'), msg: this.$t('managers.datasetManagement.duplicateSpatialAttribute') })\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Toolbar class=\"kn-toolbar kn-toolbar--primary p-m-0\">\r\n        <template #start>{{ selectedDataset.label }}</template>\r\n        <template #end>\r\n            <Button :label=\"$t('managers.lovsManagement.preview')\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"sendDatasetForPreview\" :disabled=\"buttonDisabled\" />\r\n            <Button icon=\"pi pi-save\" class=\"p-button-text p-button-rounded p-button-plain\" :disabled=\"buttonDisabled\" @click=\"checkFormulaForParams\" />\r\n            <Button icon=\"pi pi-times\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"$emit('close')\" />\r\n        </template>\r\n    </Toolbar>\r\n    <div class=\"datasetDetail\">\r\n        <TabView class=\"tabview-custom kn-tab\" v-model:activeIndex=\"activeTab\" data-test=\"tab-view\">\r\n            <TabPanel>\r\n                <template #header>\r\n                    <span>{{ $t('managers.mondrianSchemasManagement.detail.title') }}</span>\r\n                </template>\r\n                <DetailCard\r\n                    :scopeTypes=\"scopeTypes\"\r\n                    :categoryTypes=\"categoryTypes\"\r\n                    :selectedDataset=\"selectedDataset\"\r\n                    :selectedDatasetVersions=\"selectedDatasetVersions\"\r\n                    :availableTags=\"availableTags\"\r\n                    :loading=\"loading\"\r\n                    @reloadVersions=\"getSelectedDatasetVersions\"\r\n                    @loadingOlderVersion=\"$emit('loadingOlderVersion')\"\r\n                    @olderVersionLoaded=\"onOlderVersionLoaded\"\r\n                    @touched=\"$emit('touched')\"\r\n                />\r\n            </TabPanel>\r\n\r\n            <TabPanel>\r\n                <template #header>\r\n                    <span>{{ $t('kpi.alert.type') }}</span>\r\n                </template>\r\n                <TypeCard\r\n                    :activeTab=\"activeTab\"\r\n                    :selectedDataset=\"selectedDataset\"\r\n                    :datasetTypes=\"filteredDatasetTypes\"\r\n                    :dataSources=\"dataSources\"\r\n                    :businessModels=\"businessModels\"\r\n                    :scriptTypes=\"scriptTypes\"\r\n                    :parentValid=\"v$.$invalid\"\r\n                    :pythonEnvironments=\"pythonEnvironments\"\r\n                    :rEnvironments=\"rEnvironments\"\r\n                    @fileUploaded=\"selectedDataset.fileUploaded = true\"\r\n                    @touched=\"$emit('touched')\"\r\n                    @queryEdited=\"showMetadataQueryInfo = true\"\r\n                />\r\n            </TabPanel>\r\n\r\n            <TabPanel>\r\n                <template #header>\r\n                    <span>{{ $t('kpi.measureDefinition.metadata') }}</span>\r\n                </template>\r\n                <MetadataCard :selectedDataset=\"selectedDataset\" :showMetadataQueryInfoProp=\"showMetadataQueryInfo\" @touched=\"$emit('touched')\" />\r\n            </TabPanel>\r\n\r\n            <TabPanel v-if=\"selectedDataset.dsTypeCd == 'Query'\">\r\n                <template #header>\r\n                    <span>{{ $t('managers.glossary.glossaryUsage.link') }}</span>\r\n                </template>\r\n                <LinkCard :selectedDataset=\"selectedDataset\" :metaSourceResource=\"metaSourceResource\" :activeTab=\"activeTab\" @addTables=\"onAddLinkedTables\" @removeTables=\"onRemoveLinkedTables\" />\r\n            </TabPanel>\r\n\r\n            <TabPanel v-if=\"selectedDataset.dsTypeCd != 'Prepared'\">\r\n                <template #header>\r\n                    <span>{{ $t('cron.advanced') }}</span>\r\n                </template>\r\n                <AdvancedCard :selectedDataset=\"selectedDataset\" :transformationDataset=\"transformationDataset\" :schedulingData=\"scheduling\" @touched=\"$emit('touched')\" />\r\n            </TabPanel>\r\n        </TabView>\r\n\r\n        <WorkspaceDataPreviewDialog :visible=\"showPreviewDialog\" :propDataset=\"previewDataset\" @close=\"showPreviewDialog = false\" :previewType=\"'dataset'\" :loadFromDatasetManagement=\"true\"></WorkspaceDataPreviewDialog>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport useValidate from '@vuelidate/core'\r\nimport { defineComponent } from 'vue'\r\nimport { AxiosResponse } from 'axios'\r\nimport detailViewDescriptor from './DatasetManagementDetailViewDescriptor.json'\r\nimport DetailCard from './detailCard/DatasetManagementDetailCard.vue'\r\nimport TypeCard from './typeCard/DatasetManagementTypeCard.vue'\r\nimport AdvancedCard from './advancedCard/DatasetManagementAdvancedCard.vue'\r\nimport LinkCard from './linkCard/DatasetManagementLinkCard.vue'\r\nimport MetadataCard from './metadataCard/DatasetManagementMetadataCard.vue'\r\nimport TabView from 'primevue/tabview'\r\nimport TabPanel from 'primevue/tabpanel'\r\nimport WorkspaceDataPreviewDialog from '@/modules/workspace/views/dataView/dialogs/WorkspaceDataPreviewDialog.vue'\r\nimport mainStore from '../../../../App.store'\r\nimport { mapState } from 'pinia'\r\n\r\nexport default defineComponent({\r\n    components: { TabView, TabPanel, DetailCard, AdvancedCard, LinkCard, TypeCard, MetadataCard, WorkspaceDataPreviewDialog },\r\n    props: {\r\n        id: { type: String, required: false },\r\n        scopeTypes: { type: Array as any, required: true },\r\n        categoryTypes: { type: Array as any, required: true },\r\n        datasetTypes: { type: Array as any, required: true },\r\n        transformationDataset: { type: Object as any, required: true },\r\n        scriptTypes: { type: Array as any, required: true },\r\n        dataSources: { type: Array as any, required: true },\r\n        businessModels: { type: Array as any, required: true },\r\n        pythonEnvironments: { type: Array as any, required: true },\r\n        rEnvironments: { type: Array as any, required: true },\r\n        metaSourceResource: { type: Array as any, required: true },\r\n        availableTags: { type: Array as any, required: true },\r\n        datasetToCloneId: { type: Number as any }\r\n    },\r\n    computed: {\r\n        ...mapState(mainStore, {\r\n            user: 'user'\r\n        }),\r\n        buttonDisabled(): any {\r\n            return this.v$.$invalid\r\n        }\r\n    },\r\n    emits: ['close', 'touched', 'loadingOlderVersion', 'olderVersionLoaded', 'updated', 'created', 'showSavingSpinner', 'hideSavingSpinner'],\r\n    data() {\r\n        return {\r\n            detailViewDescriptor,\r\n            v$: useValidate() as any,\r\n            tablesToAdd: [] as any,\r\n            tablesToRemove: [] as any,\r\n            selectedDataset: {} as any,\r\n            previewDataset: {} as any,\r\n            selectedDatasetVersions: [] as any,\r\n            filteredDatasetTypes: [] as any,\r\n            scheduling: {\r\n                repeatInterval: null as String | null\r\n            } as any,\r\n            touched: false,\r\n            loading: false,\r\n            loadingVersion: false,\r\n            showPreviewDialog: false,\r\n            showMetadataQueryInfo: false,\r\n            activeTab: 0\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.getAllDatasetData()\r\n    },\r\n    watch: {\r\n        id() {\r\n            this.getAllDatasetData()\r\n            this.activeTab = 0\r\n        },\r\n        datasetToCloneId() {\r\n            this.cloneDatasetConfirm(this.datasetToCloneId)\r\n        }\r\n    },\r\n    validations() {},\r\n    methods: {\r\n        //#region ===================== Get All Data ====================================================\r\n        async getSelectedDataset() {\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets/dataset/id/${this.id}`)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.selectedDataset = response.data[0] ? { ...response.data[0] } : {}\r\n\r\n                    this.selectedDataset.restJsonPathAttributes ? (this.selectedDataset.restJsonPathAttributes = JSON.parse(this.selectedDataset.restJsonPathAttributes ? this.selectedDataset.restJsonPathAttributes : '[]')) : []\r\n                    this.selectedDataset.restRequestHeaders ? (this.selectedDataset.restRequestHeaders = JSON.parse(this.selectedDataset.restRequestHeaders ? this.selectedDataset.restRequestHeaders : '{}')) : {}\r\n\r\n                    if (this.selectedDataset.restRequestHeaders) {\r\n                        const restRequestHeadersKeys = Object.keys(this.selectedDataset.restRequestHeaders)\r\n                        this.selectedDataset.restRequestHeaders = restRequestHeadersKeys.map((e) => ({ name: e, value: this.selectedDataset.restRequestHeaders[e] }))\r\n                    }\r\n\r\n                    this.selectedDataset.pythonEnvironment ? (this.selectedDataset.pythonEnvironment = JSON.parse(this.selectedDataset.pythonEnvironment ? this.selectedDataset.pythonEnvironment : '{}')) : ''\r\n                })\r\n                .catch()\r\n        },\r\n        async getSelectedDatasetVersions() {\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets/olderversions/${this.id}`)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    response.data.root ? (this.selectedDatasetVersions = response.data.root) : (this.selectedDatasetVersions = [])\r\n                })\r\n                .catch()\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async getAllDatasetData() {\r\n            if (this.id) {\r\n                this.loading = true\r\n                await this.getSelectedDataset()\r\n                await this.getSelectedDatasetVersions()\r\n                this.insertCurrentVersion()\r\n                this.filteredDatasetTypes = this.datasetTypes\r\n            } else {\r\n                this.selectedDataset = { ...detailViewDescriptor.newDataset }\r\n                this.selectedDatasetVersions = []\r\n                this.filteredDatasetTypes = this.datasetTypes.filter((cd) => {\r\n                    return cd.VALUE_CD != 'Prepared'\r\n                })\r\n            }\r\n        },\r\n        insertCurrentVersion() {\r\n            if (this.selectedDatasetVersions.length === 0) {\r\n                const selectedType = this.datasetTypes.find((type) => type.VALUE_CD === this.selectedDataset.dsTypeCd)\r\n                this.selectedDatasetVersions.push({ type: selectedType.VALUE_DS, userIn: this.selectedDataset.owner, versNum: 0, dateIn: this.selectedDataset.dateIn, dsId: this.selectedDataset.id })\r\n            }\r\n        },\r\n        //#endregion ===============================================================================================\r\n\r\n        //#region ===================== Clone Functionality ====================================================\r\n        cloneDatasetConfirm(datasetId) {\r\n            this.$confirm.require({\r\n                icon: 'pi pi-exclamation-triangle',\r\n                message: this.$t('kpi.kpiDefinition.confirmClone'),\r\n                header: this.$t(' '),\r\n                accept: () => this.cloneDataset(datasetId)\r\n            })\r\n        },\r\n        async cloneDataset(datasetId) {\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets/dataset/id/${datasetId}`).then(async (response: AxiosResponse<any>) => {\r\n                if (response.data[0].dsTypeCd === 'File') {\r\n                    await this.$http.put(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets/clone-file?fileName=${response.data[0].fileName}`)\r\n                }\r\n                delete response.data[0].id\r\n                response.data[0].label = '...'\r\n                response.data[0].dsVersions = []\r\n                response.data[0].usedByNDocs = 0\r\n\r\n                this.selectedDataset = { ...response.data[0] }\r\n            })\r\n        },\r\n        //#endregion ===============================================================================================\r\n\r\n        //#region ===================== Save/Update Dataset & Tags =================================================\r\n        async saveDataset() {\r\n            let dsToSave = { ...this.selectedDataset } as any\r\n\t\t\tif (this.user?.functionalities?.includes('DataPreparation') && dsToSave.id) {\r\n                await this.$http\r\n                    .get(import.meta.env.VITE_DATA_PREPARATION_PATH + '1.0/instance/dataset/' + dsToSave.id, { headers: { 'X-Disable-Interceptor': 'true' } })\r\n                    .then((response: AxiosResponse<any>) => {\r\n                    if (response.data) {\r\n                        this.$confirm.require({\r\n                            icon: 'pi pi-exclamation-triangle',\r\n                            message: this.$t('managers.datasetManagement.dataPreparation.datasetInvolvedIntoDataPrep'),\r\n                            header: this.$t('managers.datasetManagement.saveTitle'),\r\n                            accept: () => this.proceedOnSaving(dsToSave)\r\n                        })\r\n                    } else {\r\n                        this.proceedOnSaving(dsToSave)\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    if (err.response.status === 404) this.proceedOnSaving(dsToSave)\r\n                    else this.$store.commit('setError', { title: 'Server error', msg: err.data.errors[0].message })\r\n                })\r\n            } else {\r\n                this.proceedOnSaving(dsToSave)\r\n            }\r\n        },\r\n        async proceedOnSaving(dsToSave) {\r\n            this.$emit('showSavingSpinner')\r\n            if (dsToSave.dsTypeCd.toLowerCase() == 'rest' || dsToSave.dsTypeCd.toLowerCase() == 'solr') {\r\n                dsToSave.restRequestHeaders = (dsToSave.restRequestHeaders || []).reduce((acc, curr) => {\r\n                    acc[curr['name']] = curr['value']\r\n                    return acc\r\n                }, {})\r\n            }\r\n\r\n            dsToSave.pars ? '' : (dsToSave.pars = [])\r\n            dsToSave.pythonEnvironment ? (dsToSave.pythonEnvironment = JSON.stringify(dsToSave.pythonEnvironment)) : ''\r\n\r\n            dsToSave.meta ? (dsToSave.meta = await this.manageDatasetFieldMetadata(dsToSave.meta)) : (dsToSave.meta = [])\r\n            dsToSave.recalculateMetadata = true\r\n\r\n            dsToSave.isScheduled ? (dsToSave.schedulingCronLine = await this.formatCronForSave()) : ''\r\n\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/datasets/`, dsToSave, {\r\n                    headers: {\r\n                        Accept: 'application/json, text/plain, */*',\r\n                        'Content-Type': 'application/json;charset=UTF-8'\r\n                    }\r\n                })\r\n                .then(async (response: AxiosResponse<any>) => {\r\n                    this.touched = false\r\n                    this.store.setInfo({ title: this.$t('common.toast.createTitle'), msg: this.$t('common.toast.success') })\r\n                    this.selectedDataset.id ? this.$emit('updated') : this.$emit('created', response)\r\n                    await this.saveTags(dsToSave, response.data.id)\r\n                    await this.saveSchedulation(dsToSave, response.data.id)\r\n                    await this.saveLinks(response.data.id)\r\n                    await this.removeLinks(response.data.id)\r\n                    await this.getSelectedDataset()\r\n                })\r\n                .catch()\r\n                .finally(() => this.$emit('hideSavingSpinner'))\r\n        },\r\n\r\n        async saveTags(dsToSave, id) {\r\n            let tags = {} as any\r\n            tags.versNum = dsToSave.versNum + 1\r\n            tags.tagsToAdd = dsToSave.tags\r\n\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/datasets/${id}/dstags/`, tags, {\r\n                    headers: {\r\n                        Accept: 'application/json, text/plain, */*',\r\n                        'Content-Type': 'application/json;charset=UTF-8'\r\n                    }\r\n                })\r\n                .catch()\r\n        },\r\n        async saveSchedulation(dsToSave, id) {\r\n            if (dsToSave.isScheduled) {\r\n                await this.$http\r\n                    .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `scheduleree/persistence/dataset/id/${id}`, dsToSave, {\r\n                        headers: {\r\n                            Accept: 'application/json, text/plain, */*',\r\n                            'Content-Type': 'application/json;charset=UTF-8'\r\n                        }\r\n                    })\r\n                    .catch()\r\n            } else {\r\n                await this.$http.delete(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `scheduleree/persistence/dataset/label/${dsToSave.label}`).catch()\r\n            }\r\n        },\r\n        async saveLinks(id) {\r\n            if (this.tablesToAdd.length > 0) {\r\n                this.tablesToAdd.forEach(async (link) => {\r\n                    if (link.added === true) {\r\n                        delete link.added\r\n                        await this.$http\r\n                            .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/metaDsRelationResource/${id}`, link, {\r\n                                headers: { Accept: 'application/json, text/plain, */*', 'Content-Type': 'application/json;charset=UTF-8' }\r\n                            })\r\n                            .catch()\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        async removeLinks(id) {\r\n            if (this.tablesToRemove.length > 0) {\r\n                this.tablesToRemove.forEach(async (link) => {\r\n                    if (link.deleted === true) {\r\n                        await this.$http\r\n                            .delete(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/metaDsRelationResource/${id}/${link.tableId}`, {\r\n                                headers: { Accept: 'application/json, text/plain, */*', 'Content-Type': 'application/json;charset=UTF-8' }\r\n                            })\r\n                            .catch()\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        async manageDatasetFieldMetadata(fieldsColumns) {\r\n            if (fieldsColumns.columns != undefined && fieldsColumns.columns != null) {\r\n                var columnsArray = new Array()\r\n                var columnsNames = new Array()\r\n\r\n                for (var i = 0; i < fieldsColumns.columns.length; i++) {\r\n                    var element = fieldsColumns.columns[i]\r\n                    columnsNames.push(element.column)\r\n                }\r\n\r\n                columnsNames = this.removeDuplicates(columnsNames)\r\n\r\n                for (i = 0; i < columnsNames.length; i++) {\r\n                    var columnObject = { displayedName: '', name: '', fieldType: '', type: '', personal: false, decrypt: false, subjectId: false }\r\n                    var currentColumnName = columnsNames[i]\r\n\r\n                    //remove the part before the double dot if the column is in the format ex: it.eng.spagobi.Customer:customerId\r\n                    if (currentColumnName.indexOf(':') != -1) {\r\n                        var arr = currentColumnName.split(':')\r\n                        columnObject.displayedName = arr[1]\r\n                    } else {\r\n                        columnObject.displayedName = currentColumnName\r\n                    }\r\n\r\n                    columnObject.name = currentColumnName\r\n                    for (var j = 0; j < fieldsColumns.columns.length; j++) {\r\n                        element = fieldsColumns.columns[j]\r\n                        if (element.column == currentColumnName) {\r\n                            if (element.pname.toUpperCase() == 'type'.toUpperCase()) {\r\n                                columnObject.type = element.pvalue\r\n                            } else if (element.pname.toUpperCase() == 'fieldType'.toUpperCase()) {\r\n                                columnObject.fieldType = element.pvalue\r\n                            } else if (element.pname.toUpperCase() == 'personal'.toUpperCase()) {\r\n                                columnObject.personal = element.pvalue\r\n                            } else if (element.pname.toUpperCase() == 'decrypt'.toUpperCase()) {\r\n                                columnObject.decrypt = element.pvalue\r\n                            } else if (element.pname.toUpperCase() == 'subjectId'.toUpperCase()) {\r\n                                columnObject.subjectId = element.pvalue\r\n                            }\r\n                        }\r\n                    }\r\n                    columnsArray.push(columnObject)\r\n                }\r\n\r\n                return columnsArray\r\n            }\r\n        },\r\n        checkFormulaForParams() {\r\n            if (this.selectedDataset?.query?.includes('${') && this.selectedDataset?.isPersisted) {\r\n                this.store.setError({ title: this.$t('common.toast.errorTitle'), msg: this.$t('managers.datasetManagement.formulaParamError') })\r\n            } else this.saveDataset()\r\n        },\r\n        removeDuplicates(array) {\r\n            var index = {}\r\n            for (var i = array.length - 1; i >= 0; i--) {\r\n                if (array[i] in index) {\r\n                    array.splice(i, 1)\r\n                } else {\r\n                    index[array[i]] = true\r\n                }\r\n            }\r\n            return array\r\n        },\r\n        async formatCronForSave() {\r\n            if (this.selectedDataset.isScheduled) {\r\n                if (this.selectedDataset.startDate == null) {\r\n                    this.selectedDataset.startDate = new Date()\r\n                }\r\n                var repeatInterval = this.scheduling.repeatInterval\r\n                var finalCronString = ''\r\n                var secondsForCron = 0\r\n                var minutesForCron = this.stringifySchedulingValues(this.scheduling.minutesSelected && this.scheduling.minutesSelected.length != 0, 'minutesSelected')\r\n                var hoursForCron = this.stringifySchedulingValues(repeatInterval != 'minute' && this.scheduling.hoursSelected && this.scheduling.hoursSelected.length != 0, 'hoursSelected')\r\n                var daysForCron = this.stringifySchedulingValues((repeatInterval === 'day' || repeatInterval === 'month') && this.scheduling.daysSelected && this.scheduling.daysSelected.length != 0, 'daysSelected')\r\n                var monthsForCron = this.stringifySchedulingValues(repeatInterval === 'month' && this.scheduling.monthsSelected && this.scheduling.monthsSelected.length != 0, 'monthsSelected')\r\n                var weekdaysForCron = this.stringifySchedulingValues(repeatInterval === 'week' && this.scheduling.weekdaysSelected && this.scheduling.weekdaysSelected.length != 0, 'weekdaysSelected')\r\n\r\n                if (daysForCron == '*' && weekdaysForCron != '*') {\r\n                    daysForCron = '?'\r\n                } else {\r\n                    weekdaysForCron = '?'\r\n                }\r\n                finalCronString = minutesForCron + ' ' + hoursForCron + ' ' + daysForCron + ' ' + monthsForCron + ' ' + weekdaysForCron\r\n\r\n                return secondsForCron + ' ' + finalCronString\r\n            }\r\n        },\r\n        stringifySchedulingValues(condition, selectedValue) {\r\n            var stringValue = ''\r\n            if (condition) {\r\n                for (var i = 0; i < this.scheduling[selectedValue].length; i++) {\r\n                    stringValue += '' + this.scheduling[selectedValue][i]\r\n\r\n                    if (i < this.scheduling[selectedValue].length - 1) {\r\n                        stringValue += ','\r\n                    }\r\n                }\r\n                return stringValue\r\n            } else {\r\n                stringValue = '*'\r\n                return stringValue\r\n            }\r\n        },\r\n        //#endregion ===============================================================================================\r\n\r\n        async sendDatasetForPreview() {\r\n            if (this.selectedDataset.dsTypeCd === 'Solr') {\r\n                this.previewDataset = JSON.parse(JSON.stringify(this.selectedDataset))\r\n                let restRequestHeadersTemp = {}\r\n                if (this.previewDataset.dsTypeCd.toLowerCase() == 'rest' || this.previewDataset.dsTypeCd.toLowerCase() == 'solr') {\r\n                    for (let i = 0; i < this.previewDataset.restRequestHeaders.length; i++) {\r\n                        restRequestHeadersTemp[this.previewDataset.restRequestHeaders[i]['name']] = this.previewDataset.restRequestHeaders[i]['value']\r\n                    }\r\n                }\r\n                this.previewDataset['restRequestHeaders'] = JSON.stringify(restRequestHeadersTemp)\r\n                this.previewDataset['restJsonPathAttributes'] && this.previewDataset['restJsonPathAttributes'].length > 0 ? (this.previewDataset.restJsonPathAttributes = JSON.stringify(this.previewDataset.restJsonPathAttributes)) : (this.previewDataset.restJsonPathAttributes = [])\r\n                this.previewDataset.pars ? '' : (this.previewDataset.pars = [])\r\n                this.previewDataset.pythonEnvironment ? (this.previewDataset.pythonEnvironment = JSON.stringify(this.previewDataset.pythonEnvironment)) : ''\r\n                this.previewDataset.meta ? (this.previewDataset.meta = await this.manageDatasetFieldMetadata(this.previewDataset.meta)) : (this.previewDataset.meta = [])\r\n\r\n                this.showPreviewDialog = true\r\n            } else {\r\n                this.previewDataset = this.selectedDataset\r\n                this.showPreviewDialog = true\r\n            }\r\n        },\r\n\r\n        onAddLinkedTables(event) {\r\n            this.tablesToAdd = event\r\n            this.$emit('touched')\r\n        },\r\n        onRemoveLinkedTables(event) {\r\n            this.tablesToRemove = event\r\n            this.$emit('touched')\r\n        },\r\n        onOlderVersionLoaded(event) {\r\n            this.$emit('olderVersionLoaded')\r\n            this.selectedDataset = { ...event }\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.datasetDetail {\r\n    overflow: auto;\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n</style>\r\n"],"names":["_sfc_main","Card","Dropdown","DataTable","Column","AutoComplete","useValidate","mainStore","_hoisted_1","_hoisted_2","_hoisted_4","_hoisted_5","_hoisted_7","_hoisted_8","_hoisted_10","_hoisted_11","_hoisted_13","_hoisted_14","_hoisted_20","_openBlock","_Fragment","_createVNode","_withCtx","_createElementVNode","_hoisted_3","_normalizeClass","_toDisplayString","_hoisted_6","_hoisted_9","_hoisted_12","_hoisted_15","_createElementBlock","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_withKeys","_hoisted_21","_createBlock","_createCommentVNode","Chips","Checkbox","_normalizeStyle","_hoisted_22","_hoisted_24","_hoisted_23","_hoisted_25","_withDirectives","_renderList","Dialog","queryDescriptor","VCodeMirror","HelpDialog","_hoisted_27","_hoisted_29","_hoisted_26","_hoisted_28","detailDescriptor","_createTextVNode","RadioButton","MonitoringDialog","this$1","InputSwitch","Listbox","Message","linkTabDescriptor","TabView","TabPanel","mapState"],"mappings":"moIAyJA,KAAKA,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,WAAMC,EAAU,uBAAsB,UAAAC,EAAA,OAAWC,eAAQC,EAAa,EACpF,MAAO,CACH,WAAY,CAAE,KAAM,MAAc,SAAU,EAAK,EACjD,cAAe,CAAE,KAAM,MAAc,SAAU,EAAK,EACpD,gBAAiB,CAAE,KAAM,MAAc,EACvC,wBAAyB,CAAE,KAAM,KAAa,EAC9C,cAAe,CAAE,KAAM,KAAa,EACpC,QAAS,CAAE,KAAM,OAAQ,CAC7B,EACA,SAAU,CACN,mBAAyB,CACjB,MAAA,OAAK,wBAAwB,OAAS,EAI9C,CACJ,EACA,MAAO,CAAC,UAAW,iBAAkB,sBAAuB,oBAAoB,EAChF,MAAO,CACI,MAAA,CACH,uBACA,eAAgB,GAChB,GAAIC,EAAY,EAChB,QAAS,CAAC,EACV,gBAAiB,CAAC,EAClB,mBAAoB,CAAC,EACrB,kBAAmB,CAAC,EACpB,kBAAmB,IAAA,CAE3B,EACA,OAAQ,CAEJ,MAAO,CAAA,MADOC,GACC,CACnB,EACA,SAAU,CACN,KAAK,QAAU,KAAK,eACxB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,gBACf,KAAA,GAAG,QAAQ,MAAM,OAAO,EACxB,KAAA,GAAG,QAAQ,KAAK,OAAO,CAChC,CACJ,EACA,aAAc,CAIJ,KAAA,GAAwC,CAAE,oBAHxB,AAAC,GACd,KAAK,QAAQ,SAAW,QAAU,GAItC,MADkB,CAAE,QAAS,EAAkB,UAAW,GAAoB,YAAY,QAAS,CAAgB,EAE9H,EACA,QAAS,CAEL,cAAc,EAAY,EAAO,CAC7B,GAAI,GAAU,GACC,IAAA,YAAe,EAAU,iDAAqD,EAAU,kDACvG,KAAK,SAAS,QAAQ,CAClB,QAAS,KAAK,GAAG,CAAO,EACxB,OAAQ,KAAK,GAAG,wBAAwB,EACxC,KAAM,6BACN,OAAQ,IAAM,CACV,IAAe,YAAc,KAAK,sBAAsB,CAAK,EAAI,KAAK,mBAC1E,CAAA,CACH,CACL,EACA,KAAM,uBAAsB,EAAO,CAC/B,MAAO,MAAK,MACP,OAAO,0CAA6D,EAAM,gBAAgB,EAAM,SAAS,EACzG,KAAK,IAAM,CACR,KAAK,MAAM,QAAQ,CAAE,MAAO,KAAK,GAAG,0BAA0B,EAAG,IAAK,KAAK,GAAG,4BAA4B,CAAG,CAAA,EAC7G,KAAK,MAAM,gBAAgB,CAAA,CAC9B,EACA,MAAM,AAAC,GAAU,KAAK,MAAM,SAAS,CAAE,MAAO,KAAK,GAAG,sBAAsB,EAAG,IAAK,EAAM,OAAS,CAAA,CAAC,CAC7G,EACA,KAAM,oBAAoB,CACtB,MAAO,MAAK,MACP,OAAO,0CAA6D,KAAK,gBAAgB,iBAAiB,EAC1G,KAAK,IAAM,CACR,KAAK,MAAM,QAAQ,CAAE,MAAO,KAAK,GAAG,0BAA0B,EAAG,IAAK,KAAK,GAAG,qDAAqD,CAAG,CAAA,EACtI,KAAK,MAAM,gBAAgB,CAAA,CAC9B,EACA,MAAM,AAAC,GAAU,KAAK,MAAM,SAAS,CAAE,MAAO,KAAK,GAAG,sBAAsB,EAAG,IAAK,EAAM,OAAS,CAAA,CAAC,CAC7G,EAIA,sBAAsB,EAAO,CACzB,KAAK,SAAS,QAAQ,CAClB,KAAM,6BACN,QAAS,KAAK,GAAG,uCAAuC,EACxD,OAAQ,KAAK,GAAG,yCAAyC,EACzD,OAAQ,IAAM,KAAK,eAAe,CAAK,CAAA,CAC1C,CACL,EACA,KAAM,gBAAe,EAAa,CAC9B,KAAK,MAAM,qBAAqB,EAChC,KAAM,MAAK,MAAM,IAAI,0CAA6D,KAAK,QAAQ,wBAAwB,EAAY,SAAS,EAAE,KAAK,AAAC,GAAiC,CAC5K,KAAA,QAAQ,SAAS,YAAA,GAAiB,QAAS,KAAK,0BAA0B,EAAS,KAAK,EAAE,EAC/F,KAAK,MAAM,qBAAsB,EAAS,KAAK,EAAE,CAAA,CACpD,EACD,KAAK,eAAiB,EAC1B,EACA,0BAA0B,EAAM,CAC5B,KAAK,QAAQ,SAAW,GAAQ,KAAY,EAAK,SAAW,GAC5D,KAAK,QAAQ,SAAW,GAAQ,KAAY,EAAK,SAAW,GAC5D,KAAK,QAAQ,YAAc,GAAQ,KAAY,EAAK,YAAc,QAClE,KAAK,QAAQ,aAAe,GAAQ,KAAY,EAAK,aAAe,IACpE,KAAK,QAAQ,SAAW,GAAQ,KAAY,EAAK,SAAW,IACvD,KAAA,QAAQ,WAAa,GAAQ,MAAa,EAAK,YAAc,KAAY,EAAK,WAAa,aAC3F,KAAA,QAAQ,gBAAkB,GAAQ,MAAa,EAAK,iBAAmB,KAAY,EAAK,gBAAkB,sBAE/G,AAAI,GAAQ,KACR,AAAI,EAAK,WAAa,MAAQ,EAAK,WAAa,GAC5C,KAAK,QAAQ,UAAY,OAAO,EAAK,SAAS,EAEzC,KAAA,QAAQ,UAAY,EAAK,UAGlC,KAAK,QAAQ,UAAY,KAG7B,KAAK,QAAQ,UAAY,GAAQ,KAAY,EAAK,UAAY,GAE9D,AAAI,GAAQ,KACR,MAAK,QAAQ,UAAY,OAAO,EAAK,SAAS,EACzC,KAAA,QAAQ,eAAiB,OAAO,CAAC,EACtC,KAAK,QAAQ,SAAW,OAAO,EAAK,QAAQ,EACvC,KAAA,QAAQ,UAAY,OAAO,IAAI,GAEpC,MAAK,QAAQ,UAAY,KACzB,KAAK,QAAQ,eAAiB,KAC9B,KAAK,QAAQ,SAAW,KACxB,KAAK,QAAQ,UAAY,MAG7B,KAAK,QAAQ,GAAK,GAAQ,KAAY,EAAK,GAAK,GAChD,KAAK,QAAQ,MAAQ,GAAQ,KAAY,EAAK,MAAQ,GACtD,KAAK,QAAQ,KAAO,GAAQ,KAAY,EAAK,KAAO,GACpD,KAAK,QAAQ,YAAc,GAAQ,KAAY,EAAK,YAAc,GAClE,KAAK,QAAQ,KAAO,GAAQ,KAAY,EAAK,KAAO,GAEpD,KAAK,QAAQ,aAAe,EAChC,EAIA,UAAU,EAAO,CACb,WAAW,IAAM,CACb,AAAK,EAAM,MAAM,KAAA,EAAO,OAGpB,KAAK,kBAAoB,KAAK,cAAc,OAAO,AAAC,GACzC,EAAI,KAAK,YAAY,EAAE,WAAW,EAAM,MAAM,aAAa,CACrE,EAJD,KAAK,kBAAoB,CAAC,GAAG,KAAK,aAAa,GAMpD,GAAG,CACV,EACA,cAAc,EAAY,CAClB,AAAA,EAAM,OAAO,OAER,CADY,KAAK,cAAc,KAAK,AAAC,GAAO,EAAG,MAAQ,EAAM,OAAO,KAAK,GAE1E,MAAK,QAAQ,KAAK,KAAK,EAAM,OAAO,KAAK,EACzC,KAAK,eAAe,EACpB,EAAM,OAAO,MAAQ,IAGjC,EACA,gBAAiB,CACb,KAAK,QAAQ,KAAO,KAAK,QAAQ,KAAK,IAAI,AAAC,GACnC,MAAO,IAAQ,SACR,EAEA,CAAE,KAAM,EAEtB,CACL,EAGA,WAAW,EAAM,CACb,MAAO,IAAqB,EAAM,CAAE,UAAW,QAAS,UAAW,QAAS,CAChF,EACA,eAAe,EAAc,EAAe,EAAc,CACtD,KAAM,GAAgB,EAAa,KAAK,AAAC,GAAW,EAAO,WAAa,CAAY,EACpF,GAAiB,MAAK,QAAQ,GAAiB,EAAc,SACjE,CACJ,CACJ,CAAC,EAjVoBC,GAAA,CAAA,MAAM,6BACDC,GAAA,CAAA,MAAM,qDAEEC,GAAQ,CAAC,IAAK,QAAA,MAAA,2BAKtBC,GAAA,CAAA,MAAM,qDAEEC,GAAO,CAAC,IAAK,OAAA,MAAA,2BAKrBC,GAAA,CAAA,MAAM,sDAYEC,GAAc,CAAC,IAAK,cAAA,MAAA,2BAK5BC,GAAA,CAAA,MAAM,qDAeEC,GAAQ,CAAC,IAAK,QAAA,MAAA,2BAUtBC,GAAA,CAAA,MAAM,yDAeqC,IAAI,EAAW,IAAK,WAAA,MAAA,+BACnD,IAAI,EAAW,IAAK,WAAA,MAAA,+BAUhC,MAAM,wEASEC,GAAO,CAAC,IAAK,OAAA,MAAA,+PA/F3C,MAAAC,OAAYC,EAAO,KAAA,CAAAC,EACG,EAkGP,CAAA,MAAA,OAAA,EAAA,CAAA,QAjGPC,EAiGO,IAAA,CAAAC,EAhGH,OAMMf,GAAA,CAAAe,EALF,MAGOd,GAHP,CACuRc,EAAA,OAAAC,GAAA,CAA9PH,EAAA,EAAA,CAAC,GAAA,QAA0B,MAAKI,EAAM,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,MAAA,UAAA,EAAA,GAAA,QAAA,MAAA,MAAA,CAAA,CAAA,EAAC,KAAA,OAAA,UAAA,0CAAiI,sBAAI,EAAE,IAAA,GAAA,GAAA,AAAA,GAAW,EAAK,GAAC,QAAM,MAAA,OAAA,GAAK,OAAM,iBAAE,GAAK,QAAA,MAAA,OAAA,GAAa,WAAU,IAAa,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,GAAA,YAAA,aAChR,EAAA,KAAA,EAAA,CAAA,aAAuF,OAAvF,CAAA,EAAAF,EAAA,QAAAb,GAAAgB,EAAA,EAAA,GAAA,cAAA,CAAA,EAAA,MAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAAmB,MAAA,EAAA,GAAA,QAAA,MAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,cAAA,CAAA,gDAEpE,CAAA,EAAAE,EACI,MAGOZ,GAHP,CACiRY,EAAA,OAAAI,GAAA,CAAzPN,EAAA,EAAA,CAAC,GAAA,OAA0B,MAAKI,EAAM,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,KAAA,UAAA,EAAA,GAAA,QAAA,KAAA,MAAA,CAAA,CAAA,EAAC,KAAA,OAAA,UAAA,yCAA8H,sBAAI,EAAA,IAAA,GAAA,GAAE,AAAW,GAAA,EAAK,GAAM,QAAA,KAAA,OAAA,GAAK,OAAM,iBAAE,GAAK,QAAA,KAAA,OAAA,GAAa,WAAU,IAAY,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,GAAA,YAAA,YAC1Q,EAAA,KAAA,EAAA,CAAA,aAAqF,OAArF,CAAA,EAAAF,EAAA,QAAAX,GAAAc,EAAA,EAAA,GAAA,aAAA,CAAA,EAAA,MAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAAkB,MAAA,EAAA,GAAA,QAAA,KAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,aAAA,CAAA,gDAEnE,CAAA,EAAAE,EACI,MAaOV,GAbP,CAWMU,EAAA,OAAAK,GAAA,CAAAP,EATK,EAAa,CAChB,GAAA,cACA,MAAKI,EAAM,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,YAAA,UAAA,EAAA,GAAA,QAAA,YAAA,MAAA,CAAA,CAAA,EACX,KAAA,OAAA,UAAA,iDAGC,sBAAI,EAAA,IAAA,GAAA,GAAE,AAAW,GAAA,EAAA,GAAA,QAAY,YAAM,OAAA,GACnC,OAAM,iBAAE,GAAK,QAAA,YAAA,OAAA,GACd,WAAU,IAAmB,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,GAAA,YAAA,mBAEjC,EAAA,KAAA,EAAA,CAAA,aAAiG,OAAjG,CAAA,EAAAF,EAAA,QAAAT,GAAAY,EAAA,EAAA,GAAA,oBAAA,CAAA,EAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAAyB,MAAA,EAAA,GAAA,QAAA,YAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,oBAAA,CAAA,gDAE1E,CAAA,EAAAE,EACI,MAgBOR,GAhBP,CAcMQ,EAAA,OAAAM,GAAA,CAZYR,EAAA,EAAA,CACV,GAAA,QAKmE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,QAAA,UAAA,EAAA,GAAA,QAAA,QAAA,MAJzD,CAAA,CAAA,EACV,QAAY,EAAA,WACZ,YAAY,WACH,YAAA,WAAA,WAAA,EAAA,GAAA,QAAA,QAAA,OAIR,sBAAW,EAAA,IAAA,GAAA,GAAA,AAAA,GAAK,EAAQ,GAAA,QAAQ,QAAM,OAAA,GACtC,aAAM,EAAA,KAAA,GAAA,IAAA,AAAA,GAAE,EAAc,GAAA,QAAA,QAAM,OAAU,GACvC,WAAU,KAAa,GAAA,IAAA,AAAA,GAAA,GAAA,eAAA,KAAA,WAAA,UAAA,EAAA,KAAA,EAAA,EAAA,MAAA,SAAA,IAAA,YAAA,aAE3B,EAAA,KAAA,EAAA,CAAA,UAA2G,aAA3G,OAA2G,CAAA,EAAAF,EAAA,QAAAP,GAAAU,EAAA,EAAA,GAAA,kCAAA,CAAA,EAAA,MAAA,CAAA,CAE/G,CAAA,EAAAL,EACY,EAAkB,CACzB,MAAA,EAAA,GAAA,QAAA,QAAqE,0BAAA,CAAA,UAAA,EAAA,GAAA,kCAAA,iDAK9E,CAAA,EAAAE,EACI,MAiBON,GAjBP,CAcMM,EAAA,OAAAO,GAAA,CAAAT,EAZK,EAAU,CACb,GAAA,WAKmE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,UAAA,UAAA,EAAA,GAAA,QAAA,UAAA,MAJzD,CAAA,CAAA,EACV,QAAY,EAAA,cACZ,YAAY,WACH,YAAA,WAAA,WAAA,EAAA,GAAA,QAAA,UAAA,OAIR,sBAAW,EAAK,KAAA,GAAA,IAAA,AAAA,GAAA,EAAO,GAAC,QAAU,UAAM,OAAA,GACxC,aAAM,EAAE,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,GAAA,QAAc,UAAM,OAAA,GAC7B,WAAU,KAAgB,GAAA,IAAA,AAAA,GAAA,GAAA,eAAA,KAAA,cAAA,YAAA,EAAA,KAAA,EAAA,EAAA,MAAA,SAAA,IAAA,YAAA,gBAEZ,EAAA,KAAA,EAAA,CAAO,UAAQ,aAAA,OAAA,CAAA,EAAA,KAAA,QAAA,SAAjC,YACAM,EAAoG,QAApGC,GAAoGN,EAAnC,KAAE,iBAAsB,CAAA,EAAA,CAAA,GAAAP,GAAA,EAAAY,EAAA,QAAAE,GAAAP,EAAA,EAAA,GAAA,iBAAA,CAAA,EAAA,MAAA,CAAA,EAE7F,CAAA,EAAAL,EACY,EAAoB,CAC3B,MAAA,EAAA,GAAA,QAAA,UAAqE,0BAAA,CAAA,UAAA,EAAA,GAAA,kCAAA,iDAK9E,CAAA,EAAAE,EACI,MAUOW,GAVP,CAQmBX,EAAA,OAAAY,GAAA,CAPoBd,EAAA,EAAA,CAAA,WAAA,EAAA,QAAA,KAAG,sBAAa,EAAiB,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,KAAA,GAAG,YAAU,EAAI,kBAAG,SAAQ,GAAc,WAAO,EAAA,UAAA,UAAAe,GAAA,EAAA,cAAA,CAAA,OAAA,CAAA,CACtG,EAAA,CAAA,KAAAd,EAAA,AAAA,GAAA,qBAGA,CAAA,EAAA,KAAAA,EAAA,AAAA,GAAA,4BAIkE,EAAA,CAAA,aAAA,cAAjF,aAAiF,WAA5B,CAAA,EAAAC,EAAA,QAAAL,GAAAQ,EAAA,EAAA,GAAA,aAAA,CAAA,EAAA,CAAA,CAEzD,CAAA,EAAAH,EAAA,QAAAc,GAAAX,EAAA,EAAA,GAAA,iDAAA,CAAA,EAAA,CAAA,WAKhB,CAAA,EAAAL,EACqB,EAQH,CAAA,MAAA,OAAA,EAAA,CAAA,OAPVC,EAOU,IAAA,CAAAD,EANU,EACsC,CAAA,MAAA,kCAAA,EAAA,CAAA,MAAAC,EAAA,IAAA,uDAE3C,CAAA,EAAA,IACPA,EAAuJ,IAAA,CAAAD,EAA1I,EAAe,CAAC,KAAK,gBAAkD,MAAA,gDAA8B,SAAK,EAAA,kBAAA,QAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,cAAA,WAAA,gCAIxH,CAAA,EAAA,QACyDC,EAAO,IAAA,CAAA,EAAA,QAAAH,KAAAmB,EAAA,EAAA,CAA1D,IAAI,EAAiB,KAAK,gBAAkC,MAAA,kBAAA,YAAA,sBACvDC,EAAO,GAAA,EAAA,EAAA,AAAA,EAAA,iBAAApB,GAAA,EAAAmB,EAAA,EAAA,CAAE,IAAK,EAA4B,MAAO,0BAA0B,MAAY,EAAA,wBAAM,WAAY,GAAU,aAAS,QAAS,QAAQ,EAAA,QAAU,QAAA,UAAyB,iBAAW,QAAA,WAAA,OAC9L,EAAA,CAAA,MAAAhB,EAAA,IAAA,iEAGXA,EAAkG,IAAA,CAAAD,EAApF,EAAQ,CAAE,MAAM,SAAkD,OAAQ,EAAE,GAAI,yCAAA,EAAA,SAAA,EACL,EAAA,KAAA,EAAA,CAAA,QAAA,CAAA,EAAAA,EAA3E,EAAM,CAAE,MAAM,OAA2C,OAAQ,EAAE,GAAI,kCAAA,EAAA,SAAA,EAK5E,EAAA,KAAA,EAAA,CAAA,QAAA,CAAA,EAAAA,EAJK,EAAQ,CAAE,MAAM,SAAiE,OAAQ,EAAC,GAAM,yDAAA,EAAE,SAAU,OAAA,SAAA,EAC3G,EAAA,CAAA,KAAAC,EAAA,CAAA,CAAA,UAAA,uCASN,EAAA,CAAA,QAAA,CAAA,EAAAD,EALQ,EAAO,CAAA,WAAA,AAAA,GAAA,EACT,EAAA,CAAA,KACOC,EAAU,AAAY,GAAA,CAApC,EAAA,KAAA,UAAA,EAAAH,GAAA,EAAAmB,EAAA,EAAA,CAA4C,IAAI,EAAkB,KAAK,iBAAkB,MAAK,gBAAA,QAAA,AAAA,GAAA,EAAA,sBAAA,EAAA,IAAA,wBAChFC,EAAsB,GAAA,EAAA,EAApC,EAAA,KAAA,UAAA,EAAApB,GAAA,EAAAmB,EAAA,EAAA,CAA4C,IAAI,EAAe,KAAK,cAAkB,MAAK,gBAAA,QAAA,AAAA,GAAA,EAAA,cAAA,YAAA,EAAA,IAAA,q0BCzDnH,KAAKtC,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,QAAMuC,YAAOtC,EAAU,UAAAC,EAAA,OAAWC,WAAQqC,EAAS,EACjE,MAAO,CACH,gBAAiB,CAAE,KAAM,MAAc,CAC3C,EACA,SAAU,CACN,kBAAmB,CACX,MAAA,CAAC,KAAK,QAAQ,MAAQ,KAAK,QAAQ,KAAQ,QAAU,CAK7D,CACJ,EACA,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CACH,kBACA,QAAS,CAAC,EACV,iBAAkB,GAClB,kBAAmB,EAAgB,iBAAA,CAE3C,EACA,SAAU,CACN,KAAK,QAAU,KAAK,eACxB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,eACxB,CACJ,EACA,QAAS,CACL,aAAc,CACN,AAAA,KAAK,QAAQ,YACb,KAAK,SAAS,QAAQ,CAClB,QAAS,KAAK,GAAG,kDAAkD,EACnE,OAAQ,KAAK,GAAG,+CAA+C,EAC/D,KAAM,6BACN,OAAQ,IAAM,CACV,KAAK,QAAQ,YAAc,GAC3B,KAAK,QAAQ,iBAAmB,KAChC,KAAK,gBAAgB,CACzB,CAAA,CACH,EAED,KAAK,gBAAgB,CAE7B,EACA,eAAe,EAAK,CAChB,AAAG,EAAK,WACD,EAAK,cAAmB,GAAA,aAAe,CAAC,EAAK,YAAY,GACvD,EAAK,cAAc,GAAK,aAAe,EAAK,aAAa,KAAK,EAAE,GACzE,KAAK,aAAa,CACtB,EACA,iBAAkB,CACd,KAAK,QAAQ,MAAa,MAAK,QAAQ,KAAO,IAC9C,KAAM,GAAW,CAAE,GAAG,EAAgB,QAAS,EAC1C,KAAA,QAAQ,KAAK,KAAK,CAAQ,CACnC,EACA,YAAY,EAAc,CACtB,KAAK,SAAS,QAAQ,CAClB,QAAS,KAAK,GAAG,4BAA4B,EAC7C,OAAQ,KAAK,GAAG,wBAAwB,EACxC,KAAM,6BACN,OAAQ,IAAO,KAAK,QAAQ,KAAO,KAAK,QAAQ,KAAK,OAAO,AAAC,GAAkB,EAAa,KAAK,OAAS,EAAc,IAAI,CAAA,CAC/H,CACL,EACA,iBAAkB,CACd,KAAK,SAAS,QAAQ,CAClB,QAAS,KAAK,GAAG,+CAA+C,EAChE,OAAQ,KAAK,GAAG,4CAA4C,EAC5D,KAAM,6BACN,OAAQ,IAAO,KAAK,QAAQ,KAAO,CAAC,CAAA,CACvC,CACL,EACA,mBAAmB,EAAO,CACtB,KAAK,QAAQ,KAAK,EAAM,OAAS,EAAM,OAC3C,CACJ,CACJ,CAAC,MAzHmC,IAAK,EAAA,MAAA,kEAQL,IAAK,EAAA,MAAA,mOAtCrC,MAAAtB,OAAcC,EAAC,KAAA,CAAAC,EACK,EAC8J,CAAA,MAAA,gDAAA,EAAA,CAA3J,MAAAC,EAAA,IAAA,CAAA,AAAA,EAAA,2BACA,IAAI,EAAuB,KAAK,sBAAiD,MAAA,gDAAqB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,iBAAA,OAD3GH,GAAA,EAAAmB,EAAA,EAAA,CAAkB,IAAI,EAAwB,KAAK,uBAAiD,MAAA,gDAAqB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,iBAAA,4DAItI,CAAA,EAAA,IACPhB,EAAwG,IAAA,CAAAD,EAA3F,EAAa,CAAC,KAAK,cAAkD,MAAK,gDAAA,QAAA,EAAA,WACoD,EAAA,KAAA,EAAA,CAAA,SAAA,CAAA,EAAAA,EAA9H,EAAe,CAAC,KAAK,gBAAkD,MAAA,gDAA6B,SAAO,EAAA,iBAAA,QAAA,EAAA,0DAI1GA,EA6CF,EAAA,CAAA,MAAA,QAAA,EAAA,CAAA,QA5CZC,EA4CY,IAAA,CAAAD,EA5CK,EAAyB,CAAC,MAAA,0BAAiB,SAAO,OAAe,QAAY,QAAI,KAAE,WAAY,GAAS,aAAQ,QAAU,QAAA,UAAyB,iBAAW,QAAS,WAAA,QAAA,mBAAA,EAAA,kBACzK,EAAA,CAAA,MAAAC,EAAA,IAAA,iEAGXA,EAIS,IAAA,CAAAD,EAJK,EAAM,CAAE,MAAM,OAAyB,OAAQ,EAAE,GAAI,gBAAA,EAAA,SAAA,EACpD,EAAA,CAAA,OACPC,EAAsG,CAAA,CAAA,UAAA,CAAAD,EAArF,EAAmB,CAAE,MAAK,oBAAuD,MAAAqB,EAAA,EAAA,gBAAA,MAAA,WAAA,EAAA,WAAA,EAAA,oGAOjG,EAAA,CAAA,QAAA,CAAA,EAAArB,EAJK,EAAM,CAAE,MAAM,OAAyB,OAAQ,EAAE,GAAI,gBAAA,EAAA,SAAA,EACpD,EAAA,CAAA,OACPC,EAAqL,CAAA,CAAA,UAAA,CAAjKD,EAAA,EAAA,CAAC,GAAA,QAA2B,MAAK,oBAAsC,MAAOqB,EAAE,EAAiB,gBAAA,MAAA,WAAA,EAAE,QAAY,EAAA,kBAAQ,YAAY,QAAiB,YAAA,QAAA,WAAA,EAAA,8GAmBvK,EAAA,CAAA,QAAA,CAAA,EAAArB,EAhBK,EAAc,CAAE,MAAM,eAA2D,OAAQ,EAAE,GAAI,kDAAA,EAAA,SAAA,EAC9F,EAAA,CAAA,OACeC,EAAU,CAAA,CAAA,UAAA,CAAhC,EAAA,aAAA,GAAAH,GAAA,EAAAmB,EAAA,EAAA,CAA4C,IAAK,EAAsB,MAAK,oBAAA,MAAAI,EAAmD,EAAY,gBAAA,MAAA,WAAA,EAAA,WAAA,EAAA,sDAC3I,EAAA,KAAA,EAAA,CAAA,QAAA,aAGM,4BAF0D,EAAAX,EAAA,MAAAvB,GAAA,CAAAa,EAA/C,EAAgB,CAAA,MAAA,oFAC4B,EAAA,KAAA,EAAA,CAAA,aAAA,qBAAA,CAAA,EAAAE,EAAA,QAAAd,GAAAiB,EAAA,EAAA,GAAA,kBAAA,CAAA,EAAA,CAAA,IAItD,CAAA,EAAA,KACUJ,EAAK,CAAU,CAAA,UAAA,CAAhC,EAAA,aAAA,GAAAH,GAAA,EAAAmB,EAAA,EAAA,CAA4C,IAAK,EAAsB,MAAK,oBAAA,MAAAI,EAAmD,EAAY,gBAAA,MAAA,WAAA,EAAA,WAAA,EAAA,sDAC3I,EAAA,KAAA,EAAA,CAAA,QAAA,aAGM,4BAF0D,EAAAX,EAAA,MAAAP,GAAA,CAAAH,EAA/C,EAAgB,CAAA,MAAA,oFAC4B,EAAA,KAAA,EAAA,CAAA,aAAA,qBAAA,CAAA,EAAAE,EAAA,QAAAb,GAAAgB,EAAA,EAAA,GAAA,kBAAA,CAAA,EAAA,CAAA,YAW5D,EAAA,CAAA,QAAA,CAAA,EAAAL,EAPK,EAAY,CAAE,MAAM,aAA+D,OAAQ,EAAE,GAAI,sDAAA,EAAA,SAAA,EAChG,EAAA,CAAA,KACPC,EAAmF,CAAA,CAAA,UAAA,CAAjDD,EAAA,EAAA,CAAA,WAAA,EAAA,WAAG,sBAAY,AAAA,GAAA,EAAA,WAAA,EAAG,OAAM,GAAA,SAAA,AAAA,GAAA,EAAA,eAAA,CAAA,0DAEnD,CAAA,EAAA,OACPC,EAAmF,CAAA,CAAA,UAAA,CAAjDD,EAAA,EAAA,CAAA,WAAA,EAAA,WAAG,sBAAY,AAAA,GAAA,EAAA,WAAA,EAAG,OAAM,GAAA,SAAA,AAAA,GAAA,EAAA,eAAA,CAAA,kEAOzD,EAAA,CAAA,QAAA,CAAA,EAAAA,EAJQ,EAAO,CAAA,WAAA,AAAA,GAAA,EACT,EAAA,CAAA,KACPC,EAAmF,AAAA,GAAA,CAAAD,EAAtE,EAAa,CAAC,KAAK,cAAkB,MAAK,gBAAA,QAAA,AAAA,GAAA,EAAA,YAAA,CAAA,0lDCqD/E,KAAKrB,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,EAAM,uBAAsB,eAAa,SAAAC,EAAA,UAAUC,SAAWC,CAAO,EACnF,MAAO,CAAE,gBAAiB,CAAE,KAAM,MAAc,EAAG,YAAa,CAAE,KAAM,MAAe,EACvF,MAAO,CAAC,UAAW,eAAgB,uBAAuB,EAC1D,MAAO,CACI,MAAA,CACH,GAAIE,EAAY,EAChB,kBACA,QAAS,CAAC,EACV,cAAe,GACf,UAAW,GACX,QAAS,GACT,gBAAiB,GACjB,QAAS,CAAC,EACV,KAAM,CAAC,CAAA,CAEf,EACA,OAAQ,CAEJ,MAAO,CAAA,MADOC,GACC,CACnB,EACA,SAAU,CACN,KAAK,QAAU,KAAK,gBACpB,KAAK,QAAQ,IAAK,KAAK,eAAA,CAC3B,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,gBACpB,KAAK,QAAQ,IAAK,KAAK,eAAA,CAC3B,CACJ,EACA,aAAc,CAIJ,KAAA,GAAwC,CAAE,uBAHrB,AAAC,GACjB,KAAK,QAAQ,UAAY,QAAU,GAIvC,MADkB,CAAE,QAAS,EAAkB,UAAW,GAAe,YAAY,QAAS,CAAgB,EAEzH,EACA,QAAS,CACL,eAAgB,CACZ,KAAK,cAAgB,GACrB,WAAW,IAAO,KAAK,cAAgB,GAAO,GAAG,CACrD,EACA,kBAAkB,EAAO,CACrB,KAAK,UAAY,GACb,GAAA,GAAe,EAAM,OAAO,MAAM,GACtC,AAAI,EAAa,KAAK,SAAS,KAAK,QAAQ,QAAQ,EAChD,MAAK,MAAM,SAAS,CAAE,MAAO,KAAK,GAAG,yBAAyB,EAAG,IAAK,KAAK,GAAG,2BAA2B,CAAG,CAAA,EAC5G,KAAK,cAAgB,IAErB,KAAK,YAAY,CAAY,EAEjC,KAAK,cAAgB,GACrB,WAAW,IAAO,KAAK,UAAY,GAAQ,GAAG,CAClD,EACA,KAAM,aAAY,EAAc,CACxB,GAAA,GAAW,GAAI,UACV,EAAA,OAAO,OAAQ,CAAY,EACpC,KAAM,MAAK,MACN,KAAK,gEAAoF,EAAU,CAChG,QAAS,CACL,eAAgB,sEACpB,CAAA,CACH,EACA,KAAK,AAAC,GAAiC,CACpC,KAAK,MAAM,QAAQ,CACf,MAAO,KAAK,GAAG,kBAAkB,EACjC,IAAK,KAAK,GAAG,2CAA2C,CAAA,CAC3D,EACI,KAAA,QAAQ,SAAW,EAAS,KAAK,SACjC,KAAA,QAAQ,SAAW,EAAS,KAAK,SACtC,KAAK,MAAM,cAAc,EACzB,KAAK,YAAY,EACjB,KAAK,eAAe,CAAA,CACvB,EACA,QACA,QAAQ,IAAM,CACX,KAAK,cAAgB,EAAA,CACxB,CACT,EACA,aAAc,CACV,KAAK,QAAQ,YAAc,QAC3B,KAAK,QAAQ,aAAe,IAC5B,KAAK,QAAQ,WAAa,aAC1B,KAAK,QAAQ,gBAAkB,sBAC/B,KAAK,QAAQ,SAAW,IACxB,KAAK,QAAQ,SAAW,EACxB,KAAK,QAAQ,UAAY,KACzB,KAAK,QAAQ,eAAiB,EAE1B,MAAK,QAAQ,UAAY,OAAS,KAAK,QAAQ,UAAY,SAC3D,MAAK,QAAQ,UAAY,GACzB,KAAK,QAAQ,aAAe,GAC5B,KAAK,QAAQ,WAAa,GAC1B,KAAK,QAAQ,gBAAkB,GAC/B,KAAK,QAAQ,SAAW,GAEhC,EAEA,KAAM,sBAAsB,CACxB,GAAI,GAAe,UAAU,KAAK,QAAQ,KAAK,EACzC,KAAA,MAAK,MACN,IAAI,gEAAmF,UAAqB,KAAK,QAAQ,WAAY,CAClI,QAAS,CACL,OAAQ,yIACZ,CAAA,CACH,EACA,KACG,AAAC,GAAiC,CAC1B,AAAA,EAAS,KAAK,OACd,KAAK,MAAM,SAAS,CAAE,MAAO,KAAK,GAAG,0BAA0B,EAAG,IAAK,KAAK,GAAG,mCAAmC,CAAG,CAAA,EAEhH,MAAA,MAAM,QAAQ,CAAE,MAAO,KAAK,GAAG,sBAAsB,EAAG,EACzD,EAAS,SACM,GAAA,EAAS,KAAM,KAAK,uBAAuB,CAAQ,EAAG,EAAS,QAAQ,eAAe,EAIjH,EAAA,AAAC,GACG,KAAK,MAAM,SAAS,CAChB,MAAO,KAAK,GAAG,0BAA0B,EACzC,IAAK,KAAK,GAAG,CAAK,CACrB,CAAA,CACT,CACR,EACA,uBAAuB,EAAU,CACzB,GAAA,GAAqB,EAAS,QAAQ,uBACtC,EAAmB,EAAmB,MAAM,yCAAyC,EAAE,GACvF,EAAmB,EAAiB,WAAW,IAAK,EAAE,EACnD,MAAA,EACX,EACA,KAAM,gBAAe,EAAoB,GAAM,CAC3C,KAAK,QAAU,GACf,KAAK,QAAQ,MAAQ,GAChB,GAAU,MAAO,MAAK,QAAQ,KAE7B,KAAA,MAAK,MACN,KAAK,iDAAqE,KAAK,QAAS,CACrF,QAAS,CACL,OAAQ,oCACR,eAAgB,iCAChB,mBAAoB,MACxB,CAAA,CACH,EACA,KAAK,AAAC,GAAiC,CAErB,AADM,EAAS,KAAK,SAAS,OAC7B,QAAQ,AAAC,GAAY,CAChC,MAAO,IAAM,UAAgB,KAAK,QAAQ,KAAK,CAAE,CAAA,CACpD,EAEI,KAAA,KAAO,EAAS,KAAK,IAAA,CAC7B,EACA,MAAM,EACN,QAAQ,IAAO,KAAK,QAAU,EAAM,CAC7C,CACJ,CACJ,CAAC,MApQyB,MAAM,uCAaEiB,GAAW,CAAC,IAAK,WAAA,MAAA,+BASmB,IAAK,EAAA,MAAA,6EAG7CG,GAAQ,CAAC,IAAK,QAAA,MAAA,oEAIdd,GAAQ,CAAC,IAAK,QAAA,MAAA,oEAIdC,GAAQ,CAAC,IAAK,QAAA,MAAA,oEAIde,GAAQ,CAAC,IAAK,QAAA,MAAA,oEAIdZ,GAAQ,CAAC,IAAK,QAAA,MAAA,+BAGoC,IAAK,EAAA,MAAA,oCAE3De,GAAA,CAAA,MAAM,4CAEEE,GAAW,CAAC,IAAK,WAAA,MAAA,2BAIzBC,GAAA,CAAA,MAAM,4CAEEE,GAAY,CAAC,IAAK,YAAA,MAAA,2BAI1BM,GAAA,CAAA,MAAM,4CAEEC,GAAc,CAAC,IAAK,cAAA,MAAA,+BAO7C,IAAG,EAAA,GAAA,4NAvER,MAAAzB,OAAYC,EAAO,KAAA,CAAAC,EACG,EAuBR,CAAA,MAAA,OAAA,EAAA,CAAA,QAtBNC,EAsBM,IAAA,CAAAC,EArBF,MAiBMf,GAAA,CAjBce,EAAA,MAAA,CAAE,MAAK,UAAA,MAAAmB,EAAA,EAAA,eAAA,MAAA,QAAA,CACvB,EAAA,CAYMnB,EAAA,OAAAd,GAAA,CAAAY,EAVK,EAAU,CACb,GAAA,WAGmE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,SAAA,UAAA,EAAA,GAAA,QAAA,SAAA,MAF7D,CAAA,CAAA,EAAA,MAAAiB,EACW,EAAQ,eAAe,MAAA,QAAA,EAAA,WAAA,EAAA,GAAA,QAAA,SAAA,6BAAxC,EAAyC,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,SAAA,OAAA,GAIxC,eAAc,CAAA,KAAA,EAAA,EACd,SAAI,GACJ,OAAM,iBAAE,GAAK,QAAA,SAAA,OAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,QAA8G,aAA9G,OAA8G,CAAA,EAAAnB,EAAA,QAAAC,GAAAE,EAAA,EAAA,GAAA,kCAAA,CAAA,EAAA,MAAA,CAAA,CAElH,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAAsB,MAAA,EAAA,GAAA,QAAA,SAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,kCAAA,CAAA,gDAEvE,EAAA,CAAA,EAAAA,EAAa,EAAe,CAAC,KAAK,gBAAwC,MAAK,sCAAA,QAAA,EAAA,aAC6B,EAAA,KAAA,EAAA,CAAA,SAAA,CAAA,EAAAA,EAA/F,EAAiB,CAAC,KAAK,kBAA0C,MAAK,wCAAA,QAAA,EAAA,qBAC/D,KAAS,EAAA,CAAA,SAAA,CAAA,EAAA,AAAA,EAAA,mBAAAF,GAAA,EAAAmB,EAAA,EAAA,CAAG,IAAA,EAAmC,eAAO,EAAA,kBAAqB,OAAA,oBAAA,aAAA,EAAA,yDAGxF,CAAA,EAAX,EAAA,QAAA,UAAA,EAAA,QAqBM,UArBN,MAAAnB,GAIW,EAAAY,EAAA,MAAArB,GAAA,CAFgNa,EAAA,OAAAZ,GAAA,CAAAU,EAAtM,EAAc,CAAC,GAAA,eAA2B,MAAO,oBAA6C,UAAY,eAAM,2BAAC,YAAY,OAAiB,YAAA,QAAA,WAAA,EAAA,QAAA,aAAuB,sBAAM,YAAE,AAAc,GAAA,EAAA,QAAA,aAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,eAAA,EAAA,EACxM,EAAA,KAAA,EAAA,CAAA,UAAoH,YAApH,CAAA,EAAAE,EAAA,QAAAI,GAAAD,EAAA,EAAA,GAAA,6CAAA,CAAA,EAAA,CAAA,CAEJ,CAAA,EAC2MH,EAAA,OAAAX,GAAA,CAAAS,EAA1L,EAAU,CAAC,GAAA,WAA2B,MAAO,oBAAyC,UAAY,eAAM,uBAAC,YAAY,OAAiB,YAAA,QAAA,WAAA,EAAA,QAAA,SAAmB,sBAAM,YAAE,AAAc,GAAA,EAAA,QAAA,SAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,eAAA,EAAA,EAC5L,EAAA,KAAA,EAAA,CAAA,UAAgH,YAAhH,CAAA,EAAAE,EAAA,QAAAV,GAAAa,EAAA,EAAA,GAAA,yCAAA,CAAA,EAAA,CAAA,CAEJ,CAAA,EAC2MH,EAAA,OAAAK,GAAA,CAAAP,EAA1L,EAAa,CAAC,GAAA,cAA2B,MAAO,oBAAmC,UAAY,eAAM,iBAAC,YAAY,OAAiB,YAAA,QAAA,WAAA,EAAA,QAAA,YAAsB,sBAAM,YAAE,AAAc,GAAA,EAAA,QAAA,YAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,eAAA,EAAA,EAC5L,EAAA,KAAA,EAAA,CAAA,UAAmH,YAAnH,CAAA,EAAAE,EAAA,QAAAT,GAAAY,EAAA,EAAA,GAAA,4CAAA,CAAA,EAAA,CAAA,CAEJ,CAAA,EACwMH,EAAA,OAAAR,GAAA,CAAAM,EAAvL,EAAY,CAAC,GAAA,aAA2B,MAAO,oBAAkC,UAAY,eAAM,gBAAC,YAAY,OAAiB,YAAA,QAAA,WAAA,EAAA,QAAA,WAAqB,sBAAM,YAAE,AAAc,GAAA,EAAA,QAAA,WAAA,GAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,eAAA,EAAA,EACzL,EAAA,KAAA,EAAA,CAAA,UAAkH,YAAlH,CAAA,EAAAE,EAAA,QAAAM,GAAAH,EAAA,EAAA,GAAA,2CAAA,CAAA,EAAA,CAAA,CAEJ,CAAA,EACuNH,EAAA,OAAAP,GAAA,CAAAK,EAAtM,EAAiB,CAAC,GAAA,kBAA2B,MAAO,oBAAuC,UAAY,eAAM,qBAAC,YAAY,OAAiB,YAAA,QAAA,WAAA,EAAA,QAAA,gBAA0B,sBAAM,cAAE,AAAc,GAAA,EAAA,QAAA,gBAAA,GAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,eAAA,EAAA,EACxM,EAAA,KAAA,EAAA,CAAA,UAAmH,YAAnH,CAAA,EAAAE,EAAA,QAAAN,GAAAS,EAAA,EAAA,GAAA,4CAAA,CAAA,EAAA,CAAA,OAGGa,EAAgB,GAAA,EAAA,EAAA,EAAA,QAAA,UAA3B,OAmBM,EAAA,QAnBN,UAmBM,OAAApB,GAbI,EAAAY,EAAA,MAAAD,GAAA,CAAAP,EAJF,MAGOS,GAHP,CACuIT,EAAA,OAAAU,GAAA,CAAAZ,EAArH,EAAU,CAAC,GAAA,WAA0B,MAAK,oBAAA,KAAA,6DAAS,EAA+B,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,SAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,eAAA,EAAA,EACW,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAAW,GAAAR,EAAA,EAAA,GAAA,yCAAA,CAAA,EAAA,CAAA,GAG3H,CAAA,EAAAH,EACI,MAGOY,GAHP,CACyIZ,EAAA,OAAAL,GAAA,CAAAG,EAAvH,EAAW,CAAC,GAAA,YAA0B,MAAK,oBAAA,KAAA,8DAAS,EAAgC,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,UAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,eAAA,EAAA,EACW,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAAc,GAAAX,EAAA,EAAA,GAAA,0CAAA,CAAA,EAAA,CAAA,GAG7H,CAAA,EAAAH,EACI,MAGOoB,GAHP,CACgJpB,EAAA,OAAAsB,GAAA,CAAAxB,EAA9H,EAAa,CAAC,GAAA,cAA0B,MAAK,oBAAA,KAAA,mEAAS,EAAqC,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,eAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,eAAA,EAAA,EACW,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAAqB,GAAAlB,EAAA,EAAA,GAAA,+CAAA,CAAA,EAAA,CAAA,uBAO9G,CAAA,EAAlC,EAAA,KAAA,OAAA,EAAAP,GAAA,EAUcY,EAAA,MATIe,GAAC,CAAAzB,EACK,EAC6J,CAAA,MAAA,yCAAA,EAAA,CAA1J,MAAAC,EAAA,IAAA,CAAA,AAAA,EAAA,0BACA,IAAI,EAAuB,KAAK,sBAAiD,MAAA,gDAAsB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,gBAAA,OAD5GH,GAAA,EAAAmB,EAAA,EAAA,CAAiB,IAAI,EAAwB,KAAK,uBAAiD,MAAA,gDAAsB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,gBAAA,0DAItI,CAAA,EACP,IAAAhB,EAAA,IAAA,CAAAyB,EAAa1B,EAAe,EAAA,CAAC,KAAK,gBAAkG,MAAK,0DAAA,QAAA,EAAA,sCAA5B,EAAA,EAAA,GAAA,gBAAA,gCAI/FA,EAGF,EAAA,CAAA,MAAA,OAAA,EAAA,CAAA,QAFZC,EAEY,IAAA,CAAAD,EAFO,EAAI,CAAE,MAAM,EAAA,KAA2B,MAAO,0BAAW,QAAA,EAAA,QAA2B,iBAAgB,SAAE,WAAA,GAAuB,gBAAa,OAAQ,aAAA,QAAY,YAAQ,GAAC,SAAA,GAAA,MAAA,CAAA,MAAA,MAAA,IACtL,QAAAC,EAAA,IAAA,CAAuIH,GAAA,EAAA,EAAAY,EAAAX,EAAA,KAAA4B,GAAA,EAAA,QAAA,AAAA,GAAlG7B,GAAU,EAAAmB,EAAA,EAAA,CAAG,MAAM,EAAK,KAAU,OAAQ,EAAC,OAAW,IAAK,EAAC,UAAe,MAAA,eAAA,MAAA,CAAA,MAAA,OAAA,oXC1DhI,KAAKtC,IAAa,EAAa,CAC3B,WAAY,CAAEiD,OAAAA,CAAO,EACrB,MAAO,CAAC,EACR,MAAO,CAAC,OAAO,EACf,MAAO,CACI,MAAA,CAAA,gBACHC,EAAA,CAER,CACJ,CAAC,uFArBkBvB,GAAA,CAAA,WAAA,4HAfRR,GAAmB,EAAAmB,EAAA,EAAA,CAAC,GAAA,oBAA6C,MAAO,sCAAY,QAAO,EAAI,QAAG,MAAA,GAAA,SAAA,EAC9F,EAAA,CAAA,OACPhB,EAEU,IAAA,CAAAD,EADU,EAAyB,CAAA,MAAA,qDAAA,EAAA,CAAA,MAAAC,EAAA,IAAA,oCAWtC,CAAA,EAAA,OACPA,EAEM,IAAA,CADqGC,EAAA,MAAAX,GAAA,CAAzFS,EAAA,EAAA,CAAgC,MAAK,+BAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,OAAA,qEAT3DC,EAAkH,IAAA,CAAAC,EAAvG,MAAE,CAA8B,MAAUmB,EAAA,EAAA,gBAAA,MAAA,MAAA,EAAA,UAAA,EAAA,GAAA,uDAAA,GAC6D,KAAA,GAAAlC,EAAA,EAAAe,EAAvG,MAAE,CAA8B,MAAUmB,EAAA,EAAA,gBAAA,MAAA,MAAA,EAAA,UAAA,EAAA,GAAA,uDAAA,GACwD,KAAA,GAAAjC,EAAA,EAAAc,EAAlG,MAAE,CAA8B,MAAUmB,EAAA,EAAA,gBAAA,MAAA,MAAA,EAAA,UAAA,EAAA,GAAA,kDAAA,GACwD,KAAA,GAAAlB,EAAA,EAAAD,EAAlG,MAAE,CAA8B,MAAUmB,EAAA,EAAA,gBAAA,MAAA,MAAA,EAAA,UAAA,EAAA,GAAA,kDAAA,GACwD,KAAA,GAAAhC,EAAA,EAAAa,EAAlG,MAAE,CAA8B,MAAUmB,EAAA,EAAA,gBAAA,MAAA,MAAA,EAAA,UAAA,EAAA,GAAA,kDAAA,GACwD,KAAA,GAAA/B,EAAA,EAAAY,EAAlG,MAAE,CAA8B,MAAUmB,EAAA,EAAA,gBAAA,MAAA,MAAA,EAAA,UAAA,EAAA,GAAA,kDAAA,kEC+D7D,KAAK1C,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,EAAMC,SAAAA,EAAU,uBAAsBiD,YAAAA,EAAaC,WAAAA,EAAW,EAC5E,MAAO,CAAE,gBAAiB,CAAE,KAAM,QAAiB,YAAa,CAAE,KAAM,KAAgB,EAAA,YAAa,CAAE,KAAM,KAAA,EAAgB,UAAW,CAAE,KAAM,OAAgB,EAChK,MAAO,CAAC,UAAW,aAAa,EAChC,MAAO,CACI,MAAA,CAAA,gBACHF,GACA,QAAS,CAAC,EACV,WAAY,CAAC,EACb,iBAAkB,CAAC,EACnB,GAAI5C,EAAY,EAChB,gBAAiB,GACjB,iBAAkB,GAClB,kBAAmB,GACnB,kBAAmB,CACf,KAAM,aACN,aAAc,GACd,eAAgB,GAChB,YAAa,GACb,cAAe,GACf,MAAO,UACP,YAAa,EACjB,EACA,cAAe,CACX,KAAM,GACN,eAAgB,GAChB,YAAa,GACb,aAAc,GACd,cAAe,GACf,UAAW,GACX,MAAO,UACP,YAAa,EACjB,CAAA,CAER,EACA,SAAU,CACA,KAAA,GAAW,YAAY,IAAM,CAC3B,AAAA,CAAC,KAAK,MAAM,YACX,MAAA,WAAc,KAAK,MAAM,WAAmB,WAC7C,AAAC,KAAK,MAAM,kBACX,MAAA,iBAAoB,KAAK,MAAM,iBAAyB,WAE7D,KAAK,YAAY,EACjB,KAAK,eAAe,EAEpB,cAAc,CAAQ,KACvB,GAAG,CACV,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,YAAY,EACjB,KAAK,eAAe,CACxB,EACA,WAAY,CACR,AAAI,KAAK,YAAc,GAAK,KAAK,YAAc,KAAK,kBAChD,WAAW,IAAM,CACb,KAAK,WAAW,UAChB,KAAK,iBAAiB,WACvB,CAAC,CAEZ,CACJ,EACA,aAAc,CAIJ,KAAA,GAAwC,CAAE,wBAHpB,AAAC,GAClB,KAAK,QAAQ,UAAY,SAAW,GAIxC,MADkB,CAAE,QAAS,EAAkB,UAAW4C,GAAgB,YAAY,QAAS,CAAgB,EAE1H,EACA,QAAS,CACL,aAAc,CACV,KAAK,QAAU,KAAK,gBACpB,KAAK,QAAQ,OAAc,MAAK,QAAQ,MAAQ,IAChD,KAAK,QAAQ,aAAoB,MAAK,QAAQ,YAAc,GAChE,EACA,gBAAiB,CACT,AAAA,KAAK,QAAQ,qBACb,MAAK,cAAc,KAAO,KAAK,QAAQ,sBAAwB,aAAe,kBAAoB,gBAC7F,KAAA,iBAAiB,UAAU,OAAQ,KAAK,QAAQ,sBAAwB,aAAe,kBAAoB,eAAe,EAEvI,EACA,kBAAkB,EAAe,CACvB,KAAA,GAAa,IAAU,aAAe,kBAAoB,gBAC3D,KAAA,iBAAiB,UAAU,OAAQ,CAAU,EAClD,KAAK,MAAM,SAAS,CACxB,CACJ,CACJ,CAAC,MAhKqB,MAAM,sCAcE1B,GAAQ,CAAC,IAAK,QAAA,MAAA,sDAoCVb,GAAC,CAAsB,IAAK,sBAAA,MAAA,oLArD1D,MAAAQ,OAAYC,EAAO,KAAA,CAAAC,EACG,EAwBR,CAAA,MAAA,OAAA,EAAA,CAAA,QAvBNC,EAuBM,IAAA,CAAAC,EAtBF,MAeOf,GAfP,CAaMe,EAAA,OAAAd,GAAA,CAAAY,EAXK,EAAY,CACf,GAAA,aAM+D,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,WAAA,UAAA,EAAA,GAAA,QAAA,WAAA,MALzD,CAAA,CAAA,EACL,MAAOiB,EAAE,EAAW,gBAAA,MAAA,QAAA,EACrB,QAAY,EAAA,YACZ,YAAY,QACH,YAAA,QAAA,WAAA,EAAA,GAAA,QAAA,WAAA,OAIR,sBAAW,EAAK,IAAA,GAAA,GAAA,AAAA,GAAA,EAAO,GAAC,QAAU,WAAO,OAAA,GAAA,aAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,WAAA,OAAA,EAE9C,EAAA,KAAA,EAAA,CAAA,QAAmH,UAAnH,aAAmH,OAAA,CAAA,EAAAnB,EAAA,QAAAC,GAAAE,EAAA,EAAA,GAAA,0CAAA,CAAA,EAAA,MAAA,CAAA,CAEvH,CAAA,EAAAL,EACY,EAAqB,CAC5B,MAAA,EAAA,GAAA,QAAA,WAAiE,0BAAA,CAAA,UAAA,EAAA,GAAA,0CAAA,iDAK1E,CAAA,EAAAA,EACoB,EAC6J,CAAA,MAAA,kCAAA,EAAA,CAA1J,MAAAC,EAAA,IAAA,CAAA,AAAA,EAAA,0BACA,IAAI,EAAuB,KAAK,sBAAiD,MAAA,gDAAsB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,gBAAA,OAD5GH,GAAA,EAAAmB,EAAA,EAAA,CAAiB,IAAI,EAAwB,KAAK,uBAAiD,MAAA,gDAAsB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,gBAAA,+DAItI,CAAA,EAAA,IACPhB,EAAoI,IAAA,CAAAD,EAAvH,EAAoB,CAAC,KAAK,qBAA0D,MAAK,wDAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,kBAAA,gBAIxFA,EAC8H,EAAA,KAAA,CAAA,QAA5IC,EAA4I,IAAA,CAAAD,EAA3H,EAAY,CAAS,IAAK,aAAA,MAAA,EAAA,QAAA,MAAkB,iBAAgB,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,MAAA,GAAG,WAAS,GAAoB,QAAK,EAAA,kBAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,aAAA,kEAI1H,CAAA,EAAAA,EACoB,EAC+J,CAAA,MAAA,yCAAA,EAAA,CAA5J,MAAAC,EAAA,IAAA,CAAA,AAAA,EAAA,2BACA,IAAI,EAAuB,KAAK,sBAAiD,MAAA,gDAAsB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,iBAAA,OAD5GH,GAAA,EAAAmB,EAAA,EAAA,CAAkB,IAAI,EAAwB,KAAK,uBAAiD,MAAA,gDAAsB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,iBAAA,2EAMhIjB,EAIP,EAAA,KAAA,CAAA,QAHPC,EAGO,IAAA,CAFyPC,EAAA,OAAAb,GAAA,CAAAW,EAA/O,EAAqB,CAAC,GAAA,sBAA2B,MAAK,oBAAmC,MAAOqB,EAAE,EAAW,gBAAA,MAAA,QAAA,EAAE,QAAY,EAAA,YAAW,YAAY,WAAoB,YAAA,WAAA,WAAA,EAAA,QAAA,oBAA8B,sBAAM,EAAA,IAAA,GAAA,GAAE,aAAkB,oBAAY,GAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,kBAAA,EAAA,KAAA,EACvP,EAAA,KAAA,EAAA,CAAA,QAAgI,UAAhI,YAAgI,CAAA,EAAAnB,EAAA,QAAAZ,GAAAe,EAAA,EAAA,GAAA,2CAAA,CAAA,EAAA,CAAA,CAEpI,CAAA,EAAAL,EAAmB,EAAQ,CAAC,MAAI,SAA2B,IAAK,mBAAA,MAAA,EAAA,QAAA,YAAwB,iBAAgB,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,YAAA,GAAG,WAAS,GAAgB,QAAK,EAAA,cAAA,QAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,2EAMzJ,CAAA,EAAAA,EAAsB,EAAiB,CAAG,QAAK,EAAA,kBAAA,QAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,kBAAA,kPC5BnD,KAAKrB,IAAa,EAAa,CAC3B,WAAY,CAAA,KAAEC,EAAM,sBAAqB,EACzC,MAAO,CAAE,gBAAiB,CAAE,KAAM,OAAgB,EAClD,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CACH,QAAS,CAAC,EACV,yBACA,GAAIK,EAAY,CAAA,CAExB,EACA,OAAQ,CAEJ,MAAO,CAAA,MADOC,GACC,CACnB,EACA,SAAU,CACN,KAAK,QAAU,KAAK,eACxB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,eACxB,CACJ,EACA,aAAc,CAIJ,KAAA,GAAwC,CAAE,4BAHjB,AAAC,GACrB,KAAK,QAAQ,UAAY,cAAgB,GAI7C,MADkB,CAAE,QAAS,EAAkB,UAAW,GAAsB,YAAY,QAAS,CAAgB,EAEhI,EACA,QAAS,CACL,mBAAoB,CAChB,KAAK,MAAM,QAAQ,CAAE,MAAO,KAAK,GAAG,oCAAoC,EAAG,IAAK,KAAK,GAAG,0CAA0C,CAAG,CAAA,CACzI,CACJ,CACJ,CAAC,MAlEqB,MAAM,sCAaEiB,GAAa,CAAC,IAAK,aAAA,MAAA,mHAf9B,MAAAL,GAkBD,EAAAmB,EAAA,EAAA,CAAA,MAAA,SAAA,CAAA,QAjBNhB,EAiBM,IAAA,CAAAC,EAhBF,MAcOf,GAdP,CAYMe,EAAA,OAAAd,GAAA,CAAAY,EAVK,EAAY,CACf,GAAA,aAI+D,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,WAAA,UAAA,EAAA,GAAA,QAAA,WAAA,MAHpD,CAAA,CAAA,EACV,KAAK,OAAA,MAAAiB,EACW,EAAQ,sBAAiB,MAAA,QAAA,EAAA,WAAA,EAAA,GAAA,QAAA,WAAA,6BAA1C,EAA2C,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,WAAA,OAAA,GAI1C,eAAI,CAAA,KAAA,EAAA,EACJ,OAAM,iBAAE,GAAK,QAAA,WAAA,OAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,QAAqH,aAArH,OAAqH,CAAA,EAAAnB,EAAA,QAAAC,GAAAE,EAAA,EAAA,GAAA,uCAAA,CAAA,EAAA,MAAA,CAAA,CAEzH,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAAwB,MAAA,EAAA,GAAA,QAAA,WAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,uCAAA,CAAA,gRC0BrF,KAAKrB,IAAa,EAAa,CAC3B,WAAY,CAAA,KAAEC,EAAM,SAAAC,EAAUiD,YAAAA,EAAa,sBAAqB,EAChE,MAAO,CAAE,gBAAiB,CAAE,KAAM,MAAiB,EAAA,YAAa,CAAE,KAAM,OAAgB,UAAW,CAAE,KAAM,OAAgB,EAC3H,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CACH,mBACA,QAAS,CAAC,EACV,GAAI7C,EAAY,EAChB,qBAAsB,CAAC,EACvB,cAAe,CACX,KAAM,GACN,eAAgB,GAChB,YAAa,GACb,aAAc,GACd,cAAe,GACf,UAAW,GACX,MAAO,UACP,YAAa,EACjB,CAAA,CAER,EACA,SAAU,CACN,KAAK,YAAY,EACX,KAAA,GAAW,YAAY,IAAM,CAC3B,AAAA,CAAC,KAAK,MAAM,sBACX,MAAA,qBAAwB,KAAK,MAAM,qBAA6B,WAErE,KAAK,YAAY,EACjB,KAAK,eAAe,EAEpB,cAAc,CAAQ,IACvB,GAAG,CACV,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,YAAY,EACjB,KAAK,eAAe,CACxB,EACA,WAAY,CACR,AAAI,KAAK,YAAc,GAAK,KAAK,sBAC7B,WAAW,IAAM,CACb,KAAK,qBAAqB,WAC3B,CAAC,CAEZ,CACJ,EACA,aAAc,CAIJ,KAAA,GAAwC,CAAE,yBAHnB,AAAC,GACnB,KAAK,QAAQ,UAAY,UAAY,GAIzC,MADkB,CAAE,QAAS,EAAkB,UAAW,GAAgB,YAAY,QAAS,CAAgB,EAE1H,EACA,QAAS,CACL,aAAc,CACV,KAAK,QAAU,KAAK,gBACpB,KAAK,QAAQ,QAAe,MAAK,QAAQ,OAAS,IAClD,KAAK,QAAQ,gBAAuB,MAAK,QAAQ,eAAiB,aACtE,EACA,gBAAiB,CACT,AAAA,KAAK,QAAQ,gBACb,MAAK,cAAc,KAAO,KAAK,QAAQ,iBAAmB,aAAe,kBAAoB,gBACxF,KAAA,qBAAqB,UAAU,OAAQ,KAAK,QAAQ,sBAAwB,aAAe,kBAAoB,eAAe,EAE3I,EACA,kBAAkB,EAAe,CACvB,KAAA,GAAO,IAAU,aAAe,kBAAoB,gBACrD,KAAA,qBAAqB,UAAU,OAAQ,CAAI,EAChD,KAAK,MAAM,SAAS,CACxB,CACJ,CACJ,CAAC,EAlHoBE,GAAA,CAAA,MAAM,qBACD,MAAM,sCAeEE,GAAQ,CAAC,IAAK,QAAA,MAAA,qIAlB7B,MAAAS,GA2BA,EAAAmB,EAAA,EAAA,CAAA,MAAA,SAAA,CAAA,QA1BPhB,EA0BO,IAAA,CAAAC,EAzBH,OAwBMf,GAAA,CAAAe,EAvBF,MAgBOd,GAhBP,CAcMc,EAAA,OAAAC,GAAA,CAAAH,EAZK,EAAgB,CACnB,GAAA,iBAM2D,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,eAAA,UAAA,EAAA,GAAA,QAAA,eAAA,MALrD,CAAA,CAAA,EACL,MAAOiB,EAAE,EAAW,gBAAA,MAAA,QAAA,EACrB,QAAY,EAAA,YACZ,YAAY,WACH,YAAA,WAAA,WAAA,EAAA,GAAA,QAAA,eAAA,OAIR,sBAAW,EAAA,IAAA,GAAA,GAAA,AAAA,GAAK,EAAO,GAAC,QAAqB,eAAA,OAAA,GAC7C,aAAM,eAAE,EAA8B,GAAA,QAAA,eAAA,OAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,kBAAA,EAAA,KAAA,EAE3C,EAAA,KAAA,EAAA,CAAA,QAA2G,UAA3G,aAA2G,OAAA,CAAA,EAAAnB,EAAA,QAAAb,GAAAgB,EAAA,EAAA,GAAA,kCAAA,CAAA,EAAA,MAAA,CAAA,CAE/G,CAAA,EAAAL,EACY,EAAyB,CAChC,MAAA,EAAA,GAAA,QAAA,eAAqE,0BAAA,CAAA,UAAA,EAAA,GAAA,kCAAA,mDAMlF,CAAA,EAAAA,EAAmB,EAAQ,CAAC,MAAI,SAA+B,IAAK,uBAAA,MAAA,EAAA,QAAA,OAAmB,iBAAgB,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,OAAA,GAAG,WAAS,GAAgB,QAAK,EAAA,cAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,uWC4DpJ,KAAKrB,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,WAAMC,EAAU,uBAAsB,OAAA+C,EAAA,YAAQE,EAAa,MAAI,EAC7E,MAAO,CAAE,YAAa,CAAE,KAAM,SAAW,gBAAiB,CAAE,KAAM,MAAiB,EAAA,YAAa,CAAE,KAAM,KAAA,EAAgB,eAAgB,CAAE,KAAM,MAAe,EAC/J,MAAO,CAAC,UAAW,kBAAmB,gBAAgB,EACtD,MAAO,CACI,MAAA,CACH,iBACA,QAAS,CAAC,EACV,GAAI7C,EAAY,EAChB,SAAU,GACV,sBAAuB,GACvB,WAAY,GACZ,WAAY,CAAC,EACb,WAAY,CAAC,EACb,sBAAuB,CAAC,EACxB,gBAAiB,GACjB,oBAAqB,GACrB,kBAAmB,CACf,SAAU,GACV,KAAM,kBACN,eAAgB,GAChB,YAAa,GACb,aAAc,GACd,cAAe,GACf,UAAW,GACX,MAAO,UACP,YAAa,EACjB,CAAA,CAER,EACA,SAAU,CACN,KAAK,QAAU,KAAK,gBACpB,KAAK,gBAAgB,CACzB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,gBACpB,KAAK,gBAAgB,CACzB,CACJ,EACA,aAAc,CAIJ,KAAA,GAAwC,CAAE,sBAHtB,AAAC,GAChB,KAAK,QAAQ,UAAY,OAAS,GAItC,MADkB,CAAE,QAAS,EAAkB,UAAW,GAAc,YAAY,QAAS,CAAgB,EAExH,EACA,QAAS,CACL,iBAAkB,CACR,KAAA,GAAW,YAAY,IAAM,CAC3B,AAAA,CAAC,KAAK,MAAM,YACX,MAAA,WAAc,KAAK,MAAM,WAAmB,WACjD,WAAW,IAAM,CACb,KAAK,WAAW,WACjB,CAAC,EACJ,cAAc,CAAQ,IACvB,GAAG,CACV,EACA,oBAAqB,CACjB,AAAI,MAAO,MAAK,QAAQ,cAAiB,SAChC,KAAA,SAAW,KAAK,UAAU,KAAK,MAAM,KAAK,QAAQ,YAAY,EAAG,KAAM,CAAC,EAE7E,KAAK,SAAW,KAAK,UAAU,KAAK,QAAQ,aAAc,KAAM,CAAC,EAErE,KAAK,sBAAwB,EACjC,EACA,KAAM,gBAAe,EAAO,CACxB,KAAK,gBAAkB,GACvB,KAAK,oBAAsB,GACrB,KAAA,GAAO,KAAK,eAAe,KAAK,AAAC,GAAO,EAAG,OAAS,EAAM,KAAK,EAAE,GACjE,KAAA,MAAK,MACN,IAAI,gDAAmE,GAAM,EAC7E,KAAK,AAAC,GAAiC,CACpC,KAAK,sBAAwB,EAAS,IAAA,CACzC,EACA,MAAM,CACf,EACA,kBAAmB,CACX,AAAA,KAAK,OAAO,OAAS,cAChB,MAAA,WAAa,GAAS,KAAK,qBAAqB,EACrD,KAAK,qBAAuB,MAAK,WAAW,aAAe,KAAK,QAAQ,eAExE,AAAI,KAAK,gBACA,KAAA,WAAa,GAAS,KAAK,qBAAqB,EAEhD,KAAA,WAAa,GAAS,KAAK,OAAO,EAG1C,KAAA,WAAW,KAAO,KAAK,QAAQ,KACpC,KAAK,WAAa,EACtB,EACA,kBAAmB,CACf,KAAK,WAAa,EACtB,EACA,gBAAgB,EAAO,CACnB,KAAK,QAAQ,aAAe,EAC5B,KAAK,gBAAkB,GACvB,KAAK,oBAAsB,GAC3B,KAAK,WAAa,EACtB,CACJ,CACJ,CAAC,MA7LkD,IAAK,EAAA,MAAA,6BAE9BG,GAAA,CAAA,MAAM,8CAaEC,GAAQ,CAAC,IAAK,QAAA,MAAA,2BAUtBC,GAAA,CAAA,MAAM,8CAcEC,GAAQ,CAAC,IAAK,QAAA,MAAA,sMAzC5C,MAAAO,OAAYC,EAAO,KAAA,CAAAC,EACG,EAiDP,CAAA,MAAA,OAAA,EAAA,CAAA,QAhDKC,EAAQ,IAAQ,CAAA,EAAA,QAAA,UAA5B,WAuBUS,EAAA,OAAAvB,GAAA,CAAAe,EArBF,MAcOd,GAdP,CAYMc,EAAA,OAAAC,GAAA,CAAAH,EAVK,EAAe,CAClB,GAAA,gBAKmE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,cAAA,UAAA,EAAA,GAAA,QAAA,cAAA,OAJzD,CAAA,EACV,QAAY,EAAA,YACZ,YAAY,QACH,YAAA,QAAA,WAAA,EAAA,GAAA,QAAA,cAAA,OAIR,sBAAW,EAAA,IAAA,GAAA,GAAA,AAAA,GAAK,EAAO,GAAC,QAAoB,cAAA,OAAA,GAAA,aAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,cAAA,OAAA,EAEjD,EAAA,KAAA,EAAA,CAAA,UAAqH,aAArH,OAAqH,CAAA,EAAAF,EAAA,QAAAb,GAAAgB,EAAA,EAAA,GAAA,4CAAA,CAAA,EAAA,MAAA,CAAA,CAEzH,CAAA,EAAAL,EACY,EAAwB,CAC/B,MAAA,EAAA,GAAA,QAAA,cAAqE,0BAAA,CAAA,UAAA,EAAA,GAAA,4CAAA,iDAK9E,CAAA,EAAAE,EACI,MAeOZ,GAfP,CAaMY,EAAA,OAAAI,GAAA,CAAAN,EAXK,EAAc,CACjB,GAAA,eAKmE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,aAAA,UAAA,EAAA,GAAA,QAAA,aAAA,OAJzD,CAAA,EACV,QAAY,EAAA,eACZ,YAAY,OACH,YAAA,OAAA,WAAA,EAAA,GAAA,QAAA,aAAA,OAIR,sBAAQ,EAAc,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,aAAA,OAAA,GACtB,SAAW,EAAA,eAAA,aAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,aAAA,OAAA,IAEkG,KAAA,EAAA,CAAA,UAAA,aAAlH,QAAkH,UAA3D,CAAA,EAAAF,EAAA,QAAAX,GAAAc,EAAA,EAAA,GAAA,yCAAA,CAAA,EAAA,MAAA,CAAA,CAE3D,CAAA,EAAAL,EACY,EAAuB,CAC9B,MAAA,EAAA,GAAA,QAAA,aAAqE,0BAAA,CAAA,UAAA,EAAA,GAAA,yCAAA,uDAMvEkB,EAAgB,GAAA,EAAA,EAA3B,EAAA,QAAA,UAAA,OAAA,EAGM,iCAFwK,EAAAR,EAAA,MAAAlB,GAAA,CAAAQ,EAA1J,EAAE,CAA8C,MAAM,EAA4C,GAAA,0CAAA,EAAC,MAAA,6CAA0B,MAAK,CAAE,aAAA,MAAA,EAAA,QAAA,EAAA,kBACY,EAAA,KAAA,EAAA,CAAA,QAAA,SAAA,CAAA,EAAAA,EAAhJ,EAAE,CAA8C,MAAM,EAAqC,GAAA,0CAAA,EAAE,MAAA,sCAAwB,SAAO,EAAA,YAAA,QAAA,EAAA,0EAKxJ,CAAA,EAAAA,EAAc,EAAU,CAAE,MAAO,WAA0B,QAAO,EAAI,sBAAG,MAAA,GAAkB,SAAK,GAAA,MAAAqB,EAAA,EAAA,cAAA,MAAA,UAAA,CACjF,EAAA,CAAA,OACPpB,EAOU,IAAA,CAAAD,EANU,EACqD,CAAA,MAAA,yCAAA,EAAA,CAAA,MAAjEC,EAAiE,IAAA,CAAAC,EAAA,OAAA,KAAAG,EAAA,EAAA,GAAA,0CAAA,CAAA,EAAA,CAAA,CAE1D,CAAA,EAAA,IACPJ,EAA0H,IAAA,CAAAD,EAA7G,EAAa,CAAC,KAAK,cAAkD,MAAK,gDAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,sBAAA,wBAInGC,EAA6G,IAAA,CAAAD,EAA1F,EAAgB,CAAC,MAAI,iBAAqB,IAAK,aAAA,MAAA,EAAA,SAAa,iBAAS,EAAiB,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,SAAA,GAAA,QAAA,EAAA,sDAGlG,EAAU,CAAA,UAAA,OAAA,CAAA,EAAA,EAAA,WAAAF,KAAAmB,EAAA,EAAA,CAAG,IAAA,EAAsB,QAAS,EAAA,WAAa,QAAA,EAAA,WAAwB,gBAAA,GAA+C,wBAAY,EAAA,oBAAkB,aAAO,EAAA,gBAAA,QAAA,EAAA,iYCfpL,KAAKtC,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,WAAMC,EAAU,sBAAqB,EACnD,MAAO,CAAE,gBAAiB,CAAE,KAAM,MAAc,EAAG,YAAa,CAAE,KAAM,MAAe,EACvF,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CACH,sBACA,QAAS,CAAC,EACV,GAAII,EAAY,CAAA,CAExB,EACA,OAAQ,CAEJ,MAAO,CAAA,MADOC,GACC,CACnB,EACA,SAAU,CACN,KAAK,QAAU,KAAK,eACxB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,eACxB,CACJ,EACA,aAAc,CAIJ,KAAA,GAAwC,CAAE,uBAHrB,AAAC,GACjB,KAAK,QAAQ,UAAY,QAAU,GAIvC,MADkB,CAAE,QAAS,EAAkB,UAAW,GAAmB,YAAY,QAAS,CAAgB,EAE7H,EACA,QAAS,CACL,mBAAoB,CAChB,KAAK,MAAM,QAAQ,CAAE,MAAO,KAAK,GAAG,oCAAoC,EAAG,IAAK,KAAK,GAAG,0CAA0C,CAAG,CAAA,CACzI,CACJ,CACJ,CAAC,EA1FoBC,GAAA,CAAA,MAAM,6BACDC,GAAA,CAAA,MAAM,8CAWEC,GAAC,CAAgB,IAAK,gBAAA,MAAA,2BAK9BC,GAAA,CAAA,MAAM,8CAaEC,GAAQ,CAAC,IAAK,QAAA,MAAA,mIAhC7B,MAAAO,GAyCA,EAAAmB,EAAA,EAAA,CAAA,MAAA,SAAA,CAAA,QAxCPhB,EAwCO,IAAA,CAAAC,EAvCH,OAeMf,GAAA,CAAAe,EAdF,MAYOd,GAZP,CAUMc,EAAA,OAAAC,GAAA,CAAAH,EARK,EAAe,CAClB,GAAA,gBAE2D,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,cAAA,UAAA,EAAA,GAAA,QAAA,cAAA,MAD7C,CAAA,CAAA,EAAA,WAAA,EAAA,GAAA,QAAA,cAAA,6BAAd,EAA8C,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,cAAA,OAAA,GAI7C,eAAI,CAAA,KAAA,EAAA,EACJ,OAAM,iBAAE,GAAK,QAAA,cAAA,OAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,aAA2H,OAA3H,CAAA,EAAAF,EAAA,QAAAb,GAAAgB,EAAA,EAAA,GAAA,0CAAA,CAAA,EAAA,MAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAA2B,MAAA,EAAA,GAAA,QAAA,cAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,0CAAA,CAAA,gDAE5E,CAAA,EAAAE,EACI,MAcOZ,GAdP,CAYMY,EAAA,OAAAI,GAAA,CAAAN,EAVK,EAAgB,CACnB,GAAA,iBAK2D,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,eAAA,UAAA,EAAA,GAAA,QAAA,eAAA,MAJjD,CAAA,CAAA,EACV,QAAY,EAAA,YACZ,YAAY,QACH,YAAA,QAAA,WAAA,EAAA,GAAA,QAAA,eAAA,OAIR,sBAAW,EAAA,IAAA,GAAA,GAAA,AAAA,GAAK,EAAO,GAAC,QAAqB,eAAA,OAAA,GAAA,aAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,eAAA,OAAA,EAElD,EAAA,KAAA,EAAA,CAAA,UAAmH,aAAnH,OAAmH,CAAA,EAAAF,EAAA,QAAAX,GAAAc,EAAA,EAAA,GAAA,0CAAA,CAAA,EAAA,MAAA,CAAA,CAEvH,CAAA,EAAAL,EACY,EAAyB,CAChC,MAAA,EAAA,GAAA,QAAA,eAAqE,0BAAA,CAAA,UAAA,EAAA,GAAA,0CAAA,6kDC0J9F,KAAKrB,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,WAAMC,EAAU,sBAAqB,EACnD,MAAO,CAAE,gBAAiB,CAAE,KAAM,OAAgB,EAClD,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CACH,GAAII,EAAY,EAChB,iBACA,QAAS,CAAC,EACV,eAAgB,EAAe,eAC/B,mBAAoB,EAAe,cACnC,iBAAkB,EAAe,iBACjC,uBAAwB,EAAe,uBACvC,2BAA4B,EAAe,0BAAA,CAEnD,EACA,SAAU,CACN,KAAK,QAAU,KAAK,eACxB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,eACxB,CACJ,EACA,aAAc,CAOV,KAAM,GAAwC,CAAE,uBANrB,AAAC,GACjB,KAAK,QAAQ,UAAY,QAAU,EAK8C,sBAHlE,AAAC,GAChB,KAAK,QAAQ,cAAgB,OAAS,CAEoF,EAE9H,MADkB,CAAE,QAAS,EAAkB,UAAW,EAAe,YAAY,QAAS,CAAgB,EAEzH,EACA,QAAS,CAAC,CACd,CAAC,EAhOoBE,GAAA,CAAA,MAAM,6BACDC,GAAA,CAAA,MAAM,+CAaEC,GAAQ,CAAC,IAAK,QAAA,MAAA,+BAUU,IAAK,EAAA,MAAA,8BAEjCiB,GAAA,CAAA,MAAM,8CAEEd,GAAC,CAAe,IAAK,eAAA,MAAA,qCAIxB,8CAEGE,GAAC,CAAgB,IAAK,gBAAA,MAAA,2BAI9Bc,GAAA,CAAA,MAAM,8CAEEZ,GAAC,CAAqB,IAAK,qBAAA,MAAA,+BAKP,IAAK,EAAA,MAAA,8BAEjCe,GAAA,CAAA,MAAM,8CAaEE,GAAQ,CAAC,IAAK,QAAA,MAAA,2BAUtBC,GAAA,CAAA,MAAM,8CAaEE,GAAQ,CAAC,IAAK,QAAA,MAAA,2BAUtBM,GAAA,CAAA,MAAM,8CAaEC,GAAQ,CAAC,IAAK,QAAA,MAAA,2BAUtBE,GAAA,CAAA,MAAM,8CAaEO,GAAQ,CAAC,IAAK,QAAA,MAAA,+BAWH,IAAK,EAAA,MAAA,8BAExBC,GAAA,CAAA,MAAM,8CAWE,GAAS,CAAC,IAAK,SAAA,MAAA,2BAKvB,GAAA,CAAA,MAAM,8CAWE,GAAU,CAAC,IAAK,UAAA,MAAA,mIA3KnC,MAAAnC,GAgLA,EAAAmB,EAAA,EAAA,CAAA,MAAA,UAAA,CAAA,QA/KPhB,EA+KO,IAAA,CAAAC,EA9KH,OAsBMf,GAAA,CAAAe,EArBF,MAcOd,GAdP,CAYMc,EAAA,OAAAC,GAAA,CAAAH,EAVK,EAAc,CACjB,GAAA,eAK2D,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,aAAA,UAAA,EAAA,GAAA,QAAA,aAAA,MAJjD,CAAA,CAAA,EACV,QAAY,EAAA,mBACZ,YAAY,OACH,YAAA,OAAA,WAAA,EAAA,GAAA,QAAA,aAAA,OAIR,sBAAW,EAAA,IAAA,GAAA,GAAA,AAAA,GAAK,EAAO,GAAC,QAAmB,aAAA,OAAA,GAAA,aAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,aAAA,OAAA,EAEhD,EAAA,KAAA,EAAA,CAAA,UAA8G,aAA9G,OAA8G,CAAA,EAAAF,EAAA,QAAAb,GAAAgB,EAAA,EAAA,GAAA,qCAAA,CAAA,EAAA,MAAA,CAAA,CAElH,CAAA,EAAAL,EACY,EAAuB,CAC9B,MAAA,EAAA,GAAA,QAAA,aAAqE,0BAAA,CAAA,UAAA,EAAA,GAAA,qCAAA,iDAMnE,CAAA,EAAA,EAAA,QAAA,cAAX,WAMUU,EAAA,MAAApB,GAAA,CAAAY,EAJF,MAGOI,GAHP,CAC0IJ,EAAA,OAAAX,GAAA,CAAAS,EAAxH,EAAc,CAAC,GAAA,eAA0B,MAAK,oBAAA,KAAA,iEAAS,EAAmC,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,aAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACO,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAAV,GAAAa,EAAA,EAAA,GAAA,yCAAA,CAAA,EAAA,CAAA,GAG/H,CAAA,EAAAH,EACI,MAGOK,GAHP,CAC4IL,EAAA,OAAAT,GAAA,CAAAO,EAA1H,EAAe,CAAC,GAAA,gBAA0B,MAAK,oBAAA,KAAA,kEAAS,EAAoC,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,cAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACO,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAAR,GAAAW,EAAA,EAAA,GAAA,0CAAA,CAAA,EAAA,CAAA,GAGjI,CAAA,EAAAH,EACI,MAGOM,GAHP,CACsJN,EAAA,OAAAP,GAAA,CAAAK,EAApI,EAAoB,CAAC,GAAA,qBAA0B,MAAK,oBAAA,KAAA,uEAAS,EAAyC,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,mBAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACO,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAAN,GAAAS,EAAA,EAAA,GAAA,+CAAA,CAAA,EAAA,CAAA,KAKpI,CAAA,GAAAa,EAAQ,GAAY,EAAA,EAAA,EAAA,QAAA,cAA/B,WAuBUR,EAAA,MAAAD,GAAA,CAAAP,EArBF,MAcOS,GAdP,CAYMT,EAAA,OAAAU,GAAA,CAAAZ,EAVK,EAAkB,CACrB,GAAA,mBAKuE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,iBAAA,UAAA,EAAA,GAAA,QAAA,iBAAA,MAJ7D,CAAA,CAAA,EACV,QAAY,EAAA,2BACZ,YAAY,OACH,YAAA,OAAA,WAAA,EAAA,GAAA,QAAA,iBAAA,OAIR,sBAAW,EAAA,IAAA,GAAA,GAAA,AAAA,GAAK,EAAO,GAAC,QAAuB,iBAAA,OAAA,GAAA,aAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,iBAAA,OAAA,EAEpD,EAAA,KAAA,EAAA,CAAA,UAAsH,aAAtH,OAAsH,CAAA,EAAAF,EAAA,QAAAW,GAAAR,EAAA,EAAA,GAAA,6CAAA,CAAA,EAAA,MAAA,CAAA,CAE1H,CAAA,EAAAL,EACY,EAA2B,CAClC,MAAA,EAAA,GAAA,QAAA,iBAAyE,0BAAA,CAAA,UAAA,EAAA,GAAA,6CAAA,iDAKlF,CAAA,EAAAE,EACI,MAcOY,GAdP,CAYMZ,EAAA,OAAAL,GAAA,CAAAG,EAVK,EAAc,CACjB,GAAA,eAKuE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,aAAA,UAAA,EAAA,GAAA,QAAA,aAAA,MAJ7D,CAAA,CAAA,EACV,QAAY,EAAA,uBACZ,YAAY,OACH,YAAA,OAAA,WAAA,EAAA,GAAA,QAAA,aAAA,OAIR,sBAAW,EAAA,KAAA,GAAA,IAAA,AAAA,GAAK,EAAO,GAAC,QAAmB,aAAA,OAAA,GAAA,aAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,GAAA,QAAA,aAAA,OAAA,EAEhD,EAAA,KAAA,EAAA,CAAA,UAAkH,aAAlH,OAAkH,CAAA,EAAAF,EAAA,QAAAc,GAAAX,EAAA,EAAA,GAAA,yCAAA,CAAA,EAAA,MAAA,CAAA,CAEtH,CAAA,EAAAL,EACY,EAAuB,CAC9B,MAAA,EAAA,GAAA,QAAA,aAAyE,0BAAA,CAAA,UAAA,EAAA,GAAA,yCAAA,iDAKlF,CAAA,EAAAE,EACI,MAcOoB,GAdP,CAYMpB,EAAA,OAAAsB,GAAA,CAAAxB,EAVK,EAAiB,CACpB,GAAA,kBAKuE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,gBAAA,UAAA,EAAA,GAAA,QAAA,gBAAA,MAJ7D,CAAA,CAAA,EACV,QAAY,EAAA,iBACZ,YAAY,OACH,YAAA,OAAA,WAAA,EAAA,GAAA,QAAA,gBAAA,OAIR,sBAAW,EAAA,KAAA,GAAA,IAAA,AAAA,GAAK,EAAO,GAAC,QAAsB,gBAAA,OAAA,GAAA,aAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,GAAA,QAAA,gBAAA,OAAA,EAEnD,EAAA,KAAA,EAAA,CAAA,UAAqH,aAArH,OAAqH,CAAA,EAAAF,EAAA,QAAAqB,GAAAlB,EAAA,EAAA,GAAA,4CAAA,CAAA,EAAA,MAAA,CAAA,CAEzH,CAAA,EAAAL,EACY,EAA0B,CACjC,MAAA,EAAA,GAAA,QAAA,gBAAyE,0BAAA,CAAA,UAAA,EAAA,GAAA,4CAAA,iDAKlF,CAAA,EAAAE,EACI,MAcOuB,GAdP,CAYMvB,EAAA,OAAAgC,GAAA,CAAAlC,EAVK,EAAgB,CACnB,GAAA,iBAKuE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,eAAA,UAAA,EAAA,GAAA,QAAA,eAAA,MAJ7D,CAAA,CAAA,EACV,QAAY,EAAA,eACZ,YAAY,OACH,YAAA,OAAA,WAAA,EAAA,GAAA,QAAA,eAAA,OAIR,sBAAW,EAAA,KAAA,GAAA,IAAA,AAAA,GAAK,EAAO,GAAC,QAAqB,eAAA,OAAA,GAAA,aAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,GAAA,QAAA,eAAA,OAAA,EAElD,EAAA,KAAA,EAAA,CAAA,UAAoH,aAApH,OAAoH,CAAA,EAAAF,EAAA,QAAA8B,GAAA3B,EAAA,EAAA,GAAA,2CAAA,CAAA,EAAA,MAAA,CAAA,CAExH,CAAA,EAAAL,EACY,EAAyB,CAChC,MAAA,EAAA,GAAA,QAAA,eAAyE,0BAAA,CAAA,UAAA,EAAA,GAAA,2CAAA,mDAO3E,CAAA,GAAAkB,EAAQ,GAAY,EAAA,EAAA,EAAA,QAAA,aAAApB,GAgBrB,EAAAY,EAAA,MAAAyB,GAAA,CAAAjC,EAdF,MAYO+B,GAZP,CAUM/B,EAAA,OAAA,GAAA,CAAAF,EARK,EAAQ,CACX,GAAA,SAEuE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,OAAA,UAAA,EAAA,GAAA,QAAA,OAAA,MADzD,CAAA,CAAA,EAAA,WAAA,EAAA,GAAA,QAAA,OAAA,6BAAd,EAAuC,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,GAAA,QAAA,OAAA,OAAA,GAItC,eAAI,CAAA,KAAA,EAAA,EACJ,OAAM,mBAAE,GAAK,QAAA,OAAA,OAAA,GAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,aAA6G,OAA7G,CAAA,EAAAF,EAAA,QAAA,GAAAG,EAAA,EAAA,GAAA,mCAAA,CAAA,EAAA,MAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAAoB,MAAA,EAAA,GAAA,QAAA,OAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,mCAAA,CAAA,gDAErE,CAAA,EAAAE,EACI,MAYO,GAZP,CAUMA,EAAA,OAAA,GAAA,CAAAF,EARK,EAAS,CACZ,GAAA,UAEuE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,QAAA,UAAA,EAAA,GAAA,QAAA,QAAA,MADzD,CAAA,CAAA,EAAA,WAAA,EAAA,GAAA,QAAA,QAAA,6BAAd,EAAwC,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,GAAA,QAAA,QAAA,OAAA,GAIvC,eAAI,CAAA,KAAA,EAAA,EACJ,OAAM,mBAAE,GAAK,QAAA,QAAA,OAAA,GAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,aAA+G,OAA/G,CAAA,EAAAF,EAAA,QAAA,GAAAG,EAAA,EAAA,GAAA,oCAAA,CAAA,EAAA,MAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAAqB,MAAA,EAAA,GAAA,QAAA,QAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,oCAAA,CAAA,sGCtE1F,KAAKrB,IAAa,EAAa,CAC3B,KAAM,8BACN,WAAY,CAAEiD,OAAAA,CAAO,EACrB,MAAO,CAAC,OAAO,EACf,MAAO,CACH,QAAS,CAAE,KAAM,OAAQ,CAC7B,EACA,MAAO,CACI,MAAA,CAAA,iBACHQ,CAAA,CAER,CACJ,CAAC,EAlHWjD,GAAAe,EAAG,MAAe,CAAA,MAAA,QAAA,EAAA,CAAIA,EAAA,IAAA,KAAA,iBAAA,EAAoJmC,EAAA,6EAAA,EAAjEnC,EAAA,IAAA,CAAqC,KAAM,qCAAU,OAAA,QAAA,EAAA,UAAA,EACzJmC,EAAA,yFAAA,EAAAnC,EAkFJ,MAED,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAA,EAERmC,EAAA,oFAAA,EAAAnC,EAAA,MAAA,KAAA;AAAA,KAAA,wEAzFeJ,GAAI,EAAAmB,EAAA,EAAA,CAA2C,OAAK,EAAyB,GAAA,sCAAA,EAAa,MAAOI,EAAS,EAAA,iBAAA,MAAA,UAAA,EAAG,QAAO,EAAI,QAAE,MAAM,GAAuC,MAAA,sCAAA,SAAA,EA6FvK,EAAA,CAAA,OACPpB,EAAuG,IAAA,CAAzFD,EAAA,EAAA,CAAgC,MAAK,+BAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,OAAA,mEA7FvDC,EA0FM,IAAA,CAAAd,uEC5Cd,KAAKR,IAAa,EAAa,CAC3B,KAAM,8BACN,WAAY,CAAEiD,OAAAA,CAAO,EACrB,MAAO,CAAC,OAAO,EACf,MAAO,CACH,QAAS,CAAE,KAAM,OAAQ,CAC7B,EACA,MAAO,CACI,MAAA,CAAA,iBACHQ,CAAA,CAER,CACJ,CAAC,EA1D2BjD,GAAAe,EAAA,MAAA,CAAA,MAAA,QAAA,EAAA,CAEXmC,EAAA,iFAAA,EAAAnC,EAgBJ,MACuE,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA,EAA+BmC,EAAA,2EAAA,EAAInC,EAAA,IAAA,KAAA,8BAAA,EAIjHmC,EAAA,mOAAA,EACOnC,EAAA,MAAA,KAAA;AAAA,OAAA,EAEImC,EAAA,yEAAA,EAAAnC,EAAA,MAAA,KAAA;AAAA;AAAA;AAAA;AAAA,OAAA,wEA3BEJ,GAAI,EAAAmB,EAAA,EAAA,CAA2C,OAAK,EAAyB,GAAA,sCAAA,EAAa,MAAOI,EAAS,EAAA,iBAAA,MAAA,UAAA,EAAG,QAAO,EAAI,QAAE,MAAM,GAAuC,MAAA,sCAAA,SAAA,EAoCvK,EAAA,CAAA,OACPpB,EAAuG,IAAA,CAAzFD,EAAA,EAAA,CAAgC,MAAK,+BAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,OAAA,mEApCvDC,EAiCM,IAAA,CAAAd,uECjBd,KAAKR,IAAa,EAAa,CAC3B,KAAM,8BACN,WAAY,CAAEiD,OAAAA,CAAO,EACrB,MAAO,CAAC,OAAO,EACf,MAAO,CACH,QAAS,CAAE,KAAM,OAAQ,CAC7B,EACA,MAAO,CACI,MAAA,CAAA,iBACHQ,CAAA,CAER,CACJ,CAAC,KA3BwClC,EAAA,MAAA,CAAA,MAAA,QAAA,EAAA,CAA0DmC,EAAA,gCAAA,EAA3BnC,EAAA,IAAA,CAAC,KAAM,wBAAU,OAAA,QAAA,EAAA,QAAA,EAA4LmC,EAAA,iCAAA,EAA3InC,EAAA,IAAA,CAA4F,KAAM,4FAAU,OAAA,QAA+B,EAAA,6BAAA,EAAAmC,EAAA,+RAAA,wEAFlQvC,GAAI,EAAAmB,EAAA,EAAA,CAA2C,OAAK,EAAyB,GAAA,sCAAA,EAAa,MAAOI,EAAS,EAAA,iBAAA,MAAA,UAAA,EAAG,QAAO,EAAI,QAAE,MAAM,GAAuC,MAAA,sCAAA,SAAA,EAMvK,EAAA,CAAA,OACPpB,EAAuG,IAAA,CAAzFD,EAAA,EAAA,CAAgC,MAAK,+BAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,OAAA,mEANvDC,EAGM,IAAA,CAAAd,uECwCd,KAAKR,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,YAAME,EAAA,OAAWC,CAAO,EACtC,MAAO,CACH,gBAAiB,CAAE,KAAM,MAAc,CAC3C,EACA,SAAU,CACN,kBAAmB,CACX,MAAA,CAAC,KAAK,QAAQ,oBAAsB,KAAK,QAAQ,mBAAsB,QAAU,CAKzF,CACJ,EACA,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CACH,kBACA,QAAS,CAAC,EACV,gBAAiB,EAAA,CAEzB,EACA,SAAU,CACN,KAAK,QAAU,KAAK,eACxB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,eACxB,CACJ,EACA,QAAS,CACL,aAAc,CACV,KAAK,QAAQ,oBAA2B,MAAK,QAAQ,mBAAqB,IAC1E,KAAM,GAAW,CAAE,GAAG,EAAgB,gBAAiB,EAClD,KAAA,QAAQ,mBAAmB,KAAK,CAAQ,CACjD,EACA,YAAY,EAAc,CACtB,KAAK,SAAS,QAAQ,CAClB,QAAS,KAAK,GAAG,4BAA4B,EAC7C,OAAQ,KAAK,GAAG,wBAAwB,EACxC,KAAM,6BACN,OAAQ,IAAO,KAAK,QAAQ,mBAAqB,KAAK,QAAQ,mBAAmB,OAAO,AAAC,GAAkB,EAAa,KAAK,OAAS,EAAc,IAAI,CAAA,CAC3J,CACL,EACA,iBAAkB,CACd,KAAK,SAAS,QAAQ,CAClB,QAAS,KAAK,GAAG,sDAAsD,EACvE,OAAQ,KAAK,GAAG,wDAAwD,EACxE,KAAM,6BACN,OAAQ,IAAO,KAAK,QAAQ,mBAAqB,CAAC,CAAA,CACrD,CACL,EAEA,mBAAmB,EAAO,CACtB,KAAK,QAAQ,mBAAmB,EAAM,OAAS,EAAM,OACzD,CACJ,CACJ,CAAC,0HArGG,MAAAe,OAAcC,EAAC,KAAA,CAAAC,EACK,EAC6J,CAAA,MAAA,gDAAA,EAAA,CAA1J,MAAAC,EAAA,IAAA,CAAA,AAAA,EAAA,0BACA,IAAI,EAAuB,KAAK,sBAAiD,MAAA,gDAAsB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,gBAAA,OAD5GH,GAAA,EAAAmB,EAAA,EAAA,CAAiB,IAAI,EAAwB,KAAK,uBAAiD,MAAA,gDAAsB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,gBAAA,oEAItI,CAAA,EAAA,IACPhB,EAAwG,IAAA,CAAAD,EAA3F,EAAa,CAAC,KAAK,cAAkD,MAAK,gDAAA,QAAA,EAAA,WACoD,EAAA,KAAA,EAAA,CAAA,SAAA,CAAA,EAAAA,EAA9H,EAAe,CAAC,KAAK,gBAAkD,MAAA,gDAA6B,SAAO,EAAA,iBAAA,QAAA,EAAA,0DAI1GA,EAoBF,EAAA,CAAA,MAAA,QAAA,EAAA,CAAA,QAnBZC,EAmBY,IAAA,CAAAD,EAnBK,EAAyB,CAAC,MAAA,0BAAiB,SAAO,OAA6B,QAAY,QAAI,mBAAE,WAAY,GAAS,aAAQ,QAAU,QAAA,UAAyB,iBAAW,QAAS,WAAA,QAAA,mBAAA,EAAA,kBACvL,EAAA,CAAA,MAAAC,EAAA,IAAA,iEAGXA,EAIS,IAAA,CAAAD,EAJK,EAAM,CAAE,MAAM,OAAyB,OAAQ,EAAE,GAAI,gBAAA,EAAA,SAAA,EACpD,EAAA,CAAA,OACPC,EAAsG,CAAA,CAAA,UAAA,CAAAD,EAArF,EAAmB,CAAE,MAAK,oBAAuD,MAAAqB,EAAA,EAAA,gBAAA,MAAA,WAAA,EAAA,WAAA,EAAA,oGAOjG,EAAA,CAAA,QAAA,CAAA,EAAArB,EAJK,EAAO,CAAE,MAAM,QAAuB,OAAQ,EAAE,GAAI,cAAA,EAAA,SAAA,EACnD,EAAA,CAAA,OACPC,EAAuG,CAAA,CAAA,UAAA,CAAAD,EAAtF,EAAmB,CAAE,MAAK,oBAAwD,MAAAqB,EAAA,EAAA,gBAAA,MAAA,WAAA,EAAA,WAAA,EAAA,sGAOlG,EAAA,CAAA,QAAA,CAAA,EAAArB,EAJQ,EAAO,CAAA,WAAA,AAAA,GAAA,EACT,EAAA,CAAA,KACPC,EAAmF,AAAA,GAAA,CAAAD,EAAtE,EAAa,CAAC,KAAK,cAAkB,MAAK,gBAAA,QAAA,AAAA,GAAA,EAAA,YAAA,CAAA,+ICyF/E,KAAKrB,IAAa,EAAa,CAC3B,KAAM,8BACN,WAAY,CAAEiD,OAAAA,CAAO,EACrB,MAAO,CAAC,OAAO,EACf,MAAO,CACH,QAAS,CAAE,KAAM,OAAQ,CAC7B,EACA,MAAO,CACI,MAAA,CAAA,iBACHQ,CAAA,CAER,CACJ,CAAC,EAhIWjD,GAAAe,EAAG,MAAoB,CAAA,MAAA,QAAA,EAAA,CAAIA,EAAA,IAAA,KAAA,sBAAA,EAAuHmC,EAAA,gDAAA,EAAjEnC,EAAA,IAAA,CAAqC,KAAM,qCAAU,OAAA,QAAA,EAAA,UAAA,EAsGjImC,EAAA,gEAAA,EAAAnC,EApGD,KAAqJ,KAAA,CAAjJA,EAAA,KAAA,KAAA,CAAsDmC,EAAA,mDAAA,EAAInC,EAAA,IAAA,KAAA,IAAA,EAAAmC,EAAA,oFAAA,IAC1DnC,EAAA,KAAA,KAAA,CACmImC,EAAA,qFAAA,EAAInC,EAAA,IAAA,KAAA,gDAAA,EAClImC,EAAA,mFAAA,EAAAnC,EAkFJ,MAED,KAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA,EAAKmC,EAAA,qCAAA,EAAAnC,EAGJ,MACoB,KAAA;AAAA,CAAA,EAAGmC,EAAA,wBAAA,EAAyBnC,EAAA,IAAA,KAAA,uBAAA,EAC5CmC,EAAA,4DAAA,EAAAnC,EAAA,MAAA,KAAA;AAAA,CAAA,0PAhGNJ,GAAI,EAAAmB,EAAA,EAAA,CAA2C,OAAK,EAAyB,GAAA,sCAAA,EAAa,MAAOI,EAAS,EAAA,iBAAA,MAAA,UAAA,EAAG,QAAO,EAAI,QAAE,MAAM,GAAuC,MAAA,sCAAA,SAAA,EA2GvK,EAAA,CAAA,OACPpB,EAAuG,IAAA,CAAzFD,EAAA,EAAA,CAAgC,MAAK,+BAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,OAAA,mEA3GvDC,EAwGM,IAAA,CAAAd,uEChDd,KAAKR,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,EAAME,UAAAA,EAAWC,OAAAA,EAAQF,SAAAA,EAAU,aAAW,EAC5D,MAAO,CACH,gBAAiB,CAAE,KAAM,MAAc,CAC3C,EACA,SAAU,CACN,kBAAmB,CACX,MAAA,CAAC,KAAK,QAAQ,wBAA0B,KAAK,QAAQ,uBAA0B,QAAU,CAKjG,CACJ,EACA,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CACH,kBACA,QAAS,CAAC,EACV,gBAAiB,GACjB,kBAAmB,EAAgB,kBACnC,cAAe,EAAgB,cAC/B,kBAAmB,EAAA,CAE3B,EACA,SAAU,CACN,KAAK,QAAU,KAAK,eACxB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,eACxB,CACJ,EACA,QAAS,CACL,aAAc,CAEV,KAAM,GAAW,CAAE,GAAG,EAAgB,eAAgB,EACjD,KAAA,QAAQ,uBAAuB,KAAK,CAAQ,CACrD,EACA,YAAY,EAAc,CACtB,KAAK,SAAS,QAAQ,CAClB,QAAS,KAAK,GAAG,4BAA4B,EAC7C,OAAQ,KAAK,GAAG,wBAAwB,EACxC,KAAM,6BACN,OAAQ,IAAO,KAAK,QAAQ,uBAAyB,KAAK,QAAQ,uBAAuB,OAAO,AAAC,GAAkB,EAAa,KAAK,OAAS,EAAc,IAAI,CAAA,CACnK,CACL,EACA,iBAAkB,CACd,KAAK,SAAS,QAAQ,CAClB,QAAS,KAAK,GAAG,sDAAsD,EACvE,OAAQ,KAAK,GAAG,wDAAwD,EACxE,KAAM,6BACN,OAAQ,IAAO,KAAK,QAAQ,uBAAyB,CAAC,CAAA,CACzD,CACL,EACA,mBAAmB,EAAO,CACtB,KAAK,QAAQ,uBAAuB,EAAM,OAAS,EAAM,OAC7D,CACJ,CACJ,CAAC,4JApHG,MAAAiB,OAAcC,EAAC,KAAA,CAAAC,EACK,EAC6J,CAAA,MAAA,gDAAA,EAAA,CAA1J,MAAAC,EAAA,IAAA,CAAA,AAAA,EAAA,0BACA,IAAI,EAAuB,KAAK,sBAAiD,MAAA,gDAAsB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,gBAAA,OAD5GH,GAAA,EAAAmB,EAAA,EAAA,CAAiB,IAAI,EAAwB,KAAK,uBAAiD,MAAA,gDAAsB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,gBAAA,wEAItI,CAAA,EAAA,IACPhB,EAAwG,IAAA,CAAAD,EAA3F,EAAa,CAAC,KAAK,cAAkD,MAAK,gDAAA,QAAA,EAAA,WACqC,EAAA,KAAA,EAAA,CAAA,SAAA,CAAA,EAAAA,EAA/G,EAAoB,CAAC,KAAK,qBAAkD,MAAK,gDAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,kBAAA,GAC9F,CAAA,EAAAA,EAAa,EAAe,CAAC,KAAK,gBAAkD,MAAA,gDAA6B,SAAO,EAAA,iBAAA,QAAA,EAAA,0DAI1GA,EA4BF,EAAA,CAAA,MAAA,QAAA,EAAA,CAAA,QA3BZC,EA2BY,IAAA,CAAAD,EA3BK,EAAyB,CAAC,MAAA,0BAAiB,SAAO,OAAiC,QAAY,QAAI,uBAAE,WAAY,GAAS,aAAQ,QAAU,QAAA,UAAyB,iBAAW,QAAS,WAAA,QAAA,mBAAA,EAAA,kBAC3L,EAAA,CAAA,MAAAC,EAAA,IAAA,iEAGXA,EAIS,IAAA,CAAAD,EAJK,EAAM,CAAE,MAAM,OAAyB,OAAQ,EAAE,GAAI,gBAAA,EAAA,SAAA,EACpD,EAAA,CAAA,OACPC,EAAsG,CAAA,CAAA,UAAA,CAAAD,EAArF,EAAmB,CAAE,MAAK,oBAAuD,MAAAqB,EAAA,EAAA,gBAAA,MAAA,WAAA,EAAA,WAAA,EAAA,oGAOjG,EAAA,CAAA,QAAA,CAAA,EAAArB,EAJK,EAAe,CAAE,MAAM,gBAAmD,OAAQ,EAAE,GAAI,0CAAA,EAAA,SAAA,EACvF,EAAA,CAAA,OACPC,EAA+G,CAAA,CAAA,UAAA,CAAAD,EAA9F,EAAmB,CAAE,MAAK,oBAAA,MAAAqB,EAAmD,EAAa,gBAAA,MAAA,WAAA,EAAA,WAAA,EAAA,sHAU1G,EAAA,CAAA,QAAA,CAAA,EAAArB,EAPK,EAAqB,CAAE,MAAM,sBAAyD,OAAQ,EAAE,GAAI,gDAAA,EAAA,SAAA,EACnG,EAAA,CAAA,KAAAC,EAAA,AAAA,GAAA,4BAGA,CAAA,EAAA,OACPA,EAAiJ,CAAA,CAAA,UAAA,CAA7HD,EAAA,EAAA,CAAC,GAAA,QAA2B,MAAK,oBAAsC,MAAOqB,EAAE,EAAa,gBAAA,MAAA,WAAA,EAAW,QAAA,EAAA,cAAA,WAAA,EAAA,8HAO3H,EAAA,CAAA,QAAA,CAAA,EAAArB,EAJQ,EAAO,CAAA,WAAA,AAAA,GAAA,EACT,EAAA,CAAA,KACPC,EAAmF,AAAA,GAAA,CAAAD,EAAtE,EAAa,CAAC,KAAK,cAAkB,MAAK,gBAAA,QAAA,AAAA,GAAA,EAAA,YAAA,CAAA,0GAO3E,CAAA,EAAAA,EAAsB,EAAiB,CAAG,QAAK,EAAA,kBAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,kBAAA,yhBC2FnD,KAAKrB,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,WAAMC,EAAU,uBAAsB,uBAAqB,iBAAe,SAAAuC,GAAU,uBAAqB,8BAA4B,iBAAe,EAClK,MAAO,CAAE,gBAAiB,CAAE,KAAM,OAAgB,EAClD,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CACH,kBACA,QAAS,CAAC,EACV,GAAInC,EAAY,EAChB,gBAAiB,GACjB,qBAAsB,GACtB,4BAA6B,GAC7B,YAAa,GAAe,WAAA,CAEpC,EACA,SAAU,CACN,KAAK,QAAU,KAAK,eACxB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,eACxB,CACJ,EACA,aAAc,CAIJ,KAAA,GAAwC,CAAE,uBAHrB,AAAC,GACjB,KAAK,QAAQ,UAAY,QAAU,GAIvC,MADkB,CAAE,QAAS,EAAkB,UAAW,GAAe,YAAY,QAAS,CAAgB,EAEzH,EACA,QAAS,CAAC,CACd,CAAC,EArKoBE,GAAA,CAAA,MAAM,6BACDC,GAAA,CAAA,MAAM,8CAYEC,GAAC,CAAc,IAAK,cAAA,MAAA,2BAK5BC,GAAA,CAAA,MAAM,8CAEEC,GAAC,CAAiB,IAAK,iBAAA,MAAA,2BAI/BC,GAAA,CAAA,MAAM,+CAEEC,GAAC,CAAkB,IAAK,kBAAA,MAAA,2BAIhCC,GAAA,CAAA,MAAM,+CAaEC,GAAQ,CAAC,IAAK,QAAA,MAAA,kEAqBdc,GAAC,CAAoB,IAAK,oBAAA,MAAA,2BAM7BE,GAAA,CAAA,MAAI,oBAMTC,GAAA,CAAA,IAAK,UACA,GAAA,CAAA,MAAI,oBAajB,GAAA,CAAA,IAAK,UACF,GAAA,CAAA,MAAM,6BACD,GAAA,CAAA,MAAM,8CAEE,GAAa,CAAC,IAAK,aAAA,MAAA,+BAI3B,MAAM,sCAEE,GAAC,CAAgB,IAAK,gBAAA,MAAA,+BAI9B,MAAM,sCAEE,GAAC,CAAiB,IAAK,iBAAA,MAAA,oSA7GrD,MAAAd,OAAYC,EAAO,KAAA,CAAAC,EACG,EAsDP,CAAA,MAAA,OAAA,EAAA,CAAA,QArDPC,EAqDO,IAAA,CAAAC,EApDH,OAgBMf,GAAA,CAAAe,EAfF,MAaOd,GAbP,CAWMc,EAAA,OAAAC,GAAA,CAAAH,EATK,EAAa,CAChB,GAAA,cAGmE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,YAAA,UAAA,EAAA,GAAA,QAAA,YAAA,MAFxD,CAAA,CAAA,EAAA,KAAA,wEACX,EAA4C,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,YAAA,OAAA,GAI3C,eAAI,CAAA,KAAA,EAAA,EACJ,OAAM,iBAAE,GAAK,QAAA,YAAA,OAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,aAAuH,OAAvH,CAAA,EAAAF,EAAA,QAAAb,GAAAgB,EAAA,EAAA,GAAA,wCAAA,CAAA,EAAA,MAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAAyB,MAAA,EAAA,GAAA,QAAA,YAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,wCAAA,CAAA,gDAE1E,CAAA,EAAAE,EACI,MAGOZ,GAHP,CACgIY,EAAA,OAAAI,GAAA,CAAAN,EAA9G,EAAgB,CAAC,GAAA,iBAAA,MAAA,8EAA0B,EAAqC,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,eAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACqB,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAAX,GAAAc,EAAA,EAAA,GAAA,2CAAA,CAAA,EAAA,CAAA,GAGnI,CAAA,EAAAH,EACI,MAGOV,GAHP,CACmJU,EAAA,OAAAK,GAAA,CAAAP,EAAjI,EAAiB,CAAC,GAAA,kBAA0B,MAAA,oBAAA,UAAA,kEAAiB,EAAsC,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,gBAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACI,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAAT,GAAAY,EAAA,EAAA,GAAA,4CAAA,CAAA,EAAA,CAAA,GAGrI,CAAA,EAAAH,EACI,MAcOR,GAdP,CAYMQ,EAAA,OAAAM,GAAA,CAAAR,EAVK,EAAgB,CACnB,GAAA,iBAKmE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,eAAA,UAAA,EAAA,GAAA,QAAA,eAAA,MAJzD,CAAA,CAAA,EACV,QAAY,EAAA,YACZ,YAAY,QACH,YAAA,QAAA,WAAA,EAAA,GAAA,QAAA,eAAA,OAIR,sBAAW,EAAA,IAAA,GAAA,GAAA,AAAA,GAAK,EAAO,GAAC,QAAqB,eAAA,OAAA,GAAA,aAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,eAAA,OAAA,EAElD,EAAA,KAAA,EAAA,CAAA,UAAoH,aAApH,OAAoH,CAAA,EAAAF,EAAA,QAAAP,GAAAU,EAAA,EAAA,GAAA,2CAAA,CAAA,EAAA,MAAA,CAAA,CAExH,CAAA,EAAAL,EACY,EAAyB,CAChC,MAAA,EAAA,GAAA,QAAA,eAAqE,0BAAA,CAAA,UAAA,EAAA,GAAA,2CAAA,2DAS1F,CAAA,EAEAA,EA0BO,EA1BK,CAAQ,gBAAA,EAAA,eAAA,EAAA,KAAA,EAAA,CAAA,iBAAA,CAAA,EAAAA,EACE,EAuBP,CAAA,MAAA,QAAA,EAAA,CAAA,QAtBPC,EAsBO,IAAA,CAAAC,EArBH,OAMMN,GAAA,CAAAM,EANK,MAAkB,CAAE,MAAK,mBAAA,MAAAmB,EAAA,EAAA,eAAA,MAAA,oBAAA,CAChC,EAAA,CAAAnB,EAAY,OAAe,CAAE,MAAK,gBAAA,MAAAmB,EAAA,EAAA,eAAA,MAAA,QAAA,CAC9B,EAAA,CAAArB,EAAc,EAAmB,CAAC,GAAA,oBAA2B,MAAK,oBAAA,MAAAqB,EAA+C,EAAQ,eAAiB,MAAA,QAAA,EAAA,WAAA,EAAA,QAAA,wCAAvC,EAAwC,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,kBAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACnJ,EAAA,KAAA,EAAA,CAAA,QAAiI,YAAjI,CAAA,EAAAnB,EAAA,QAAAO,GAAAJ,EAAA,EAAA,GAAA,8CAAA,CAAA,EAAA,CAAA,CAEJ,EAAA,CAAA,EAAAL,EAAa,EAAoB,CAAC,KAAK,qBAAkD,MAAK,gDAAA,QAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,qBAAA,KAElG,EAAA,CAAA,EAAqBE,EAAA,MAAA,CAAE,MAAK,WAAA,MAAAmB,EAAA,EAAA,eAAA,MAAA,oBAAA,CACxB,EAAA,CAAAnB,EACI,OAA+FS,GAA/F,CACAT,EAA8H,QAAAU,GAAAP,EAAA,EAAA,GAAA,uDAAA,CAAA,EAAA,KAAA,CAAA,EAAAL,EAAjH,EAAQ,CAAC,GAAA,SAAA,MAAA,yDAA6D,sBAAY,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,2BAAA,GAAG,OAAM,GAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,0BAE5G,CAAA,EAAAA,EAAa,EAAoB,CAAC,KAAK,qBAAkD,MAAK,gDAAA,QAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,4BAAA,KAElG,EAAA,CAAA,EAAqBE,EAAA,MAAA,CAAE,MAAK,WAAA,MAAAmB,EAAA,EAAA,eAAA,MAAA,oBAAA,CACxB,EAAA,CAAAnB,EACI,OAA6E,GAA7E,CACAA,EAA4G,QAAA,GAAAG,EAAA,EAAA,GAAA,qCAAA,CAAA,EAAA,KAAA,CAAA,EAAAL,EAA/F,EAAQ,CAAC,GAAA,SAAA,MAAA,uCAA2C,sBAAY,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,SAAA,GAAG,OAAM,GAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,0BAE1F,CAAA,EAAAA,EAAa,EAAoB,CAAC,KAAK,qBAAkD,MAAK,gDAAA,QAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,gBAAA,iBAM9G,CAAA,EAEAA,EAuBO,EAvBK,CAAQ,gBAAA,EAAA,eAAA,EAAA,KAAA,EAAA,CAAA,iBAAA,CAAA,EAAAA,EACE,EAoBP,CAAA,MAAA,QAAA,EAAA,CAAA,QAnBPC,EAmBO,IAAA,CAAAC,EAlBH,OAKM,GAAA,CAAAA,EAJF,MAGO,GAHP,CACsIA,EAAA,OAAA,GAAA,CAAAF,EAApH,EAAY,CAAC,GAAI,aAAU,KAAK,SAAA,MAAA,0EAAqB,EAAiC,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,WAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACO,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAA,GAAAG,EAAA,EAAA,GAAA,uCAAA,CAAA,EAAA,CAAA,GAG3H,CAAA,EAAAH,EACI,MAGO,GAHP,CAC4IA,EAAA,OAAA,GAAA,CAAAF,EAA1H,EAAe,CAAC,GAAI,gBAAU,KAAK,SAAA,MAAA,6EAAqB,EAAoC,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,cAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACO,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAA,GAAAG,EAAA,EAAA,GAAA,0CAAA,CAAA,EAAA,CAAA,GAGjI,CAAA,EAAAH,EACI,MAGO,GAHP,CAC8IA,EAAA,OAAA,GAAA,CAAAF,EAA5H,EAAgB,CAAC,GAAI,iBAAU,KAAK,SAAA,MAAA,8EAAqB,EAAqC,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,eAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACO,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAA,GAAAG,EAAA,EAAA,GAAA,2CAAA,CAAA,EAAA,CAAA,aAO/I,CAAA,EAAAL,EAA+B,EAAoB,CAAG,QAAK,EAAA,qBAAA,QAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,qBAAA,GACuD,EAAA,KAAA,EAAA,CAAA,SAAA,CAAA,EAAAA,EAA5E,EAA2B,CAAG,QAAK,EAAA,4BAAA,QAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,4BAAA,GACK,EAAA,KAAA,EAAA,CAAA,SAAA,CAAA,EAAAA,EAApD,EAAe,CAAG,QAAK,EAAA,gBAAA,QAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,gBAAA,6MCvErD,KAAKrB,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,cAAMkD,EAAa,sBAAqB,EACtD,MAAO,CAAE,gBAAiB,CAAE,KAAM,OAAgB,EAClD,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CACH,oBACA,QAAS,CAAC,EACV,GAAI7C,EAAY,EAChB,iBAAkB,CAAC,EACnB,cAAe,CACX,KAAM,2BACN,aAAc,GACd,eAAgB,GAChB,YAAa,GACb,cAAe,GACf,MAAO,UACP,YAAa,EACjB,CAAA,CAER,EACA,SAAU,CACN,KAAK,YAAY,EACjB,KAAK,gBAAgB,CACzB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,YAAY,CACrB,CACJ,EACA,aAAc,CAIJ,KAAA,GAAwC,CAAE,yBAHnB,AAAC,GACnB,KAAK,QAAQ,UAAY,UAAY,GAIzC,MADkB,CAAE,QAAS,EAAkB,UAAW,GAAiB,YAAY,QAAS,CAAgB,EAE3H,EACA,QAAS,CACL,aAAc,CACV,KAAK,QAAU,KAAK,gBACpB,KAAK,QAAQ,aAAoB,MAAK,QAAQ,YAAc,GAChE,EACA,iBAAkB,CACd,KAAK,MAAM,kBAAoB,MAAK,iBAAoB,KAAK,MAAM,iBAAyB,OAChG,CACJ,CACJ,CAAC,EA3FoBE,GAAA,CAAA,MAAM,6BACDC,GAAA,CAAA,MAAM,+CAYEC,GAAC,CAAiB,IAAK,iBAAA,MAAA,2BAK/BC,GAAA,CAAA,MAAM,8CAEEC,GAAC,CAAwB,IAAK,wBAAA,MAAA,2BAItCC,GAAA,CAAA,MAAM,8CAEEC,GAAC,CAAyB,IAAK,yBAAA,MAAA,sIA5B9C,MAAAK,GA+BA,EAAAmB,EAAA,EAAA,CAAA,MAAA,SAAA,CAAA,QA9BPhB,EA8BO,IAAA,CAAAC,EA7BH,OAgBMf,GAAA,CAAAe,EAfF,MAaOd,GAbP,CAWMc,EAAA,OAAAC,GAAA,CAAAH,EATK,EAAgB,CACnB,GAAA,iBAG2D,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,eAAA,UAAA,EAAA,GAAA,QAAA,eAAA,MAFhD,CAAA,CAAA,EAAA,KAAA,2EACX,EAA+C,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,eAAA,OAAA,GAI9C,eAAI,CAAA,KAAA,EAAA,EACJ,OAAM,iBAAE,GAAK,QAAA,eAAA,OAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,aAA6H,OAA7H,CAAA,EAAAF,EAAA,QAAAb,GAAAgB,EAAA,EAAA,GAAA,2CAAA,CAAA,EAAA,MAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAA4B,MAAA,EAAA,GAAA,QAAA,eAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,2CAAA,CAAA,gDAE7E,CAAA,EAAAE,EACI,MAGOZ,GAHP,CAC8IY,EAAA,OAAAI,GAAA,CAAAN,EAA5H,EAAuB,CAAC,GAAA,wBAAA,MAAA,qFAA0B,EAA4C,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,sBAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACqB,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAAX,GAAAc,EAAA,EAAA,GAAA,kDAAA,CAAA,EAAA,CAAA,GAGjJ,CAAA,EAAAH,EACI,MAGOV,GAHP,CAC8JU,EAAA,OAAAK,GAAA,CAAAP,EAA5I,EAAwB,CAAC,GAAA,yBAA0B,MAAK,oBAAA,KAAA,2EAAS,EAA6C,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,uBAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACO,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAAT,GAAAY,EAAA,EAAA,GAAA,mDAAA,CAAA,EAAA,CAAA,KAIvJ,CAAA,EAAAL,EAAmB,EAAQ,CAAC,MAAI,SAA2B,IAAK,mBAAA,MAAA,EAAA,QAAA,YAAwB,iBAAgB,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,YAAA,GAAG,WAAS,GAAgB,QAAK,EAAA,cAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,2ZCdrJ,KAAKrB,IAAa,EAAa,CAC3B,KAAM,8BACN,WAAY,CAAEiD,OAAAA,CAAO,EACrB,MAAO,CAAC,OAAO,EACf,MAAO,CACH,QAAS,CAAE,KAAM,OAAQ,CAC7B,EACA,MAAO,CACI,MAAA,CAAA,iBACHQ,CAAA,CAER,CACJ,CAAC,EA9B2BjD,GAAAe,EAAA,MAAA,CAAA,MAAA,QAAA,EAAA,CAEKmC,EAAA,iFAAA,EAAMnC,EAAA,MAAA,KAAA,kBAAA,EAEmCmC,EAAA,kNAAA,EAAAnC,EAAA,MAAA,KAAA,2DAAA,wEALvDJ,GAAI,EAAAmB,EAAA,EAAA,CAA2C,OAAK,EAAyB,GAAA,sCAAA,EAAa,MAAOI,EAAS,EAAA,iBAAA,MAAA,UAAA,EAAG,QAAO,EAAI,QAAE,MAAM,GAAuC,MAAA,sCAAA,SAAA,EAQvK,EAAA,CAAA,OACPpB,EAAuG,IAAA,CAAzFD,EAAA,EAAA,CAAgC,MAAK,+BAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,OAAA,mEARvDC,EAKM,IAAA,CAAAd,uECsCd,KAAKR,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,YAAME,EAAA,OAAWC,CAAO,EACtC,MAAO,CACH,gBAAiB,CAAE,KAAM,MAAc,CAC3C,EACA,SAAU,CACN,kBAAmB,CACX,MAAA,CAAC,KAAK,QAAQ,iCAAmC,KAAK,QAAQ,gCAAmC,QAAU,CAKnH,CACJ,EACA,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CACH,kBACA,QAAS,CAAC,EACV,gBAAiB,EAAA,CAEzB,EACA,SAAU,CACN,KAAK,QAAU,KAAK,eACxB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,eACxB,CACJ,EACA,QAAS,CACL,aAAc,CACV,KAAK,QAAQ,iCAAwC,MAAK,QAAQ,gCAAkC,IACpG,KAAM,GAAW,CAAE,GAAG,EAAgB,gBAAiB,EAClD,KAAA,QAAQ,gCAAgC,KAAK,CAAQ,CAC9D,EACA,YAAY,EAAc,CACtB,KAAK,SAAS,QAAQ,CAClB,QAAS,KAAK,GAAG,4BAA4B,EAC7C,OAAQ,KAAK,GAAG,wBAAwB,EACxC,KAAM,6BACN,OAAQ,IAAO,KAAK,QAAQ,gCAAkC,KAAK,QAAQ,gCAAgC,OAAO,AAAC,GAAkB,EAAa,KAAK,OAAS,EAAc,IAAI,CAAA,CACrL,CACL,EACA,iBAAkB,CACd,KAAK,SAAS,QAAQ,CAClB,QAAS,KAAK,GAAG,sDAAsD,EACvE,OAAQ,KAAK,GAAG,wDAAwD,EACxE,KAAM,6BACN,OAAQ,IAAO,KAAK,QAAQ,gCAAkC,CAAC,CAAA,CAClE,CACL,EACA,mBAAmB,EAAO,CACtB,KAAK,QAAQ,gCAAgC,EAAM,OAAS,EAAM,OACtE,CACJ,CACJ,CAAC,0HApGG,MAAAe,OAAcC,EAAC,KAAA,CAAAC,EACK,EAC4J,CAAA,MAAA,gDAAA,EAAA,CAAzJ,MAAAC,EAAA,IAAA,CAAA,AAAA,EAAA,0BACA,IAAI,EAAuB,KAAK,sBAAiD,MAAA,gDAAqB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,gBAAA,OAD3GH,GAAA,EAAAmB,EAAA,EAAA,CAAiB,IAAI,EAAwB,KAAK,uBAAiD,MAAA,gDAAqB,MAAK,CAAA,MAAA,OAAA,EAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,gBAAA,qEAIrI,CAAA,EAAA,IACPhB,EAAwG,IAAA,CAAAD,EAA3F,EAAa,CAAC,KAAK,cAAkD,MAAK,gDAAA,QAAA,EAAA,WACoD,EAAA,KAAA,EAAA,CAAA,SAAA,CAAA,EAAAA,EAA9H,EAAe,CAAC,KAAK,gBAAkD,MAAA,gDAA6B,SAAO,EAAA,iBAAA,QAAA,EAAA,0DAI1GA,EAoBF,EAAA,CAAA,MAAA,QAAA,EAAA,CAAA,QAnBZC,EAmBY,IAAA,CAAAD,EAnBK,EAAyB,CAAC,MAAA,0BAAiB,SAAO,OAA0C,QAAY,QAAI,gCAAE,WAAY,GAAS,aAAQ,QAAU,QAAA,UAAyB,iBAAW,QAAS,WAAA,QAAA,mBAAA,EAAA,kBACpM,EAAA,CAAA,MAAAC,EAAA,IAAA,iEAGXA,EAIS,IAAA,CAAAD,EAJK,EAAM,CAAE,MAAM,OAAyB,OAAQ,EAAE,GAAI,gBAAA,EAAA,SAAA,EACpD,EAAA,CAAA,OACPC,EAAsG,CAAA,CAAA,UAAA,CAAAD,EAArF,EAAmB,CAAE,MAAK,oBAAuD,MAAAqB,EAAA,EAAA,gBAAA,MAAA,WAAA,EAAA,WAAA,EAAA,oGAOjG,EAAA,CAAA,QAAA,CAAA,EAAArB,EAJK,EAAO,CAAE,MAAM,QAAuB,OAAQ,EAAE,GAAI,cAAA,EAAA,SAAA,EACnD,EAAA,CAAA,OACPC,EAAuG,CAAA,CAAA,UAAA,CAAAD,EAAtF,EAAmB,CAAE,MAAK,oBAAwD,MAAAqB,EAAA,EAAA,gBAAA,MAAA,WAAA,EAAA,WAAA,EAAA,sGAOlG,EAAA,CAAA,QAAA,CAAA,EAAArB,EAJQ,EAAO,CAAA,WAAA,AAAA,GAAA,EACT,EAAA,CAAA,KACPC,EAAmF,AAAA,GAAA,CAAAD,EAAtE,EAAa,CAAC,KAAK,cAAkB,MAAK,gBAAA,QAAA,AAAA,GAAA,EAAA,YAAA,CAAA,+ICgD/E,KAAKrB,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,EAAM,uBAAsB,mBAAiB,uBAAqB,kBAAgB,EAChG,MAAO,CACH,YAAa,CAAE,KAAM,OAAQ,EAC7B,gBAAiB,CAAE,KAAM,MAAc,EACvC,YAAa,CAAE,KAAM,KAAa,EAClC,eAAgB,CAAE,KAAM,KAAa,CACzC,EACA,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CACH,kBACA,kBACA,QAAS,CAAC,EACV,GAAIK,EAAY,EAChB,sBAAuB,EAAA,CAE/B,EACA,SAAU,CACN,KAAK,QAAU,KAAK,gBAChB,KAAK,QAAQ,WAAa,QAAW,EAAC,KAAK,QAAQ,UAAY,KAAK,QAAQ,WAAa,WAAW,MAAK,QAAQ,SAAW,YACpI,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,eACxB,CACJ,EACA,aAAc,CAOV,KAAM,GAAwC,CAAE,uBANrB,AAAC,GACjB,KAAK,QAAQ,UAAY,QAAU,EAK8C,2BAH7D,AAAC,GACrB,KAAK,QAAQ,UAAY,aAAe,CAE4F,EAExI,MADkB,CAAE,QAAS,EAAkB,UAAW,GAAe,YAAY,QAAS,CAAgB,EAEzH,EACA,QAAS,CAAC,CACd,CAAC,EAjHoBE,GAAA,CAAA,MAAM,6BACDC,GAAA,CAAA,MAAM,8CAYEC,GAAC,CAAc,IAAK,cAAA,MAAA,2BAK5BC,GAAA,CAAA,MAAM,4DAYEC,GAAC,CAAiB,IAAK,iBAAA,MAAA,uEAM3BgB,GAAC,CAAkB,IAAK,kBAAA,MAAA,+BAEjC,IAAK,EAAA,MAAA,kCAYIb,GAAC,CAAgB,IAAK,gBAAA,MAAA,4LArDhD,MAAAI,OAAYC,EAAO,KAAA,CAAAC,EACG,EAuDP,CAAA,MAAA,OAAA,EAAA,CAAA,QAtDPC,EAsDO,IAAA,CAAAC,EArDH,OAgBMf,GAAA,CAAAe,EAfF,MAaOd,GAbP,CAWMc,EAAA,OAAAC,GAAA,CAAAH,EATK,EAAa,CAChB,GAAA,cAGmE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,YAAA,UAAA,EAAA,GAAA,QAAA,YAAA,MAFxD,CAAA,CAAA,EAAA,KAAA,wEACX,EAA4C,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,YAAA,OAAA,GAI3C,eAAI,CAAA,KAAA,EAAA,EACJ,OAAM,iBAAE,GAAK,QAAA,YAAA,OAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,aAAuH,OAAvH,CAAA,EAAAF,EAAA,QAAAb,GAAAgB,EAAA,EAAA,GAAA,wCAAA,CAAA,EAAA,MAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAAyB,MAAA,EAAA,GAAA,QAAA,YAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,wCAAA,CAAA,gDAE1E,CAAA,EAAAE,EACI,MAaOZ,GAbP,CAWMY,EAAA,OAAAI,GAAA,CAAAN,EATK,EAAgB,CACnB,GAAA,iBAGmE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,eAAA,UAAA,EAAA,GAAA,QAAA,eAAA,MAFxD,CAAA,CAAA,EAAA,KAAA,2EACX,EAA+C,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,eAAA,OAAA,GAI9C,eAAI,CAAA,KAAA,EAAA,EACJ,OAAM,iBAAE,GAAK,QAAA,eAAA,OAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,aAA6H,OAA7H,CAAA,EAAAF,EAAA,QAAAX,GAAAc,EAAA,EAAA,GAAA,2CAAA,CAAA,EAAA,MAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAA4B,MAAA,EAAA,GAAA,QAAA,eAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,2CAAA,CAAA,gDAE7E,CAAA,EAC+JE,EAAA,MAAAV,GAAA,CAAAQ,EAA7I,EAAiB,CAAC,GAAA,kBAA0B,MAAK,oBAAO,KAAA,OAAA,UAAA,kEAAiB,EAAsC,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,gBAAA,GAAE,eAAM,CAAA,KAAA,EAAA,EAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACvB,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,QAAAK,GAAAF,EAAA,EAAA,GAAA,6BAAA,CAAA,EAAA,CAAA,CAEhE,CAAA,EAAA,EAAA,QAAA,UAAlD,iBAWMK,EAAA,MAAAjB,GAAA,CAAAO,EATK,EAAe,CAClB,GAAA,gBAAA,MAAAI,EAGoD,CAAW,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,cAAA,UAAA,EAAA,GAAA,QAAA,cAAA,MAF1D,CAAA,CAAA,EAAA,KAAA,0EACL,EAA8C,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,cAAA,OAAA,GAI7C,eAAI,CAAA,KAAA,EAAA,EACJ,OAAM,iBAAE,GAAK,QAAA,cAAA,OAAA,GAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,aAA2H,OAA3H,CAAA,EACAF,EAAoK,QAAAR,GAAAW,EAAA,EAAA,GAAA,0CAAA,CAAA,EAAA,MAAA,CAAA,EAAAL,EAAxI,EAAQ,CAAE,MAAO,SAA2B,MAAA,EAAA,GAAA,QAAA,cAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,0CAAA,CAAA,oEAMxF,CAAA,EACAA,EAAsD,EAApC,CAAA,gBAAiB,EAAe,eAAA,EAAA,KAAA,EAAA,CAAA,iBAAA,CAAA,EAClDA,EAA2F,EAAA,CAAA,gBAAA,EAAA,eAAA,EAAA,KAAA,EAAA,CAAA,iBAAA,CAAA,EAAAA,EAAhE,EAAqB,CAAG,QAAK,EAAA,sBAAA,QAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,sBAAA,wsFCqB5D,KAAKrB,IAAa,EAAa,CAC3B,WAAY,CAAA,KAAEC,EAAMC,SAAAA,cAAUiD,cAAaQ,GAAa,uBAAsBV,OAAAA,YAAQ9C,EAAA,OAAWC,CAAO,EACxG,MAAO,CAAE,gBAAiB,CAAE,KAAM,MAAiB,EAAA,mBAAoB,CAAE,KAAM,OAAgB,cAAe,CAAE,KAAM,MAAe,EACrI,MAAO,CAAC,SAAS,EACjB,SAAU,CACN,cAAoB,CACZ,MAAA,MAAK,QAAQ,mBAAqB,SAC3B,KAAK,mBAEL,KAAK,aAEpB,CACJ,EACA,MAAO,CACI,MAAA,CACH,oBACA,GAAIE,EAAY,EAChB,QAAS,CAAC,EACV,iBAAkB,CAAC,EACnB,cAAe,KACf,eAAgB,GAChB,cAAe,CACX,MAAO,UACP,aAAc,GACd,YAAa,GACb,KAAM,eACV,CAAA,CAER,EACA,SAAU,CACN,KAAK,YAAY,EACjB,KAAK,gBAAgB,CACzB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,YAAY,CACrB,CACJ,EACA,aAAc,CAIJ,KAAA,GAAwC,CAAE,yBAHnB,AAAC,GACnB,KAAK,QAAQ,UAAY,YAAc,GAI3C,MADkB,CAAE,QAAS,EAAkB,UAAW,GAAiB,YAAY,QAAS,CAAgB,EAE3H,EACA,QAAS,CACL,aAAc,CACV,KAAK,QAAU,KAAK,gBACpB,KAAK,QAAQ,mBAA0B,MAAK,QAAQ,kBAAoB,UACxE,KAAK,QAAQ,cAAqB,MAAK,QAAQ,aAAe,GAClE,EACA,iBAAkB,CACR,KAAA,GAAW,YAAY,IAAM,CAC3B,AAAA,CAAC,KAAK,MAAM,kBACX,MAAA,iBAAoB,KAAK,MAAM,iBAAyB,OAC7D,cAAc,CAAQ,IACvB,GAAG,CACV,EACA,iBAAkB,CACV,MAAA,MAAK,QAAQ,mBAAqB,SAC3B,KAAK,MAAM,IAAI,0EAA6F,KAAK,QAAQ,kBAAkB,OAAO,EAElJ,KAAK,MAAM,IAAI,2EAA8F,KAAK,QAAQ,kBAAkB,OAAO,CAElK,EACA,KAAM,mBAAmB,CACrB,KAAM,MAAK,MACX,KAAK,gBAAgB,EAChB,KAAK,AAAC,GAAiC,CACpC,KAAK,QAAQ,mBAAqB,SAAY,KAAK,cAAgB,KAAK,MAAM,EAAS,KAAK,MAAM,EAAM,KAAK,cAAgB,KAAK,MAAM,EAAS,KAAK,MAAM,EAC5J,KAAK,eAAiB,EAAA,CACzB,EACA,MAAM,IAAM,CAAA,CAAE,CACvB,EACA,qBAAqB,EAAc,EAAe,EAAc,CAC5D,KAAM,GAAgB,EAAa,KAAK,AAAC,GAAW,EAAO,QAAU,CAAY,EACjF,GAAiB,MAAK,QAAQ,kBAAkB,GAAiB,EAAc,MACnF,EACA,gBAAiB,CACb,KAAK,QAAQ,kBAAoB,CAC7B,MAAO,GACP,MAAO,EAAA,CAEf,CACJ,CACJ,CAAC,EArKeE,GAAA,CAAA,MAAA,0BAEwBe,EAAA,QAAA,CAAjB,IAAI,UAAK,SAAA,EAAA,KAE0BA,EAAA,QAAA,CAAA,IAAA,KAAA,IAAA,EAAA,EACrCb,GAAA,CAAA,MAAM,oCACDC,GAAA,CAAA,MAAM,8CAaEC,GAAC,CAAoB,IAAK,oBAAA,MAAA,+BAEiD,IAAI,EAAoB,IAAK,oBAAA,MAAA,4BAG3G,8CAYGG,GAAC,CAAgB,IAAK,gBAAA,MAAA,oSAvCrC,MAAAI,GAMD,EAAAmB,EAAA,EAAA,CAAA,MAAA,SAAA,CAAA,QALNhB,EAKM,IAAA,CAJsGC,EAAA,MAAAf,GAAA,CAAAa,EAAtF,EAAQ,CAAC,KAAK,SAAA,MAAA,gDAA+C,sBAAO,EAAc,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,kBAAA,GAAA,QAAA,EAAA,cAClE,EAAA,KAAA,EAAA,CAAA,aAAA,SAAA,CAAA,EAClCZ,GAAqBY,EAAA,EAAA,CAAC,KAAK,IAAU,MAAM,SAAA,MAAA,2CAAyC,sBAAO,EAAc,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,kBAAA,GAAA,QAAA,EAAA,cACjF,EAAA,KAAA,EAAA,CAAA,aAAA,SAAA,CAAA,EAAAG,EAE5B,CAAA,EAAAD,EACI,OAiBMb,GAAA,CAAAa,EAhBF,MAcOZ,GAdP,CAYMY,EAAA,OAAAI,GAAA,CAAAN,EAVK,EAAmB,CACtB,GAAA,oBAMiE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,CAAA,EAAA,QAAA,kBAAA,OAAA,EAAA,QAAA,kBAAA,QAAA,EALvD,CAAA,CAAA,EACV,QAAY,EAAA,aACZ,YAAY,QACH,YAAA,QAAA,WAAA,EAAA,QAAA,kBAAA,MACR,sBAAM,EAAA,IAAA,GAAA,GAAE,AAAqB,GAAA,EAAA,QAAA,kBAAY,MAAW,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,qBAAA,EAAA,aAAA,QAAA,EAAA,KAAA,EAKzD,EAAA,KAAA,EAAA,CAAA,UAA6H,aAA7H,OAA6H,CAAA,EAAAF,EAAA,QAAAX,GAAAc,EAAA,EAAA,GAAA,wCAAA,CAAA,EAAA,MAAA,CAAA,iCAEjI,OAAsM,EAAA,QAAtM,kBAAsM,QAA1D,GAAAP,GAAA,EAAAY,EAAA,QAAAlB,GAAAa,EAAA,EAAA,GAAA,0CAAA,CAAA,EAAA,CAAA,GAAAa,EAAA,GAAA,EAAA,CAEhJ,CAAA,EAAAhB,EACI,MAaOK,GAbP,CAWML,EAAA,OAAAT,GAAA,CAAAO,EATK,EAAe,CAClB,GAAA,gBAG2D,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,cAAA,UAAA,EAAA,GAAA,QAAA,cAAA,MAFhD,CAAA,CAAA,EAAA,KAAA,0EACX,EAA8C,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,cAAA,OAAA,GAI7C,eAAI,CAAA,KAAA,EAAA,EACJ,OAAM,iBAAE,GAAK,QAAA,cAAA,OAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,aAA2H,OAA3H,CAAA,EAAAF,EAAA,QAAAR,GAAAW,EAAA,EAAA,GAAA,0CAAA,CAAA,EAAA,MAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAA2B,MAAA,EAAA,GAAA,QAAA,cAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,0CAAA,CAAA,kDAGhF,CAAA,EAAAA,EAAgB,EAAE,CAAiD,MAAM,EAA6B,GAAA,6CAAA,EAAE,MAAA,8BAA6C,SAAO,CAAgB,EAAA,QAAA,kBAAA,MAAA,QAAA,EAAA,kBAEZ,KAAA,EAAA,CAAA,QAAA,WAAA,SAAA,CAAA,EAAAA,EAA7I,EAAQ,CAAC,MAAI,SAA2B,IAAK,mBAAA,MAAA,EAAA,QAAA,aAAyB,iBAAgB,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,aAAA,GAAG,WAAS,GAAgB,QAAK,EAAA,cAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAgBjI,EAAA,KAAA,EAAA,CAAA,QAAA,SAAA,CAAA,EAAAA,EAdQ,EAAE,CAAmD,OAAmB,EAAA,GAAA,+CAAA,EAAE,MAAO,CAAE,MAAA,MAAA,EAAiB,QAAO,EAAK,eAAE,MAAM,GAAuC,MAAA,sCAAA,SAAA,EAWjK,EAAA,CAAA,OACPC,EAA+G,IAAA,CAAjGD,EAAA,EAAA,CAAgC,MAAK,+BAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,eAAA,oEAXvDC,EASM,IAAA,CADUC,EAAA,MAAAM,GAAA,CAAAR,EAPK,EAAyB,CAAE,MAAO,0BAAgB,MAAY,EAAA,cAAM,WAAA,GAAyB,iBAAW,QAAA,WAAA,kBACrHC,EAES,IAAA,CAAAD,EAFK,EAAM,CAAE,MAAM,OAAyB,OAAQ,EAAE,GAAI,gBAAA,EAAA,SAAA,EACpD,EAAA,CAAA,KAA6BC,EAAO,CAAC,CAAA,UAAA,CAAA,EAAA,QAAA,mBAApB,SAA2DH,GAAA,EAAAY,EAAA,OAAAf,EAAA,GAAAuB,EAAA,GAAA,EAAA,EAAAmB,EAAoC,IAAiBhC,EAAA,EAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,QAAA,mBAArC,IAAsDP,GAAA,EAAAY,EAAA,OAAAd,EAAA,GAAAsB,EAAA,GAAA,EAAA,EAAAmB,EAAA,IAAAhC,EAAA,EAAA,EAAA,EAAA,CAAA,SAIxJ,EAAA,CAAA,QAAA,CAAA,EAAAL,EAFK,EAAS,CAAE,MAAM,UAAyB,OAAQ,EAAE,GAAI,gBAAA,EAAA,SAAA,EACvD,EAAA,CAAA,KAA6BC,EAAO,CAAC,CAAA,UAAA,CAAA,EAAA,QAAA,mBAApB,SAA2DH,GAAA,EAAAY,EAAA,OAAAD,EAAA,GAAAS,EAAA,GAAA,EAAA,EAAAmB,EAAuC,IAAiBhC,EAAA,EAAA,OAAA,EAAA,IAAA,CAAA,EAAA,EAAA,QAAA,mBAArC,IAAsDP,GAAA,EAAAY,EAAA,OAAAC,EAAA,GAAAO,EAAA,GAAA,EAAA,EAAAmB,EAAA,IAAAhC,EAAA,EAAA,EAAA,EAAA,CAAA,mWChC5L,KAAK1B,IAAa,EAAa,CAC3B,WAAY,CAAA,KAAEC,EAAA,iBAAM2D,EAAiB,EACrC,MAAO,CAAE,gBAAiB,CAAE,KAAM,MAAc,EAAG,YAAa,CAAE,KAAM,MAAe,EACvF,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CACH,cACA,QAAS,CAAC,EACV,kBAAmB,CAAC,EACpB,aAAc,CAAC,EACf,qBAAsB,EAAA,CAE9B,EACA,OAAQ,CAEJ,MAAO,CAAA,MADOrD,GACC,CACnB,EACA,SAAU,CACN,KAAK,QAAU,KAAK,eACxB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,eACxB,CACJ,EACA,QAAS,CACL,KAAM,aAAY,EAAmB,CAC3B,KAAA,MAAK,MACN,IAAI,qDAAwE,GAAW,EACvF,KAAK,AAAC,GAAiC,CAC/B,KAAA,QAAU,EAAS,KAAK,EAAA,CAChC,EACA,MAAM,IAAM,CAAA,CAAE,CACvB,EACA,wBAAyB,CACrB,GAAI,GAAO,GACX,KAAK,SAAS,QAAQ,CAClB,OAAQ,KAAK,GAAG,mCAAmC,EACnD,QAAS,KAAK,GAAG,uCAAuC,EACxD,KAAM,6BACN,OAAQ,IAAM,CACL,KAAA,QAAQ,KAAK,CAAI,CAC1B,CAAA,CACH,CACL,EAEA,KAAM,qBAAqB,CACjB,KAAA,MAAK,MACN,IAAI,6CAAgE,EACpE,KAAK,AAAC,GAAiC,CACpC,KAAK,aAAe,EAAS,IAAA,CAChC,EACA,MAAM,IAAM,CAAA,CAAE,CACvB,EAEA,KAAM,4BAA4B,CAC9B,KAAM,MAAK,qBACL,KAAA,MAAK,oBAAoB,KAAK,eAAe,CACvD,EAEA,YAAY,EAAc,CACtB,MAAI,MAAK,aAAa,QAAQ,CAAI,GAAK,GAAc,IAAA,KAAK,aAAa,QAAQ,EAAK,SAAA,CAAU,IAAM,CAExG,EAEA,oBAAoB,EAAc,CAC1B,AAAA,EAAQ,UAAY,WAEf,KAAA,MAAM,IAAI,mDAAsE,EAAQ,IAAI,EAAE,KAC/F,AAAC,GAAiC,CAC1B,GAAA,GAAa,EAAS,KAAK,cAAc,mBACxC,KAAA,MAAM,IAAI,4DAA2E,GAAY,EAAE,KACpG,AAAC,GAAiC,CAC1B,GAAA,GAAkB,EAAS,KAAK,WAChC,EAAY,EAAS,KAAK,GAC1B,EAAY,EAAS,KAAK,SAAS,UACnC,AAAA,KAAK,YAAY,CAAS,EAErB,KAAA,QAAQ,KAAK,CAAE,KAAM,mBAAoB,OAAQ,CAAE,GAAI,EAAW,gBAAiB,KAAK,UAAU,CAAe,EAAG,YAAsB,aAAwB,QAAS,KAAK,UAAU,CAAO,CAAE,CAAA,CAAG,EAE3M,KAAK,MAAM,QAAQ,CACf,MAAO,uBACP,IAAK,kCAAA,CACR,CACL,EAEJ,IAAM,CACF,KAAK,MAAM,SAAS,CAAE,MAAO,aAAc,IAAK,wBAAyB,CAAA,CAEjF,CAAA,EAEJ,IAAM,CACF,KAAK,MAAM,SAAS,CAChB,MAAO,8BAAA,CACV,CAAA,CAET,EACO,AAAA,KAAK,YAAY,EAAQ,EAAE,EAE7B,KAAA,QAAQ,KAAK,CAAE,KAAM,mBAAoB,OAAQ,CAAE,GAAI,EAAQ,EAAG,CAAG,CAAA,EAE1E,KAAK,MAAM,QAAQ,CACf,MAAO,uBACP,IAAK,kCAAA,CACR,CAET,EACA,KAAM,sBAAqB,EAAW,CAClC,KAAK,qBAAuB,GAEtB,KAAA,MAAK,MAAM,MAAM,8CAA+D,EAAU,WAAY,CAAE,OAAQ,EAAU,MAAO,EAAG,CAAE,QAAS,CAAE,OAAQ,wBAA2B,CAAA,EAAE,KACxL,IAAM,CACG,KAAA,YAAY,KAAK,gBAAgB,EAAE,CAAA,EAE5C,IAAM,CACF,KAAK,MAAM,SAAS,CAAE,MAAO,KAAK,GAAG,qBAAqB,EAAG,IAAK,KAAK,GAAG,0EAA0E,CAAG,CAAA,CAAA,CAE/J,CACJ,CACJ,CACJ,CAAC,EA7IoBC,GAAA,CAAA,MAAM,6BAGNC,GAAA,CAAA,MAAM,iIANvB,MAAAU,OAAYC,EAAO,KAAA,CAAAC,EACG,EAQP,CAAA,MAAA,OAAA,EAAA,CAAA,QAPPC,EAOO,IAAA,CAAAC,EANH,OAEMf,GAAA,CADuIe,EAAA,MAAAd,GAAA,CAAAY,EAAzH,EAAE,CAA2C,MAAM,EAA8B,GAAA,uCAAA,EAAE,MAAK,+BAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,qBAAA,sBAE5G,CAAA,EACuIE,EAAA,MAAAC,GAAA,CAAAH,EAAnH,EAAE,CAAuC,MAAM,EAA8B,GAAA,mCAAA,EAAE,MAAK,+BAAA,QAAA,EAAA,gEAMpH,CAAA,EAAAA,EAA6B,EAAsB,CAAG,WAAS,EAAA,qBAAkB,QAAK,EAAA,gBAAiC,QAAM,EAAoB,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,qBAAA,IAAA,OAAA,EAAA,kGCyDrJ,KAAKrB,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,WAAMC,EAAU,uBAAsB,cAAY,eAAa,cAAY,eAAa,eAAa,eAAa,eAAa,gBAAc,iBAAe,iBAAe,iBAAe,eAAa,kBAAgB,EACrO,MAAO,CACH,YAAa,CAAE,KAAM,OAAQ,EAC7B,gBAAiB,CAAE,KAAM,MAAc,EACvC,aAAc,CAAE,KAAM,KAAa,EACnC,YAAa,CAAE,KAAM,KAAa,EAClC,eAAgB,CAAE,KAAM,KAAa,EACrC,YAAa,CAAE,KAAM,KAAa,EAClC,mBAAoB,CAAE,KAAM,KAAa,EACzC,cAAe,CAAE,KAAM,KAAa,EACpC,UAAW,CAAE,KAAM,MAAc,CACrC,EACA,SAAU,CAAC,EACX,MAAO,CAAC,UAAW,eAAgB,WAAY,aAAa,EAC5D,MAAO,CACI,MAAA,CACH,qBACA,QAAS,CAAC,EACV,GAAII,EAAY,EAChB,iBAAkB,EAAA,CAE1B,EACA,SAAU,CACN,KAAK,QAAU,KAAK,eACxB,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,eACxB,CACJ,EACA,aAAc,CAIH,MAHkB,CACrB,QAAS,EAAkB,UAAW,GAAkB,YAAY,OAAO,CAAA,CAGnF,EACA,QAAS,CAAC,CACd,CAAC,aA3GiFG,GAAAiD,EAAA,oCAEzE,IAAG,EAAA,GAAA,wBAIc,GAAqB,gDAeb9C,GAAQ,CAAC,IAAK,QAAA,MAAA,sXAtBjC,MAAAO,GAAgB,EAAAY,EAAAX,EAAA,KAAA,CAA3B,EAAA,QAAA,UAAA,YAAAD,GAAA,IAC6E,MAA/DX,GAAA,CAAAe,EAAA,QAAA,KAAAG,EAAA,EAAA,GAAA,8CAAA,CAAA,EAAA,KAAA,CAAA,EAAgEjB,GAAAe,SA+BnE,EAAAO,EA5BD,MAAMrB,GAAO,CAAAW,EACG,EAyBR,CAAA,MAAA,OAAA,EAAA,CAAA,QAxBNC,EAwBM,IAAA,CAAAC,EAvBF,MAgBOZ,GAhBP,CAcMY,EAAA,OAAAI,GAAA,CAZYN,EAAA,EAAA,CACV,GAAA,QAMmE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,SAAA,UAAA,EAAA,GAAA,QAAA,SAAA,MAL7D,CAAA,CAAA,EACL,MAAOiB,EAAE,EAAY,kBAAA,MAAA,QAAA,EACtB,QAAY,EAAA,aACZ,YAAY,WACH,YAAA,WAAA,WAAA,EAAA,GAAA,QAAA,SAAA,OAIR,sBAAW,EAAK,IAAA,GAAA,GAAA,AAAA,GAAA,EAAO,GAAC,QAAS,SAAM,OAAA,GACvC,aAAM,EAAU,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAY,SAAc,OAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,oHAE/C,EAAA,KAAA,EAAA,CAAA,QAAuH,UAAvH,aAAuH,OAAA,CAAA,EAAAnB,EAAA,QAAAX,GAAAc,EAAA,EAAA,GAAA,8CAAA,CAAA,EAAA,MAAA,CAAA,CAE3H,CAAA,EAAAL,EACY,EAAmB,CAC1B,MAAA,EAAA,GAAA,QAAA,SAAqE,0BAAA,CAAA,UAAA,EAAA,GAAA,8CAAA,2DAQvE,CAAA,GAAnB,EAAA,QAAA,UAAA,OAAAF,GAAA,EAAAmB,EAAA,EAAA,CAAgD,IAAA,EAAmC,gBAAY,EAAA,gBAAA,eAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,cAAA,iCAC3EC,EAAgB,GAAA,EAAA,EAApC,EAAA,QAAA,UAAA,QAAApB,GAAA,EAAAmB,EAAA,EAAA,CAAkD,IAAA,EAAmC,gBAAa,EAAA,gBAAc,YAAa,EAAA,YAAc,YAAW,EAAA,YAAY,UAAW,EAAA,UAAA,cAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,aAAA,yEAC1JC,EAAgB,GAAA,EAAA,EAAnC,EAAA,QAAA,UAAA,aAAApB,GAAA,EAAAmB,EAAA,EAAA,CAAsD,IAAA,EAAA,gBAAA,EAAA,8CACjCC,EAAgB,GAAA,EAAA,EAArC,EAAA,QAAA,UAAA,SAAApB,GAAA,EAAAmB,EAAA,EAAA,CAAoD,IAAA,EAAmC,gBAAa,EAAA,gBAAc,YAAW,EAAA,YAAA,UAAA,EAAA,kEAC3GC,EAAgB,GAAA,EAAA,EAAA,EAAA,QAAA,UAAlC,OAA4M,EAAA,QAAA,UAAA,YAAApB,KAAAmB,EAAA,EAAA,CAA3H,IAAA,EAAmC,gBAAgB,EAAA,gBAAiB,eAAa,EAAA,eAAc,YAAa,EAAA,YAAA,YAAA,EAAA,uFAC1KC,EAAgB,GAAA,EAAA,EAAnC,EAAA,QAAA,UAAA,OAAApB,GAAA,EAAAmB,EAAA,EAAA,CAAgD,IAAA,EAAmC,gBAAa,EAAA,gBAAA,YAAA,EAAA,wDAC7EC,EAAgB,GAAA,EAAA,EAAnC,EAAA,QAAA,UAAA,OAAApB,GAAA,EAAAmB,EAAA,EAAA,CAAgD,IAAA,EAAA,gBAAA,EAAA,8CAC7BC,EAAgB,GAAA,EAAA,EAAnC,EAAA,QAAA,UAAA,OAAApB,GAAA,EAAAmB,EAAA,EAAA,CAAgD,IAAA,EAAA,gBAAA,EAAA,8CAC3BC,EAAgB,GAAA,EAAA,EAArC,EAAA,QAAA,UAAA,SAAApB,GAAA,EAAAmB,EAAA,EAAA,CAAoD,IAAA,GAAA,gBAAA,EAAA,8CACjCC,EAAgB,GAAA,EAAA,EAAnC,EAAA,QAAA,UAAA,OAAApB,GAAA,EAAAmB,EAAA,GAAA,CAAgD,IAAA,GAAA,gBAAA,EAAA,8CAC3BC,EAAgB,GAAA,EAAA,EAArC,EAAA,QAAA,UAAA,WAAApB,GAAA,EAAAmB,EAAA,GAAA,CAAsD,IAAA,GAAmC,gBAAoB,EAAA,gBAAqB,mBAAe,EAAA,mBAAA,cAAA,EAAA,iFAC1HC,EAAgB,GAAA,EAAA,EAAvC,EAAA,QAAA,UAAA,WAAApB,GAAA,EAAAmB,EAAA,GAAA,CAAwD,IAAA,GAAmC,gBAAoB,EAAA,gBAAqB,mBAAe,EAAA,mBAAA,cAAA,EAAA,aACjI,EAAA,KAAA,EAAA,CAAA,kBAAA,qBAAA,eAAA,CAAA,GAAAC,EAAgB,GAAI,EAAA,EAAA,EAAA,QAAA,UAAtC,EAAuK,QAAA,UAAA,QAAA,EAAA,QAAA,UAAA,QAAA,EAAA,QAAA,UAAA,WAAApB,GAAA,EAAAmB,EAAA,GAAA,CAApC,IAAA,GAAA,gBAAA,EAAA,yFC/CvI;AAAA;AAAA;AAAA;AAAA,GAOA,GAAI,IAAW,QAQX,GAAS,MAAO,SAAW,YAC3B,OACA,MAAO,SAAW,YAChB,OACA,GACF,EAAc,GAAO,6BAEzB,YAAwB,EAAO,CAC7B,AAAI,CAAC,GAEL,GAAM,aAAe,EAErB,EAAY,KAAK,YAAa,CAAK,EAEnC,EAAY,GAAG,uBAAwB,SAAU,EAAa,CAC5D,EAAM,aAAa,CAAW,CAClC,CAAG,EAED,EAAM,UAAU,SAAU,EAAU,EAAO,CACzC,EAAY,KAAK,gBAAiB,EAAU,CAAK,CACrD,EAAK,CAAE,QAAS,EAAI,CAAE,EAEpB,EAAM,gBAAgB,SAAU,EAAQ,EAAO,CAC7C,EAAY,KAAK,cAAe,EAAQ,CAAK,CACjD,EAAK,CAAE,QAAS,EAAI,CAAE,EACtB,CAuDA,WAAuB,EAAK,EAAI,CAC9B,OAAO,KAAK,CAAG,EAAE,QAAQ,SAAU,EAAK,CAAE,MAAO,GAAG,EAAI,GAAM,CAAG,CAAI,CAAA,CACvE,CAEA,YAAmB,EAAK,CACtB,MAAO,KAAQ,MAAQ,MAAO,IAAQ,QACxC,CAEA,YAAoB,EAAK,CACvB,MAAO,IAAO,MAAO,GAAI,MAAS,UACpC,CAMA,YAAkB,EAAI,EAAK,CACzB,MAAO,WAAY,CACjB,MAAO,GAAG,CAAG,CACd,CACH,CAGA,GAAI,GAAS,SAAiB,EAAW,EAAS,CAChD,KAAK,QAAU,EAEf,KAAK,UAAY,OAAO,OAAO,IAAI,EAEnC,KAAK,WAAa,EAClB,GAAI,GAAW,EAAU,MAGzB,KAAK,MAAS,OAAO,IAAa,WAAa,EAAU,EAAG,IAAa,EAC3E,EAEI,GAAqB,CAAE,WAAY,CAAE,aAAc,EAAM,CAAA,EAE7D,GAAmB,WAAW,IAAM,UAAY,CAC9C,MAAO,CAAC,CAAC,KAAK,WAAW,UAC3B,EAEA,EAAO,UAAU,SAAW,SAAmB,EAAK,EAAQ,CAC1D,KAAK,UAAU,GAAO,CACxB,EAEA,EAAO,UAAU,YAAc,SAAsB,EAAK,CACxD,MAAO,MAAK,UAAU,EACxB,EAEA,EAAO,UAAU,SAAW,SAAmB,EAAK,CAClD,MAAO,MAAK,UAAU,EACxB,EAEA,EAAO,UAAU,SAAW,SAAmB,EAAK,CAClD,MAAO,KAAO,MAAK,SACrB,EAEA,EAAO,UAAU,OAAS,SAAiB,EAAW,CACpD,KAAK,WAAW,WAAa,EAAU,WACnC,EAAU,SACZ,MAAK,WAAW,QAAU,EAAU,SAElC,EAAU,WACZ,MAAK,WAAW,UAAY,EAAU,WAEpC,EAAU,SACZ,MAAK,WAAW,QAAU,EAAU,QAExC,EAEA,EAAO,UAAU,aAAe,SAAuB,EAAI,CACzD,EAAa,KAAK,UAAW,CAAE,CACjC,EAEA,EAAO,UAAU,cAAgB,SAAwB,EAAI,CAC3D,AAAI,KAAK,WAAW,SAClB,EAAa,KAAK,WAAW,QAAS,CAAE,CAE5C,EAEA,EAAO,UAAU,cAAgB,SAAwB,EAAI,CAC3D,AAAI,KAAK,WAAW,SAClB,EAAa,KAAK,WAAW,QAAS,CAAE,CAE5C,EAEA,EAAO,UAAU,gBAAkB,SAA0B,EAAI,CAC/D,AAAI,KAAK,WAAW,WAClB,EAAa,KAAK,WAAW,UAAW,CAAE,CAE9C,EAEA,OAAO,iBAAkB,EAAO,UAAW,EAAkB,EAE7D,GAAI,GAAmB,SAA2B,EAAe,CAE/D,KAAK,SAAS,CAAA,EAAI,EAAe,EAAK,CACxC,EAEA,EAAiB,UAAU,IAAM,SAAc,EAAM,CACnD,MAAO,GAAK,OAAO,SAAU,EAAQ,EAAK,CACxC,MAAO,GAAO,SAAS,CAAG,CAC9B,EAAK,KAAK,IAAI,CACd,EAEA,EAAiB,UAAU,aAAe,SAAuB,EAAM,CACrE,GAAI,GAAS,KAAK,KAClB,MAAO,GAAK,OAAO,SAAU,EAAW,EAAK,CAC3C,SAAS,EAAO,SAAS,CAAG,EACrB,EAAa,GAAO,WAAa,EAAM,IAAM,GACrD,EAAE,EAAE,CACP,EAEA,EAAiB,UAAU,OAAS,SAAmB,EAAe,CACpE,GAAO,CAAA,EAAI,KAAK,KAAM,CAAa,CACrC,EAEA,EAAiB,UAAU,SAAW,SAAmB,EAAM,EAAW,EAAS,CAC/E,GAAIuB,GAAS,KACb,AAAK,IAAY,QAAS,GAAU,IAMtC,GAAI,GAAY,GAAI,GAAO,EAAW,CAAO,EAC7C,GAAI,EAAK,SAAW,EAClB,KAAK,KAAO,MACP,CACL,GAAI,GAAS,KAAK,IAAI,EAAK,MAAM,EAAG,EAAE,CAAC,EACvC,EAAO,SAAS,EAAK,EAAK,OAAS,GAAI,CAAS,CACjD,CAGD,AAAI,EAAU,SACZ,EAAa,EAAU,QAAS,SAAU,EAAgB,EAAK,CAC7DA,EAAO,SAAS,EAAK,OAAO,CAAG,EAAG,EAAgB,CAAO,CAC/D,CAAK,CAEL,EAEA,EAAiB,UAAU,WAAa,SAAqB,EAAM,CACjE,GAAI,GAAS,KAAK,IAAI,EAAK,MAAM,EAAG,EAAE,CAAC,EACnC,EAAM,EAAK,EAAK,OAAS,GACzB,EAAQ,EAAO,SAAS,CAAG,EAE/B,AAAI,CAAC,GAUD,CAAC,EAAM,SAIX,EAAO,YAAY,CAAG,CACxB,EAEA,EAAiB,UAAU,aAAe,SAAuB,EAAM,CACrE,GAAI,GAAS,KAAK,IAAI,EAAK,MAAM,EAAG,EAAE,CAAC,EACnC,EAAM,EAAK,EAAK,OAAS,GAE7B,MAAI,GACK,EAAO,SAAS,CAAG,EAGrB,EACT,EAEA,YAAiB,EAAM,EAAc,EAAW,CAS9C,GAHA,EAAa,OAAO,CAAS,EAGzB,EAAU,QACZ,OAAS,KAAO,GAAU,QAAS,CACjC,GAAI,CAAC,EAAa,SAAS,CAAG,EAO5B,OAEF,GACE,EAAK,OAAO,CAAG,EACf,EAAa,SAAS,CAAG,EACzB,EAAU,QAAQ,EAC1B,CACK,CAEL,CA+CA,GAAI,GAAQ,SAAgB,EAAS,CACnC,GAAIA,GAAS,KACb,AAAK,IAAY,QAAS,GAAU,CAAA,GAOpC,GAAI,GAAU,EAAQ,QAAS,AAAK,IAAY,QAAS,GAAU,IACnE,GAAI,GAAS,EAAQ,OAAQ,AAAK,IAAW,QAAS,GAAS,IAG/D,KAAK,YAAc,GACnB,KAAK,SAAW,OAAO,OAAO,IAAI,EAClC,KAAK,mBAAqB,GAC1B,KAAK,WAAa,OAAO,OAAO,IAAI,EACpC,KAAK,gBAAkB,OAAO,OAAO,IAAI,EACzC,KAAK,SAAW,GAAI,GAAiB,CAAO,EAC5C,KAAK,qBAAuB,OAAO,OAAO,IAAI,EAC9C,KAAK,aAAe,GACpB,KAAK,uBAAyB,OAAO,OAAO,IAAI,EAGhD,GAAI,GAAQ,KACR,EAAM,KACN,EAAW,EAAI,SACf,EAAS,EAAI,OACjB,KAAK,SAAW,SAAwB,EAAM,EAAS,CACrD,MAAO,GAAS,KAAK,EAAO,EAAM,CAAO,CAC7C,EACE,KAAK,OAAS,SAAsB,EAAM,EAAS,EAAS,CAC1D,MAAO,GAAO,KAAK,EAAO,EAAM,EAAS,CAAO,CACpD,EAGE,KAAK,OAAS,EAEd,GAAI,GAAQ,KAAK,SAAS,KAAK,MAK/B,GAAc,KAAM,EAAO,CAAA,EAAI,KAAK,SAAS,IAAI,EAIjD,GAAgB,KAAM,CAAK,EAG3B,EAAQ,QAAQ,SAAU,EAAQ,CAAE,MAAO,GAAOA,CAAM,CAAE,CAAE,EAE5D,GAAI,GAAc,EAAQ,WAAa,OAAY,EAAQ,SAAqC,GAChG,AAAI,GACF,GAAc,IAAI,CAEtB,EAEI,GAAuB,CAAE,MAAO,CAAE,aAAc,EAAM,CAAA,EAE1D,EAAM,UAAU,QAAU,SAAkB,EAAK,EAAW,CAC1D,EAAI,QAAQ,GAAa,GAAU,IAAI,EACvC,EAAI,OAAO,iBAAiB,OAAS,IACvC,EAEA,GAAqB,MAAM,IAAM,UAAY,CAC3C,MAAO,MAAK,OAAO,IACrB,EAEA,GAAqB,MAAM,IAAM,SAAU,EAAG,CAI9C,EAEA,EAAM,UAAU,OAAS,SAAiB,EAAO,EAAU,EAAU,CACjE,GAAIA,GAAS,KAGX,EAAM,GAAiB,EAAO,EAAU,CAAQ,EAC9C,EAAO,EAAI,KACX,EAAU,EAAI,QAGhB,EAAW,CAAE,KAAM,EAAM,QAAS,CAAO,EACzC,EAAQ,KAAK,WAAW,GAC5B,AAAI,CAAC,GAML,MAAK,YAAY,UAAY,CAC3B,EAAM,QAAQ,SAAyB,EAAS,CAC9C,EAAQ,CAAO,CACrB,CAAK,CACL,CAAG,EAED,KAAK,aACF,MAAO,EACP,QAAQ,SAAU,EAAK,CAAE,MAAO,GAAI,EAAUA,EAAO,KAAK,CAAE,CAAE,EAWnE,EAEA,EAAM,UAAU,SAAW,SAAmB,EAAO,EAAU,CAC3D,GAAIA,GAAS,KAGX,EAAM,GAAiB,EAAO,CAAQ,EACpC,EAAO,EAAI,KACX,EAAU,EAAI,QAEhB,EAAS,CAAE,KAAM,EAAM,QAAS,CAAO,EACvC,EAAQ,KAAK,SAAS,GAC1B,GAAI,EAAC,EAOL,IAAI,CACF,KAAK,mBACF,MAAO,EACP,OAAO,SAAU,EAAK,CAAE,MAAO,GAAI,MAAO,CAAE,EAC5C,QAAQ,SAAU,EAAK,CAAE,MAAO,GAAI,OAAO,EAAQA,EAAO,KAAK,CAAE,CAAE,CACvE,MAAC,CAKD,CAED,GAAI,GAAS,EAAM,OAAS,EACxB,QAAQ,IAAI,EAAM,IAAI,SAAU,EAAS,CAAE,MAAO,GAAQ,CAAO,CAAE,CAAE,CAAC,EACtE,EAAM,GAAG,CAAO,EAEpB,MAAO,IAAI,SAAQ,SAAU,EAAS,EAAQ,CAC5C,EAAO,KAAK,SAAU,EAAK,CACzB,GAAI,CACFA,EAAO,mBACJ,OAAO,SAAU,EAAK,CAAE,MAAO,GAAI,KAAM,CAAE,EAC3C,QAAQ,SAAU,EAAK,CAAE,MAAO,GAAI,MAAM,EAAQA,EAAO,KAAK,CAAE,CAAE,CACtE,MAAC,CAKD,CACD,EAAQ,CAAG,CACZ,EAAE,SAAU,EAAO,CAClB,GAAI,CACFA,EAAO,mBACJ,OAAO,SAAU,EAAK,CAAE,MAAO,GAAI,KAAM,CAAE,EAC3C,QAAQ,SAAU,EAAK,CAAE,MAAO,GAAI,MAAM,EAAQA,EAAO,MAAO,CAAK,CAAI,CAAA,CAC7E,MAAC,CAKD,CACD,EAAO,CAAK,CAClB,CAAK,CACL,CAAG,EACH,EAEA,EAAM,UAAU,UAAY,SAAoB,EAAI,EAAS,CAC3D,MAAO,IAAiB,EAAI,KAAK,aAAc,CAAO,CACxD,EAEA,EAAM,UAAU,gBAAkB,SAA0B,EAAI,EAAS,CACvE,GAAI,GAAO,MAAO,IAAO,WAAa,CAAE,OAAQ,CAAI,EAAG,EACvD,MAAO,IAAiB,EAAM,KAAK,mBAAoB,CAAO,CAChE,EAEA,EAAM,UAAU,MAAQ,SAAkB,EAAQ,EAAI,EAAS,CAC3D,GAAIA,GAAS,KAKf,MAAO,IAAM,UAAY,CAAE,MAAO,GAAOA,EAAO,MAAOA,EAAO,OAAO,CAAE,EAAI,EAAI,OAAO,OAAO,CAAA,EAAI,CAAO,CAAC,CAC3G,EAEA,EAAM,UAAU,aAAe,SAAuB,EAAO,CACzD,GAAIA,GAAS,KAEf,KAAK,YAAY,UAAY,CAC3BA,EAAO,OAAO,KAAO,CACzB,CAAG,CACH,EAEA,EAAM,UAAU,eAAiB,SAAyB,EAAM,EAAW,EAAS,CAChF,AAAK,IAAY,QAAS,GAAU,CAAA,GAElC,MAAO,IAAS,UAAY,GAAO,CAAC,CAAI,GAO5C,KAAK,SAAS,SAAS,EAAM,CAAS,EACtC,GAAc,KAAM,KAAK,MAAO,EAAM,KAAK,SAAS,IAAI,CAAI,EAAG,EAAQ,aAAa,EAEpF,GAAgB,KAAM,KAAK,KAAK,CAClC,EAEA,EAAM,UAAU,iBAAmB,SAA2B,EAAM,CAChE,GAAIA,GAAS,KAEf,AAAI,MAAO,IAAS,UAAY,GAAO,CAAC,CAAI,GAM5C,KAAK,SAAS,WAAW,CAAI,EAC7B,KAAK,YAAY,UAAY,CAC3B,GAAI,GAAc,GAAeA,EAAO,MAAO,EAAK,MAAM,EAAG,EAAE,CAAC,EAChE,MAAO,GAAY,EAAK,EAAK,OAAS,GAC1C,CAAG,EACD,GAAW,IAAI,CACjB,EAEA,EAAM,UAAU,UAAY,SAAoB,EAAM,CACpD,MAAI,OAAO,IAAS,UAAY,GAAO,CAAC,CAAI,GAMrC,KAAK,SAAS,aAAa,CAAI,CACxC,EAEA,EAAM,UAAU,UAAY,SAAoB,EAAY,CAC1D,KAAK,SAAS,OAAO,CAAU,EAC/B,GAAW,KAAM,EAAI,CACvB,EAEA,EAAM,UAAU,YAAc,SAAsB,EAAI,CACtD,GAAI,GAAa,KAAK,YACtB,KAAK,YAAc,GACnB,IACA,KAAK,YAAc,CACrB,EAEA,OAAO,iBAAkB,EAAM,UAAW,EAAoB,EAE9D,YAA2B,EAAI,EAAM,EAAS,CAC5C,MAAI,GAAK,QAAQ,CAAE,EAAI,GACrB,IAAW,EAAQ,QACf,EAAK,QAAQ,CAAE,EACf,EAAK,KAAK,CAAE,GAEX,UAAY,CACjB,GAAI,GAAI,EAAK,QAAQ,CAAE,EACvB,AAAI,EAAI,IACN,EAAK,OAAO,EAAG,CAAC,CAEnB,CACH,CAEA,YAAqB,EAAO,EAAK,CAC/B,EAAM,SAAW,OAAO,OAAO,IAAI,EACnC,EAAM,WAAa,OAAO,OAAO,IAAI,EACrC,EAAM,gBAAkB,OAAO,OAAO,IAAI,EAC1C,EAAM,qBAAuB,OAAO,OAAO,IAAI,EAC/C,GAAI,GAAQ,EAAM,MAElB,GAAc,EAAO,EAAO,CAAE,EAAE,EAAM,SAAS,KAAM,EAAI,EAEzD,GAAgB,EAAO,EAAO,CAAG,CACnC,CAEA,YAA0B,EAAO,EAAO,EAAK,CAC3C,GAAI,GAAW,EAAM,OAGrB,EAAM,QAAU,GAEhB,EAAM,uBAAyB,OAAO,OAAO,IAAI,EACjD,GAAI,GAAiB,EAAM,gBACvB,EAAc,CAAA,EAClB,EAAa,EAAgB,SAAU,EAAI,EAAK,CAI9C,EAAY,GAAO,GAAQ,EAAI,CAAK,EACpC,OAAO,eAAe,EAAM,QAAS,EAAK,CAGxC,IAAK,UAAY,CAAE,MAAO,GAAY,GAAM,CAAG,EAC/C,WAAY,EAClB,CAAK,CACL,CAAG,EAED,EAAM,OAAS,GAAS,CACtB,KAAM,CACV,CAAG,EAGG,EAAM,QACR,GAAiB,CAAK,EAGpB,GACE,GAGF,EAAM,YAAY,UAAY,CAC5B,EAAS,KAAO,IACxB,CAAO,CAGP,CAEA,YAAwB,EAAO,EAAW,EAAM,EAAQ,EAAK,CAC3D,GAAI,GAAS,CAAC,EAAK,OACf,EAAY,EAAM,SAAS,aAAa,CAAI,EAWhD,GARI,EAAO,YACL,GAAM,qBAAqB,GAG/B,EAAM,qBAAqB,GAAa,GAItC,CAAC,GAAU,CAAC,EAAK,CACnB,GAAI,GAAc,GAAe,EAAW,EAAK,MAAM,EAAG,EAAE,CAAC,EACzD,EAAa,EAAK,EAAK,OAAS,GACpC,EAAM,YAAY,UAAY,CAQ5B,EAAY,GAAc,EAAO,KACvC,CAAK,CACF,CAED,GAAI,GAAQ,EAAO,QAAU,GAAiB,EAAO,EAAW,CAAI,EAEpE,EAAO,gBAAgB,SAAU,EAAU,EAAK,CAC9C,GAAI,GAAiB,EAAY,EACjC,GAAiB,EAAO,EAAgB,EAAU,CAAK,CAC3D,CAAG,EAED,EAAO,cAAc,SAAU,EAAQ,EAAK,CAC1C,GAAI,GAAO,EAAO,KAAO,EAAM,EAAY,EACvC,EAAU,EAAO,SAAW,EAChC,GAAe,EAAO,EAAM,EAAS,CAAK,CAC9C,CAAG,EAED,EAAO,cAAc,SAAU,EAAQ,EAAK,CAC1C,GAAI,GAAiB,EAAY,EACjC,GAAe,EAAO,EAAgB,EAAQ,CAAK,CACvD,CAAG,EAED,EAAO,aAAa,SAAU,EAAO,EAAK,CACxC,GAAc,EAAO,EAAW,EAAK,OAAO,CAAG,EAAG,EAAO,CAAG,CAChE,CAAG,CACH,CAMA,YAA2B,EAAO,EAAW,EAAM,CACjD,GAAI,GAAc,IAAc,GAE5B,EAAQ,CACV,SAAU,EAAc,EAAM,SAAW,SAAU,EAAO,EAAU,EAAU,CAC5E,GAAI,GAAO,GAAiB,EAAO,EAAU,CAAQ,EACjD,EAAU,EAAK,QACf,EAAU,EAAK,QACf,EAAO,EAAK,KAEhB,MAAI,EAAC,GAAW,CAAC,EAAQ,OACvB,GAAO,EAAY,GAOd,EAAM,SAAS,EAAM,CAAO,CACpC,EAED,OAAQ,EAAc,EAAM,OAAS,SAAU,EAAO,EAAU,EAAU,CACxE,GAAI,GAAO,GAAiB,EAAO,EAAU,CAAQ,EACjD,EAAU,EAAK,QACf,EAAU,EAAK,QACf,EAAO,EAAK,KAEhB,AAAI,EAAC,GAAW,CAAC,EAAQ,OACvB,GAAO,EAAY,GAOrB,EAAM,OAAO,EAAM,EAAS,CAAO,CACpC,CACL,EAIE,cAAO,iBAAiB,EAAO,CAC7B,QAAS,CACP,IAAK,EACD,UAAY,CAAE,MAAO,GAAM,OAAU,EACrC,UAAY,CAAE,MAAO,IAAiB,EAAO,CAAS,CAAI,CAC/D,EACD,MAAO,CACL,IAAK,UAAY,CAAE,MAAO,IAAe,EAAM,MAAO,CAAI,CAAI,CAC/D,CACL,CAAG,EAEM,CACT,CAEA,YAA2B,EAAO,EAAW,CAC3C,GAAI,CAAC,EAAM,uBAAuB,GAAY,CAC5C,GAAI,GAAe,CAAA,EACf,EAAW,EAAU,OACzB,OAAO,KAAK,EAAM,OAAO,EAAE,QAAQ,SAAU,EAAM,CAEjD,GAAI,EAAK,MAAM,EAAG,CAAQ,IAAM,EAGhC,IAAI,GAAY,EAAK,MAAM,CAAQ,EAKnC,OAAO,eAAe,EAAc,EAAW,CAC7C,IAAK,UAAY,CAAE,MAAO,GAAM,QAAQ,EAAQ,EAChD,WAAY,EACpB,CAAO,EACP,CAAK,EACD,EAAM,uBAAuB,GAAa,CAC3C,CAED,MAAO,GAAM,uBAAuB,EACtC,CAEA,YAA2B,EAAO,EAAM,EAAS,EAAO,CACtD,GAAI,GAAQ,EAAM,WAAW,IAAU,GAAM,WAAW,GAAQ,CAAA,GAChE,EAAM,KAAK,SAAiC,EAAS,CACnD,EAAQ,KAAK,EAAO,EAAM,MAAO,CAAO,CAC5C,CAAG,CACH,CAEA,YAAyB,EAAO,EAAM,EAAS,EAAO,CACpD,GAAI,GAAQ,EAAM,SAAS,IAAU,GAAM,SAAS,GAAQ,CAAA,GAC5D,EAAM,KAAK,SAA+B,EAAS,CACjD,GAAI,GAAM,EAAQ,KAAK,EAAO,CAC5B,SAAU,EAAM,SAChB,OAAQ,EAAM,OACd,QAAS,EAAM,QACf,MAAO,EAAM,MACb,YAAa,EAAM,QACnB,UAAW,EAAM,KAClB,EAAE,CAAO,EAIV,MAHK,IAAU,CAAG,GAChB,GAAM,QAAQ,QAAQ,CAAG,GAEvB,EAAM,aACD,EAAI,MAAM,SAAU,EAAK,CAC9B,QAAM,aAAa,KAAK,aAAc,CAAG,EACnC,CACd,CAAO,EAEM,CAEb,CAAG,CACH,CAEA,YAAyB,EAAO,EAAM,EAAW,EAAO,CACtD,AAAI,EAAM,gBAAgB,IAM1B,GAAM,gBAAgB,GAAQ,SAAwB,EAAO,CAC3D,MAAO,GACL,EAAM,MACN,EAAM,QACN,EAAM,MACN,EAAM,OACP,CACL,EACA,CAEA,YAA2B,EAAO,CAChC,GAAM,UAAY,CAAE,MAAO,GAAM,OAAO,IAAK,EAAI,UAAY,CAI5D,EAAE,CAAE,KAAM,GAAM,MAAO,MAAQ,CAAA,CAClC,CAEA,YAAyB,EAAO,EAAM,CACpC,MAAO,GAAK,OAAO,SAAU,EAAO,EAAK,CAAE,MAAO,GAAM,EAAO,EAAE,CAAK,CACxE,CAEA,YAA2B,EAAM,EAAS,EAAS,CACjD,MAAI,IAAS,CAAI,GAAK,EAAK,MACzB,GAAU,EACV,EAAU,EACV,EAAO,EAAK,MAOP,CAAE,KAAM,EAAM,QAAS,EAAS,QAAS,CAAS,CAC3D,CAQA,GAAI,IAAW,GAAmB,SAAU,EAAW,EAAQ,CAC7D,GAAI,GAAM,CAAA,EAIV,UAAa,CAAM,EAAE,QAAQ,SAAU,EAAK,CAC1C,GAAI,GAAM,EAAI,IACV,EAAM,EAAI,IAEd,EAAI,GAAO,UAAwB,CACjC,GAAI,GAAQ,KAAK,OAAO,MACpB,EAAU,KAAK,OAAO,QAC1B,GAAI,EAAW,CACb,GAAI,GAAS,GAAqB,KAAK,OAAQ,WAAY,CAAS,EACpE,GAAI,CAAC,EACH,OAEF,EAAQ,EAAO,QAAQ,MACvB,EAAU,EAAO,QAAQ,OAC1B,CACD,MAAO,OAAO,IAAQ,WAClB,EAAI,KAAK,KAAM,EAAO,CAAO,EAC7B,EAAM,EAChB,EAEI,EAAI,GAAK,KAAO,EACpB,CAAG,EACM,CACT,CAAC,EA8HD,YAAuB,EAAK,CAC1B,MAAK,IAAW,CAAG,EAGZ,MAAM,QAAQ,CAAG,EACpB,EAAI,IAAI,SAAU,EAAK,CAAE,MAAQ,CAAE,IAAK,EAAK,IAAK,CAAK,EAAI,EAC3D,OAAO,KAAK,CAAG,EAAE,IAAI,SAAU,EAAK,CAAE,MAAQ,CAAE,IAAK,EAAK,IAAK,EAAI,EAAI,CAAI,CAAE,EAJxE,CAAE,CAKb,CAOA,YAAqB,EAAK,CACxB,MAAO,OAAM,QAAQ,CAAG,GAAK,GAAS,CAAG,CAC3C,CAOA,YAA6B,EAAI,CAC/B,MAAO,UAAU,EAAW,EAAK,CAC/B,MAAI,OAAO,IAAc,SACvB,GAAM,EACN,EAAY,IACH,EAAU,OAAO,EAAU,OAAS,CAAC,IAAM,KACpD,IAAa,KAER,EAAG,EAAW,CAAG,CACzB,CACH,CASA,YAA+B,EAAO,EAAQ,EAAW,CACvD,GAAI,GAAS,EAAM,qBAAqB,GAIxC,MAAO,EACT,CC97BA,KAAK7D,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,EAAM6D,YAAAA,GAAarB,SAAAA,GAAU,uBAAsB,mBAAiB,EAClF,MAAO,CACH,gBAAiB,CAAE,KAAM,MAAc,EACvC,sBAAuB,CAAE,KAAM,MAAc,EAC7C,eAAgB,CAAE,KAAM,MAAc,CAC1C,EACA,SAAU,CACN,GAAG,GAAS,CACR,KAAM,MAAA,CACT,EACD,gBAAiB,CACb,MAAI,QAAK,QAAQ,MAAW,KAAK,QAAQ,KAAQ,OAAS,EAI9D,EACA,+BAAyC,CACrC,MAAO,MAAK,KAAK,gBAAgB,SAAS,6BAA6B,GAAK,KAAK,QAAQ,WAC7F,EACA,6BAAuC,CAC5B,MAAA,MAAK,KAAK,gBAAgB,SAAS,6BAA6B,GAAK,KAAK,QAAQ,aAAe,KAAK,QAAQ,WACzH,CACJ,EACA,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CACH,GAAInC,EAAY,EAChB,0BACA,QAAS,CAAC,EACV,UAAW,YACX,aAAc,GACd,gBAAiB,EAAA,CAEzB,EACA,SAAU,CACN,KAAK,QAAU,KAAK,gBACpB,KAAK,uBAAuB,CAChC,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,gBACpB,KAAK,uBAAuB,CAChC,CACJ,EACA,aAAc,CAOV,KAAM,GAAwC,CAC1C,+BAPiC,AAAC,GAC3B,CAAC,KAAK,iBAAmB,EAOhC,yBAL0B,AAAC,GACpB,CAAC,KAAK,QAAQ,aAAe,CAIV,EAKvB,MAHkB,CACrB,QAAS,EAAkB,UAAW,GAAuB,YAAY,YAAa,CAAgB,CAAA,CAG9G,EACA,QAAS,CACL,wBAAyB,CACjB,AAAA,KAAK,QAAQ,aAAe,KAAK,QAAQ,aAAe,KAAK,sBAAsB,SACnF,KAAK,gBAAkB,GAEvB,KAAK,gBAAkB,EAE/B,EACA,uBAAwB,CACpB,AAAI,KAAK,gBACA,KAAA,QAAQ,YAAc,KAAK,sBAAsB,SAEtD,MAAK,QAAQ,aAAe,MAAK,QAAQ,YAAc,IACvD,KAAK,QAAQ,cAAgB,MAAK,QAAQ,aAAe,IACzD,KAAK,QAAQ,eAAiB,MAAK,QAAQ,cAAgB,IAC3D,KAAK,QAAQ,gBAAkB,MAAK,QAAQ,eAAiB,IAC7D,KAAK,QAAQ,cAAgB,MAAK,QAAQ,aAAe,IAEjE,CACJ,CACJ,CAAC,EAxMoBE,GAAA,CAAA,MAAM,6BACDC,GAAA,CAAA,MAAM,8CAYEC,GAAC,CAAe,IAAK,eAAA,MAAA,2BAK7BC,GAAA,CAAA,MAAM,8CAYEC,GAAC,CAAgB,IAAK,gBAAA,MAAA,2BAK9B,GAAA,CAAA,MAAM,8CAYE,GAAC,CAAe,IAAK,eAAA,MAAA,2BAM5B,GAAA,CAAA,MAAI,sDAuBT,GAAA,CAAA,IAAK,GACF,GAAA,CAAA,MAAM,6BACD,GAAA,CAAA,MAAM,8CAYE,GAAC,CAAmB,IAAK,mBAAA,MAAA,6MAnG3D,MAAAO,OAAcC,EAAC,KAAA,CAAAC,EACK,EAC4E,CAAA,MAAA,kCAAA,EAAA,CAAA,MAAxFC,EAAwF,IAAA,CAAnDD,EAAA,EAAA,CAAA,WAAA,EAAA,gBAAG,sBAAQ,EAAqB,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,gBAAA,GAAE,SAAM,EAAQ,sBAAA,MAAA,QACjB,EAAA,KAAA,EAAA,CAAA,aAAA,UAAA,CAAA,EAAAE,EAAA,OAAA,KAAAG,EAAA,EAAA,GAAA,6CAAA,CAAA,EAAA,CAAA,OAGhE,CAAA,EAAA,EAAA,gBAAAP,KA2DGmB,EAAA,EAAA,CAAA,IAAA,GAAA,CAAA,QAzDPhB,EAyDO,IAAA,CAAAC,EAxDH,OAgBMf,GAAA,CAAAe,EAfF,MAaOd,GAbP,CAWMc,EAAA,OAAAC,GAAA,CAAAH,EATK,EAAc,CACjB,GAAA,eAGmE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,aAAA,UAAA,EAAA,GAAA,QAAA,aAAA,MAF9D,CAAA,CAAA,EAAA,KAAA,yEACL,EAA6C,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,QAAA,aAAA,OAAA,GAI5C,eAAI,CAAA,KAAA,EAAA,EACJ,OAAM,iBAAE,GAAK,QAAA,aAAA,OAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,aAAyH,OAAzH,CAAA,EAAAF,EAAA,QAAAb,GAAAgB,EAAA,EAAA,GAAA,yCAAA,CAAA,EAAA,MAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAA0B,MAAA,EAAA,GAAA,QAAA,aAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,yCAAA,CAAA,gDAE3E,CAAA,EAAAE,EACI,MAaOZ,GAbP,CAWMY,EAAA,OAAAI,GAAA,CAAAN,EATK,EAAe,CAClB,GAAA,gBAGmE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,cAAA,UAAA,EAAA,GAAA,QAAA,cAAA,MAF9D,CAAA,CAAA,EAAA,KAAA,0CAKJ,sBAAI,EAAA,IAAA,GAAA,GAAE,AAAW,GAAA,EAAA,QAAa,cAAO,GACrC,OAAM,iBAAE,GAAK,QAAA,cAAA,OAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,aAA2H,OAA3H,CAAA,EAAAF,EAAA,QAAAX,GAAAc,EAAA,EAAA,GAAA,0CAAA,CAAA,EAAA,MAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAA2B,MAAA,EAAA,GAAA,QAAA,cAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,0CAAA,CAAA,gDAE5E,CAAA,EAAAE,EACI,MAaO,GAbP,CAWMA,EAAA,OAAA,GAAA,CAAAF,EATK,EAAc,CACjB,GAAA,eAGmE,MAAAI,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,aAAA,UAAA,EAAA,GAAA,QAAA,aAAA,MAF9D,CAAA,CAAA,EAAA,KAAA,yCAKJ,sBAAI,EAAA,IAAA,GAAA,GAAE,AAAW,GAAA,EAAA,QAAa,aAAM,GACpC,OAAM,iBAAE,GAAK,QAAA,aAAA,OAAA,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,aAAwH,OAAxH,CAAA,EAAAF,EAAA,QAAA,GAAAG,EAAA,EAAA,GAAA,yCAAA,CAAA,EAAA,KAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAA0B,MAAA,EAAA,GAAA,QAAA,aAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,yCAAA,CAAA,gDAG3E,CAAA,EAAAE,EACI,OAAyF,GAAzF,CACAA,EAA0H,QAAA,GAAAG,EAAA,EAAA,GAAA,2CAAA,CAAA,EAAA,CAAA,EAAAL,EAA7G,EAAgB,CAAC,GAAA,iBAAA,MAAA,6CAAiD,sBAAY,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,eAAA,GAAG,OAAM,GAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,wCAMpHkB,EAKU,GAAA,EAAA,EAAAlB,EAJU,EAC+E,CAAA,MAAA,yCAAA,EAAA,CAAA,MAA3FC,EAA2F,IAAA,CAA7DD,EAAA,EAAA,CAAA,WAAA,EAAA,QAAA,gBAAiB,sBAAc,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,gBAAA,GAAE,MAAA,SAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACI,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,OAAA,KAAAG,EAAA,EAAA,GAAA,4CAAA,CAAA,EAAA,CAAA,OAIhE,CAAA,EAAX,EAAA,QAAA,UAAA,OAAAP,GAAA,EAMcY,EAAA,MALI,GAAC,CAAAV,EACK,EACsG,CAAA,MAAA,yCAAA,EAAA,CAAA,MAAlHC,EAAkH,IAAA,CAApFD,EAAA,EAAA,CAAA,WAAA,EAAA,QAAA,YAAc,sBAAU,EAAc,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,YAAA,GAAE,SAAM,EAAQ,eAAE,MAAA,SAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACtF,EAAA,KAAA,EAAA,CAAA,aAAA,UAAA,CAAA,EAAoH0B,EAAA5B,GAAA,EAAAY,EAAA,OAAA,KAAA,CAAA2B,EAAAhC,EAAA,EAAA,GAAA,wCAAA,CAAA,EAAA,CAAA,yHAGhH,CAAA,EAAA,EAAA,QAAA,YAAAP,GAoBG,EAAAmB,EAAA,EAAA,CAAA,IAAA,GAAA,CAAA,QAlBPhB,EAkBO,IAAA,CAAAC,EAjBH,OAgBM,GAAA,CAAAA,EAfF,MAaO,GAbP,CAWMA,EAAA,OAAA,GAAA,CAAAF,EATK,EAAkB,CACrB,GAAA,mBAAA,MAAAI,EAG4D,CAAW,oBAAA,CAAA,YAAA,EAAA,GAAA,QAAA,iBAAA,UAAA,EAAA,GAAA,QAAA,iBAAA,MAFlE,CAAA,CAAA,EAAA,KAAA,6CAKJ,sBAAI,EAAA,KAAA,GAAA,IAAE,GAAW,EAAuB,QAAA,iBAAA,GACxC,OAAM,mBAAE,GAAK,QAAA,iBAAA,OAAA,GAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EAElB,EAAA,KAAA,EAAA,CAAA,aAAgI,OAAhI,CAAA,EAAAF,EAAA,QAAA,GAAAG,EAAA,EAAA,GAAA,6CAAA,CAAA,EAAA,KAAA,CAAA,CAEJ,CAAA,EAAAL,EAA4B,EAAQ,CAAE,MAAO,SAA8B,MAAA,EAAA,GAAA,QAAA,iBAAA,0BAAA,CAAA,UAAA,EAAA,GAAA,6CAAA,CAAA,kDAGtB,CAAA,EAAA,EAAA,8BAAAF,KAAAmB,EAAA,EAAA,CAApD,IAAK,EAAA,MAAA,uCACC,EAAA,CAAA,MACPhB,EAAuF,IAAA,CAAzDD,EAAA,EAAA,CAAA,WAAA,EAAA,QAAA,YAAa,sBAAc,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,QAAA,YAAA,GAAE,MAAA,SAAA,SAAA,EAAA,KAAA,GAAA,IAAA,AAAA,GAAA,EAAA,MAAA,SAAA,EACI,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAE,EAAA,OAAA,KAAAG,EAAA,EAAA,GAAA,wCAAA,CAAA,EAAA,CAAA,OAG/C,CAAA,GAAAa,EAAA,GAAA,EAAA,EAAA,EAAA,4BAAApB,KAAAmB,EAAA,EAAA,CAA8B,IAAA,EAA2B,gBAAgB,EAAA,QAAA,eAAA,EAAA,qPC9CjH,KAAKtC,IAAa,EAAa,CAC3B,WAAY,CAAE+D,QAAAA,EAAQ,EACtB,MAAO,CACH,gBAAiB,CAAE,KAAM,MAAc,EACvC,mBAAoB,CAAE,KAAM,KAAa,EACzC,UAAW,CAAE,KAAM,MAAO,CAC9B,EACA,MAAO,CAAC,eAAgB,WAAW,EACnC,MAAO,CACI,MAAA,CACH,qBACA,mBAAoB,KACpB,iBAAkB,KAClB,QAAS,CAAC,EACV,gBAAiB,CAAC,EAClB,eAAgB,CAAC,EACjB,eAAgB,CAAC,EACjB,YAAa,CAAC,CAAA,CAEtB,EACA,OAAQ,CAEJ,MAAO,CAAA,MADOxD,GACC,CACnB,EACA,SAAU,CACN,KAAK,QAAU,KAAK,gBACpB,KAAK,kBAAkB,CAC3B,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,gBACpB,KAAK,kBAAkB,CAC3B,EACA,WAAY,CACJ,AAAA,KAAK,YAAc,GACnB,KAAK,oBAAoB,CAEjC,CACJ,EAEA,QAAS,CACL,KAAM,oBAAoB,CAClB,AAAA,KAAK,QAAQ,IACb,KAAK,MACA,IAAI,gEAAmF,KAAK,QAAQ,KAAK,EACzG,KAAK,AAAC,GAAkC,KAAK,eAAiB,EAAS,IAAK,EAC5E,MAAM,AAAC,GAAU,KAAK,MAAM,SAAS,CAAE,MAAO,KAAK,GAAG,oBAAoB,EAAG,IAAK,CAAO,CAAA,CAAC,CAEvG,EACA,KAAM,sBAAsB,CACnB,KAAA,MACA,IAAI,mDAAsE,EAC1E,KAAK,AAAC,GAAiC,CAChC,AAAA,EAAS,KAAK,OAAS,EACvB,MAAK,mBAAqB,CAAC,GAAG,EAAS,IAAI,EAC3C,KAAK,mBAAmB,OAAO,AAAC,GAAc,EAAS,OAAS,KAAK,QAAQ,WAAW,cAAgB,KAAK,yBAAyB,EAAS,QAAQ,EAAI,EAAG,GAE9J,KAAK,MAAM,QAAQ,CAAE,MAAO,KAAK,GAAG,kCAAkC,EAAG,IAAK,KAAK,GAAG,2CAA2C,CAAG,CAAA,CACxI,CACH,EACA,MAAM,AAAC,GAAU,KAAK,MAAM,SAAS,CAAE,MAAO,KAAK,GAAG,oBAAoB,EAAG,IAAK,CAAO,CAAA,CAAC,CACnG,EACA,KAAM,0BAAyB,EAAU,CAChC,KAAA,MACA,IAAI,oDAAuE,eAAsB,EACjG,KAAK,AAAC,GAAiC,CAChC,AAAA,EAAS,KAAK,OAAS,EACvB,KAAK,gBAAkB,KAAK,kCAAkC,EAAS,KAAM,KAAK,cAAc,EAEhG,KAAK,MAAM,QAAQ,CAAE,MAAO,KAAK,GAAG,kCAAkC,EAAG,IAAK,KAAK,GAAG,2CAA2C,CAAG,CAAA,CACxI,CACH,EACA,MAAM,AAAC,GAAU,KAAK,MAAM,SAAS,CAAE,MAAO,KAAK,GAAG,oBAAoB,EAAG,IAAK,CAAO,CAAA,CAAC,CACnG,EACA,kCAAkC,EAAsB,EAAqB,CACzE,GAAI,GAAmB,EAAoB,IAAI,AAAC,GACrC,EAAc,OACxB,EAEM,MADa,GAAqB,OAAO,AAAC,GAAmB,CAAC,EAAiB,SAAS,EAAe,OAAO,CAAC,CAE1H,EACA,gBAAgB,EAAc,EAAY,EAAY,CAClD,KAAM,GAAQ,EAAW,UAAU,AAAC,GAAU,EAAM,UAAY,CAAY,EAC5E,GAAI,GAAS,EAAG,CACZ,KAAM,GAAc,EAAW,GACpB,EAAA,OAAO,EAAO,CAAC,EAC1B,EAAW,QAAQ,CAAW,CAClC,CACJ,EACA,uBAAuB,EAAO,CAC1B,AAAI,EAAM,SAAW,CAAC,EAAM,MACxB,GAAM,QAAU,GACX,KAAA,eAAiB,KAAK,eAAe,OAAO,AAAC,GAAiB,EAAM,UAAY,EAAa,OAAO,GAEzG,GAAM,QAAU,GAChB,EAAM,MAAQ,GACT,KAAA,YAAY,KAAK,CAAK,GAE/B,KAAK,gBAAgB,EAAM,QAAS,KAAK,gBAAiB,KAAK,cAAc,EACxE,KAAA,MAAM,YAAa,KAAK,WAAW,CAC5C,EACA,4BAA4B,EAAO,CAC/B,AAAI,EAAM,OAAS,CAAC,EAAM,QACtB,OAAO,GAAM,MACR,KAAA,YAAc,KAAK,YAAY,OAAO,AAAC,GAAiB,EAAM,UAAY,EAAa,OAAO,GAEnG,GAAM,QAAU,GACX,KAAA,eAAe,KAAK,CAAK,GAElC,KAAK,gBAAgB,EAAM,QAAS,KAAK,eAAgB,KAAK,eAAe,EACxE,KAAA,MAAM,eAAgB,KAAK,cAAc,CAClD,CACJ,CACJ,CAAC,EAhLYC,GAAA,CAAA,MAAM,iFAmBgB,GAAA,CAAA,SAAA,MAOtB,MAAM,iEAoBgB,GAAA,CAAA,SAAA,oGA9C3BW,GAyBM,EAAAY,EAAA,MAAAvB,GAAA,CAAAe,EApBQ,MAJD,GAAA,CAAAF,EACW,EAC0C,CAAA,MAAA,kCAAA,EAAA,CAAA,MAAAC,EAAA,IAAA,iEAG9D,CAAA,EACUD,EAAA,EAAA,CACL,MAAA,4BACA,UAAS,EAAe,kBAAA,MAAA,QACxB,QAAQ,EAAI,gBACZ,OAAA,GACD,kBAAkB,EAAA,GAAA,eAAA,EAClB,YAAA,OACC,gBAAc,WACd,eAAkB,kBAAI,aAAA,mBAAA,EAAA,GAAA,yBAAA,CAEZ,EAAA,CAAA,OACPC,EAIM,AAAA,GAAA,CAAAC,EAJK,MAAc,CAAE,MAAK,eAAA,QAAA,AAAA,GAAA,EAAA,uBAAA,EAAA,MAAA,CAC5B,EAAA,CAAAA,EACI,MAAwC,GAAA,CAAAA,EAAA,OAAA,KAAAG,EAAA,EAAA,OAAA,IAAA,EAAA,CAAA,oGAM5D,CAAA,EAAAH,EAKc,MAJD,GAAA,CAAAF,EACW,EACyC,CAAA,MAAA,kCAAA,EAAA,CAAA,MAAAC,EAAA,IAAA,gEAG7D,CAAA,EACUD,EAAA,EAAA,CACL,MAAA,4BACA,UAAS,EAAc,kBAAA,MAAA,QACvB,QAAQ,EAAI,eACZ,OAAA,GACD,kBAAkB,EAAA,GAAA,eAAA,EAClB,YAAA,OACC,gBAAc,WACd,eAAkB,kBAAI,aAAA,mBAAA,EAAA,GAAA,2CAAA,CAEZ,EAAA,CAAA,MAAAC,EAAA,IAAA,wCACA,CAAA,EAAA,OACPA,EAIM,AAAA,GAAA,CAAAC,EAJK,MAAc,CAAE,MAAK,eAAA,QAAA,AAAA,GAAA,EAAA,4BAAA,EAAA,MAAA,CAC5B,EAAA,CAAAA,EACI,MAAwC,GAAA,CAAAA,EAAA,OAAA,KAAAG,EAAA,EAAA,OAAA,IAAA,EAAA,CAAA,sKCWpE,KAAK1B,IAAa,EAAa,CAC3B,WAAY,CAAEC,KAAAA,SAAMG,YAAQD,EAAW,QAAA6D,GAAA,SAAS9D,WAAUuC,EAAS,EACnE,MAAO,CACH,gBAAiB,CAAE,KAAM,MAAc,EACvC,0BAA2B,CAAE,KAAM,OAAe,CACtD,EACA,SAAU,CAAC,EACX,MAAO,CAAC,SAAS,EACjB,MAAO,CACI,MAAA,CAAA,kBACHwB,GACA,mBAAoBA,GAAkB,oBACtC,WAAYA,GAAkB,WAC9B,QAAS,CAAC,EACV,eAAgB,CAAC,CAAA,CAEzB,EACA,OAAQ,CAEJ,MAAO,CAAA,MADO1D,GACC,CACnB,EACA,SAAU,CACN,KAAK,QAAU,KAAK,gBACf,KAAA,QAAQ,MAAO,KAAK,uBAAuB,KAAK,QAAQ,KAAK,OAAO,CAC7E,EACA,MAAO,CACH,iBAAkB,CACd,KAAK,QAAU,KAAK,gBACf,KAAA,QAAQ,MAAO,KAAK,uBAAuB,KAAK,QAAQ,KAAK,OAAO,CAC7E,CACJ,EAEA,QAAS,CACL,uBAAuB,EAAO,CAC1B,GAAI,GAAS,CAAA,EAEb,OAAS,KAAQ,GAAO,CAChB,GAAA,GAAU,EAAO,EAAM,GAAM,QACjC,AAAK,GACD,GAAU,CAAA,EACH,EAAA,EAAM,GAAM,QAAU,EACrB,EAAA,OAAY,EAAM,GAAM,QAEpC,EAAQ,EAAM,GAAM,OAAS,EAAM,GAAM,MAC7C,CAEI,GAAA,GAAiB,GAAI,OAEzB,IAAK,IAAQ,GACM,EAAA,KAAK,EAAO,EAAK,EAGpC,KAAK,eAAiB,CAC1B,EACA,mBAAmB,EAAW,CAC1B,KAAK,8BAA8B,EACnC,KAAK,6BAA6B,CAAS,CAC/C,EACA,6BAA6B,EAAW,CACpC,OAAS,GAAI,EAAG,EAAI,KAAK,eAAe,OAAQ,IACnC,OAAA,GAAI,EAAG,EAAI,KAAK,QAAQ,KAAK,QAAQ,OAAQ,IAClD,AAAI,KAAK,eAAe,GAAG,QAAU,KAAK,QAAQ,KAAK,QAAQ,GAAG,QAAU,KAAK,QAAQ,KAAK,QAAQ,GAAG,OAAS,GAC9G,MAAK,QAAQ,KAAK,QAAQ,GAAG,OAAS,KAAK,eAAe,GAAG,GAI7E,EACA,+BAAgC,CAC5B,GAAI,GAA2B,EAC/B,OAAS,GAAI,EAAG,EAAI,KAAK,eAAe,OAAQ,IAC5C,GAAI,KAAK,eAAe,GAAG,WAAa,qBACpC,KACI,EAA2B,GAAG,CAC9B,KAAK,MAAM,SAAS,CAAE,MAAO,KAAK,GAAG,qBAAqB,EAAG,IAAK,KAAK,GAAG,sDAAsD,CAAG,CAAA,EACnI,MACJ,CAGZ,CACJ,CACJ,CAAC,2JA3IkBY,GAAyB,EAAAY,EAAAX,EAAA,KAAA,CAAA,EAAA,0BAAAD,KAAAmB,EAAA,EAAA,CAAE,IAAA,EAAgB,SAAM,OAAU,MAAA,SAAA,SAAA,0FAE1E,CAAA,GAAAC,EA2CO,GA3CD,EAAA,EAAAlB,EACe,EAKH,CAAA,MAAA,OAAA,EAAA,CAAA,OAJVC,EAIU,IAAA,CAAAD,EAHU,EACyC,CAAA,MAAA,kCAAA,EAAA,CAAA,MAAAC,EAAA,IAAA,kEAItD,CAAA,EAAA,QACUA,EAAQ,IAAI,CAAA,EAAA,QAAA,MA6BjB,GAAA,QAAA,KAAA,UAAA,EAAA,QAAA,KAAA,SAAAH,GAAA,EAAAmB,EAAA,EAAA,CA7BsE,IAAK,EAAiD,MAAA,+CAAmB,WAAO,GAAgB,MAAA,EAAA,eAAyB,iBAAW,QAAA,WAAA,kBAClNhB,EAES,IAAA,CAAAD,EAFK,EAAY,CAAE,MAAM,aAAgD,OAAQ,EAAE,GAAI,uCAAA,EAAA,SAAA,EACjF,EAAA,CAAA,KAAAC,EAAA,CAAA,CAAA,UAAA,6BAMN,EAAA,CAAA,QAAA,CAAA,EAAAD,EAJK,EAAM,CAAE,MAAM,OAAmD,OAAQ,EAAE,GAAI,0CAAA,EAAA,SAAA,EAC9E,EAAA,CAAA,KACPC,EAAyO,CAAA,CAAA,UAAA,CAAAD,EAAzN,EAAmB,CAAE,MAAK,oBAAsD,MAAAqB,EAAA,EAAA,kBAAA,MAAA,QAAA,EAAA,WAAA,EAAA,KAAG,sBAAS,AAAU,GAAA,EAAA,KAAA,EAAE,QAAc,EAAA,WAAY,eAAY,WAAQ,YAAY,QAAQ,YAAQ,OAAqB,SAAU,EAAI,mBAAA,SAAA,qFAOpO,EAAA,CAAA,QAAA,CAAA,EAAArB,EAJK,EAAW,CAAE,MAAM,YAA+C,OAAQ,EAAE,GAAI,sCAAA,EAAA,SAAA,EAC/E,EAAA,CAAA,KACPC,EAAyN,CAAA,CAAA,UAAA,CAAAD,EAAzM,EAAmB,CAAE,MAAK,oBAAA,MAAAqB,EAAkD,EAAS,kBAAA,MAAA,QAAA,EAAA,WAAA,EAAA,UAAG,sBAAS,AAAkB,GAAA,EAAA,UAAA,EAAE,QAAY,EAAA,mBAAQ,YAAY,QAAS,YAAM,QAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,mBAAA,WAAA,0EAOnL,EAAA,CAAA,QAAA,CAAA,EAAArB,EAJK,EAAU,CAAE,MAAM,WAA8C,OAAQ,EAAE,GAAI,qCAAA,EAAA,SAAA,EAC7E,EAAA,CAAA,KACPC,EAA0G,CAAA,CAAA,UAAA,CAAAD,EAA7F,EAAU,CAAA,GAAA,iCAA0B,sBAAY,AAAA,GAAA,EAAA,SAAA,EAAG,OAAM,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,mBAAA,UAAA,wDAOrE,EAAA,CAAA,QAAA,CAAA,EAAAA,EAJK,EAAS,CAAE,MAAM,UAA6C,OAAQ,EAAE,GAAI,oCAAA,EAAA,SAAA,EAC3E,EAAA,CAAA,KACPC,EAAuG,CAAA,CAAA,UAAA,CAAAD,EAA1F,EAAS,CAAA,GAAA,+BAAyB,sBAAY,AAAA,GAAA,EAAA,QAAA,EAAG,OAAM,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,mBAAA,SAAA,wDAOnE,EAAA,CAAA,QAAA,CAAA,EAAAA,EAJK,EAAW,CAAE,MAAM,YAA+C,OAAQ,EAAE,GAAI,sCAAA,EAAA,SAAA,EAC/E,EAAA,CAAA,KACPC,EAA6G,CAAA,CAAA,UAAA,CAAAD,EAAhG,EAAW,CAAA,GAAA,mCAA2B,sBAAY,AAAA,GAAA,EAAA,UAAA,EAAG,OAAM,GAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,mBAAA,WAAA,2FAIxEkB,EAAgB,GAAA,EAAA,EAA5B,CAAA,EAAA,QAAA,MAAA,EAAA,QAAA,KAEM,eADsGR,EAAA,MAAAvB,GAAA,CAAAa,EAAtF,EAAM,CAAE,SAAU,OAAA,SAAA,0ICgDpD,KAAK,IAAa,EAAa,CAC3B,WAAY,CAAA,QAAE6C,GAASC,SAAAA,GAAU,cAAY,gBAAc,YAAU,YAAU,gBAAc,6BAA2B,EACxH,MAAO,CACH,GAAI,CAAE,KAAM,OAAQ,SAAU,EAAM,EACpC,WAAY,CAAE,KAAM,MAAc,SAAU,EAAK,EACjD,cAAe,CAAE,KAAM,MAAc,SAAU,EAAK,EACpD,aAAc,CAAE,KAAM,MAAc,SAAU,EAAK,EACnD,sBAAuB,CAAE,KAAM,OAAe,SAAU,EAAK,EAC7D,YAAa,CAAE,KAAM,MAAc,SAAU,EAAK,EAClD,YAAa,CAAE,KAAM,MAAc,SAAU,EAAK,EAClD,eAAgB,CAAE,KAAM,MAAc,SAAU,EAAK,EACrD,mBAAoB,CAAE,KAAM,MAAc,SAAU,EAAK,EACzD,cAAe,CAAE,KAAM,MAAc,SAAU,EAAK,EACpD,mBAAoB,CAAE,KAAM,MAAc,SAAU,EAAK,EACzD,cAAe,CAAE,KAAM,MAAc,SAAU,EAAK,EACpD,iBAAkB,CAAE,KAAM,MAAc,CAC5C,EACA,SAAU,CACN,GAAGC,GAAS7D,EAAW,CACnB,KAAM,MAAA,CACT,EACD,gBAAsB,CAClB,MAAO,MAAK,GAAG,QACnB,CACJ,EACA,MAAO,CAAC,QAAS,UAAW,sBAAuB,qBAAsB,UAAW,UAAW,oBAAqB,mBAAmB,EACvI,MAAO,CACI,MAAA,CACH,uBACA,GAAID,EAAY,EAChB,YAAa,CAAC,EACd,eAAgB,CAAC,EACjB,gBAAiB,CAAC,EAClB,eAAgB,CAAC,EACjB,wBAAyB,CAAC,EAC1B,qBAAsB,CAAC,EACvB,WAAY,CACR,eAAgB,IACpB,EACA,QAAS,GACT,QAAS,GACT,eAAgB,GAChB,kBAAmB,GACnB,sBAAuB,GACvB,UAAW,CAAA,CAEnB,EACA,OAAQ,CAEJ,MAAO,CAAA,MADOC,GACC,CACnB,EACA,SAAU,CACN,KAAK,kBAAkB,CAC3B,EACA,MAAO,CACH,IAAK,CACD,KAAK,kBAAkB,EACvB,KAAK,UAAY,CACrB,EACA,kBAAmB,CACV,KAAA,oBAAoB,KAAK,gBAAgB,CAClD,CACJ,EACA,aAAc,CAAC,EACf,QAAS,CAEL,KAAM,qBAAqB,CACvB,KAAM,MAAK,MACN,IAAI,qDAAwE,KAAK,IAAI,EACrF,KAAK,AAAC,GAAiC,CAMhC,GALC,KAAA,gBAAkB,EAAS,KAAK,GAAK,CAAE,GAAG,EAAS,KAAK,EAAG,EAAI,CAAA,EAEpE,KAAK,gBAAgB,wBAA0B,MAAK,gBAAgB,uBAAyB,KAAK,MAAM,KAAK,gBAAgB,uBAAyB,KAAK,gBAAgB,uBAAyB,IAAI,GACxM,KAAK,gBAAgB,oBAAsB,MAAK,gBAAgB,mBAAqB,KAAK,MAAM,KAAK,gBAAgB,mBAAqB,KAAK,gBAAgB,mBAAqB,IAAI,GAEpL,KAAK,gBAAgB,mBAAoB,CACzC,KAAM,GAAyB,OAAO,KAAK,KAAK,gBAAgB,kBAAkB,EAClF,KAAK,gBAAgB,mBAAqB,EAAuB,IAAI,AAAC,GAAO,EAAE,KAAM,EAAG,MAAO,KAAK,gBAAgB,mBAAmB,EAAK,EAAA,CAChJ,CAEA,KAAK,gBAAgB,mBAAqB,MAAK,gBAAgB,kBAAoB,KAAK,MAAM,KAAK,gBAAgB,kBAAoB,KAAK,gBAAgB,kBAAoB,IAAI,EAAK,CAC5L,EACA,MAAM,CACf,EACA,KAAM,6BAA6B,CAC/B,KAAM,MAAK,MACN,IAAI,wDAA2E,KAAK,IAAI,EACxF,KAAK,AAAC,GAAiC,CAC3B,EAAA,KAAK,KAAQ,KAAK,wBAA0B,EAAS,KAAK,KAAS,KAAK,wBAA0B,CAAA,CAAC,CAC/G,EACA,MAAM,EACN,QAAQ,IAAO,KAAK,QAAU,EAAM,CAC7C,EACA,KAAM,oBAAoB,CACtB,AAAI,KAAK,GACL,MAAK,QAAU,GACf,KAAM,MAAK,qBACX,KAAM,MAAK,6BACX,KAAK,qBAAqB,EAC1B,KAAK,qBAAuB,KAAK,cAEjC,MAAK,gBAAkB,CAAE,GAAG,EAAqB,UAAW,EAC5D,KAAK,wBAA0B,GAC/B,KAAK,qBAAuB,KAAK,aAAa,OAAO,AAAC,GAC3C,EAAG,UAAY,UACzB,EAET,EACA,sBAAuB,CACf,GAAA,KAAK,wBAAwB,SAAW,EAAG,CACrC,KAAA,GAAe,KAAK,aAAa,KAAK,AAAC,GAAS,EAAK,WAAa,KAAK,gBAAgB,QAAQ,EAChG,KAAA,wBAAwB,KAAK,CAAE,KAAM,EAAa,SAAU,OAAQ,KAAK,gBAAgB,MAAO,QAAS,EAAG,OAAQ,KAAK,gBAAgB,OAAQ,KAAM,KAAK,gBAAgB,GAAI,CACzL,CACJ,EAIA,oBAAoB,EAAW,CAC3B,KAAK,SAAS,QAAQ,CAClB,KAAM,6BACN,QAAS,KAAK,GAAG,gCAAgC,EACjD,OAAQ,KAAK,GAAG,GAAG,EACnB,OAAQ,IAAM,KAAK,aAAa,CAAS,CAAA,CAC5C,CACL,EACA,KAAM,cAAa,EAAW,CACpB,KAAA,MAAK,MAAM,IAAI,qDAAwE,GAAW,EAAE,KAAK,KAAO,IAAiC,CACnJ,AAAI,EAAS,KAAK,GAAG,WAAa,QACxB,KAAA,MAAK,MAAM,IAAI,8DAAiF,EAAS,KAAK,GAAG,UAAU,EAE9H,MAAA,GAAS,KAAK,GAAG,GACf,EAAA,KAAK,GAAG,MAAQ,MAChB,EAAA,KAAK,GAAG,WAAa,CAAA,EACrB,EAAA,KAAK,GAAG,YAAc,EAE/B,KAAK,gBAAkB,CAAE,GAAG,EAAS,KAAK,GAAG,CAChD,CACL,EAIA,KAAM,cAAc,SAChB,GAAI,GAAW,CAAE,GAAG,KAAK,eAAgB,EAClD,AAAI,YAAK,OAAL,cAAW,kBAAX,cAA4B,SAAS,qBAAsB,EAAS,GAC3D,KAAM,MAAK,MACN,IAAI,sDAAuE,EAAS,GAAI,CAAE,QAAS,CAAE,wBAAyB,MAAO,CAAG,CAAA,EACxI,KAAK,AAAC,GAAiC,CACxC,AAAI,EAAS,KACT,KAAK,SAAS,QAAQ,CAClB,KAAM,6BACN,QAAS,KAAK,GAAG,wEAAwE,EACzF,OAAQ,KAAK,GAAG,sCAAsC,EACtD,OAAQ,IAAM,KAAK,gBAAgB,CAAQ,CAAA,CAC9C,EAED,KAAK,gBAAgB,CAAQ,CACjC,CACH,EACA,MAAM,AAAC,GAAQ,CACR,AAAA,EAAI,SAAS,SAAW,IAAK,KAAK,gBAAgB,CAAQ,EACzD,KAAK,OAAO,OAAO,WAAY,CAAE,MAAO,eAAgB,IAAK,EAAI,KAAK,OAAO,GAAG,OAAS,CAAA,CAAA,CACjG,EAED,KAAK,gBAAgB,CAAQ,CAErC,EACA,KAAM,iBAAgB,EAAU,CAC5B,KAAK,MAAM,mBAAmB,EAC1B,GAAS,SAAS,eAAiB,QAAU,EAAS,SAAS,YAAY,GAAK,SACvE,GAAA,sBAA+B,oBAAsB,CAAA,GAAI,OAAO,CAAC,EAAK,IACvE,GAAA,EAAK,MAAW,EAAK,MAClB,GACR,CAAE,CAAA,GAGT,EAAS,MAAa,GAAS,KAAO,CAAA,GACtC,EAAS,mBAAqB,GAAS,kBAAoB,KAAK,UAAU,EAAS,iBAAiB,GAE3F,EAAA,KAAQ,EAAS,KAAO,KAAM,MAAK,2BAA2B,EAAS,IAAI,EAAM,EAAS,KAAO,CAAA,EAC1G,EAAS,oBAAsB,GAE/B,EAAS,aAAe,GAAS,mBAAqB,KAAM,MAAK,kBAAuB,GAExF,KAAM,MAAK,MACN,KAAK,0CAA8D,EAAU,CAC1E,QAAS,CACL,OAAQ,oCACR,eAAgB,gCACpB,CAAA,CACH,EACA,KAAK,KAAO,IAAiC,CAC1C,KAAK,QAAU,GACf,KAAK,MAAM,QAAQ,CAAE,MAAO,KAAK,GAAG,0BAA0B,EAAG,IAAK,KAAK,GAAG,sBAAsB,CAAG,CAAA,EAClG,KAAA,gBAAgB,GAAK,KAAK,MAAM,SAAS,EAAI,KAAK,MAAM,UAAW,CAAQ,EAChF,KAAM,MAAK,SAAS,EAAU,EAAS,KAAK,EAAE,EAC9C,KAAM,MAAK,iBAAiB,EAAU,EAAS,KAAK,EAAE,EACtD,KAAM,MAAK,UAAU,EAAS,KAAK,EAAE,EACrC,KAAM,MAAK,YAAY,EAAS,KAAK,EAAE,EACvC,KAAM,MAAK,oBAAmB,CACjC,EACA,MAAM,EACN,QAAQ,IAAM,KAAK,MAAM,mBAAmB,CAAC,CACtD,EAEA,KAAM,UAAS,EAAU,EAAI,CACzB,GAAI,GAAO,CAAA,EACN,EAAA,QAAU,EAAS,QAAU,EAClC,EAAK,UAAY,EAAS,KAEpB,KAAA,MAAK,MACN,KAAK,0CAA6D,YAAc,EAAM,CACnF,QAAS,CACL,OAAQ,oCACR,eAAgB,gCACpB,CAAA,CACH,EACA,MAAM,CACf,EACA,KAAM,kBAAiB,EAAU,EAAI,CACjC,AAAI,EAAS,YACH,KAAA,MAAK,MACN,KAAK,gEAAmF,IAAM,EAAU,CACrG,QAAS,CACL,OAAQ,oCACR,eAAgB,gCACpB,CAAA,CACH,EACA,MAAM,EAEL,KAAA,MAAK,MAAM,OAAO,mEAAsF,EAAS,OAAO,EAAE,MAAM,CAE9I,EACA,KAAM,WAAU,EAAI,CACZ,AAAA,KAAK,YAAY,OAAS,GACrB,KAAA,YAAY,QAAQ,KAAO,IAAS,CACjC,AAAA,EAAK,QAAU,IACf,OAAO,GAAK,MACN,KAAA,MAAK,MACN,KAAK,wDAA2E,IAAM,EAAM,CACzF,QAAS,CAAE,OAAQ,oCAAqC,eAAgB,gCAAiC,CAAA,CAC5G,EACA,MAAM,EACf,CACH,CAET,EACA,KAAM,aAAY,EAAI,CACd,AAAA,KAAK,eAAe,OAAS,GACxB,KAAA,eAAe,QAAQ,KAAO,IAAS,CACpC,AAAA,EAAK,UAAY,IACX,KAAA,MAAK,MACN,OAAO,wDAA2E,KAAM,EAAK,UAAW,CACrG,QAAS,CAAE,OAAQ,oCAAqC,eAAgB,gCAAiC,CAAA,CAC5G,EACA,MAAM,CACf,CACH,CAET,EACA,KAAM,4BAA2B,EAAe,CAC5C,GAAI,EAAc,SAAW,MAAa,EAAc,SAAW,KAAM,CAIrE,OAHI,GAAe,GAAI,OACnB,EAAe,GAAI,OAEd,EAAI,EAAG,EAAI,EAAc,QAAQ,OAAQ,IAAK,CAC/C,GAAA,GAAU,EAAc,QAAQ,GACvB,EAAA,KAAK,EAAQ,MAAM,CACpC,CAIA,IAFe,EAAA,KAAK,iBAAiB,CAAY,EAE5C,EAAI,EAAG,EAAI,EAAa,OAAQ,IAAK,CACtC,GAAI,GAAe,CAAE,cAAe,GAAI,KAAM,GAAI,UAAW,GAAI,KAAM,GAAI,SAAU,GAAO,QAAS,GAAO,UAAW,IACnH,EAAoB,EAAa,GAGrC,GAAI,EAAkB,QAAQ,GAAG,GAAK,GAAI,CAClC,GAAA,GAAM,EAAkB,MAAM,GAAG,EACrC,EAAa,cAAgB,EAAI,EAAA,KAEjC,GAAa,cAAgB,EAGjC,EAAa,KAAO,EACpB,OAAS,GAAI,EAAG,EAAI,EAAc,QAAQ,OAAQ,IAC9C,EAAU,EAAc,QAAQ,GAC5B,EAAQ,QAAU,GAClB,CAAI,EAAQ,MAAM,YAAiB,GAAA,OAAO,cACtC,EAAa,KAAO,EAAQ,OACrB,EAAQ,MAAM,eAAiB,YAAY,cAClD,EAAa,UAAY,EAAQ,OAC1B,EAAQ,MAAM,eAAiB,WAAW,cACjD,EAAa,SAAW,EAAQ,OACzB,EAAQ,MAAM,eAAiB,UAAU,cAChD,EAAa,QAAU,EAAQ,OACxB,EAAQ,MAAM,eAAiB,YAAY,eAClD,GAAa,UAAY,EAAQ,SAI7C,EAAa,KAAK,CAAY,CAClC,CAEO,MAAA,EACX,CACJ,EACA,uBAAwB,WAChB,AAAA,YAAK,kBAAL,cAAsB,QAAtB,cAA6B,SAAS,QAAS,SAAK,kBAAL,cAAsB,aACrE,KAAK,MAAM,SAAS,CAAE,MAAO,KAAK,GAAG,yBAAyB,EAAG,IAAK,KAAK,GAAG,8CAA8C,CAAG,CAAA,EAC5H,KAAK,YAAY,CAC5B,EACA,iBAAiB,EAAO,CAEpB,OADI,GAAQ,CAAA,EACH,EAAI,EAAM,OAAS,EAAG,GAAK,EAAG,IAC/B,AAAA,EAAM,IAAM,GACN,EAAA,OAAO,EAAG,CAAC,EAEjB,EAAM,EAAM,IAAM,GAGnB,MAAA,EACX,EACA,KAAM,oBAAoB,CAClB,GAAA,KAAK,gBAAgB,YAAa,CAC9B,AAAA,KAAK,gBAAgB,WAAa,MAC7B,MAAA,gBAAgB,UAAY,GAAI,OAErC,GAAA,GAAiB,KAAK,WAAW,eACjC,EAAkB,GAClB,EAAiB,EACjB,EAAiB,KAAK,0BAA0B,KAAK,WAAW,iBAAmB,KAAK,WAAW,gBAAgB,QAAU,EAAG,iBAAiB,EACjJ,EAAe,KAAK,0BAA0B,GAAkB,UAAY,KAAK,WAAW,eAAiB,KAAK,WAAW,cAAc,QAAU,EAAG,eAAe,EACvK,EAAc,KAAK,0BAA2B,KAAmB,OAAS,IAAmB,UAAY,KAAK,WAAW,cAAgB,KAAK,WAAW,aAAa,QAAU,EAAG,cAAc,EACjM,EAAgB,KAAK,0BAA0B,IAAmB,SAAW,KAAK,WAAW,gBAAkB,KAAK,WAAW,eAAe,QAAU,EAAG,gBAAgB,EAC3K,EAAkB,KAAK,0BAA0B,IAAmB,QAAU,KAAK,WAAW,kBAAoB,KAAK,WAAW,iBAAiB,QAAU,EAAG,kBAAkB,EAElL,MAAA,IAAe,KAAO,GAAmB,IAC3B,EAAA,IAEI,EAAA,IAEtB,EAAkB,EAAiB,IAAM,EAAe,IAAM,EAAc,IAAM,EAAgB,IAAM,EAEjG,EAAiB,IAAM,CAClC,CACJ,EACA,0BAA0B,EAAW,EAAe,CAChD,GAAI,GAAc,GAClB,GAAI,EAAW,CACX,OAAS,GAAI,EAAG,EAAI,KAAK,WAAW,GAAe,OAAQ,IACxC,GAAA,GAAK,KAAK,WAAW,GAAe,GAE/C,EAAI,KAAK,WAAW,GAAe,OAAS,GAC7B,IAAA,KAGhB,MAAA,EAAA,KAEO,UAAA,IACP,CAEf,EAGA,KAAM,wBAAwB,CACtB,GAAA,KAAK,gBAAgB,WAAa,OAAQ,CAC1C,KAAK,eAAiB,KAAK,MAAM,KAAK,UAAU,KAAK,eAAe,CAAC,EACrE,GAAI,GAAyB,CAAA,EACzB,GAAA,KAAK,eAAe,SAAS,YAAY,GAAK,QAAU,KAAK,eAAe,SAAS,YAAY,GAAK,OACtG,OAAS,GAAI,EAAG,EAAI,KAAK,eAAe,mBAAmB,OAAQ,IACxC,EAAA,KAAK,eAAe,mBAAmB,GAAG,MAAW,KAAK,eAAe,mBAAmB,GAAG,MAG9H,KAAK,eAAe,mBAAwB,KAAK,UAAU,CAAsB,EACjF,KAAK,eAAe,wBAA6B,KAAK,eAAe,uBAA0B,OAAS,EAAK,KAAK,eAAe,uBAAyB,KAAK,UAAU,KAAK,eAAe,sBAAsB,EAAM,KAAK,eAAe,uBAAyB,GACtQ,KAAK,eAAe,MAAa,MAAK,eAAe,KAAO,IACvD,KAAA,eAAe,mBAAqB,MAAK,eAAe,kBAAoB,KAAK,UAAU,KAAK,eAAe,iBAAiB,GACrI,KAAK,eAAe,KAAQ,KAAK,eAAe,KAAO,KAAM,MAAK,2BAA2B,KAAK,eAAe,IAAI,EAAM,KAAK,eAAe,KAAO,GAEtJ,KAAK,kBAAoB,EAAA,KAEzB,MAAK,eAAiB,KAAK,gBAC3B,KAAK,kBAAoB,EAEjC,EAEA,kBAAkB,EAAO,CACrB,KAAK,YAAc,EACnB,KAAK,MAAM,SAAS,CACxB,EACA,qBAAqB,EAAO,CACxB,KAAK,eAAiB,EACtB,KAAK,MAAM,SAAS,CACxB,EACA,qBAAqB,EAAO,CACxB,KAAK,MAAM,oBAAoB,EAC1B,KAAA,gBAAkB,CAAE,GAAG,EAChC,CACJ,CACJ,CAAC,oPAzeG,MAAAY,OAAcC,EAAC,KAAA,CAAAC,EACK,EAA4B,CAAA,MAAA,sCAAA,EAAA,CAAA,MAAAC,EAAA,IAAA,gCACjC,CAAA,EAAA,IACPA,EAAyK,IAAA,CAAAD,EAAzJ,EAAE,CAAqC,MAAM,EAAA,GAAA,iCAAA,EAAiD,MAAK,gDAA0B,QAAQ,EAAE,sBAAA,SAAA,EAAA,gBACX,KAAA,EAAA,CAAA,QAAA,UAAA,UAAA,CAAA,EAAAA,EAA/H,EAAY,CAAC,KAAK,aAAkD,MAAA,gDAA2B,SAAO,EAAA,eAAA,QAAA,EAAA,qBACR,EAAA,KAAA,EAAA,CAAA,WAAA,SAAA,CAAA,EAAAA,EAA9F,EAAa,CAAC,KAAK,cAAkD,MAAK,gDAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,OAAA,UAG/F,CAAA,EA4DcE,EAAA,MAAA,GAAA,CAAAF,EA3DK,EAAuB,CAAS,MAAA,wBAAA,YAAA,EAAA,UAAwB,uBAAoB,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,UAAA,GAAA,YAAA,qBACvFC,EAgBW,IAAA,CAAAD,EAfU,EAC2D,KAAA,CAAA,OAAxEC,EAAwE,IAAA,CAAAC,EAAA,OAAA,KAAAG,EAAA,EAAA,GAAA,iDAAA,CAAA,EAAA,CAAA,YAE5EJ,EAWE,IAAA,CAAAD,EAVa,EAAY,CACtB,WAAe,EAAA,WACf,cAAe,EAAE,cACjB,gBAAA,EAAA,gBACA,wBAAe,EAAA,wBACf,cAAS,EAAA,cACT,QAAA,EAAA,QACA,iBAAmB,EAAA,2BACnB,sBAAoB,EAAoB,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,qBAAA,GACxC,qBAAO,EAAA,qBAAA,UAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,gKAIhB,CAAA,EAAAA,EACqB,EAC0B,KAAA,CAAA,OAAvCC,EAAuC,IAAA,CAAAC,EAAA,OAAA,KAAAG,EAAA,EAAA,GAAA,gBAAA,CAAA,EAAA,CAAA,YAE3CJ,EAaE,IAAA,CAAAD,EAZc,EAAS,CACpB,UAAe,EAAA,UACf,gBAAc,EAAA,gBACd,aAAa,EAAA,qBACb,YAAgB,EAAA,YAChB,eAAa,EAAA,eACb,YAAa,EAAA,YACb,cAAkB,GAAE,SACpB,mBAAe,EAAA,mBACf,cAAY,EAAA,cACZ,eAAO,eAAE,EAAK,gBAAA,aAAA,IACd,YAAW,IAAE,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,GAAA,cAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,sBAAA,iKAItB,CAAA,EAAAA,EACqB,EAC0C,KAAA,CAAA,OAAvDC,EAAuD,IAAA,CAAAC,EAAA,OAAA,KAAAG,EAAA,EAAA,GAAA,gCAAA,CAAA,EAAA,CAAA,YAE3DJ,EAAkI,IAAA,CAAAD,EAAnH,EAAiB,CAAkB,gBAAA,EAAA,gBAAmD,0BAAO,EAAA,sBAAA,UAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,iEAGhG,CAAA,EAAhB,EAAA,gBAAA,UAKW,aAH0DiB,EAAA,EAAA,CAAA,IAAA,GAAA,CAAA,OAA7DhB,EAA6D,IAAA,CAAAC,EAAA,OAAA,KAAAG,EAAA,EAAA,GAAA,sCAAA,CAAA,EAAA,CAAA,YAEjEJ,EAAmL,IAAA,CAAAD,EAAxK,EAAiB,CAAkB,gBAAoB,EAAA,gBAAqB,mBAAW,EAAS,mBAAG,UAAS,EAAE,UAAoB,YAAc,EAAA,kBAAA,eAAA,EAAA,uHAG/I,CAAA,GAAAkB,EAAgB,GAAQ,EAAA,EAAxC,EAAA,gBAAA,UAKW,gBAHmCD,EAAA,EAAA,CAAA,IAAA,GAAA,CAAA,OAAtChB,EAAsC,IAAA,CAAAC,EAAA,OAAA,KAAAG,EAAA,EAAA,GAAA,eAAA,CAAA,EAAA,CAAA,YAE1CJ,EAA2J,IAAA,CAAAD,EAA5I,EAAiB,CAAkB,gBAAqB,EAAA,gBAA0B,sBAAgB,EAAA,sBAAa,eAAO,EAAA,WAAA,UAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,MAAA,SAAA,kGAIqE,EAAA,CAAA,aAAA,CAAA,EAAAA,EAA5K,EAAiB,CAAG,QAAa,EAAA,kBAAiB,YAAK,EAAA,eAA8B,UAAa,IAAS,GAAA,GAAA,AAAA,GAAA,EAAA,kBAAA,IAAG,YAAA,UAAA,0BAAA"}