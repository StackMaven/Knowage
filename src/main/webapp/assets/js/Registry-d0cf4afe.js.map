{"version":3,"file":"Registry-d0cf4afe.js","sources":["../../../../helpers/commons/tableHelpers.ts","../../../../modules/documentExecution/registry/tables/RegistryDatatableEditableField.vue","../../../../modules/documentExecution/registry/tables/RegistryDatatableWarningDialog.vue","../../../../modules/documentExecution/registry/tables/RegistryDatatable.vue","../../../../components/UI/KnPivotTable/KnPivotTableEditableField.vue","../../../../components/UI/KnPivotTable/KnPivotTable.vue","../../../../modules/documentExecution/registry/tables/RegistryPivotDatatable.vue","../../../../modules/documentExecution/registry/RegistryFilterCard.vue","../../../../modules/documentExecution/registry/RegistryFiltersCard.vue","../../../../modules/documentExecution/registry/Registry.vue"],"sourcesContent":["export function setInputDataType(columnType: string) {\r\n    switch (columnType) {\r\n        case 'int':\r\n        case 'float':\r\n        case 'decimal':\r\n        case 'long':\r\n            return 'number'\r\n        case 'date':\r\n            return 'date'\r\n        default:\r\n            return 'text'\r\n    }\r\n}\r\n\r\nexport function getInputStep(dataType: string) {\r\n    if (dataType === 'float') {\r\n        return '.01'\r\n    } else if (dataType === 'int') {\r\n        return '1'\r\n    } else {\r\n        return 'any'\r\n    }\r\n}\r\n\r\nexport const numberFormatRegex = '^(####|#\\.###|#\\,###){1}([,.]?)(#*)$'\r\n\r\nexport const formatNumber = (column: any) => {\r\n    if (!column.format) return null\r\n\r\n    const result = column.format.trim().match(numberFormatRegex)\r\n    if (!result) return null\r\n\r\n    const useGrouping = result[1].includes('.') || result[1].includes(',')\r\n    const maxFractionDigits = result[3].length\r\n    const configuration = { useGrouping: useGrouping, minFractionDigits: maxFractionDigits, maxFractionDigits: maxFractionDigits }\r\n\r\n    return configuration\r\n\r\n}","<template>\r\n    <InputText\r\n        class=\"kn-material-input\"\r\n        v-if=\"column && column.editorType !== 'COMBO' && column.columnInfo?.type !== 'date' && column.columnInfo?.type !== 'timestamp' && getDataType(column.columnInfo.type) === 'text'\"\r\n        :type=\"'text'\"\r\n        :step=\"getStep(column.columnInfo.type)\"\r\n        v-model=\"row[column.field]\"\r\n        @input=\"$emit('rowChanged', row)\"\r\n    />\r\n    <InputNumber\r\n        class=\"kn-material-input p-inputtext-sm\"\r\n        v-if=\"column && column.editorType !== 'COMBO' && column.columnInfo?.type !== 'date' && column.columnInfo?.type !== 'timestamp' && getDataType(column.columnInfo.type) === 'number'\"\r\n        v-model=\"row[column.field]\"\r\n        :useGrouping=\"useGrouping\"\r\n        :locale=\"locale\"\r\n        :minFractionDigits=\"minFractionDigits\"\r\n        :maxFractionDigits=\"maxFractionDigits\"\r\n        :disabled=\"!column.isEditable\"\r\n        @blur=\"onInputNumberChange\"\r\n    >\r\n    </InputNumber>\r\n    <Dropdown\r\n        class=\"kn-material-input\"\r\n        v-else-if=\"column && column.editorType === 'COMBO'\"\r\n        v-model=\"row[column.field]\"\r\n        :options=\"columnOptions && columnOptions[column.field] ? columnOptions[column.field][row[column.dependences]] : []\"\r\n        optionValue=\"column_1\"\r\n        optionLabel=\"column_1\"\r\n        @change=\"$emit('dropdownChanged', { row: row, column: column })\"\r\n        @before-show=\"$emit('dropdownOpened', { row: row, column: column })\"\r\n        :filter=\"true\"\r\n    >\r\n    </Dropdown>\r\n    <Calendar\r\n        :style=\"registryDatatableDescriptor.pivotStyles.inputFields\"\r\n        class=\"pivot-calendar\"\r\n        v-else-if=\"column && (column.columnInfo?.type === 'date' || column.columnInfo?.type === 'timestamp')\"\r\n        v-model=\"row[column.field]\"\r\n        :showTime=\"column.columnInfo?.type === 'timestamp'\"\r\n        :showSeconds=\"column.columnInfo?.type === 'timestamp'\"\r\n        :showButtonBar=\"true\"\r\n        @date-select=\"$emit('rowChanged', row)\"\r\n        :dateFormat=\"column.columnInfo?.type === 'date' ? getCurrentLocaleDefaultDateFormat(column) : ''\"\r\n    />\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { setInputDataType, getInputStep, formatNumber } from '@/helpers/commons/tableHelpers'\r\nimport { formatDate, getLocale } from '@/helpers/commons/localeHelper'\r\nimport { luxonFormatDate, primeVueDate } from '@/helpers/commons/localeHelper'\r\nimport Calendar from 'primevue/calendar'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport InputNumber from 'primevue/inputnumber'\r\nimport registryDatatableDescriptor from './RegistryDatatableDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'registry-datatable-editable-field',\r\n    components: { Calendar, Dropdown, InputNumber },\r\n    props: { column: { type: Object }, propRow: { type: Object }, comboColumnOptions: { type: Array } },\r\n    emits: ['rowChanged', 'dropdownChanged', 'dropdownOpened'],\r\n    data() {\r\n        return {\r\n            registryDatatableDescriptor,\r\n            row: {} as any,\r\n            columnOptions: [] as any[],\r\n            options: [] as any[],\r\n            useGrouping: false,\r\n            locale: '',\r\n            minFractionDigits: 2,\r\n            maxFractionDigits: 2\r\n        }\r\n    },\r\n    watch: {\r\n        propRow() {\r\n            this.loadRow()\r\n        },\r\n        comboColumnOptions: {\r\n            handler() {\r\n                this.loadColumnOptions()\r\n            },\r\n            deep: true\r\n        }\r\n    },\r\n    created() {\r\n        this.setDefaultLocale()\r\n        this.loadRow()\r\n        this.loadColumnOptions()\r\n    },\r\n    computed: {\r\n        getCurrentLocaleDefaultDateFormat() {\r\n            return (column) => column.format || primeVueDate()\r\n        }\r\n    },\r\n    methods: {\r\n        loadRow() {\r\n            this.row = this.propRow\r\n            if (this.column && (this.row[this.column.field] || this.row[this.column.field] === 0 || this.row[this.column.field] === '')) {\r\n                if (this.column.columnInfo.type === 'date' && typeof this.row[this.column.field] === 'string') {\r\n                    this.row[this.column.field] = this.row[this.column.field] ? new Date(luxonFormatDate(this.row[this.column.field], 'yyyy-MM-dd', 'yyyy-MM-dd')) : null\r\n                } else if (this.column.columnInfo.type === 'timestamp' && typeof this.row[this.column.field] === 'string' && this.row[this.column.field] !== '') {\r\n                    this.row[this.column.field] = new Date(luxonFormatDate(this.row[this.column.field], 'yyyy-MM-dd HH:mm:ss.S', 'yyyy-MM-dd HH:mm:ss.S'))\r\n                } else if (this.column.editorType !== 'COMBO' && this.column.columnInfo.type !== 'date' && this.column.columnInfo.type !== 'timestamp' && this.getDataType(this.column.columnInfo.type) === 'number') {\r\n                    this.formatNumberConfiguration()\r\n                }\r\n            }\r\n        },\r\n        formatNumberConfiguration() {\r\n            const configuration = formatNumber(this.column)\r\n            if (configuration) {\r\n                this.useGrouping = configuration.useGrouping\r\n                this.minFractionDigits = configuration.minFractionDigits\r\n                this.maxFractionDigits = configuration.maxFractionDigits\r\n            }\r\n        },\r\n        setDefaultLocale() {\r\n            const locale = getLocale()\r\n            this.locale = locale ? locale.replace('_', '-') : ''\r\n        },\r\n        getDataType(columnType: string) {\r\n            return setInputDataType(columnType)\r\n        },\r\n        getStep(dataType: string) {\r\n            return getInputStep(dataType)\r\n        },\r\n        loadColumnOptions() {\r\n            this.columnOptions = this.comboColumnOptions as any[]\r\n        },\r\n        getFormattedDate(date: any, format: any, incomingFormat?: string) {\r\n            return formatDate(date, format, incomingFormat)\r\n        },\r\n        onInputNumberChange() {\r\n            setTimeout(() => this.$emit('rowChanged', this.row), 250)\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.p-component {\r\n    &.pivot-calendar,\r\n    &.p-inputtext,\r\n    &.p-dropdown,\r\n    &.p-datepicker {\r\n        border: none !important;\r\n        background-color: transparent !important;\r\n        width: 100% !important;\r\n    }\r\n}\r\n\r\n.p-inputnumber,\r\n.p-calendar {\r\n    &:deep(.p-inputtext) {\r\n        border: none !important;\r\n        background-color: transparent !important;\r\n        width: 100% !important;\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <Dialog :style=\"registryDatatableWarningDialogDescriptor.dialog.style\" :header=\"$t('documentExecution.registry.warning')\" :visible=\"visible\" :modal=\"true\" class=\"p-fluid kn-dialog--toolbar--primary\" :closable=\"false\">\r\n        <div class=\"p-mt-5\">\r\n            <p>\r\n                {{ $t('documentExecution.registry.column') }}\r\n                <b>{{ columnFileds }}</b>\r\n                {{ $t('documentExecution.registry.warningDependences') }}\r\n            </p>\r\n        </div>\r\n        <div class=\"p-mt-3\">\r\n            <Checkbox v-model=\"stopWarnings\" :binary=\"true\"></Checkbox>\r\n            <label class=\"p-ml-2\"> {{ $t('documentExecution.registry.warningCheckbox') }}</label>\r\n        </div>\r\n        <template #footer>\r\n            <Button class=\"kn-button kn-button--primary\" @click=\"$emit('close', { stopWarnings: stopWarnings, columnField: columns[0].dependences })\"> {{ $t('common.close') }}</Button>\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport Checkbox from 'primevue/checkbox'\r\nimport Dialog from 'primevue/dialog'\r\nimport registryDatatableWarningDialogDescriptor from './RegistryDatatableWarningDialogDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'registry-datatable-warning-dialog',\r\n    components: { Checkbox, Dialog },\r\n    emits: ['close'],\r\n    props: {\r\n        visible: { type: Boolean },\r\n        columns: { type: Array, required: true }\r\n    },\r\n    data() {\r\n        return {\r\n            registryDatatableWarningDialogDescriptor,\r\n            stopWarnings: false\r\n        }\r\n    },\r\n    computed: {\r\n        columnFileds(): string {\r\n            let fields = ''\r\n            for (let i = 0; i < this.columns.length; i++) {\r\n                fields += (this.columns[i] as any).title + (i === this.columns.length - 1 ? ' ' : ', ')\r\n            }\r\n\r\n            return fields\r\n        }\r\n    },\r\n    created() {},\r\n    methods: {}\r\n})\r\n</script>\r\n","<template>\r\n    <DataTable\r\n        class=\"p-datatable-sm kn-table\"\r\n        :scrollable=\"true\"\r\n        v-model:first=\"first\"\r\n        :value=\"rows\"\r\n        dataKey=\"id\"\r\n        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink\"\r\n        :lazy=\"lazyParams.size > registryDescriptor.paginationLimit\"\r\n        :paginator=\"true\"\r\n        :rows=\"registryDescriptor.paginationNumberOfItems\"\r\n        :currentPageReportTemplate=\"\r\n            $t('common.table.footer.paginated', {\r\n                first: '{first}',\r\n                last: '{last}',\r\n                totalRecords: '{totalRecords}'\r\n            })\r\n        \"\r\n        :totalRecords=\"lazyParams.size\"\r\n        stripedRows\r\n        showGridlines\r\n        @page=\"onPage($event)\"\r\n    >\r\n        <template #empty>{{ $t('common.info.noDataFound') }}</template>\r\n        <Column class=\"kn-truncated\" :style=\"registryDatatableDescriptor.numerationColumn.style\" :headerStyle=\"registryDatatableDescriptor.numerationColumn.style\" :field=\"columns[0].field\" :header=\"columns[0].title\"></Column>\r\n\r\n        <template v-for=\"col of columns.slice(1)\" :key=\"col.field\">\r\n            <Column class=\"kn-truncated\" :field=\"col.field\" :style=\"`min-width:${col.size}px`\" :sortable=\"col.columnInfo.type !== 'timestamp' && col.columnInfo.type !== 'date'\">\r\n                <template #header>\r\n                    <div class=\"table-header\">\r\n                        <i v-if=\"showDefaultNumberFormatIcon(col)\" v-tooltip.top=\"$t('documentExecution.registry.numberFormatNotSupported')\" class=\"pi pi-exclamation-triangle kn-cursor-pointer\"></i>\r\n                        {{ col.title }}\r\n                        <i v-if=\"col.isEditable && col.columnInfo?.type !== 'boolean'\" class=\"pi pi-pencil edit-icon p-ml-2\" :data-test=\"col.field + '-icon'\" v-tooltip.bottom=\"$t('documentExecution.registry.isEditableField')\" />\r\n                    </div>\r\n                </template>\r\n                <template #body=\"slotProps\">\r\n                    <div class=\"p-d-flex p-flex-row editableField\" :data-test=\"col.field + '-body'\">\r\n                        <Checkbox v-if=\"col.editorType == 'TEXT' && col.columnInfo?.type === 'boolean'\" v-model=\"slotProps.data[slotProps.column.props.field]\" :binary=\"true\" @change=\"setRowEdited(slotProps.data)\" :disabled=\"!col.isEditable\"></Checkbox>\r\n                        <RegistryDatatableEditableField\r\n                            v-else-if=\"col.isEditable || col.columnInfo?.type === 'int' || col.columnInfo?.type === 'float'\"\r\n                            :column=\"col\"\r\n                            :propRow=\"slotProps.data\"\r\n                            :comboColumnOptions=\"comboColumnOptions\"\r\n                            @rowChanged=\"setRowEdited(slotProps.data)\"\r\n                            @dropdownChanged=\"onDropdownChange\"\r\n                            @dropdownOpened=\"addColumnOptions\"\r\n                        ></RegistryDatatableEditableField>\r\n                        <span v-else-if=\"!col.isEditable\">\r\n                            <span v-if=\"slotProps.data[col.field] && col.columnInfo?.type === 'date'\">\r\n                                {{ getFormattedDate(slotProps.data[col.field], 'yyyy-MM-dd', getCurrentLocaleDefaultDateFormat(col)) }}\r\n                            </span>\r\n                            <span v-else-if=\"slotProps.data[col.field] && col.columnInfo?.type === 'timestamp'\"> {{ getFormattedDateTime(slotProps.data[col.field], { dateStyle: 'short', timeStyle: 'medium' }, true) }}</span>\r\n                            <span v-else>{{ slotProps.data[col.field] }}</span>\r\n                        </span>\r\n                    </div>\r\n                </template>\r\n            </Column>\r\n        </template>\r\n        <Column :style=\"registryDatatableDescriptor.iconColumn.style\" :headerStyle=\"registryDatatableDescriptor.iconColumn.style\">\r\n            <template #header>\r\n                <Button class=\"kn-button\" :label=\"$t('managers.businessModelManager.add')\" v-if=\"buttons.enableButtons || buttons.enableAddRecords\" @click=\"addNewRow\" data-test=\"new-row-button\" />\r\n            </template>\r\n            <template #body=\"slotProps\">\r\n                <Button v-if=\"buttons.enableButtons || buttons.enableDeleteRecords\" class=\"p-button-link\" @click=\"rowDeleteConfirm(slotProps.index, slotProps.data)\">\r\n                    <i class=\"pi pi-flag\" :class=\"[slotProps.data.edited ? flagShown : flagHidden]\" :style=\"registryDatatableDescriptor.primevueTableStyles.trashNormal\" />\r\n                    <i class=\"p-button-link pi pi-trash p-ml-2\" :style=\"registryDatatableDescriptor.primevueTableStyles.trashNormal\" />\r\n                </Button>\r\n            </template>\r\n        </Column>\r\n    </DataTable>\r\n\r\n    <RegistryDatatableWarningDialog :visible=\"warningVisible\" :columns=\"dependentColumns\" @close=\"onWarningDialogClose\"></RegistryDatatableWarningDialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { luxonFormatDate, formatDateWithLocale, formatNumberWithLocale, localeDate, primeVueDate } from '@/helpers/commons/localeHelper'\r\nimport { setInputDataType, numberFormatRegex } from '@/helpers/commons/tableHelpers'\r\nimport { AxiosResponse } from 'axios'\r\nimport Checkbox from 'primevue/checkbox'\r\nimport Column from 'primevue/column'\r\nimport DataTable from 'primevue/datatable'\r\nimport registryDescriptor from '../RegistryDescriptor.json'\r\nimport registryDatatableDescriptor from './RegistryDatatableDescriptor.json'\r\nimport RegistryDatatableEditableField from './RegistryDatatableEditableField.vue'\r\nimport RegistryDatatableWarningDialog from './RegistryDatatableWarningDialog.vue'\r\n\r\nimport deepcopy from 'deepcopy'\r\n\r\nexport default defineComponent({\r\n    name: 'registry-datatable',\r\n    components: {\r\n        Checkbox,\r\n        Column,\r\n        DataTable,\r\n        RegistryDatatableEditableField,\r\n        RegistryDatatableWarningDialog\r\n    },\r\n    props: {\r\n        propColumns: { type: Array },\r\n        propRows: { type: Array, required: true },\r\n        columnMap: { type: Object },\r\n        propConfiguration: { type: Object },\r\n        pagination: { type: Object },\r\n        entity: { type: String },\r\n        id: { type: String },\r\n        stopWarningsState: { type: Array }\r\n    },\r\n    emits: ['rowChanged', 'rowDeleted', 'pageChanged', 'warningChanged'],\r\n    data() {\r\n        return {\r\n            registryDescriptor,\r\n            registryDatatableDescriptor,\r\n            columns: [] as any[],\r\n            rows: [] as any[],\r\n            configuration: {} as any,\r\n            comboColumnOptions: [] as any[],\r\n            buttons: {\r\n                enableButtons: false,\r\n                enableDeleteRecords: false,\r\n                enableAddRecords: false\r\n            },\r\n            lazyParams: {} as any,\r\n            dependentColumns: [] as any[],\r\n            selectedRow: null as any,\r\n            warningVisible: false,\r\n            stopWarnings: [] as any[],\r\n            flagShown: 'flag-shown',\r\n            flagHidden: 'flag-hidden',\r\n            first: 0\r\n        }\r\n    },\r\n    watch: {\r\n        propColumns() {\r\n            this.loadColumns()\r\n        },\r\n        propRows: {\r\n            handler() {\r\n                this.loadRows()\r\n            },\r\n            deep: true\r\n        },\r\n        propConfiguration() {\r\n            this.loadConfiguration()\r\n        },\r\n        pagination: {\r\n            handler() {\r\n                this.loadPagination()\r\n                this.first = this.pagination?.start\r\n            },\r\n            deep: true\r\n        }\r\n    },\r\n    created() {\r\n        this.loadColumns()\r\n        this.loadRows()\r\n        this.loadConfiguration()\r\n        this.loadPagination()\r\n        this.loadWarningState()\r\n    },\r\n    computed: {\r\n        getCurrentLocaleDefaultDateFormat() {\r\n            return (column) => (column.isEditable ? column.format || primeVueDate() : localeDate())\r\n        }\r\n    },\r\n    methods: {\r\n        loadColumns() {\r\n            this.columns = [\r\n                {\r\n                    field: 'id',\r\n                    title: '',\r\n                    size: '',\r\n                    isVisible: true,\r\n                    isEditable: false,\r\n                    columnInfo: { type: 'int' }\r\n                }\r\n            ]\r\n            this.propColumns?.forEach((el: any) => {\r\n                if (el.isVisible) this.columns.push(el)\r\n            })\r\n            this.setColumnDependencies()\r\n            this.loadInitialDropdownOptions()\r\n        },\r\n        setColumnDependencies() {\r\n            this.columns.forEach((column: any) => {\r\n                if (column.dependences) {\r\n                    const index = this.columns.findIndex((parentColumn: any) => parentColumn.field === column.dependences)\r\n                    if (index !== -1) {\r\n                        this.columns[index].hasDependencies ? this.columns[index].hasDependencies.push(column) : (this.columns[index].hasDependencies = [column])\r\n                        this.comboColumnOptions[column.dependences] = []\r\n                    }\r\n                }\r\n            })\r\n        },\r\n        loadInitialDropdownOptions() {\r\n            this.columns.forEach((column: any) => {\r\n                if (column.editorType === 'COMBO') this.addColumnOptions({ column: column, row: {} })\r\n            })\r\n        },\r\n        loadRows() {\r\n            this.rows = deepcopy(this.propRows)\r\n        },\r\n        loadConfiguration() {\r\n            this.configuration = this.propConfiguration\r\n\r\n            for (let i = 0; i < this.configuration.length; i++) {\r\n                if (this.configuration[i].name === 'enableButtons') {\r\n                    this.buttons.enableButtons = this.configuration[i].value === 'true'\r\n                } else {\r\n                    if (this.configuration[i].name === 'enableDeleteRecords') {\r\n                        this.buttons.enableDeleteRecords = this.configuration[i].value === 'true'\r\n                    }\r\n                    if (this.configuration[i].name === 'enableAddRecords') {\r\n                        this.buttons.enableAddRecords = this.configuration[i].value === 'true'\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        loadPagination() {\r\n            this.lazyParams = { ...this.pagination } as any\r\n        },\r\n        loadWarningState() {\r\n            this.stopWarnings = this.stopWarningsState as any[]\r\n        },\r\n        onPage(event: any) {\r\n            this.lazyParams = {\r\n                paginationStart: event.first,\r\n                paginationLimit: event.rows,\r\n                paginationEnd: event.first + event.rows,\r\n                size: this.lazyParams.size\r\n            }\r\n            this.$emit('pageChanged', this.lazyParams)\r\n        },\r\n        rowDeleteConfirm(index: number, row: any) {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.toast.deleteTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => this.deleteRow(index, row)\r\n            })\r\n        },\r\n        deleteRow(index: number, row: any) {\r\n            row.isNew ? this.rows.splice(index, 1) : this.$emit('rowDeleted', row)\r\n        },\r\n        setDataType(columnType: string) {\r\n            switch (columnType) {\r\n                case 'int':\r\n                case 'float':\r\n                case 'decimal':\r\n                case 'long':\r\n                    return 'number'\r\n                case 'date':\r\n                    return 'date'\r\n                default:\r\n                    return 'text'\r\n            }\r\n        },\r\n        getStep(dataType: string) {\r\n            if (dataType === 'float') {\r\n                return '.01'\r\n            } else if (dataType === 'int') {\r\n                return '1'\r\n            } else {\r\n                return 'any'\r\n            }\r\n        },\r\n        getFormattedDate(date: any, format: any, incomingFormat?: string) {\r\n            return luxonFormatDate(date, format, incomingFormat)\r\n        },\r\n        getFormattedDateTime(date: any, format?: any, keepNull?: boolean) {\r\n            return formatDateWithLocale(date, format, keepNull)\r\n        },\r\n        getFormattedNumber(number: number, column: any) {\r\n            return formatNumberWithLocale(number, undefined, null)\r\n        },\r\n        addColumnOptions(payload: any) {\r\n            const column = payload.column\r\n            const row = payload.row\r\n\r\n            if (!this.comboColumnOptions[column.field]) {\r\n                this.comboColumnOptions[column.field] = []\r\n            }\r\n\r\n            if (!this.comboColumnOptions[column.field][row[column.dependences]]) {\r\n                this.loadColumnOptions(column, row)\r\n            }\r\n        },\r\n        async loadColumnOptions(column: any, row: any) {\r\n            const subEntity = column.subEntity ? '::' + column.subEntity + '(' + column.foreignKey + ')' : ''\r\n\r\n            const entityId = this.entity + subEntity + ':' + column.field\r\n            const entityOrder = this.entity + subEntity + ':' + (column.orderBy ?? column.field)\r\n\r\n            const postData = new URLSearchParams({\r\n                ENTITY_ID: entityId,\r\n                QUERY_TYPE: 'standard',\r\n                ORDER_ENTITY: entityOrder,\r\n                ORDER_TYPE: 'asc',\r\n                QUERY_ROOT_ENTITY: 'true'\r\n            })\r\n            if (column.dependences && row && row[column.dependences]) {\r\n                postData.append('DEPENDENCES', this.entity + subEntity + ':' + column.dependences + '=' + row[column.dependences])\r\n            }\r\n            await this.$http\r\n                .post(`/knowageqbeengine/servlet/AdapterHTTP?ACTION_NAME=GET_FILTER_VALUES_ACTION&SBI_EXECUTION_ID=${this.id}`, postData, { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } })\r\n                .then((response: AxiosResponse<any>) => (this.comboColumnOptions[column.field][row[column.dependences]] = response.data.rows))\r\n        },\r\n        addNewRow() {\r\n            const newRow = { id: this.rows.length + 1, isNew: true }\r\n            this.columns.forEach((el: any) => {\r\n                if (el.isVisible && el.field !== 'id') {\r\n                    newRow[el.field] = el.defaultValue ?? ''\r\n                }\r\n            })\r\n            this.rows.unshift(newRow)\r\n\r\n            if (this.lazyParams.size <= registryDescriptor.paginationLimit) {\r\n                this.first = 0\r\n            }\r\n            this.$emit('rowChanged', newRow)\r\n        },\r\n        onDropdownChange(payload: any) {\r\n            const column = payload.column\r\n            const row = payload.row\r\n\r\n            this.selectedRow = row\r\n            if (column.hasDependencies) {\r\n                this.dependentColumns = [] as any[]\r\n                this.setDependentColumns(column)\r\n                if (!this.stopWarnings[column.field]) {\r\n                    this.dependentColumns.forEach((el: any) => {\r\n                        if (this.selectedRow[el.field]) {\r\n                            this.warningVisible = true\r\n                        }\r\n                    })\r\n                } else {\r\n                    this.clearDependentColumnsValues()\r\n                }\r\n            }\r\n\r\n            row.edited = true\r\n            this.$emit('rowChanged', row)\r\n        },\r\n        onWarningDialogClose(payload: any) {\r\n            if (payload.stopWarnings) {\r\n                this.stopWarnings[payload.columnField] = true\r\n                this.$emit('warningChanged', this.stopWarnings)\r\n            }\r\n\r\n            this.clearDependentColumnsValues()\r\n            this.warningVisible = false\r\n        },\r\n        clearDependentColumnsValues() {\r\n            this.dependentColumns.forEach((el: any) => (this.selectedRow[el.field] = ''))\r\n            this.selectedRow.edited = true\r\n            this.$emit('rowChanged', this.selectedRow)\r\n        },\r\n        setDependentColumns(column: any) {\r\n            let tempColumn = column\r\n\r\n            if (!tempColumn.hasDependencies) {\r\n                return\r\n            }\r\n\r\n            tempColumn.hasDependencies.forEach((el: any) => {\r\n                this.dependentColumns.push(el)\r\n                this.setDependentColumns(el)\r\n            })\r\n        },\r\n        setRowEdited(row: any) {\r\n            row.edited = true\r\n            this.$emit('rowChanged', row)\r\n        },\r\n        onCellEditComplete(event: any) {\r\n            let id = event.newData.id\r\n            if (id) {\r\n                var foundIndex = this.rows.findIndex((x) => x.id == id)\r\n                this.rows[foundIndex] = event.newData\r\n            }\r\n        },\r\n        showDefaultNumberFormatIcon(column: any) {\r\n            if (!column || !column.columnInfo || !column.format) return false\r\n            const inputType = setInputDataType(column.columnInfo.type)\r\n            const temp = column.format.trim().match(numberFormatRegex)\r\n            return inputType === 'number' && !temp\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\">\r\n.flag-shown {\r\n    opacity: 1;\r\n}\r\n.flag-hidden {\r\n    opacity: 0;\r\n}\r\n.scrollable-table .p-datatable-wrapper {\r\n    max-width: 93vw;\r\n    overflow-x: auto;\r\n}\r\n.scrollable-table .p-datatable {\r\n    max-width: 93vw;\r\n}\r\n.editableField {\r\n    width: 100%;\r\n}\r\n</style>\r\n","<template>\r\n    <div v-if=\"column\">\r\n        <InputText\r\n            :style=\"knPivotTableDescriptor.pivotStyles.inputFields\"\r\n            v-if=\"column.editorType !== 'COMBO' && column.columnInfo.type !== 'date' && column.columnInfo.type !== 'timestamp'\"\r\n            class=\"kn-material-input\"\r\n            :type=\"setDataType(column.columnInfo.type)\"\r\n            :step=\"getStep(column.columnInfo.type)\"\r\n            v-model=\"row[column.field].data\"\r\n            @input=\"$emit('rowChanged', row)\"\r\n        />\r\n        <Calendar\r\n            :style=\"knPivotTableDescriptor.pivotStyles.inputFields\"\r\n            class=\"pivot-calendar\"\r\n            v-else-if=\"column.columnInfo.type === 'date' || column.columnInfo.type === 'timestamp'\"\r\n            v-model=\"row[column.field].data\"\r\n            :showTime=\"column.columnInfo.type === 'timestamp'\"\r\n            :showSeconds=\"column.columnInfo.type === 'timestamp'\"\r\n            :showButtonBar=\"true\"\r\n            @date-select=\"$emit('rowChanged', row)\"\r\n            :dateFormat=\"column.columnInfo.type === 'date' ? getCurrentLocaleDefaultDateFormat(column) : ''\"\r\n        />\r\n        <Dropdown\r\n            class=\"kn-material-input\"\r\n            v-else-if=\"column.editorType === 'COMBO'\"\r\n            v-model=\"row[column.field].data\"\r\n            :options=\"columnOptions[column.field] ? columnOptions[column.field][row[column.dependences]?.data] : []\"\r\n            :placeholder=\"$t('documentExecution.registry.select')\"\r\n            @change=\"$emit('dropdownChanged', { row: row, column: column })\"\r\n            @before-show=\"$emit('dropdownOpened', { row: row, column: column })\"\r\n        >\r\n            <template #value=\"slotProps\">\r\n                <div v-if=\"slotProps.value\">\r\n                    <span>{{ slotProps.value }}</span>\r\n                </div>\r\n            </template>\r\n            <template #option=\"slotProps\">\r\n                <div>\r\n                    <span>{{ slotProps.option['column_1'] }}</span>\r\n                </div>\r\n            </template>\r\n        </Dropdown>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { setInputDataType, getInputStep } from '@/helpers/commons/tableHelpers'\r\nimport { formatDate } from '@/helpers/commons/localeHelper'\r\nimport { luxonFormatDate, primeVueDate } from '@/helpers/commons/localeHelper'\r\nimport Calendar from 'primevue/calendar'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport knPivotTableDescriptor from '@/components/UI/KnPivotTable/KnPivotTableDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'kn-pivot-table-editable-field',\r\n    components: { Calendar, Dropdown },\r\n    props: { column: { type: Object }, propRow: { type: Object }, comboColumnOptions: { type: Array } },\r\n    emits: ['rowChanged', 'dropdownChanged', 'dropdownOpened'],\r\n    data() {\r\n        return {\r\n            knPivotTableDescriptor,\r\n            row: {} as any,\r\n            columnOptions: [] as any[]\r\n        }\r\n    },\r\n    watch: {\r\n        propRow() {\r\n            this.loadRow()\r\n        },\r\n        comboColumnOptions: {\r\n            handler() {\r\n                this.loadColumnOptions()\r\n            },\r\n            deep: true\r\n        }\r\n    },\r\n    created() {\r\n        this.loadRow()\r\n        this.loadColumnOptions()\r\n    },\r\n    computed: {\r\n        getCurrentLocaleDefaultDateFormat() {\r\n            return (column) => column.format || primeVueDate()\r\n        }\r\n    },\r\n    methods: {\r\n        loadRow() {\r\n            this.row = this.propRow\r\n            let data = this.row[this.column?.field]?.data\r\n            if (data && typeof data === 'string') {\r\n                if (this.column?.columnInfo.type === 'date') {\r\n                    this.row[this.column.field].data = new Date(luxonFormatDate(data, 'yyyy-MM-dd', 'yyyy-MM-dd'))\r\n                } else if (this.column?.columnInfo.type === 'timestamp' && this.row[this.column.field] !== '') {\r\n                    this.row[this.column.field].data = new Date(luxonFormatDate(data, 'yyyy-MM-dd HH:mm:ss.S', 'yyyy-MM-dd HH:mm:ss.S'))\r\n                }\r\n            }\r\n        },\r\n        setDataType(columnType: string) {\r\n            return setInputDataType(columnType)\r\n        },\r\n        getStep(dataType: string) {\r\n            return getInputStep(dataType)\r\n        },\r\n        loadColumnOptions() {\r\n            this.columnOptions = this.comboColumnOptions as any[]\r\n        },\r\n        getFormattedDate(date: any, format: any) {\r\n            return formatDate(date, format)\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.pivot-calendar .p-inputtext {\r\n    border: none;\r\n    background-color: transparent;\r\n}\r\n</style>\r\n","<template>\r\n    <table class=\"pivot-table\" :style=\"descriptor.pivotStyles.table\">\r\n        <thead>\r\n            <th class=\"pivot-header\" v-for=\"(column, index) of columns.slice(1)\" :key=\"index\" :style=\"descriptor.pivotStyles.header\">\r\n                {{ column.field }}\r\n                <i v-if=\"column.isEditable && column.type !== 'merge' && column.columnInfo.type !== 'boolean'\" class=\"pi pi-pencil edit-icon p-ml-2\" />\r\n            </th>\r\n            <th class=\"pivot-header\" :style=\"descriptor.pivotStyles.iconColumn\" />\r\n        </thead>\r\n\r\n        <tr v-for=\"(row, index) of mappedRows\" :key=\"index\">\r\n            <template v-for=\"(column, i) of columns.slice(1)\" :key=\"i\">\r\n                <td class=\"pivot-data\" v-if=\"row[column.field].rowSpan > 0\" :rowspan=\"row[column.field].rowSpan\" :style=\"descriptor.pivotStyles.row\">\r\n                    <KnPivotTableEditableField\r\n                        v-if=\"column.isEditable && column.type !== 'merge'\"\r\n                        :column=\"column\"\r\n                        :propRow=\"row\"\r\n                        :comboColumnOptions=\"columnOptions\"\r\n                        @rowChanged=\"setRowEdited(row)\"\r\n                        @dropdownChanged=\"onDropdownChange\"\r\n                        @dropdownOpened=\"$emit('dropdownOpened', $event)\"\r\n                    ></KnPivotTableEditableField>\r\n\r\n                    <Checkbox v-else-if=\"column.editorType === 'TEXT' && column.columnInfo.type === 'boolean'\" v-model=\"row[column.field].data\" :binary=\"true\" :disabled=\"!column.isEditable || column.type === 'merge'\" @change=\"setRowEdited(row)\"></Checkbox>\r\n                    <span v-if=\"!column.isEditable\">\r\n                        <span v-if=\"row[column.field].data && column.columnInfo?.type === 'date'\">\r\n                            {{ getFormattedDate(row[column.field].data, 'yyyy-MM-dd', getCurrentLocaleDefaultDateFormat(column)) }}\r\n                        </span>\r\n                        <span v-else-if=\"row[column.field].data && column.columnInfo?.type === 'timestamp'\"> {{ getFormattedDateTime(row[column.field].data, { dateStyle: 'short', timeStyle: 'medium' }, true) }}</span>\r\n\r\n                        <span v-else>{{ row[column.field].data }}</span>\r\n                    </span>\r\n                </td>\r\n            </template>\r\n            <td class=\"pivot-data\"><i v-if=\"row.edited\" class=\"pi pi-flag\" :style=\"descriptor.pivotStyles.iconColumn\"></i></td>\r\n        </tr>\r\n    </table>\r\n\r\n    <Paginator\r\n        v-model:first=\"first\"\r\n        :rows=\"numberOfRows\"\r\n        :totalRecords=\"lazyParams.size\"\r\n        :currentPageReportTemplate=\"\r\n            $t('common.table.footer.paginated', {\r\n                first: '{first}',\r\n                last: '{last}',\r\n                totalRecords: '{totalRecords}'\r\n            })\r\n        \"\r\n        paginatorTemplate=\"CurrentPageReport FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink\"\r\n        @page=\"onPage($event)\"\r\n    ></Paginator>\r\n    <RegistryDatatableWarningDialog :visible=\"warningVisible\" :columns=\"dependentColumns\" @close=\"onWarningDialogClose\"></RegistryDatatableWarningDialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { formatNumberWithLocale, primeVueDate, localeDate } from '@/helpers/commons/localeHelper'\r\nimport { luxonFormatDate, formatDateWithLocale } from '@/helpers/commons/localeHelper'\r\nimport Checkbox from 'primevue/checkbox'\r\nimport KnPivotTableEditableField from './KnPivotTableEditableField.vue'\r\nimport Paginator from 'primevue/paginator'\r\nimport RegistryDatatableWarningDialog from '@/modules/documentExecution/registry/tables/RegistryDatatableWarningDialog.vue'\r\nimport descriptor from '@/modules/documentExecution/registry/tables/RegistryDatatableDescriptor.json'\r\n\r\n// // Date format is fixed to MM/DD/YYYY hh:mm:ss for compatibility with Primevue Calendar with Davide Vernassa approval\r\n\r\nexport default defineComponent({\r\n    name: 'kn-pivot-table',\r\n    components: { Checkbox, KnPivotTableEditableField, Paginator, RegistryDatatableWarningDialog },\r\n    props: {\r\n        columns: [] as any,\r\n        rows: [] as any,\r\n        propConfiguration: { type: Object },\r\n        entity: { type: String },\r\n        id: { type: String },\r\n        pagination: { type: Object },\r\n        comboColumnOptions: { type: Array },\r\n        numberOfRows: { type: Number },\r\n        stopWarningsState: { type: Array }\r\n    },\r\n    emits: ['rowChanged', 'pageChanged', 'dropdownOpened', 'warningChanged'],\r\n    created() {\r\n        this.mapRows()\r\n        this.checkForRowSpan(0, this.mappedRows.length - 1, this.mappedRows, this.columns, 1)\r\n        this.loadPagination()\r\n        this.loadColumnOptions()\r\n        this.loadWarningState()\r\n    },\r\n    watch: {\r\n        rows: {\r\n            handler() {\r\n                this.mapRows()\r\n                this.checkForRowSpan(0, this.mappedRows.length - 1, this.mappedRows, this.columns, 1)\r\n            },\r\n            deep: true\r\n        },\r\n        pagination: {\r\n            handler() {\r\n                this.loadPagination()\r\n                this.first = this.pagination?.start\r\n            },\r\n            deep: true\r\n        },\r\n        comboColumnOptions: {\r\n            handler() {\r\n                this.loadColumnOptions()\r\n            },\r\n            deep: true\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            descriptor,\r\n            mappedRows: [] as any,\r\n            configuration: {} as any,\r\n            columnOptions: [] as any[],\r\n            dependentColumns: [] as any[],\r\n            selectedRow: null as any,\r\n            warningVisible: false,\r\n            stopWarnings: [] as any[],\r\n            lazyParams: {} as any,\r\n            first: 0\r\n        }\r\n    },\r\n    computed: {\r\n        getCurrentLocaleDefaultDateFormat() {\r\n            return (column) => (column.isEditable ? column.format || primeVueDate() : localeDate())\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        mapRows() {\r\n            this.mappedRows = this.rows.map((row) => {\r\n                let newRow = { id: row.id }\r\n                this.columns.forEach((column) => {\r\n                    newRow[column.field] = { data: row[column.field], rowSpan: 1 }\r\n                })\r\n                return newRow\r\n            })\r\n        },\r\n        checkForRowSpan(fromIndex, toIndex, rows, columns, columnIndex) {\r\n            const column = columns[columnIndex]\r\n\r\n            if (column.type !== 'merge') {\r\n                return\r\n            }\r\n\r\n            let groupCount = 1\r\n            let startIndex = fromIndex\r\n            for (let i = fromIndex + 1; i <= toIndex; i++) {\r\n                if (rows[i - 1][column.field].data === rows[i][column.field].data) {\r\n                    rows[i][column.field].rowSpan = 0\r\n                    groupCount++\r\n                }\r\n                if (rows[i - 1][column.field].data !== rows[i][column.field].data || i === toIndex) {\r\n                    rows[startIndex][column.field].rowSpan = groupCount\r\n                    if (i - 1 > startIndex && columnIndex < columns.length - 1) {\r\n                        this.checkForRowSpan(startIndex, i === toIndex ? i : i - 1, rows, columns, columnIndex + 1)\r\n                    }\r\n                    startIndex = i\r\n                    groupCount = 1\r\n                }\r\n            }\r\n        },\r\n        loadPagination() {\r\n            this.lazyParams = { ...this.pagination } as any\r\n        },\r\n        onPage(event: any) {\r\n            this.lazyParams = {\r\n                paginationStart: event.first,\r\n                paginationLimit: event.rows,\r\n                paginationEnd: event.first + event.rows,\r\n                size: this.lazyParams.size\r\n            }\r\n            this.$emit('pageChanged', this.lazyParams)\r\n        },\r\n        loadWarningState() {\r\n            this.stopWarnings = this.stopWarningsState as any[]\r\n        },\r\n        getFormattedNumber(number: number, precision?: number, format?: any) {\r\n            return formatNumberWithLocale(number, precision, format)\r\n        },\r\n        setRowEdited(row: any) {\r\n            row.edited = true\r\n            this.$emit('rowChanged', row)\r\n        },\r\n        onDropdownChange(payload: any) {\r\n            const column = payload.column\r\n            const row = payload.row\r\n\r\n            row[column.field] = { data: row[column.field].data['column_1'], rowSpan: 1 }\r\n            this.selectedRow = row\r\n\r\n            if (column.hasDependencies) {\r\n                this.dependentColumns = [] as any[]\r\n                this.setDependentColumns(column)\r\n\r\n                if (!this.stopWarnings[column.field]) {\r\n                    this.dependentColumns.forEach((el: any) => {\r\n                        if (this.selectedRow[el.field]) {\r\n                            this.warningVisible = true\r\n                        }\r\n                    })\r\n                } else {\r\n                    this.clearDependentColumnsValues()\r\n                }\r\n            }\r\n\r\n            row.edited = true\r\n            this.$emit('rowChanged', row)\r\n        },\r\n        setDependentColumns(column: any) {\r\n            let tempColumn = column\r\n\r\n            if (!tempColumn.hasDependencies) {\r\n                return\r\n            }\r\n\r\n            tempColumn.hasDependencies.forEach((el: any) => {\r\n                this.dependentColumns.push(el)\r\n                this.setDependentColumns(el)\r\n            })\r\n        },\r\n        onWarningDialogClose(payload: any) {\r\n            if (payload.stopWarnings) {\r\n                this.stopWarnings[payload.columnField] = true\r\n                this.$emit('warningChanged', this.stopWarnings)\r\n            }\r\n\r\n            this.clearDependentColumnsValues()\r\n            this.warningVisible = false\r\n        },\r\n        clearDependentColumnsValues() {\r\n            this.dependentColumns.forEach((el: any) => (this.selectedRow[el.field] = { data: '', rowSpan: 1 }))\r\n            this.selectedRow.edited = true\r\n            this.$emit('rowChanged', this.selectedRow)\r\n        },\r\n        loadColumnOptions() {\r\n            this.columnOptions = this.comboColumnOptions as any[]\r\n        },\r\n        getFormattedDate(date: any, inputFormat?: any, outputFormat?: string) {\r\n            return luxonFormatDate(date, inputFormat, outputFormat)\r\n        },\r\n        getFormattedDateTime(date: any, format?: any, keepNull?: boolean) {\r\n            return formatDateWithLocale(date, format, keepNull)\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.pivot-table .pivot-header,\r\n.pivot-table .pivot-data {\r\n    border: 3px solid #5d8dbb93;\r\n}\r\n</style>\r\n","<template>\r\n    <KnPivotTable\r\n        :id=\"id\"\r\n        :columns=\"filteredColumns\"\r\n        :rows=\"tempRows\"\r\n        :propConfiguration=\"propConfiguration\"\r\n        :entity=\"entity\"\r\n        :pagination=\"pagination\"\r\n        :comboColumnOptions=\"comboColumnOptions\"\r\n        :numberOfRows=\"registryDescriptor.paginationNumberOfItems\"\r\n        @rowChanged=\"onRowChanged\"\r\n        @pageChanged=\"onPageChange\"\r\n        @dropdownOpened=\"addColumnOptions\"\r\n    ></KnPivotTable>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { AxiosResponse } from 'axios'\r\nimport registryDescriptor from '../RegistryDescriptor.json'\r\nimport KnPivotTable from '@/components/UI/KnPivotTable/KnPivotTable.vue'\r\n\r\nexport default defineComponent({\r\n    name: 'registry-pivot-datatable',\r\n    components: { KnPivotTable },\r\n    props: {\r\n        columns: [] as any,\r\n        rows: [] as any,\r\n        propConfiguration: { type: Object },\r\n        entity: { type: String },\r\n        id: { type: String },\r\n        propPagination: { type: Object }\r\n    },\r\n    emits: ['rowChanged', 'pageChanged', 'resetRows'],\r\n    data() {\r\n        return {\r\n            registryDescriptor,\r\n            filteredColumns: [] as any[],\r\n            tempRows: [] as any[],\r\n            pagination: {} as any,\r\n            comboColumnOptions: [] as any[],\r\n            lazy: false\r\n        }\r\n    },\r\n    watch: {\r\n        columns() {\r\n            this.getFilteredColumns()\r\n        },\r\n        rows: {\r\n            handler() {\r\n                this.loadRows()\r\n            },\r\n            deep: true\r\n        },\r\n        propPagination: {\r\n            handler() {\r\n                this.loadPagination()\r\n            },\r\n            deep: true\r\n        }\r\n    },\r\n    created() {\r\n        this.getFilteredColumns()\r\n        this.loadRows()\r\n        this.loadPagination()\r\n    },\r\n    methods: {\r\n        getFilteredColumns() {\r\n            this.filteredColumns = this.columns\r\n        },\r\n        loadRows() {\r\n            this.tempRows = this.rows\r\n\r\n            if (this.tempRows.length <= registryDescriptor.paginationLimit) {\r\n                this.lazy = false\r\n                this.tempRows = this.tempRows.slice(0, registryDescriptor.paginationNumberOfItems)\r\n            }\r\n        },\r\n        onRowChanged(row: any) {\r\n            this.$emit('rowChanged', row)\r\n        },\r\n        loadPagination() {\r\n            this.pagination = this.propPagination\r\n        },\r\n        onPageChange(event: any) {\r\n            if (this.lazy) {\r\n                this.$emit('pageChanged', event)\r\n            } else {\r\n                this.tempRows = this.rows.slice(event.paginationStart, event.paginationStart + registryDescriptor.paginationNumberOfItems)\r\n                this.$emit('resetRows')\r\n            }\r\n        },\r\n        addColumnOptions(payload: any) {\r\n            const column = payload.column\r\n            const row = payload.row\r\n            if (!this.comboColumnOptions[column.field]) {\r\n                this.comboColumnOptions[column.field] = []\r\n            }\r\n\r\n            if (!this.comboColumnOptions[column.field][row[column.dependences]?.data]) {\r\n                this.loadColumnOptions(column, row)\r\n            }\r\n        },\r\n        async loadColumnOptions(column: any, row: any) {\r\n            const subEntity = column.subEntity ? '::' + column.subEntity + '(' + column.foreignKey + ')' : ''\r\n\r\n            const entityId = this.entity + subEntity + ':' + column.field\r\n            const entityOrder = this.entity + subEntity + ':' + (column.orderBy ?? column.field)\r\n\r\n            const postData = new URLSearchParams({ ENTITY_ID: entityId, QUERY_TYPE: 'standard', ORDER_ENTITY: entityOrder, ORDER_TYPE: 'asc', QUERY_ROOT_ENTITY: 'true' })\r\n            if (column.dependences && row && row[column.dependences].data) {\r\n                postData.append('DEPENDENCES', this.entity + subEntity + ':' + column.dependences + '=' + row[column.dependences].data)\r\n            }\r\n            await this.$http\r\n                .post(`/knowageqbeengine/servlet/AdapterHTTP?ACTION_NAME=GET_FILTER_VALUES_ACTION&SBI_EXECUTION_ID=${this.id}`, postData, { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } })\r\n                .then((response: AxiosResponse<any>) => (this.comboColumnOptions[column.field][row[column.dependences]?.data] = response.data.rows))\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div v-if=\"filter.static && filter.visible\">\r\n        <InputText class=\"kn-material-input p-mx-2\" v-model=\"filter.filterValue\" disabled />\r\n    </div>\r\n    <div v-else-if=\"!filter.static\" class=\"p-mx-2\">\r\n        <span class=\"p-float-label\">\r\n            <InputText v-if=\"filter.presentation === 'MANUAL'\" class=\"kn-material-input\" v-model=\"filter.filterValue\" @blur=\"filterChanged\" />\r\n            <Dropdown v-else-if=\"filter.presentation === 'COMBO'\" class=\"kn-material-input\" v-model=\"filter.filterValue\" :options=\"options\" optionValue=\"column_1\" optionLabel=\"column_1\" @change=\"filterChanged\" :filter=\"true\"> </Dropdown>\r\n            <label v-if=\"filter.presentation !== 'DRIVER'\" class=\"kn-material-input-label\"> {{ filter.title }}</label>\r\n        </span>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { AxiosResponse } from 'axios'\r\nimport Dropdown from 'primevue/dropdown'\r\n\r\nexport default defineComponent({\r\n    name: 'registry-filter-card',\r\n    components: { Dropdown },\r\n    props: { propFilter: { type: Object }, filterOptions: { type: Array }, entity: { type: String }, clearTrigger: { type: Boolean }, id: { type: String } },\r\n    emits: ['changed'],\r\n    data() {\r\n        return {\r\n            filter: {} as any,\r\n            options: [] as any\r\n        }\r\n    },\r\n    watch: {\r\n        propFilter() {\r\n            this.loadFilter()\r\n        },\r\n        clearTrigger() {\r\n            this.filter.filterValue = ''\r\n        }\r\n    },\r\n    async created() {\r\n        this.loadFilter()\r\n        if (this.filter.presentation === 'COMBO') {\r\n            await this.loadFilterOptions()\r\n        }\r\n    },\r\n    methods: {\r\n        loadFilter() {\r\n            this.filter = { ...this.propFilter }\r\n        },\r\n        async loadFilterOptions() {\r\n            const subEntity = this.filter.column.subEntity ? '::' + this.filter.column.subEntity + '(' + this.filter.column.foreignKey + ')' : ''\r\n\r\n            const entityId = this.entity + subEntity + ':' + this.filter.field\r\n            const entityOrder = this.entity + subEntity + ':' + (this.filter.column.orderBy ?? this.filter.field)\r\n\r\n            const postData = new URLSearchParams({ ENTITY_ID: entityId, QUERY_TYPE: 'standard', ORDER_ENTITY: entityOrder, ORDER_TYPE: 'asc', QUERY_ROOT_ENTITY: 'true' })\r\n            await this.$http.post(`/knowageqbeengine/servlet/AdapterHTTP?ACTION_NAME=GET_FILTER_VALUES_ACTION&SBI_EXECUTION_ID=${this.id}`, postData, { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }).then((response: AxiosResponse<any>) => (this.options = response.data.rows))\r\n        },\r\n        filterChanged() {\r\n            this.$emit('changed', this.filter.filterValue)\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    {{ $t('documentExecution.registry.filters') }}\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n        <template #content>\r\n            <div class=\"filter-container\" :style=\"registryDescriptor.styles.filterContainer\">\r\n                <div class=\"fields-container\" :style=\"registryDescriptor.styles.fieldsContainer\">\r\n                    <form class=\"p-fluid p-formgrid p-grid\">\r\n                        <template v-for=\"(filter, index) in filters\" :key=\"index\">\r\n                            <RegistryFilterCard class=\"kn-flex p-mx-2\" :id=\"id\" :propFilter=\"filter\" :entity=\"entity\" :clearTrigger=\"clearFiltersTrigger\" @changed=\"setFilterValue($event, index)\"></RegistryFilterCard>\r\n                        </template>\r\n                    </form>\r\n                </div>\r\n\r\n                <div class=\"button-container p-ml-2\" :style=\"registryDescriptor.styles.buttonsContainer\">\r\n                    <Button class=\"p-button kn-button--primary p-mx-1\" :style=\"registryDescriptor.styles.filtersButton\" @click=\"clearAllFilters\">{{ $t('documentExecution.registry.clearFilters') }}</Button>\r\n                    <Button class=\"p-button kn-button--primary p-mx-1\" :style=\"registryDescriptor.styles.filtersButton\" @click=\"filterRegistry\" data-test=\"filter-button\">{{ $t('documentExecution.registry.filter') }}</Button>\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { defineComponent } from 'vue'\r\n    import Card from 'primevue/card'\r\n    import RegistryFilterCard from './RegistryFilterCard.vue'\r\n    import registryDescriptor from './RegistryDescriptor.json'\r\n\r\n    export default defineComponent({\r\n        name: 'registry-filters-card',\r\n        components: { Card, RegistryFilterCard },\r\n        props: {\r\n            propFilters: { type: Array },\r\n            entity: { type: String },\r\n            id: { type: String }\r\n        },\r\n        emits: ['filter'],\r\n        data() {\r\n            return {\r\n                registryDescriptor,\r\n                filters: [] as any[],\r\n                clearFiltersTrigger: false\r\n            }\r\n        },\r\n        watch: {\r\n            propFilters() {\r\n                this.loadFilters()\r\n            }\r\n        },\r\n        async created() {\r\n            this.loadFilters()\r\n        },\r\n        methods: {\r\n            loadFilters() {\r\n                this.filters = [...(this.propFilters as any[])]\r\n            },\r\n            setFilterValue(value: string, index: number) {\r\n                this.filters[index].filterValue = value\r\n            },\r\n            clearAllFilters() {\r\n                this.filters.forEach((el: any) => (el.filterValue = ''))\r\n                this.clearFiltersTrigger = !this.clearFiltersTrigger\r\n                this.$emit('filter', this.filters)\r\n            },\r\n            filterRegistry() {\r\n                this.$emit('filter', this.filters)\r\n            }\r\n        }\r\n    })\r\n</script>\r\n","<template>\r\n    <div class=\"p-d-flex p-flex-column kn-width-full kn-height-full\">\r\n        <Toolbar class=\"kn-toolbar kn-toolbar--secondary kn-width-full\">\r\n            <template #start>\r\n                {{ $t('documentExecution.registry.title') }}\r\n            </template>\r\n            <template #end>\r\n                <div class=\"p-d-flex p-flex-row\">\r\n                    <Button class=\"kn-button p-button-text\" @click=\"saveRegistry\">{{ $t('common.save') }}</Button>\r\n                </div>\r\n            </template>\r\n        </Toolbar>\r\n        <div class=\"p-d-flex p-flex-column kn-overflow kn-flex\">\r\n            <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar\" v-if=\"loading\" data-test=\"progress-bar\" />\r\n            <div class=\"\">\r\n                <RegistryFiltersCard v-if=\"filters.length > 0\" :id=\"id\" :propFilters=\"filters\" :entity=\"entity\" @filter=\"filterRegistry\" class=\"\"></RegistryFiltersCard>\r\n            </div>\r\n            <div class=\"kn-relative kn-flex p-m-2 registry-custom-card\">\r\n                <div class=\"kn-height-full kn-width-full kn-absolute\">\r\n                    <RegistryPivotDatatable\r\n                        v-if=\"isPivot\"\r\n                        :columns=\"columns\"\r\n                        :id=\"id\"\r\n                        :rows=\"rows\"\r\n                        :entity=\"entity\"\r\n                        :propConfiguration=\"configuration\"\r\n                        :propPagination=\"pagination\"\r\n                        @rowChanged=\"onRowChanged\"\r\n                        @rowDeleted=\"onRowDeleted\"\r\n                        @pageChanged=\"updatePagination\"\r\n                        @resetRows=\"updatedRows = []\"\r\n                        @warningChanged=\"setWarningState\"\r\n                    ></RegistryPivotDatatable>\r\n                    <RegistryDatatable\r\n                        v-else\r\n                        :propColumns=\"columns\"\r\n                        :id=\"id\"\r\n                        :propRows=\"rows\"\r\n                        :propConfiguration=\"configuration\"\r\n                        :columnMap=\"columnMap\"\r\n                        :pagination=\"pagination\"\r\n                        :entity=\"entity\"\r\n                        :stopWarningsState=\"stopWarningsState\"\r\n                        @rowChanged=\"onRowChanged\"\r\n                        @rowDeleted=\"onRowDeleted\"\r\n                        @pageChanged=\"updatePagination\"\r\n                        @warningChanged=\"setWarningState\"\r\n                    ></RegistryDatatable>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { AxiosResponse } from 'axios'\r\nimport registryDescriptor from './RegistryDescriptor.json'\r\nimport RegistryDatatable from './tables/RegistryDatatable.vue'\r\nimport RegistryPivotDatatable from './tables/RegistryPivotDatatable.vue'\r\nimport RegistryFiltersCard from './RegistryFiltersCard.vue'\r\nimport { formatDate } from '@/helpers/commons/localeHelper'\r\nimport { mapActions } from 'pinia'\r\nimport store from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'registry',\r\n    components: {\r\n        RegistryDatatable,\r\n        RegistryPivotDatatable,\r\n        RegistryFiltersCard\r\n    },\r\n    props: { id: { type: String }, reloadTrigger: { type: Boolean } },\r\n    data() {\r\n        return {\r\n            registryDescriptor,\r\n            registry: {} as any,\r\n            configuration: [] as any[],\r\n            columns: [] as any[],\r\n            rows: [] as any[],\r\n            columnMap: {} as any,\r\n            pagination: { start: 0, limit: 15 } as any,\r\n            updatedRows: [] as any,\r\n            filters: [] as any[],\r\n            selectedFilters: [] as any[],\r\n            entity: null as string | null,\r\n            stopWarningsState: [] as any[],\r\n            isPivot: false,\r\n            loading: false\r\n        }\r\n    },\r\n    watch: {\r\n        async id() {\r\n            await this.loadPage()\r\n            this.stopWarningsState = []\r\n        },\r\n        async reloadTrigger() {\r\n            await this.loadPage()\r\n            this.stopWarningsState = []\r\n        }\r\n    },\r\n    async created() {\r\n        await this.loadPage()\r\n    },\r\n    methods: {\r\n        ...mapActions(store, ['setInfo', 'setError']),\r\n        async loadPage() {\r\n            this.loading = true\r\n            await this.loadRegistry()\r\n            this.loadRegistryData()\r\n            this.loading = false\r\n        },\r\n        async loadRegistry() {\r\n            const postData = new URLSearchParams()\r\n\r\n            if (this.pagination.size > registryDescriptor.paginationLimit) {\r\n                postData.append('limit', '' + registryDescriptor.paginationNumberOfItems)\r\n            }\r\n\r\n            this.selectedFilters.forEach((el: any) => {\r\n                if (el.filterValue) {\r\n                    postData.append(el.field, el.filterValue)\r\n                }\r\n            })\r\n\r\n            postData.append('start', '' + this.pagination.start)\r\n            await this.$http\r\n                .post(`/knowageqbeengine/servlet/AdapterHTTP?ACTION_NAME=LOAD_REGISTRY_ACTION&SBI_EXECUTION_ID=${this.id}`, postData, {\r\n                    headers: {\r\n                        Accept: 'application/json, text/plain, */*',\r\n                        'Content-Type': 'application/x-www-form-urlencoded'\r\n                    }\r\n                })\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.pagination.size = response.data.results\r\n                    this.registry = response.data\r\n                })\r\n                .catch(() => {})\r\n        },\r\n        loadRegistryData() {\r\n            if (this.registry) {\r\n                this.loadConfiguration()\r\n                this.loadEntity()\r\n                this.loadColumns()\r\n                this.loadColumnMap()\r\n                this.loadColumnsInfo()\r\n                this.loadRows()\r\n                this.getFilters()\r\n            }\r\n        },\r\n        loadColumns() {\r\n            this.columns = []\r\n            this.registry.registryConfig.columns.map((el: any) => {\r\n                if (el.type === 'merge') {\r\n                    this.isPivot = true\r\n                }\r\n                this.columns.push(el)\r\n            })\r\n        },\r\n        loadColumnMap() {\r\n            this.columnMap = { id: 'id' }\r\n            for (let i = 1; i < this.registry.metaData.fields.length; i++) {\r\n                this.columnMap[this.registry.metaData.fields[i].name] = this.registry.metaData.fields[i].header\r\n            }\r\n        },\r\n        loadColumnsInfo() {\r\n            for (let i = 1; i < this.registry.metaData.fields.length; i++) {\r\n                this.columns[i - 1].columnInfo = this.registry.metaData.fields[i]\r\n            }\r\n        },\r\n        loadRows() {\r\n            this.rows = []\r\n            const limit = this.pagination.size <= registryDescriptor.paginationLimit ? this.registry.rows.length : registryDescriptor.paginationNumberOfItems\r\n            for (let i = 0; i < limit; i++) {\r\n                const tempRow = {}\r\n                Object.keys(this.registry.rows[i]).forEach((key) => {\r\n                    tempRow[this.columnMap[key]] = this.registry.rows[i][key]\r\n                })\r\n                this.rows.push(tempRow)\r\n            }\r\n        },\r\n        loadConfiguration() {\r\n            this.configuration = this.registry.registryConfig.configurations\r\n        },\r\n        loadEntity() {\r\n            this.entity = this.registry.registryConfig.entity\r\n        },\r\n        onRowChanged(row: any) {\r\n            const tempRow = { ...row }\r\n            const index = this.updatedRows.findIndex((el: any) => el.id === tempRow.id)\r\n            index === -1 ? this.updatedRows.push(tempRow) : (this.updatedRows[index] = tempRow)\r\n        },\r\n        async saveRegistry() {\r\n            this.updatedRows.forEach((el: any) => {\r\n                if (this.isPivot) {\r\n                    this.formatPivotRows(el)\r\n                }\r\n\r\n                delete el.id\r\n                delete el.isNew\r\n                delete el.edited\r\n            })\r\n\r\n            const updatedRowsToIsoStrings = JSON.parse(JSON.stringify(this.updatedRows))\r\n            updatedRowsToIsoStrings.forEach((el: any) => {\r\n                this.registry.metaData.fields.forEach((element) => {\r\n                    if (el[element.header]) {\r\n                        if (element.type === 'date') {\r\n                            let date = new Date(formatDate(el[element.header], 'toISOString'))\r\n                            let offset = new Date().getTimezoneOffset()\r\n\r\n                            el[element.header] = new Date(date.getTime() - offset * 60000)\r\n                        } else if (element.type === 'timestamp') {\r\n                            el[element.header] = formatDate(el[element.header], 'toISOString')\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n\r\n            const postData = new URLSearchParams()\r\n            postData.append('records', '' + JSON.stringify(updatedRowsToIsoStrings))\r\n            await this.$http\r\n                .post(`/knowageqbeengine/servlet/AdapterHTTP?ACTION_NAME=UPDATE_RECORDS_ACTION&SBI_EXECUTION_ID=${this.id}`, postData, { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } })\r\n                .then(() => {\r\n                    this.setInfo({\r\n                        title: this.$t('common.toast.updateTitle'),\r\n                        msg: this.$t('common.toast.updateSuccess')\r\n                    })\r\n                    this.pagination.start = 0\r\n                    this.loadPage()\r\n                })\r\n                .finally(() => (this.updatedRows = []))\r\n        },\r\n        async onRowDeleted(row: any) {\r\n            if (this.isPivot) {\r\n                this.formatPivotRows(row)\r\n            }\r\n            const postData = new URLSearchParams()\r\n            postData.append('records', '' + JSON.stringify([row]))\r\n            await this.$http\r\n                .post(`/knowageqbeengine/servlet/AdapterHTTP?ACTION_NAME=DELETE_RECORDS_ACTION&SBI_EXECUTION_ID=${this.id}`, postData, { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } })\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.setInfo({\r\n                        title: this.$t('common.toast.deleteTitle'),\r\n                        msg: this.$t('common.toast.deleteSuccess')\r\n                    })\r\n\r\n                    if (response.data.ids[0]) {\r\n                        const index = this.rows.findIndex((el: any) => el.id === row.id)\r\n                        this.rows.splice(index, 1)\r\n                        this.pagination.size--\r\n                    }\r\n                })\r\n                .catch((response: AxiosResponse<any>) => {\r\n                    this.setError({\r\n                        title: this.$t('common.error.generic'),\r\n                        msg: response\r\n                    })\r\n                })\r\n        },\r\n        getFilters() {\r\n            this.filters = []\r\n            const tempFilters = this.registry.registryConfig.filters\r\n\r\n            for (let i = 0; i < tempFilters.length; i++) {\r\n                const filter = tempFilters[i]\r\n\r\n                for (let j = 0; j < this.columns.length; j++) {\r\n                    const column = this.columns[j]\r\n                    if (filter.presentation !== 'DRIVER' && filter.field === column.field) {\r\n                        this.filters.push({\r\n                            title: filter.title,\r\n                            field: filter.field,\r\n                            presentation: filter.presentationType,\r\n                            static: filter.isStatic,\r\n                            visible: filter.isVisible,\r\n                            column: column\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        async filterRegistry(filters: any[]) {\r\n            this.selectedFilters = [...filters]\r\n            this.pagination.start = 0\r\n            this.pagination.size = 0\r\n            await this.loadRegistry()\r\n            this.loadRows()\r\n        },\r\n        async updatePagination(lazyParams: any) {\r\n            this.updatedRows = []\r\n            this.pagination = {\r\n                start: lazyParams.paginationStart,\r\n                limit: lazyParams.paginationLimit,\r\n                size: lazyParams.size\r\n            }\r\n\r\n            if (this.pagination.size > registryDescriptor.paginationLimit) {\r\n                await this.loadRegistry()\r\n                this.loadRows()\r\n            }\r\n        },\r\n        formatPivotRows(row: any) {\r\n            Object.keys(row).forEach((key: any) => {\r\n                if (key !== 'id') {\r\n                    row[key] = row[key].data\r\n                }\r\n            })\r\n        },\r\n        setWarningState(warnings: any[]) {\r\n            this.stopWarningsState = warnings\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\">\r\n.registry-custom-card {\r\n    background: #ffffff;\r\n    color: rgba(0, 0, 0, 0.87);\r\n    box-shadow: 0 2px 1px -1px rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 1px 3px 0 rgb(0 0 0 / 12%);\r\n}\r\n</style>\r\n"],"names":["_sfc_main","Calendar","Dropdown","InputNumber","registryDatatableDescriptor","_openBlock","_Fragment","_createBlock","_createCommentVNode","_normalizeStyle","Checkbox","Dialog","_hoisted_1","_hoisted_2","_withCtx","_createVNode","_createElementVNode","_createTextVNode","_toDisplayString","_hoisted_3","Column","DataTable","_createElementBlock","_renderList","_withDirectives","_hoisted_5","_hoisted_6","_hoisted_7","_normalizeClass","Paginator","_hoisted_4","Card"],"mappings":"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"}