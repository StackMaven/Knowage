{"version":3,"file":"RolesManagementTabView-e76cd226.js","sources":["../../../../modules/managers/rolesManagement/tabs/DomainCategoryTab/DomainCategoryTab.vue","../../../../modules/managers/rolesManagement/tabs/RoleDetailTab/RoleDetailTab.vue","../../../../modules/managers/rolesManagement/tabs/RoleAuthorizationsTab/RoleAuthorizationsTab.vue","../../../../modules/managers/rolesManagement/RolesManagementTabView.vue"],"sourcesContent":["<template>\r\n    <Card class=\"domainCard\" style=\"height: calc(100vh - 75px)\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    {{ title }}\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n        <template #content>\r\n            <DataTable\r\n                :value=\"categoryList\"\r\n                v-model:selection=\"selectedCategories\"\r\n                class=\"p-datatable-sm kn-table\"\r\n                dataKey=\"categoryId\"\r\n                :paginator=\"true\"\r\n                :rows=\"20\"\r\n                responsiveLayout=\"stack\"\r\n                breakpoint=\"960px\"\r\n                :scrollable=\"true\"\r\n                scrollHeight=\"flex\"\r\n                @rowSelect=\"setDirty\"\r\n                @rowUnselect=\"setDirty\"\r\n                @rowSelectAll=\"onSelectAll\"\r\n                @rowUnselectAll=\"onUnselectAll\"\r\n                data-test=\"data-table\"\r\n            >\r\n                <template #empty>\r\n                    {{ $t('common.info.noDataFound') }}\r\n                </template>\r\n                <Column class=\"kn-column-checkbox\" selectionMode=\"multiple\" dataKey=\"categoryId\"></Column>\r\n                <Column field=\"categoryName\" :header=\"$t('common.name')\" :style=\"domainCategoryTabDescriptor.column.header.style\"></Column>\r\n            </DataTable>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { iCategory } from './../../RolesManagement'\r\nimport Card from 'primevue/card'\r\nimport Column from 'primevue/column'\r\nimport DataTable from 'primevue/datatable'\r\nimport domainCategoryTabDescriptor from './DomainCategoryTabDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'domain-category-tab',\r\n    components: {\r\n        Card,\r\n        Column,\r\n        DataTable\r\n    },\r\n    props: {\r\n        title: String,\r\n        categoryList: Array,\r\n        selected: Array\r\n    },\r\n    emits: ['changed'],\r\n    data() {\r\n        return {\r\n            domainCategoryTabDescriptor,\r\n            selectedCategories: [] as iCategory[]\r\n        }\r\n    },\r\n    watch: {\r\n        selected() {\r\n            this.selectedCategories = this.selected as iCategory[]\r\n        }\r\n    },\r\n    created() {\r\n        this.selectedCategories = this.selected as iCategory[]\r\n    },\r\n    methods: {\r\n        setDirty() {\r\n            this.$emit('changed', this.selectedCategories)\r\n        },\r\n        onSelectAll(event: any) {\r\n            this.selectedCategories = event.data\r\n            this.$emit('changed', this.selectedCategories)\r\n        },\r\n        onUnselectAll() {\r\n            this.selectedCategories = []\r\n            this.$emit('changed', this.selectedCategories)\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.domainCard {\r\n    &:deep(.p-card-body) {\r\n        height: calc(100% - 35px);\r\n        .p-card-content {\r\n            height: 100%;\r\n            padding-bottom: 0;\r\n            .p-paginator-bottom {\r\n                border: none;\r\n            }\r\n        }\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <div id=\"informations-content\" class=\"kn-flex kn-relative kn-height-full\">\r\n        <div class=\"roles-absolute-scroll\">\r\n            <Card :style=\"rolesManagementTabViewDescriptor.card.style\">\r\n                <template #content>\r\n                    <form class=\"p-fluid p-m-5\">\r\n                        <div class=\"p-field\">\r\n                            <span class=\"p-float-label\">\r\n                                <InputText\r\n                                    id=\"name\"\r\n                                    class=\"kn-material-input\"\r\n                                    type=\"text\"\r\n                                    v-model.trim=\"v$.role.name.$model\"\r\n                                    :class=\"{\r\n                                        'p-invalid': v$.role.name.$invalid && v$.role.name.$dirty\r\n                                    }\"\r\n                                    maxLength=\"100\"\r\n                                    @blur=\"v$.role.name.$touch()\"\r\n                                    @input=\"onFieldChange('name', $event.target.value)\"\r\n                                    data-test=\"name-input\"\r\n                                />\r\n                                <label for=\"name\" class=\"kn-material-input-label\"> {{ $t('common.name') }} * </label>\r\n                            </span>\r\n                            <KnValidationMessages\r\n                                :vComp=\"v$.role.name\"\r\n                                :additionalTranslateParams=\"{\r\n                                    fieldName: $t('common.name')\r\n                                }\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div class=\"p-field\">\r\n                            <span class=\"p-float-label\">\r\n                                <InputText\r\n                                    id=\"code\"\r\n                                    class=\"kn-material-input\"\r\n                                    type=\"text\"\r\n                                    v-model.trim=\"v$.role.code.$model\"\r\n                                    :class=\"{\r\n                                        'p-invalid': v$.role.code.$invalid && v$.role.code.$dirty\r\n                                    }\"\r\n                                    maxLength=\"20\"\r\n                                    @blur=\"v$.role.code.$touch()\"\r\n                                    @input=\"onFieldChange('code', $event.target.value)\"\r\n                                    data-test=\"code-input\"\r\n                                />\r\n                                <label for=\"code\" class=\"kn-material-input-label\">\r\n                                    {{ $t('managers.rolesManagement.detail.code') }}\r\n                                </label>\r\n                            </span>\r\n                            <KnValidationMessages\r\n                                :vComp=\"v$.role.code\"\r\n                                :additionalTranslateParams=\"{\r\n                                    fieldName: $t('managers.rolesManagement.detail.code')\r\n                                }\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div class=\"p-field\">\r\n                            <span class=\"p-float-label\">\r\n                                <InputText\r\n                                    id=\"description\"\r\n                                    class=\"kn-material-input\"\r\n                                    type=\"text\"\r\n                                    v-model.trim=\"v$.role.description.$model\"\r\n                                    :class=\"{\r\n                                        'p-invalid': v$.role.description.$invalid && v$.role.description.$dirty\r\n                                    }\"\r\n                                    maxLength=\"150\"\r\n                                    @blur=\"v$.role.description.$touch()\"\r\n                                    @input=\"onFieldChange('description', $event.target.value)\"\r\n                                    data-test=\"description-input\"\r\n                                />\r\n                                <label for=\"description\" class=\"kn-material-input-label\">\r\n                                    {{ $t('common.description') }}\r\n                                </label>\r\n                            </span>\r\n                            <KnValidationMessages\r\n                                :vComp=\"v$.role.description\"\r\n                                :additionalTranslateParams=\"{\r\n                                    fieldName: $t('common.description')\r\n                                }\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div class=\"p-field\">\r\n                            <span class=\"p-float-label\">\r\n                                <Dropdown\r\n                                    id=\"roleTypeID\"\r\n                                    class=\"kn-material-input\"\r\n                                    :options=\"translatedRoleTypes\"\r\n                                    optionLabel=\"VALUE_CD\"\r\n                                    optionValue=\"VALUE_ID\"\r\n                                    v-model=\"v$.role.roleTypeID.$model\"\r\n                                    :class=\"{\r\n                                        'p-invalid': v$.role.roleTypeID.$invalid && v$.role.roleTypeID.$dirty\r\n                                    }\"\r\n                                    @before-show=\"v$.role.roleTypeID.$touch()\"\r\n                                    @change=\"onRoleTypeChange('roleTypeID', 'roleTypeCD', $event)\"\r\n                                >\r\n                                </Dropdown>\r\n                                <label for=\"roleTypeID\" class=\"kn-material-input-label\"> {{ $t('managers.rolesManagement.detail.roleTypeID') }} * </label>\r\n                            </span>\r\n                            <KnValidationMessages\r\n                                :vComp=\"v$.role.roleTypeID\"\r\n                                :additionalTranslateParams=\"{\r\n                                    fieldName: $t('managers.rolesManagement.detail.roleTypeID')\r\n                                }\"\r\n                            />\r\n                        </div>\r\n\r\n                        <div class=\"p-field\">\r\n                            <span class=\"p-field-checkbox\">\r\n                                <Checkbox id=\"isPublic\" name=\"isPublic\" v-model=\"role.isPublic\" @change=\"onPublicChange\" :binary=\"true\" data-test=\"is-public-checkbox\" />\r\n                                <label for=\"isPublic\">\r\n                                    {{ $t('managers.rolesManagement.detail.isPublic') }}\r\n                                </label>\r\n                            </span>\r\n                        </div>\r\n                    </form>\r\n                </template>\r\n            </Card>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations } from '@/helpers/commons/validationHelper'\r\nimport { AxiosResponse } from 'axios'\r\nimport Card from 'primevue/card'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Checkbox from 'primevue/checkbox'\r\nimport useValidate from '@vuelidate/core'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport rolesManagementTabViewDescriptor from '../../RolesManagementTabViewDescriptor.json'\r\nimport roleDetailValidationDescriptor from './RoleDetailValidationDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'detail-tab',\r\n    components: {\r\n        Card,\r\n        Dropdown,\r\n        Checkbox,\r\n        KnValidationMessages\r\n    },\r\n    props: {\r\n        selectedRole: {\r\n            type: Object,\r\n            requried: false\r\n        },\r\n        publicRole: {\r\n            type: Object,\r\n            requried: false\r\n        }\r\n    },\r\n    emits: ['fieldChanged', 'roleTypeChanged'],\r\n    data() {\r\n        return {\r\n            rolesManagementTabViewDescriptor,\r\n            roleDetailValidationDescriptor,\r\n            translatedRoleTypes: [] as any,\r\n            v$: useValidate() as any,\r\n            roleTypes: [] as any,\r\n            role: {} as any\r\n        }\r\n    },\r\n    validations() {\r\n        return {\r\n            role: createValidations('role', roleDetailValidationDescriptor.validations.role)\r\n        }\r\n    },\r\n    async created() {\r\n        if (this.selectedRole) {\r\n            this.role = { ...this.selectedRole } as any\r\n        }\r\n        await this.loadRoleTypes()\r\n    },\r\n    watch: {\r\n        selectedRole() {\r\n            this.v$.$reset()\r\n            this.role = { ...this.selectedRole } as any\r\n        }\r\n    },\r\n    methods: {\r\n        async loadRoleTypes() {\r\n            await this.loadDomains('ROLE_TYPE').then((response: AxiosResponse<any>) => {\r\n                this.roleTypes = response.data\r\n                this.translatedRoleTypes = response.data.map((roleType) => {\r\n                    return {\r\n                        VALUE_CD: this.$t(`managers.rolesManagement.rolesDropdown.${roleType.VALUE_CD}`),\r\n                        VALUE_ID: roleType.VALUE_ID\r\n                    }\r\n                })\r\n            })\r\n        },\r\n        onFieldChange(fieldName: string, value: any) {\r\n            this.$emit('fieldChanged', { fieldName, value })\r\n        },\r\n        loadDomains(type: string) {\r\n            return this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `domains/listValueDescriptionByType?DOMAIN_TYPE=${type}`)\r\n        },\r\n        onRoleTypeChange(roleTypeIDField: string, roleTypeCDField: string, event) {\r\n            const selRoleType = this.roleTypes.find((roleType) => roleType.VALUE_ID === event.value)\r\n            if (selRoleType) {\r\n                this.role.roleTypeCD = selRoleType.VALUE_CD\r\n            }\r\n            const ID = event.value\r\n            const CD = this.role.roleTypeCD\r\n            this.$emit('roleTypeChanged', { roleTypeIDField, roleTypeCDField, ID, CD })\r\n        },\r\n        onPublicChange() {\r\n            if (this.publicRole && this.publicRole.id != this.role.id && this.role.isPublic) {\r\n                let warningMessage = this.$t('managers.rolesManagement.publicRoleWarning1') + `< ${this.publicRole.name} >` + this.$t('managers.rolesManagement.publicRoleWarning2')\r\n                this.$confirm.require({\r\n                    message: warningMessage,\r\n                    header: this.$t('common.warning'),\r\n                    icon: 'pi pi-exclamation-triangle',\r\n                    accept: () => {\r\n                        this.role.isPublic = true\r\n                        this.onFieldChange('isPublic', true)\r\n                    },\r\n                    reject: () => {\r\n                        this.role.isPublic = false\r\n                        this.onFieldChange('isPublic', false)\r\n                    }\r\n                })\r\n            } else {\r\n                this.onFieldChange('isPublic', this.role.isPublic)\r\n            }\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div id=\"informations-content\" class=\"kn-flex kn-relative kn-height-full\">\r\n        <div class=\"roles-absolute-scroll\">\r\n            <Card class=\"kn-card no-padding\">\r\n                <template #content>\r\n                    <div v-for=\"(category, index) of rolesManagementTabViewDescriptor.categories\" :key=\"index\">\r\n                        <template v-if=\"authorizationCBs[category.categoryName] && authorizationCBs[category.categoryName].length\">\r\n                            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                                <template #start>\r\n                                    {{ $t(category.name) }}\r\n                                </template>\r\n                            </Toolbar>\r\n                            <div class=\"p-grid\">\r\n                                <div v-for=\"(authCBInfo, ind) of authorizationCBs[category.categoryName]\" :key=\"ind\" class=\"p-xl-3 p-lg-4 p-md-6 p-sm-12\">\r\n                                    <div class=\"p-field-checkbox p-m-3\">\r\n                                        <InputSwitch :id=\"'cb-' + index + '-' + ind\" v-model=\"role[authCBInfo.fieldName]\" :disabled=\"authCBInfo.enableForRole && role.roleTypeCD === 'ADMIN'\" @change=\"authChanged(authCBInfo.fieldName, role[authCBInfo.fieldName])\" />\r\n                                        <label :for=\"'cb-' + index + '-' + ind\">{{ $t(authCBInfo.label) }}</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </template>\r\n                    </div>\r\n                </template>\r\n            </Card>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport Card from 'primevue/card'\r\nimport InputSwitch from 'primevue/inputswitch'\r\nimport rolesManagementTabViewDescriptor from '../../RolesManagementTabViewDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'authorizations-tab',\r\n    components: {\r\n        Card,\r\n        InputSwitch\r\n    },\r\n    props: {\r\n        selectedRole: {\r\n            type: Object,\r\n            requried: false\r\n        },\r\n        authList: Array,\r\n        authCBs: Object as any\r\n    },\r\n    emits: ['authChanged'],\r\n    data() {\r\n        return {\r\n            rolesManagementTabViewDescriptor,\r\n            role: {} as any,\r\n            authorizationList: [] as any,\r\n            authorizationCBs: {} as any\r\n        }\r\n    },\r\n    created() {\r\n        this.authorizationList = this.authList as any[]\r\n        this.authorizationCBs = this.authCBs as any[]\r\n        this.role = { ...this.selectedRole } as any\r\n    },\r\n    watch: {\r\n        selectedRole: {\r\n            handler: function(value) {\r\n                this.role = { ...value } as any\r\n            },\r\n            deep: true\r\n        }\r\n    },\r\n    methods: {\r\n        authChanged(fieldName: string, value: any) {\r\n            this.$emit('authChanged', { fieldName, value })\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-m-0\">\r\n        <template #start>{{ selectedRole.name }} </template>\r\n        <template #end>\r\n            <Button icon=\"pi pi-save\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"handleSubmit\" :disabled=\"buttonDisabled\" />\r\n            <Button icon=\"pi pi-times\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"closeTemplate\" />\r\n        </template>\r\n    </Toolbar>\r\n    <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar\" v-if=\"loading\" />\r\n    <TabView class=\"roles-tabview\" data-test=\"tab-view\">\r\n        <TabPanel>\r\n            <template #header>\r\n                <span>{{ $t('managers.rolesManagement.detail.title') }}</span>\r\n            </template>\r\n\r\n            <RoleDetailTab :selectedRole=\"selectedRole\" :publicRole=\"publicRole\" @fieldChanged=\"onFieldChange\" @roleTypeChanged=\"onRoleTypeChange\" />\r\n        </TabPanel>\r\n\r\n        <TabPanel>\r\n            <template #header>\r\n                <span>{{ $t('managers.rolesManagement.authorizations.title') }}</span>\r\n            </template>\r\n\r\n            <RoleAuthorizationsTab :selectedRole=\"selectedRole\" :authList=\"authorizationList\" :authCBs=\"authorizationCBs\" @authChanged=\"onFieldChange\" />\r\n        </TabPanel>\r\n\r\n        <TabPanel>\r\n            <template #header>\r\n                <span>{{ $t('managers.rolesManagement.businessModels') }}</span>\r\n            </template>\r\n\r\n            <DomainCategoryTab :title=\"$t('managers.rolesManagement.businessModels') + ' ' + $t('managers.rolesManagement.categories')\" :categoryList=\"businessModelList\" :selected=\"selectedBusinessModels\" @changed=\"setSelectedBusinessModels($event)\"></DomainCategoryTab>\r\n        </TabPanel>\r\n\r\n        <TabPanel>\r\n            <template #header>\r\n                <span>{{ $t('managers.rolesManagement.dataSets') }}</span>\r\n            </template>\r\n\r\n            <DomainCategoryTab :title=\"$t('managers.rolesManagement.dataSets') + ' ' + $t('managers.rolesManagement.categories')\" :categoryList=\"dataSetList\" :selected=\"selectedDataSets\" @changed=\"setSelectedDataSets($event)\"></DomainCategoryTab>\r\n        </TabPanel>\r\n\r\n        <TabPanel>\r\n            <template #header>\r\n                <span>{{ $t('managers.rolesManagement.kpiCategories') }}</span>\r\n            </template>\r\n\r\n            <DomainCategoryTab :title=\"$t('managers.rolesManagement.kpiCategories')\" :categoryList=\"kpiCategoriesList\" :selected=\"selectedKPICategories\" @changed=\"setSelectedKPICategories($event)\"></DomainCategoryTab>\r\n        </TabPanel>\r\n    </TabView>\r\n</template>\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { iCategory, iRole } from './RolesManagement'\r\nimport { AxiosResponse } from 'axios'\r\nimport TabView from 'primevue/tabview'\r\nimport TabPanel from 'primevue/tabpanel'\r\nimport rolesManagementTabViewDescriptor from './RolesManagementTabViewDescriptor.json'\r\nimport useValidate from '@vuelidate/core'\r\nimport DomainCategoryTab from './tabs/DomainCategoryTab/DomainCategoryTab.vue'\r\nimport RoleDetailTab from './tabs/RoleDetailTab/RoleDetailTab.vue'\r\nimport RoleAuthorizationsTab from './tabs/RoleAuthorizationsTab/RoleAuthorizationsTab.vue'\r\nimport mainStore from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    components: {\r\n        DomainCategoryTab,\r\n        RoleDetailTab,\r\n        TabView,\r\n        TabPanel,\r\n        RoleAuthorizationsTab\r\n    },\r\n    props: { id: { type: String, required: false }, publicRole: { type: Object, required: false } },\r\n    emits: ['touched', 'closed', 'inserted'],\r\n    data() {\r\n        return {\r\n            rolesManagementTabViewDescriptor: rolesManagementTabViewDescriptor,\r\n            selectedBusinessModels: [] as iCategory[],\r\n            selectedDataSets: [] as iCategory[],\r\n            selectedKPICategories: [] as iCategory[],\r\n            selectedRole: {} as iRole,\r\n            roleMetaModelCategories: [] as any[],\r\n            selectedCategories: [] as any[],\r\n            authorizationList: [] as any,\r\n            authorizationCBs: {} as any,\r\n            businessModelList: [] as iCategory[],\r\n            dataSetList: [] as iCategory[],\r\n            kpiCategoriesList: [] as iCategory[],\r\n            loading: false,\r\n            operation: 'insert',\r\n            v$: useValidate() as any\r\n        }\r\n    },\r\n    computed: {\r\n        buttonDisabled(): any {\r\n            return this.v$.$invalid\r\n        }\r\n    },\r\n    watch: {\r\n        id() {\r\n            this.loadSelectedRole()\r\n            this.clearSelectedLists()\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    async created() {\r\n        await this.loadAllDomainsData()\r\n        await this.loadSelectedRole()\r\n        await this.loadAuthorizations()\r\n        this.initAuthorizationCB()\r\n    },\r\n    methods: {\r\n        async handleSubmit() {\r\n            if (this.v$.$invalid) {\r\n                return\r\n            }\r\n\r\n            this.selectedRole.roleMetaModelCategories = []\r\n\r\n            this.mapCategories()\r\n\r\n            let url = import.meta.env.VITE_RESTFUL_SERVICES_PATH + '2.0/roles/'\r\n            if (this.selectedRole.id) {\r\n                this.operation = 'update'\r\n                url += this.selectedRole.id\r\n            }\r\n\r\n            await this.$http.post(url, this.selectedRole).then(() => {\r\n                this.store.setInfo({\r\n                    title: this.$t(this.rolesManagementTabViewDescriptor.operation[this.operation].toastTitle),\r\n                    msg: this.$t(this.rolesManagementTabViewDescriptor.operation.success)\r\n                })\r\n                this.$emit('inserted')\r\n                this.$router.replace('/roles-management')\r\n            })\r\n        },\r\n        loadCategories(id: string) {\r\n            return this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/roles/categories/${id}`).finally(() => (this.loading = false))\r\n        },\r\n        loadDomains(type: string) {\r\n            return this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `domains/listValueDescriptionByType?DOMAIN_TYPE=${type}`).finally(() => (this.loading = false))\r\n        },\r\n        async loadAuthorizations() {\r\n            this.loading = true\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + 'authorizations')\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.authorizationList = response.data.root\r\n                    this.rolesManagementTabViewDescriptor.authorizations.forEach((authorization) => {\r\n                        authorization.visible = this.authorizationList.findIndex((auth) => authorization.dbname === auth.name) >= 0\r\n                    })\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        initAuthorizationCB() {\r\n            this.rolesManagementTabViewDescriptor.categories.forEach((category) => {\r\n                this.authorizationCBs[category.categoryName] = this.rolesManagementTabViewDescriptor.authorizations.filter((authCB) => authCB.category === category.categoryName && authCB.visible)\r\n            })\r\n        },\r\n        async loadAllDomainsData() {\r\n            this.loading = true\r\n            await this.loadDomains('BM_CATEGORY').then((response: AxiosResponse<any>) => {\r\n                response.data.map((category: any) => {\r\n                    this.businessModelList.push({\r\n                        categoryId: category.VALUE_ID,\r\n                        categoryName: category.VALUE_NM\r\n                    } as iCategory)\r\n                })\r\n            })\r\n            await this.loadDomains('DATASET_CATEGORY').then((response: AxiosResponse<any>) => {\r\n                response.data.map((category: any) => {\r\n                    this.dataSetList.push({\r\n                        categoryId: category.VALUE_ID,\r\n                        categoryName: category.VALUE_NM\r\n                    } as iCategory)\r\n                })\r\n            })\r\n            await this.loadDomains('KPI_KPI_CATEGORY').then((response: AxiosResponse<any>) => {\r\n                response.data.map((category: any) => {\r\n                    this.kpiCategoriesList.push({\r\n                        categoryId: category.VALUE_ID,\r\n                        categoryName: category.VALUE_NM\r\n                    } as iCategory)\r\n                })\r\n            })\r\n            this.loading = false\r\n        },\r\n        async loadSelectedRole() {\r\n            this.loading = true\r\n            if (this.id) {\r\n                await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/roles/${this.id}`).then((response: AxiosResponse<any>) => (this.selectedRole = response.data))\r\n\r\n                await this.loadCategories(this.id).then((response: AxiosResponse<any>) => {\r\n                    this.clearSelectedLists()\r\n\r\n                    response.data.map((category: any) => {\r\n                        let index = this.indexInList(category, this.businessModelList)\r\n\r\n                        if (index != -1) {\r\n                            this.selectedBusinessModels.push(this.businessModelList[index])\r\n                        }\r\n\r\n                        index = this.indexInList(category, this.dataSetList)\r\n\r\n                        if (index != -1) {\r\n                            this.selectedDataSets.push(this.dataSetList[index])\r\n                        }\r\n\r\n                        index = this.indexInList(category, this.kpiCategoriesList)\r\n\r\n                        if (index != -1) {\r\n                            this.selectedKPICategories.push(this.kpiCategoriesList[index])\r\n                        }\r\n                    })\r\n                })\r\n            } else {\r\n                this.selectedRole = { ...rolesManagementTabViewDescriptor.newRoleDefaultValues, name: '' }\r\n            }\r\n            this.loading = false\r\n        },\r\n        setDirty() {\r\n            this.$emit('touched')\r\n        },\r\n        closeTemplate() {\r\n            this.$router.push('/roles-management')\r\n            this.$emit('closed')\r\n        },\r\n        indexInList(category: iCategory, list: iCategory[]) {\r\n            return list.findIndex((element) => {\r\n                return element.categoryId === category.categoryId\r\n            })\r\n        },\r\n        clearSelectedLists() {\r\n            this.selectedBusinessModels = []\r\n            this.selectedDataSets = []\r\n            this.selectedKPICategories = []\r\n        },\r\n        mapCategories() {\r\n            if (this.selectedBusinessModels.length > 0) {\r\n                this.selectedBusinessModels.map((category: any) => {\r\n                    this.selectedRole.roleMetaModelCategories.push({\r\n                        categoryId: category.categoryId\r\n                    })\r\n                })\r\n            }\r\n\r\n            if (this.selectedDataSets.length > 0) {\r\n                this.selectedDataSets.map((category: any) => {\r\n                    this.selectedRole.roleMetaModelCategories.push({\r\n                        categoryId: category.categoryId\r\n                    })\r\n                })\r\n            }\r\n\r\n            if (this.selectedKPICategories.length > 0) {\r\n                this.selectedKPICategories.map((category: any) => {\r\n                    this.selectedRole.roleMetaModelCategories.push({\r\n                        categoryId: category.categoryId\r\n                    })\r\n                })\r\n            }\r\n        },\r\n        setSelectedBusinessModels(categories: iCategory[]) {\r\n            this.selectedBusinessModels = categories\r\n            this.$emit('touched')\r\n        },\r\n        setSelectedDataSets(categories: iCategory[]) {\r\n            this.selectedDataSets = categories\r\n            this.$emit('touched')\r\n        },\r\n        setSelectedKPICategories(categories: iCategory[]) {\r\n            this.selectedKPICategories = categories\r\n            this.$emit('touched')\r\n        },\r\n        onFieldChange(event) {\r\n            this.selectedRole[event.fieldName] = event.value\r\n            this.$emit('touched')\r\n        },\r\n        onRoleTypeChange(event) {\r\n            this.selectedRole[event.roleTypeIDField] = event.ID\r\n            this.selectedRole[event.roleTypeCDField] = event.CD\r\n            this.$emit('touched')\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\">\r\n.roles-absolute-scroll {\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n    position: absolute;\r\n}\r\n\r\n.roles-tabview,\r\n.roles-tabview .p-tabview-panels,\r\n.roles-tabview .p-tabview-panel {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 1;\r\n}\r\n\r\n.roles-tabview .p-tabview-panels {\r\n    padding: 0 !important;\r\n}\r\n</style>\r\n"],"names":["_sfc_main","Card","Column","DataTable","_openBlock","_createBlock","_withCtx","_createVNode","_normalizeStyle","Dropdown","Checkbox","useValidate","_hoisted_1","_hoisted_2","_hoisted_3","_createElementBlock","_createElementVNode","_hoisted_4","_hoisted_5","_normalizeClass","_toDisplayString","InputSwitch","_Fragment","_renderList","TabView","TabPanel","mainStore","_createCommentVNode"],"mappings":"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"}