{"version":3,"file":"DataPreparationDetail-d6feefbd.js","sources":["../../../../modules/workspace/dataPreparation/DataPreparationSimple/DataPreparationSimple.vue","../../../../modules/workspace/dataPreparation/DataPreparationCustom/DataPreparationFilterTransformation.vue","../../../../modules/workspace/dataPreparation/DataPreparationCustom/DataPreparationSplitTransformation.vue","../../../../modules/workspace/dataPreparation/DataPreparationDialog.vue","../../../../modules/workspace/dataPreparation/DataPreparationSaveDialog.vue","../../../../modules/workspace/dataPreparation/DataPreparationDetail.vue"],"sourcesContent":["<template>\r\n    <div class=\"simple\">\r\n        <span v-for=\"(field, index) in localTransformation.parameters\" v-bind:key=\"index\" class=\"p-field p-ml-2 kn-flex data-prep-simple-transformation\">\r\n            <span v-if=\"field.type == 'string'\" class=\"p-float-label\">\r\n                <InputText :id=\"field.id\" type=\"text\" v-model=\"field.value\" :disabled=\"readOnly\" :class=\"['kn-material-input', field.validationRules && field.validationRules.includes('required') && !field.value ? 'p-invalid' : '']\" />\r\n                <label :for=\"'input_index_' + index\" class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.' + field.name) }}</label>\r\n            </span>\r\n            <span v-if=\"field.type === 'date'\" class=\"p-float-label\">\r\n                <Calendar :id=\"field.id\" v-model=\"field.value\" :disabled=\"readOnly\" class=\"kn-material-input\" :class=\"{ 'p-invalid': field.validationRules && field.validationRules.includes('required') && !field.value }\" />\r\n                <label :for=\"field.type + '_index_' + index\" class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.' + field.name) }}</label>\r\n            </span>\r\n\r\n            <span v-if=\"field.type === 'boolean'\" class=\"p-float-label\">\r\n                <InputSwitch :id=\"field.id\" v-model=\"field.value\" :disabled=\"readOnly\" />\r\n                <label :for=\"'inputSwitch_index_' + index\" class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.' + field.name) }}</label>\r\n            </span>\r\n            <span v-if=\"field.type === 'dropdown'\" class=\"p-float-label\">\r\n                <Dropdown\r\n                    :id=\"field.id\"\r\n                    v-model=\"field.value\"\r\n                    :options=\"field.availableOptions ? translate(field) : columns\"\r\n                    :showClear=\"!field.validationRules || (field.validationRules && !field.validationRules.includes('required'))\"\r\n                    :optionLabel=\"field.optionLabel ? field.optionLabel : 'label'\"\r\n                    :optionValue=\"field.optionValue ? field.optionValue : 'code'\"\r\n                    :disabled=\"(col && field.name === 'columns') || readOnly\"\r\n                    class=\"kn-material-input\"\r\n                    :class=\"{ 'p-invalid': field.validationRules && field.validationRules.includes('required') && !field.value }\"\r\n                />\r\n                <label :for=\"'selectedCondition_index_' + index\" class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.' + field.name) }}</label>\r\n            </span>\r\n\r\n            <span v-if=\"field.type == 'multiSelect'\" class=\"p-float-label\">\r\n                <MultiSelect\r\n                    :id=\"field.id\"\r\n                    v-model=\"field.value\"\r\n                    :options=\"columns\"\r\n                    :optionLabel=\"field.optionLabel ? field.optionLabel : 'label'\"\r\n                    display=\"chip\"\r\n                    optionDisabled=\"disabled\"\r\n                    @change=\"handleMultiSelectChange($event)\"\r\n                    :allow-empty=\"false\"\r\n                    :disabled=\"col || readOnly\"\r\n                    class=\"kn-material-input\"\r\n                    :filter=\"true\"\r\n                    :class=\"{ 'p-invalid': field.validationRules && field.validationRules.includes('required') && !field.value }\"\r\n                /><label :for=\"'selectedItems_index_' + index\" class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.columns') }}</label></span\r\n            >\r\n\r\n            <span v-if=\"field.type == 'textarea'\" class=\"p-float-label\">\r\n                <Textarea :id=\"field.id\" v-model=\"field.value\" :disabled=\"readOnly\" rows=\"5\" cols=\"30\" class=\"kn-material-input\" :class=\"{ 'p-invalid': field.validationRules && field.validationRules.includes('required') && !field.value }\" :autoResize=\"false\" />\r\n                <label :for=\"field.type + '_index_' + index\" class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.' + field.name) }}</label>\r\n            </span>\r\n        </span>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport DataPreparationSimpleDescriptor from '@/modules/workspace/dataPreparation/DataPreparationSimple/DataPreparationSimpleDescriptor.json'\r\nimport Calendar from 'primevue/calendar'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport InputSwitch from 'primevue/inputswitch'\r\nimport MultiSelect from 'primevue/multiselect'\r\nimport Textarea from 'primevue/textarea'\r\n\r\nimport { ITransformation, ITransformationParameter } from '@/modules/workspace/dataPreparation/DataPreparation'\r\nimport { IDataPreparationColumn } from '@/modules/workspace/dataPreparation/DataPreparation'\r\nimport { createValidations } from '@/helpers/commons/validationHelper'\r\nimport useValidate from '@vuelidate/core'\r\n\r\nexport default defineComponent({\r\n    name: 'data-preparation-simple',\r\n\r\n    props: { readOnly: Boolean, col: String, columns: { type: Array as PropType<Array<IDataPreparationColumn>> }, transformation: {} as PropType<ITransformation<ITransformationParameter>> },\r\n    components: { Calendar, Dropdown, InputSwitch, MultiSelect, Textarea },\r\n    emits: ['update:transformation'],\r\n    data() {\r\n        return { descriptor: DataPreparationSimpleDescriptor as any, localTransformation: {} as ITransformation<ITransformationParameter>, v$: useValidate() as any, dirty: false, currentId: 0 }\r\n    },\r\n    validations() {\r\n        if (this.transformation?.type === 'simple') {\r\n            this.setupLocal()\r\n\r\n            let validations = this.descriptor[this.localTransformation.name].validations ? this.descriptor[this.localTransformation.name].validations : []\r\n            return { localTransformation: createValidations('localTransformation', validations) }\r\n        }\r\n    },\r\n\r\n    mounted() {\r\n        this.setupLocal()\r\n    },\r\n    methods: {\r\n        handleMultiSelectChange(e: Event): void {\r\n            if (e) {\r\n                this.refreshTransfrormation()\r\n            }\r\n        },\r\n\r\n        refreshTransfrormation(): void {\r\n            if (this.localTransformation) {\r\n                let pars = this.localTransformation.type === 'simple' ? this.descriptor[this.localTransformation.name].parameters : []\r\n                pars.forEach((item) => {\r\n                    if (item.name == 'columns' && (item.type === 'multiSelect' || item.type === 'dropdown')) {\r\n                        let localTransformationItemArray = this.localTransformation.parameters.filter((x) => x.name == item.name)\r\n                        if (localTransformationItemArray?.length > 0) {\r\n                            let localTransformationItem = localTransformationItemArray[0]\r\n\r\n                            if (this.col) {\r\n                                let selectedItem: Array<IDataPreparationColumn> | undefined = this.columns?.filter((x) => x.header == this.col)\r\n                                if (selectedItem && selectedItem.length > 0) {\r\n                                    selectedItem[0].disabled = true\r\n                                    localTransformationItem.value = item.type === 'multiSelect' ? selectedItem : selectedItem[0][item.optionValue]\r\n                                }\r\n                            } else {\r\n                                this.columns?.forEach((e) => (e.disabled = false))\r\n                            }\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        setupLocal() {\r\n            if (Object.keys(this.localTransformation).length == 0) {\r\n                this.localTransformation = this.transformation ? { ...this.transformation } : ({} as ITransformation<ITransformationParameter>)\r\n\r\n                let name = this.transformation && this.transformation.name ? this.transformation.name : ''\r\n                if (name && this.transformation?.type === 'simple') {\r\n                    let pars = JSON.parse(JSON.stringify(this.descriptor[name].parameters))\r\n                    if (this.readOnly) {\r\n                        for (var i = 0; i < pars.length; i++) {\r\n                            let parName = pars[i]['name']\r\n                            for (var j = 0; j < this.localTransformation.parameters.length; j++) {\r\n                                if (this.localTransformation.parameters[j]['name'] == parName) pars[i]['value'] = this.localTransformation.parameters[j]['value']\r\n                            }\r\n                        }\r\n                    }\r\n                    this.localTransformation.parameters = pars\r\n                }\r\n\r\n                this.refreshTransfrormation()\r\n            }\r\n        },\r\n        translate(item): [] {\r\n            const items = item.availableOptions\r\n            items.forEach((element) => {\r\n                element.label = this.$t(element.label)\r\n            })\r\n\r\n            return items\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        localTransformation: {\r\n            handler(newValue) {\r\n                this.localTransformation = newValue\r\n                this.$emit('update:transformation', newValue)\r\n            },\r\n            deep: true\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.data-prep-simple-transformation {\r\n    &.p-field {\r\n        .p-multiselect,\r\n        .p-inputtext,\r\n        .p-dropdown {\r\n            width: 100%;\r\n        }\r\n    }\r\n}\r\n\r\n.simple {\r\n    min-width: 600px;\r\n    width: 60%;\r\n    max-width: 1200px;\r\n    min-height: 150px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    &:deep(.p-dialog-content) {\r\n        @extend .simple;\r\n    }\r\n    .elementClass {\r\n        flex-direction: column;\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <div class=\"data-prep-custom-transformation\">\r\n        <div class=\"p-d-flex\" v-for=\"(filter, index) in localTransformation\" v-bind:key=\"index\">\r\n            <span class=\"p-float-label p-field kn-flex\">\r\n                <Dropdown v-model=\"filter.column\" :options=\"columns\" class=\"kn-material-input\" optionLabel=\"fieldAlias\" :filter=\"true\" :disabled=\"col || readOnly\" />\r\n                <label class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.column') }}</label>\r\n            </span>\r\n            <span v-if=\"filter.column\" class=\"p-float-label p-field p-mx-2\">\r\n                <Dropdown v-model=\"filter.condition\" :disabled=\"readOnly\" :options=\"getAvailableConditions(index)\" optionLabel=\"label\" optionValue=\"code\" class=\"kn-material-input\" />\r\n                <label class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.conditions') }}</label>\r\n            </span>\r\n            <span v-if=\"showStartDate(index)\" class=\"p-float-label p-field kn-flex\">\r\n                <Calendar v-model=\"filter.startDate\" :disabled=\"readOnly\" class=\"kn-material-input\" />\r\n                <label class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.startDate') }}</label>\r\n            </span>\r\n            <span v-if=\"showEndDate(index)\" class=\"p-float-label p-field kn-flex\">\r\n                <Calendar v-model=\"filter.endDate\" :disabled=\"readOnly\" class=\"kn-material-input\" />\r\n                <label class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.endDate') }}</label>\r\n            </span>\r\n            <span v-if=\"showInputText(index)\" class=\"p-float-label p-field kn-flex\">\r\n                <InputText type=\"text\" v-model=\"filter.text\" :disabled=\"readOnly\" class=\"kn-material-input\" />\r\n                <label class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.text') }}</label>\r\n            </span>\r\n            <span v-if=\"showInputNumber(index)\" class=\"p-float-label p-field kn-flex\">\r\n                <InputText type=\"number\" v-model=\"filter.number\" :disabled=\"readOnly\" class=\"kn-material-input\" />\r\n                <label class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.number') }}</label>\r\n            </span>\r\n            <span v-if=\"showValuesList(index)\" class=\"kn-flex\">\r\n                <span class=\"p-float-label kn-material-input\">\r\n                    <Chips class=\"kn-width-full\" :multiple=\"true\" v-model=\"filter.valuesList\" />\r\n                    <label class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.values') }}</label>\r\n                </span>\r\n                <small id=\"chips-help\">{{ $t('common.chipsHint') }}</small>\r\n            </span>\r\n            <span> <Button icon=\"pi pi-trash\" :class=\"'p-button-text p-button-rounded p-button-plain'\" @click=\"deleteRow(index)\" v-if=\"!readOnly && localTransformation.length > 1\"/></span>\r\n        </div>\r\n        <span class=\"p-d-flex p-jc-center p-ai-center\">\r\n            <Button v-if=\"!readOnly\" icon=\"pi pi-plus\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"addNewRow()\" />\r\n        </span>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport DataPreparationFilterDescriptor from '@/modules/workspace/dataPreparation/DataPreparationCustom/DataPreparationFilterDescriptor.json'\r\nimport { IFilterTransformationParameter } from '@/modules/workspace/dataPreparation/DataPreparation'\r\nimport { IDataPreparationColumn } from '@/modules/workspace/dataPreparation/DataPreparation'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Calendar from 'primevue/calendar'\r\nimport Chips from 'primevue/chips'\r\n\r\nexport default defineComponent({\r\n    name: 'data-preparation-filter-transformation',\r\n\r\n    props: { columns: { type: Array as PropType<Array<IDataPreparationColumn>> }, col: String, readOnly: Boolean, transformation: {} as any },\r\n\r\n    components: { Dropdown, Calendar, Chips },\r\n    emits: ['update:transformation'],\r\n    data() {\r\n        return {\r\n            availableConditions: DataPreparationFilterDescriptor.availableConditions as Array<any>,\r\n            descriptor: DataPreparationFilterDescriptor as any,\r\n            localTransformation: [{}] as Array<IFilterTransformationParameter>\r\n        }\r\n    },\r\n    mounted() {\r\n        this.localTransformation = [{}] as Array<IFilterTransformationParameter>\r\n        if (this.transformation && this.transformation.parameters) {\r\n            for (let i = 0; i < this.transformation.parameters.length; i++) {\r\n                let name = this.transformation.parameters[i]['name']\r\n                let value = this.transformation.parameters[i]['value']\r\n                switch (name) {\r\n                    case 'condition':\r\n                        this.localTransformation[0].condition = value\r\n                        break\r\n                    case 'text':\r\n                        this.localTransformation[0].text = value\r\n                        break\r\n                    case 'startDate':\r\n                        this.localTransformation[0].startDate = value\r\n                        break\r\n                    case 'endDate':\r\n                        this.localTransformation[0].endDate = value\r\n                        break\r\n                    case 'number':\r\n                        this.localTransformation[0].number = value\r\n                        break\r\n                }\r\n            }\r\n        }\r\n        if (this.col && this.columns) this.localTransformation[0].column = this.columns.filter((item) => item.header === this.col)[0]\r\n    },\r\n    methods: {\r\n        addNewRow() {\r\n            var newRow = {} as IFilterTransformationParameter\r\n            if (this.col && this.columns) {\r\n                newRow.column = this.columns.filter((item) => item.header === this.col)[0]\r\n            }\r\n            this.localTransformation.push(newRow)\r\n        },\r\n        deleteRow(index) {\r\n            this.localTransformation.splice(index, 1)\r\n        },\r\n        getAvailableConditions(index) {\r\n            let toReturn = this.availableConditions.filter((item) => {\r\n                let availableForTypes = item.availableForTypes.split('|')\r\n                let type = this.getColType(this.localTransformation[index].column)\r\n                if (availableForTypes.includes(type)) {\r\n                    return true\r\n                } else {\r\n                    return false\r\n                }\r\n            })\r\n            return toReturn\r\n        },\r\n        getColType(col) {\r\n            return this.descriptor.typesMap[col.Type]\r\n        },\r\n        showEndDate(index) {\r\n            let allowedConditions = ['between', 'before']\r\n            return this.isShowDate(index, allowedConditions)\r\n        },\r\n        isShowDate(index, allowedConditions) {\r\n            if (!this.localTransformation[index].column || !this.localTransformation[index].condition) return false\r\n            let colType = this.getColType(this.localTransformation[index].column)\r\n            if ((colType == 'date' || colType == 'timestamp') && allowedConditions.includes(this.localTransformation[index].condition)) return true\r\n            else return false\r\n        },\r\n        showStartDate(index) {\r\n            let allowedConditions = ['between', 'after']\r\n            return this.isShowDate(index, allowedConditions)\r\n        },\r\n        showInputText(index) {\r\n            let excludedConditions = ['isNull', 'isNotNull', 'in', 'notIn']\r\n            if (!this.localTransformation[index].column || !this.localTransformation[index].condition) return false\r\n            let colType = this.getColType(this.localTransformation[index].column)\r\n            if (colType == 'string' && !excludedConditions.includes(this.localTransformation[index].condition)) return true\r\n            else return false\r\n        },\r\n        showInputNumber(index) {\r\n            let excludedConditions = ['in', 'notIn']\r\n            if (!this.localTransformation[index].column || !this.localTransformation[index].condition) return false\r\n            let colType = this.getColType(this.localTransformation[index].column)\r\n            if (colType == 'number' && !excludedConditions.includes(this.localTransformation[index].condition)) return true\r\n            else return false\r\n        },\r\n        showValuesList(index) {\r\n            let allowedConditions = ['in', 'notIn']\r\n            if (!this.localTransformation[index].column || !this.localTransformation[index].condition) return false\r\n            if (allowedConditions.includes(this.localTransformation[index].condition)) return true\r\n            else return false\r\n        }\r\n    },\r\n    watch: {\r\n        localTransformation: {\r\n            handler(newValue) {\r\n                this.$emit('update:transformation', newValue)\r\n            },\r\n            deep: true\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\">\r\n.data-prep-custom-transformation {\r\n    .p-multiselect,\r\n    .p-inputtext,\r\n    .p-dropdown {\r\n        width: 100%;\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <div class=\"data-prep-custom-transformation\">\r\n        <div class=\"p-d-flex\">\r\n            <span class=\"p-float-label p-field p-ml-2 kn-flex\">\r\n                <Dropdown v-model=\"localTransformation.column\" :options=\"getStringColumns(columns)\" class=\"kn-material-input\" optionLabel=\"fieldAlias\" :filter=\"true\" :disabled=\"col || readOnly\" />\r\n                <label class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.column') }}</label>\r\n            </span>\r\n            <span class=\"p-float-label p-field p-ml-2 kn-flex\">\r\n                <Dropdown v-model=\"localTransformation.condition\" :disabled=\"readOnly\" :options=\"availableConditions\" :optionLabel=\"translatedLabel\" optionValue=\"code\" class=\"kn-material-input\" />\r\n                <label class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.conditions') }}</label>\r\n            </span>\r\n            <span v-if=\"localTransformation.condition === 'numberOfChars'\" class=\"p-float-label p-field p-ml-2 kn-flex\">\r\n                <InputText type=\"number\" v-model=\"localTransformation.numOfChars\" :disabled=\"readOnly\" class=\"kn-material-input\" />\r\n                <label class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.numOfChars') }}</label>\r\n            </span>\r\n            <span v-if=\"localTransformation.condition === 'separator'\" class=\"p-float-label p-field p-ml-2 kn-flex\">\r\n                <InputText type=\"text\" v-model=\"localTransformation.separator\" :disabled=\"readOnly\" class=\"kn-material-input\" />\r\n                <label class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.separator') }}</label>\r\n            </span>\r\n        </div>\r\n        <Fieldset :legend=\"$t('managers.workspaceManagement.dataPreparation.transformations.split.outputColumn') + ' 1'\">\r\n            <div class=\"p-d-flex\">\r\n                <span class=\"p-float-label p-field p-ml-2 kn-flex\">\r\n                    <InputText type=\"text\" v-model=\"localTransformation.outputColumn1\" :disabled=\"readOnly\" class=\"kn-material-input\" />\r\n                    <label class=\"kn-material-input-label\">{{ $t('common.name') }}</label>\r\n                </span>\r\n                <!-- <span class=\"p-float-label p-field p-ml-2 kn-flex\">\r\n                    <Dropdown v-model=\"localTransformation.outputType1\" :options=\"availableOutputTypes\" optionLabel=\"label\" optionValue=\"code\" class=\"kn-material-input\" />\r\n                    <label class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.split.outputType') }}</label>\r\n                </span> -->\r\n            </div>\r\n        </Fieldset>\r\n        <Fieldset :legend=\"$t('managers.workspaceManagement.dataPreparation.transformations.split.outputColumn') + ' 2'\">\r\n            <div class=\"p-d-flex\">\r\n                <span class=\"p-float-label p-field p-ml-2 kn-flex\">\r\n                    <InputText type=\"text\" v-model=\"localTransformation.outputColumn2\" :disabled=\"readOnly\" class=\"kn-material-input\" />\r\n                    <label class=\"kn-material-input-label\">{{ $t('common.name') }}</label>\r\n                </span>\r\n                <!-- <span class=\"p-float-label p-field p-ml-2 kn-flex\">\r\n                    <Dropdown v-model=\"localTransformation.outputType2\" :options=\"availableOutputTypes\" optionLabel=\"label\" optionValue=\"code\" class=\"kn-material-input\" />\r\n                    <label class=\"kn-material-input-label\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.split.outputType') }}</label>\r\n                </span> -->\r\n            </div>\r\n        </Fieldset>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport DataPreparationSplitDescriptor from '@/modules/workspace/dataPreparation/DataPreparationCustom/DataPreparationSplitDescriptor.json'\r\nimport { ISplitTransformationParameter } from '@/modules/workspace/dataPreparation/DataPreparation'\r\nimport { IDataPreparationColumn } from '@/modules/workspace/dataPreparation/DataPreparation'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Fieldset from 'primevue/fieldset'\r\n\r\nexport default defineComponent({\r\n    name: 'data-preparation-split-transformation',\r\n\r\n    props: { columns: { type: Array as PropType<Array<IDataPreparationColumn>> }, col: String, readOnly: Boolean, transformation: {} as any },\r\n\r\n    components: { Dropdown, Fieldset },\r\n    emits: ['update:transformation'],\r\n    data() {\r\n        return {\r\n            availableConditions: DataPreparationSplitDescriptor.condition.availableOptions as Array<any>,\r\n            availableOutputTypes: DataPreparationSplitDescriptor.availableOutputTypes as Array<any>,\r\n            descriptor: DataPreparationSplitDescriptor as any,\r\n            localTransformation: {} as ISplitTransformationParameter\r\n        }\r\n    },\r\n    mounted() {\r\n        this.localTransformation = {} as ISplitTransformationParameter\r\n        if (this.readOnly && this.transformation && this.transformation.parameters) {\r\n            for (let i = 0; i < this.transformation.parameters.length; i++) {\r\n                if (this.transformation.parameters[i]['name'] == 'condition') this.localTransformation.condition = this.transformation.parameters[i]['value']\r\n                else if (this.transformation.parameters[i]['name'] == 'numOfChars') this.localTransformation.numOfChars = this.transformation.parameters[i]['value']\r\n                else if (this.transformation.parameters[i]['name'] == 'separator') this.localTransformation.separator = this.transformation.parameters[i]['value']\r\n                else if (this.transformation.parameters[i]['name'] == 'outputColumn1') this.localTransformation.outputColumn1 = this.transformation.parameters[i]['value']\r\n                else if (this.transformation.parameters[i]['name'] == 'separator') this.localTransformation.separator = this.transformation.parameters[i]['value']\r\n                else if (this.transformation.parameters[i]['name'] == 'outputColumn1') this.localTransformation.outputColumn1 = this.transformation.parameters[i]['value']\r\n                else if (this.transformation.parameters[i]['name'] == 'outputColumn2') this.localTransformation.outputColumn2 = this.transformation.parameters[i]['value']\r\n                else if (this.transformation.parameters[i]['name'] == 'outputType1') this.localTransformation.outputType1 = this.transformation.parameters[i]['value']\r\n                else if (this.transformation.parameters[i]['name'] == 'outputType2') this.localTransformation.outputType2 = this.transformation.parameters[i]['value']\r\n                else if (this.transformation.parameters[i]['name'] == 'columns') this.localTransformation.column = this.transformation.parameters[i]['value'][0]\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        getStringColumns(columns: Array<IDataPreparationColumn>): Array<IDataPreparationColumn> {\r\n            return columns.filter((x) => x.Type == 'java.lang.String')\r\n        },\r\n        translatedLabel(item) {\r\n            return this.$t(item.label)\r\n        }\r\n    },\r\n    watch: {\r\n        localTransformation: {\r\n            handler(newValue, oldValue) {\r\n                if (oldValue !== newValue) {\r\n                    this.$emit('update:transformation', newValue)\r\n                }\r\n            },\r\n            deep: true\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\">\r\n.data-prep-custom-transformation {\r\n    .p-multiselect,\r\n    .p-inputtext,\r\n    .p-dropdown {\r\n        width: 100%;\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <Dialog\r\n        class=\"kn-dialog--toolbar--primary dataPreparationDialog\"\r\n        v-bind:visible=\"transformation && transformation.type != 'calculatedField'\"\r\n        :header=\"(localCopy && localCopy.type ? $t('managers.workspaceManagement.dataPreparation.transformations.' + localCopy.name + '.label') + ' - ' : '') + $t('managers.workspaceManagement.dataPreparation.parametersConfiguration')\"\r\n        :closable=\"false\"\r\n        modal\r\n        :breakpoints=\"{ '960px': '75vw', '640px': '100vw' }\"\r\n    >\r\n        <Message severity=\"info\" :closable=\"false\" v-if=\"localCopy && localCopy.description\">{{ $t(localCopy.description) }}</Message>\r\n\r\n        <DataPreparationSimple v-if=\"localCopy.type === 'simple'\" :transformation=\"localCopy\" @update:transformation=\"updateLocalCopy\" :columns=\"columns\" :col=\"col\" :readOnly=\"readOnly\" />\r\n        <DataPreparationFilter v-if=\"localCopy.type === 'filter'\" :transformation=\"localCopy\" @update:transformation=\"updateLocalCopy\" :columns=\"columns\" :col=\"col\" :readOnly=\"readOnly\" />\r\n        <DataPreparationSplit v-if=\"localCopy.type === 'split'\" :transformation=\"localCopy\" @update:transformation=\"updateLocalCopy\" :columns=\"columns\" :col=\"col\" :readOnly=\"readOnly\" />\r\n\r\n        <template #footer>\r\n            <Button class=\"p-button-text kn-button thirdButton\" :label=\"$t('common.cancel')\" @click=\"resetAndClose\" />\r\n            <Button v-if=\"!readOnly\" class=\"kn-button kn-button--primary\" v-t=\"'common.apply'\" @click=\"handleTransformation\" />\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { createValidations } from '@/helpers/commons/validationHelper'\r\nimport useValidate from '@vuelidate/core'\r\nimport Dialog from 'primevue/dialog'\r\nimport Message from 'primevue/message'\r\nimport { ITransformation, IDataPreparationColumn, ITransformationParameter } from '@/modules/workspace/dataPreparation/DataPreparation'\r\nimport DataPreparationValidationDescriptor from './DataPreparationValidationDescriptor.json'\r\nimport DataPreparationSimple from './DataPreparationSimple/DataPreparationSimple.vue'\r\nimport DataPreparationSimpleDescriptor from '@/modules/workspace/dataPreparation/DataPreparationSimple/DataPreparationSimpleDescriptor.json'\r\nimport DataPreparationFilter from './DataPreparationCustom/DataPreparationFilterTransformation.vue'\r\nimport DataPreparationSplit from './DataPreparationCustom/DataPreparationSplitTransformation.vue'\r\n\r\nexport default defineComponent({\r\n    name: 'data-preparation-detail-dialog',\r\n    props: {\r\n        transformation: {} as PropType<ITransformation<ITransformationParameter>>,\r\n        columns: { type: Array as PropType<Array<IDataPreparationColumn>> },\r\n        col: String,\r\n        readOnly: Boolean\r\n    },\r\n    components: { DataPreparationSimple, Dialog, Message, DataPreparationFilter, DataPreparationSplit },\r\n    data() {\r\n        return { localCopy: {} as ITransformation<ITransformationParameter> | undefined, v$: useValidate() as any, validationDescriptor: DataPreparationValidationDescriptor, simpleDescriptor: DataPreparationSimpleDescriptor }\r\n    },\r\n    validations() {\r\n        return {\r\n            vTransformation: createValidations('localCopy', this.validationDescriptor.validations.configuration)\r\n        }\r\n    },\r\n    emits: ['update:transformation', 'update:col', 'update:readOnly', 'send-transformation'],\r\n\r\n    created() {\r\n        this.simpleDescriptor = { ...DataPreparationSimpleDescriptor } as any\r\n    },\r\n\r\n    methods: {\r\n        addNewRow(): void {\r\n            this.localCopy?.parameters.push(this.localCopy?.parameters[0])\r\n        },\r\n        convertTransformation() {\r\n            let t = this.localCopy\r\n            let transformation = { parameters: [] as Array<any>, type: t?.name }\r\n\r\n            if (t?.name === 'filter') return this.convertFilterTransformation(t, transformation)\r\n            if (t?.name === 'split') return this.convertSplitTransformation(t, transformation)\r\n\r\n            let par = { columns: [] as Array<any> }\r\n            t?.parameters?.forEach((p) => {\r\n                Object.keys(p).forEach((key) => {\r\n                    if (p.value && !this.isToBeSkipped(key)) {\r\n                        if (key == 'name' && p[key] == 'columns') par.columns = this.getColumns(p)\r\n                        else par[p[key]] = p.value\r\n                    }\r\n                })\r\n            })\r\n            transformation.parameters.push(par)\r\n\r\n            return transformation\r\n        },\r\n\r\n        convertSplitTransformation(t, transformation) {\r\n            let p = t?.parameters\r\n            this.convertCustomTransformation(p, transformation)\r\n            return transformation\r\n        },\r\n\r\n        convertCustomTransformation(p, transformation) {\r\n            let par = { columns: [] as Array<any> }\r\n            Object.keys(p).forEach((key) => {\r\n                if (key === 'column') par.columns.push(p[key].header)\r\n                else par[key] = p[key]\r\n            })\r\n            transformation.parameters.push(par)\r\n        },\r\n\r\n        convertFilterTransformation(t, transformation) {\r\n            t?.parameters?.forEach((p) => {\r\n                this.convertCustomTransformation(p, transformation)\r\n            })\r\n            return transformation\r\n        },\r\n\r\n        isToBeSkipped(key: string): Boolean {\r\n            return key === 'value' || key === 'type' || key.includes('option') || key.includes('available') || key.includes('depends') || key.includes('validation') || key.includes('placeholder')\r\n        },\r\n\r\n        closeDialog(): void {\r\n            this.$emit('update:readOnly', false)\r\n            this.$emit('update:col', false)\r\n            this.$emit('update:transformation', false)\r\n        },\r\n\r\n        deleteRow(index): void {\r\n            if (this.localCopy) {\r\n                if (this.localCopy.parameters?.length > 1) this.localCopy?.parameters.splice(index, 1)\r\n            }\r\n        },\r\n\r\n        getColumns(parameter): Array<any> {\r\n            let toReturn = [] as Array<any>\r\n            if (Array.isArray(parameter.value)) {\r\n                parameter.value.forEach((v) => {\r\n                    toReturn.push(v.header)\r\n                })\r\n            } else {\r\n                toReturn.push(parameter.value)\r\n            }\r\n            return toReturn\r\n        },\r\n\r\n        handleTransformation(): void {\r\n            let convertedTransformation = this.convertTransformation()\r\n            this.$emit('send-transformation', convertedTransformation)\r\n            this.closeDialog()\r\n        },\r\n\r\n        resetAndClose(): void {\r\n            this.closeDialog()\r\n        },\r\n\r\n        updateLocalCopy(t): void {\r\n            if (this.localCopy?.name === 'filter' || this.localCopy?.name === 'split') this.localCopy.parameters = t\r\n            else this.localCopy = t\r\n        }\r\n    },\r\n    watch: {\r\n        transformation: {\r\n            handler(newValue) {\r\n                    this.localCopy = JSON.parse(JSON.stringify(newValue))\r\n            },\r\n            deep: true\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.dataPreparationDialog {\r\n    .p-dialog-content {\r\n        min-width: 600px;\r\n        max-width: 1200px;\r\n        min-height: 150px;\r\n    }\r\n    .elementClass {\r\n        flex-direction: column;\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <Dialog class=\"p-fluid kn-dialog--toolbar--primary dataPreparationSaveDialog\" v-bind:visible=\"visibility\" footer=\"footer\" :header=\"$t('managers.workspaceManagement.dataPreparation.savePreparedDataset')\" :closable=\"false\" modal>\r\n        <div class=\"p-grid p-m-0\">\r\n            <div class=\"p-col-12\">\r\n                <div class=\"p-d-flex\">\r\n                    <span class=\"p-float-label kn-flex p-mr-2\">\r\n                        <InputText\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            :disabled=\"!isFirstSave\"\r\n                            v-model.trim=\"v$.preparedDataset.name.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.preparedDataset.name.$invalid\r\n                            }\"\r\n                            maxLength=\"100\"\r\n                            @change=\"touched = true\"\r\n                        />\r\n                        <label class=\"kn-material-input-label\" for=\"label\">{{ $t('managers.workspaceManagement.dataPreparation.dataset.name') }}</label>\r\n                        <KnValidationMessages\r\n                            :vComp=\"v$.preparedDataset.name\"\r\n                            :additionalTranslateParams=\"{\r\n                                fieldName: $t('managers.configurationManagement.headers.name')\r\n                            }\"\r\n                        ></KnValidationMessages>\r\n                    </span>\r\n                </div>\r\n\r\n                <span class=\"p-float-label\">\r\n                    <Textarea\r\n                        class=\"kn-material-input p-mb-1\"\r\n                        type=\"text\"\r\n                        :disabled=\"!isFirstSave\"\r\n                        v-model.trim=\"v$.preparedDataset.description.$model\"\r\n                        :class=\"{\r\n                            'p-invalid': v$.preparedDataset.description.$invalid\r\n                        }\"\r\n                        rows=\"3\"\r\n                        maxLength=\"10000\"\r\n                        @blur=\"touched = true\"\r\n                    />\r\n                    <label class=\"kn-material-input-label\" for=\"label\">{{ $t('managers.workspaceManagement.dataPreparation.dataset.description') }}</label>\r\n                    <KnValidationMessages\r\n                        :vComp=\"v$.preparedDataset.description\"\r\n                        :additionalTranslateParams=\"{\r\n                            fieldName: $t('managers.configurationManagement.headers.description')\r\n                        }\"\r\n                    ></KnValidationMessages>\r\n                </span>\r\n            </div>\r\n            <div class=\"schedulerContainer\">\r\n                <KnScheduler\r\n                    class=\"p-m-1\"\r\n                    :cronExpression=\"currentCronExpression\"\r\n                    :cronExpressionType=\"cronExpressionType\"\r\n                    :descriptor=\"schedulerDescriptor\"\r\n                    @touched=\"touched = true\"\r\n                    :logsVisible=\"false\"\r\n                    :schedulationEnabled=\"schedulationEnabled\"\r\n                    :schedulationPaused=\"schedulationPaused\"\r\n                    @update:schedulationPaused=\"updateSchedulationPaused\"\r\n                    @update:schedulationEnabled=\"updateSchedulationEnabled\"\r\n                    @update:currentCronExpression=\"updateCurrentCronExpression\"\r\n                    @update:cronExpressionType=\"updateCronExpressionType\"\r\n                />\r\n            </div>\r\n        </div>\r\n        <template #footer>\r\n            <Button class=\"kn-button--secondary\" :label=\"$t('common.cancel')\" @click=\"cancel\" />\r\n\r\n            <Button class=\"kn-button--primary\" v-t=\"'common.save'\" :disabled=\"saveButtonDisabled\" @click=\"savePreparedDataset()\" />\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\n\r\nimport { createValidations } from '@/helpers/commons/validationHelper'\r\nimport { AxiosResponse } from 'axios'\r\nimport Dialog from 'primevue/dialog'\r\nimport Textarea from 'primevue/textarea'\r\nimport DataPreparationDescriptor from './DataPreparationDescriptor.json'\r\nimport useValidate from '@vuelidate/core'\r\nimport DataPreparationValidationDescriptor from './DataPreparationValidationDescriptor.json'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport { IDataPreparationDataset, IDataPreparationColumn } from '@/modules/workspace/dataPreparation/DataPreparation'\r\n\r\nimport dataPreparationMonitoringDescriptor from '@/modules/workspace/dataPreparation/DataPreparationMonitoring/DataPreparationMonitoringDescriptor.json'\r\nimport KnScheduler from '@/components/UI/KnScheduler/KnScheduler.vue'\r\nimport mainStore from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'data-preparation-detail-save-dialog',\r\n    props: {\r\n        originalDataset: {} as any,\r\n        config: {} as any,\r\n        columns: [] as PropType<IDataPreparationColumn[]>,\r\n        instanceId: {} as any,\r\n        processId: {} as any,\r\n        preparedDsMeta: {} as any,\r\n        visibility: Boolean\r\n    },\r\n    components: { Dialog, KnScheduler, KnValidationMessages, Textarea },\r\n    data() {\r\n        return {\r\n            descriptor: DataPreparationDescriptor,\r\n            preparedDataset: {} as IDataPreparationDataset,\r\n            v$: useValidate() as any,\r\n            validationDescriptor: DataPreparationValidationDescriptor,\r\n            schedulerDescriptor: dataPreparationMonitoringDescriptor,\r\n            currentCronExpression: '',\r\n            isFirstSave: true,\r\n            touched: false,\r\n            schedulationPaused: false,\r\n            schedulationEnabled: false,\r\n            cronExpressionType: ''\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    updated() {\r\n        if (this.processId && this.processId != '') this.isFirstSave = false\r\n    },\r\n    emits: ['update:visibility', 'update:instanceId', 'update:processId'],\r\n\r\n    validations() {\r\n        return {\r\n            preparedDataset: createValidations('preparedDataset', this.validationDescriptor.validations.configuration)\r\n        }\r\n    },\r\n    computed: {\r\n        saveButtonDisabled(): any {\r\n            return this.v$.$invalid || !this.preparedDataset.name\r\n        }\r\n    },\r\n    methods: {\r\n        savePreparedDataset(): void {\r\n            let processDefinition = this.createProcessDefinition()\r\n            this.saveOrUpdateProcess(processDefinition).then(\r\n                (response: AxiosResponse<any>) => {\r\n                    let processId = response.data.id\r\n                    this.$emit('update:processId', processId)\r\n                    let datasetDefinition = this.createDatasetDefinition()\r\n                    this.saveOrUpdateInstance(processId, datasetDefinition).then(\r\n                        (response: AxiosResponse<any>) => {\r\n                            this.$emit('update:instanceId', response.data.id)\r\n                            this.store.setInfo({ title: 'Saved successfully' })\r\n                        },\r\n                        () => {\r\n                            this.store.setError({ title: 'Save error', msg: 'Cannot add process instance' })\r\n                        }\r\n                    )\r\n                },\r\n                () => {\r\n                    this.store.setError({ title: 'Save error', msg: 'Cannot create process' })\r\n                }\r\n            )\r\n            this.resetAndClose()\r\n        },\r\n        saveOrUpdateProcess(processDefinition) {\r\n            if (this.processId && this.processId != '') return this.$http.put(import.meta.env.VITE_DATA_PREPARATION_PATH + `1.0/process/${this.processId}`, processDefinition)\r\n            else return this.$http.post(import.meta.env.VITE_DATA_PREPARATION_PATH + '1.0/process', processDefinition)\r\n        },\r\n        saveOrUpdateInstance(processId, datasetDefinition) {\r\n            if (this.instanceId && this.instanceId != '') return this.$http.post(import.meta.env.VITE_DATA_PREPARATION_PATH + `1.0/instance/${this.instanceId}`, datasetDefinition)\r\n            else return this.$http.post(import.meta.env.VITE_DATA_PREPARATION_PATH + '1.0/process/' + processId + '/instance', datasetDefinition)\r\n        },\r\n        createDatasetDefinition() {\r\n            let toReturn = {}\r\n            toReturn['config'] = {}\r\n            toReturn['config']['paused'] = this.schedulationPaused\r\n\r\n            if (this.schedulationEnabled) {\r\n                toReturn['config']['cron'] = this.currentCronExpression\r\n                toReturn['config']['type'] = this.cronExpressionType\r\n            }\r\n\r\n            toReturn['dataSetLabel'] = this.originalDataset.label\r\n            toReturn['dataSetId'] = this.originalDataset.id\r\n            var d = new Date()\r\n            if (this.preparedDataset.label) {\r\n                toReturn['destinationDataSetLabel'] = this.preparedDataset.label\r\n            } else {\r\n                toReturn['destinationDataSetLabel'] = 'ds__' + (d.getTime() % 10000000)\r\n            }\r\n            toReturn['destinationDataSetName'] = this.preparedDataset.name\r\n            toReturn['destinationDataSetDescription'] = this.preparedDataset.description\r\n            toReturn['meta'] = this.createMetaDefinition()\r\n            toReturn['dsId'] = this.preparedDataset.id\r\n            return toReturn\r\n        },\r\n        createMetaDefinition() {\r\n            let meta = [] as Array<any>\r\n            this.columns?.forEach((col) => {\r\n                let item = {}\r\n                item['displayedName'] = col.fieldAlias\r\n                item['name'] = col.header\r\n                item['fieldType'] = col.fieldType\r\n                item['type'] = col.Type\r\n                meta.push(item)\r\n            })\r\n            return meta\r\n        },\r\n        createProcessDefinition() {\r\n            let toReturn = {}\r\n            if (this.config && this.config.transformations) toReturn['definition'] = this.config.transformations\r\n            return toReturn\r\n        },\r\n        cancel() {\r\n            if (this.touched) {\r\n                this.$confirm.require({\r\n                    message: this.$t('common.toast.unsavedChangesHeader'),\r\n                    header: this.$t('common.toast.unsavedChangesMessage'),\r\n                    icon: 'pi pi-exclamation-triangle',\r\n                    accept: () => this.resetAndClose()\r\n                })\r\n            } else {\r\n                this.resetAndClose()\r\n            }\r\n        },\r\n        resetAndClose(): void {\r\n            this.cronExpressionType = this.preparedDsMeta.config?.type\r\n            this.currentCronExpression = this.preparedDsMeta.config?.cron ? this.preparedDsMeta.config.cron : ''\r\n\r\n            this.schedulationPaused = this.preparedDsMeta.config?.schedulationPaused || false\r\n\r\n            this.schedulationEnabled = this.preparedDsMeta.config?.cron ? true : false\r\n            this.closeDialog()\r\n        },\r\n        closeDialog(): void {\r\n            this.$emit('update:visibility', false)\r\n        },\r\n        loadTranslations(): void {\r\n            this.descriptor.dataPreparation.refreshRate.options.forEach((element) => {\r\n                element.name = this.$t(element.name)\r\n            })\r\n        },\r\n\r\n        updateSchedulationPaused(newSchedulationPaused) {\r\n            this.schedulationPaused = newSchedulationPaused\r\n        },\r\n        updateSchedulationEnabled(newSchedulationEnabled) {\r\n            this.schedulationEnabled = newSchedulationEnabled\r\n        },\r\n        updateCurrentCronExpression(newCronExpression) {\r\n            this.currentCronExpression = newCronExpression\r\n        },\r\n        updateCronExpressionType(newCronExpressionType) {\r\n            this.cronExpressionType = newCronExpressionType\r\n        }\r\n    },\r\n\r\n    watch: {\r\n        preparedDsMeta: {\r\n            handler() {\r\n                if (Object.keys(this.preparedDsMeta).length > 0) {\r\n                    this.preparedDataset = this.preparedDsMeta\r\n                    this.cronExpressionType = this.preparedDsMeta.config?.type\r\n                    this.currentCronExpression = this.preparedDsMeta.config?.cron ? this.preparedDsMeta.config.cron : ''\r\n\r\n                    this.schedulationPaused = this.preparedDsMeta.config?.schedulationPaused || false\r\n\r\n                    this.schedulationEnabled = this.preparedDsMeta.config?.cron ? true : false\r\n                }\r\n            },\r\n            deep: true\r\n        }\r\n    },\r\n\r\n    created() {\r\n        this.loadTranslations()\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.dataPreparationSaveDialog {\r\n    min-width: 600px !important;\r\n    width: 600px !important;\r\n    max-width: 600px !important;\r\n}\r\n\r\n.schedulerContainer {\r\n    width: 100%;\r\n}\r\n</style>\r\n","<template>\r\n    <div class=\"kn-page kn-data-preparation\">\r\n        <KnCalculatedField\r\n            v-model:visibility=\"showCFDialog\"\r\n            @save=\"saveCFDialog\"\r\n            @cancel=\"cancelCFDialog\"\r\n            :fields=\"columns\"\r\n            :descriptor=\"cfDescriptor\"\r\n            :propCalcFieldFunctions=\"cfDescriptor.availableFunctions\"\r\n            :readOnly=\"readOnly\"\r\n            @update:readOnly=\"updateReadOnly\"\r\n            v-model:template=\"selectedTransformation\"\r\n            :valid=\"cfType !== ''\"\r\n        >\r\n            <template #additionalInputs>\r\n                <div class=\"p-col-4\">\r\n                    <span v-if=\"cfDescriptor.availableTypes\" class=\"p-float-label p-field p-ml-2 kn-flex\">\r\n                        <Dropdown\r\n                            v-model=\"cfType\"\r\n                            :options=\"cfDescriptor.availableTypes\"\r\n                            :disabled=\"readOnly\"\r\n                            class=\"kn-material-input\"\r\n                            optionLabel=\"label\"\r\n                            optionValue=\"code\"\r\n                            :class=\"{\r\n                                'p-invalid': !cfType\r\n                            }\"\r\n                        />\r\n                        <label class=\"kn-material-input-label\"> {{ $t('components.knCalculatedField.type') }} </label>\r\n                    </span>\r\n                </div>\r\n            </template>\r\n        </KnCalculatedField>\r\n        <DataPreparationDialog v-model:transformation=\"selectedTransformation\" @send-transformation=\"handleTransformation\" :columns=\"columns\" v-model:col=\"col\" :readOnly=\"readOnly\" @update:readOnly=\"updateReadOnly\" />\r\n        <DataPreparationSaveDialog v-model:visibility=\"showSaveDialog\" :originalDataset=\"dataset\" :config=\"dataset.config\" :columns=\"columns\" :instanceId=\"instanceId\" @update:instanceId=\"updateInstanceId\" :processId=\"processId\" @update:processId=\"updateprocessId\" :preparedDsMeta=\"preparedDsMeta\" />\r\n        <Toolbar class=\"kn-toolbar kn-toolbar--primary p-m-0\">\r\n            <template #start> {{ $t('managers.workspaceManagement.dataPreparation.label') }} ({{ $t('managers.workspaceManagement.dataPreparation.originalDataset') }}: {{ dataset.name }})</template>\r\n            <template #end>\r\n                <Button icon=\"pi pi-refresh\" class=\"p-button-text p-button-rounded p-button-plain\" v-tooltip.bottom=\"$t('common.refresh')\" @click=\"refreshOriginalDataset\" :disabled=\"loading > 0\" />\r\n                <Button icon=\"pi pi-save\" class=\"p-button-text p-button-rounded p-button-plain\" v-tooltip.bottom=\"$t('common.save')\" @click=\"saveDataset\" :disabled=\"loading > 0\" />\r\n                <Button icon=\"pi pi-times\" class=\"p-button-text p-button-rounded p-button-plain\" v-tooltip.bottom=\"$t('common.close')\" @click=\"closeTemplate()\" /> </template\r\n        ></Toolbar>\r\n        <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-m-0 toolbarCustomConfig\">\r\n            <template #start>\r\n                <template v-for=\"(menu, index) in getMenuForToolbar()\" v-bind:key=\"index\">\r\n                    <Button v-if=\"menu !== 'divider'\" :class=\"descriptor.css.buttonClassHeader\" v-tooltip.bottom=\"$t(menu.label)\" @click=\"callFunction(menu)\" :disabled=\"calculateDisabledProperty(menu)\">\r\n                        <span v-if=\"menu.icon.class\" :class=\"menu.icon.class\">{{ menu.icon.name }}</span>\r\n                        <i v-else :class=\"menu.icon\"></i>\r\n                    </Button>\r\n                    <Divider v-else layout=\"vertical\" />\r\n                </template>\r\n            </template>\r\n            <template #end>\r\n                <div class=\"arrow-button-container\">\r\n                    <Button icon=\"pi pi-arrow-left\" :class=\"descriptor.css.buttonClassHeader\" style=\"overflow: visible\" @click=\"toggleSidebarVisibility()\" />\r\n                    <Badge class=\"arrow-badge\" v-if=\"dataset.config && dataset.config.transformations && dataset.config.transformations.length > 0\" :value=\"dataset.config && dataset.config.transformations && dataset.config.transformations.length\"></Badge>\r\n                </div>\r\n            </template>\r\n        </Toolbar>\r\n        <template v-if=\"loading > 0\">\r\n            <template v-if=\"progressMode === 'indeterminate'\">\r\n                <ProgressBar class=\"kn-progress-bar\" :mode=\"progressMode\" :value=\"getProgressValue()\" />\r\n            </template>\r\n            <template v-else><ProgressBar class=\"kn-progress-bar\" :value=\"getProgressValue()\" /> </template>\r\n        </template>\r\n        <Divider class=\"kn-divider dividerCustomConfig\" />\r\n        <div class=\"kn-page-content p-grid p-m-0 managerDetail\">\r\n            <Sidebar v-model:visible=\"visibleRight\" position=\"right\" class=\"kn-data-preparation-sidenav\">\r\n                <div class=\"info-container\">\r\n                    <div class=\"original-dataset\">\r\n                        <i class=\"fa fa-database p-mr-2\"></i><span>{{ $t('managers.workspaceManagement.dataPreparation.originalDataset') }}</span\r\n                        >: {{ dataset.label }}\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"titleContainer\">\r\n                    <h4 class=\"kn-truncated\">{{ $t('managers.workspaceManagement.dataPreparation.transformations.label') }}</h4>\r\n                </div>\r\n                <Divider class=\"p-m-0 p-p-0 dividerCustomConfig\" />\r\n                <Listbox class=\"kn-list kn-flex kn-list-no-border-right\" :options=\"reverseTransformations()\" optionLabel=\"type\"\r\n                    ><template #option=\"slotProps\">\r\n                        <div class=\"p-text-uppercase kn-list-item transformationSidebarElement\">\r\n                            <div v-if=\"slotProps.option.type != 'calculatedField'\">{{ slotProps.option.type }} - {{ slotProps.option.parameters[0].columns[0] }}</div>\r\n                            <div v-else>{{ slotProps.option.type }} - {{ slotProps.option.parameters[0].colName }}</div>\r\n                            <div>\r\n                                <Button v-if=\"slotProps.option.type != 'trim' && slotProps.option.type != 'drop'\" icon=\"fas fa-eye\" :class=\"descriptor.css.buttonClassHeader\" @click=\"openTransformationDetail(slotProps.option)\" v-tooltip=\"$t('common.preview')\" />\r\n                                <Button v-if=\"slotProps.index == 0\" icon=\"p-jc-end pi pi-trash\" :class=\"descriptor.css.buttonClassHeader\" @click=\"deleteTransformation()\" v-tooltip=\"$t('common.delete')\" :disabled=\"loading > 0\" />\r\n                            </div>\r\n                        </div> </template\r\n                ></Listbox>\r\n            </Sidebar>\r\n            <DataTable\r\n                ref=\"dt\"\r\n                :value=\"datasetData\"\r\n                class=\"p-datatable-sm kn-table data-prep-table\"\r\n                dataKey=\"id\"\r\n                :paginator=\"datasetData.length > 20\"\r\n                :rows=\"20\"\r\n                paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                breakpoint=\"960px\"\r\n                :currentPageReportTemplate=\"$t('common.table.footer.paginated', { first: '{first}', last: '{last}', totalRecords: '{totalRecords}' })\"\r\n                :loading=\"loading > 0\"\r\n                :resizableColumns=\"true\"\r\n                columnResizeMode=\"expand\"\r\n                showGridlines\r\n                responsiveLayout=\"scroll\"\r\n                :scrollable=\"true\"\r\n                scrollDirection=\"both\"\r\n            >\r\n                <template #empty>\r\n                    {{ $t('common.info.noDataFound') }}\r\n                </template>\r\n                <template #loading>\r\n                    {{ $t('common.info.dataLoading') }}\r\n                </template>\r\n\r\n                <Column v-for=\"(col, colIndex) in columns\" :field=\"col.header\" :key=\"colIndex\" :style=\"{ width: '200px' }\">\r\n                    <template #header>\r\n                        <Button v-if=\"col.fieldType\" :class=\"descriptor.css.buttonClassHeader\" @click=\"toggle($event, 'opType-' + colIndex)\">\r\n                            <span v-if=\"descriptor.roles.filter((x) => x.code === col.fieldType)[0].icon.class\" :class=\"descriptor.roles.filter((x) => x.code === col.fieldType)[0].icon.class\">{{ descriptor.roles.filter((x) => x.code === col.fieldType)[0].icon.name }}</span>\r\n                            <i v-else :class=\"descriptor.roles.filter((x) => x.code === col.fieldType)[0].icon\"></i>\r\n                        </Button>\r\n                        <OverlayPanel :ref=\"'opType-' + colIndex\" :popup=\"true\">\r\n                            <span class=\"p-float-label\">\r\n                                <Dropdown v-model=\"col.fieldType\" :options=\"translateRoles()\" optionLabel=\"label\" optionValue=\"code\" class=\"kn-material-input\" />\r\n                            </span>\r\n                        </OverlayPanel>\r\n                        <div class=\"aliasAndType p-ml-2\">\r\n                            <input class=\"kn-input-text-sm\" type=\"text\" v-model=\"col.fieldAlias\" v-if=\"col.editing\" @blur=\"changeAlias(col)\" @keydown.enter=\"changeAlias(col)\" />\r\n                            <span v-else class=\"kn-clickable\" @click=\"changeAlias(col)\">{{ col.fieldAlias }}</span>\r\n                            <span class=\"kn-list-item-text-secondary kn-truncated roleType\">{{ $t(removePrefixFromType(col.Type)) }}</span>\r\n                        </div>\r\n                        <Button icon=\"pi pi-ellipsis-v\" :class=\"descriptor.css.buttonClassHeader\" @click=\"toggle($event, 'trOpType-' + colIndex)\" />\r\n                        <Menu :model=\"getTransformationsMenu(col)\" :ref=\"'trOpType-' + colIndex\" :popup=\"true\">\r\n                            <template #item=\"{ item }\">\r\n                                <span :class=\"['p-menuitem-link', 'toolbarCustomConfig', descriptor.css.buttonClassHeader]\" @click=\"callFunction(item, col)\">\r\n                                    <span :class=\"item.icon.class\" class=\"menu-icon\" v-if=\"item.icon.class\">{{ item.icon.name }}</span>\r\n                                    <i v-else :class=\"item.icon\"></i> <span class=\"p-ml-2\"> {{ $t(item.label) }}</span>\r\n                                </span>\r\n                            </template>\r\n                        </Menu> </template\r\n                    ><template #body=\"{ data }\">\r\n                        <span v-if=\"col.Type.toLowerCase().includes('time')\"> {{ getFormattedDate(data[col.header], { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' }) }}</span>\r\n                        <span v-else-if=\"col.Type.toLowerCase().includes('date')\"> {{ getFormattedDate(data[col.header], { year: 'numeric', month: '2-digit', day: '2-digit' }) }}</span>\r\n                        <span v-else> {{ data[col.header] }}</span>\r\n                    </template></Column\r\n                >\r\n            </DataTable>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\n\r\nimport { AxiosResponse } from 'axios'\r\nimport Badge from 'primevue/badge'\r\nimport Column from 'primevue/column'\r\nimport DataTable from 'primevue/datatable'\r\nimport DataPreparationDescriptor from './DataPreparationDescriptor.json'\r\nimport Divider from 'primevue/divider'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Sidebar from 'primevue/sidebar'\r\nimport OverlayPanel from 'primevue/overlaypanel'\r\nimport Listbox from 'primevue/listbox'\r\n\r\nimport Menu from 'primevue/menu'\r\n\r\nimport DataPreparationDialog from '@/modules/workspace/dataPreparation/DataPreparationDialog.vue'\r\nimport DataPreparationSaveDialog from '@/modules/workspace/dataPreparation/DataPreparationSaveDialog.vue'\r\nimport { IDataPreparationColumn } from '@/modules/workspace/dataPreparation/DataPreparation'\r\nimport KnCalculatedField from '@/components/functionalities/KnCalculatedField/KnCalculatedField.vue'\r\nimport DataPreparationSimpleDescriptor from '@/modules/workspace/dataPreparation/DataPreparationSimple/DataPreparationSimpleDescriptor.json'\r\nimport DataPreparationSplitDescriptor from '@/modules/workspace/dataPreparation/DataPreparationCustom/DataPreparationSplitDescriptor.json'\r\nimport calculatedFieldDescriptor from '@/modules/workspace/dataPreparation/DataPreparationCalculatedFieldDescriptor.json'\r\n\r\nimport { Client } from '@stomp/stompjs'\r\nimport { formatDateWithLocale } from '@/helpers/commons/localeHelper'\r\nimport mainStore from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'data-preparation-detail',\r\n    props: {\r\n        id: Number,\r\n        transformations: Array as PropType<any[]>,\r\n        existingProcessId: String,\r\n        existingInstanceId: String,\r\n        existingDataset: String\r\n    },\r\n    components: { Listbox, KnCalculatedField, Badge, Column, DataPreparationDialog, DataPreparationSaveDialog, DataTable, Divider, Dropdown, OverlayPanel, Sidebar, Menu },\r\n\r\n    data() {\r\n        return {\r\n            descriptor: DataPreparationDescriptor,\r\n            loading: 0,\r\n            datasetData: Array<any>(),\r\n            displayDataPreparationDialog: false as boolean,\r\n            selectedProduct: null,\r\n            visibleRight: false as boolean,\r\n            visibility: false as boolean,\r\n            selectedTransformation: null,\r\n            showSaveDialog: false as boolean,\r\n            showCFDialog: false as boolean,\r\n            columns: [] as IDataPreparationColumn[],\r\n            col: null,\r\n            descriptorTransformations: Array<any>(),\r\n            dataset: {} as any,\r\n            simpleDescriptor: DataPreparationSimpleDescriptor,\r\n            splitDescriptor: DataPreparationSplitDescriptor,\r\n            client: {} as any,\r\n            cfDescriptor: calculatedFieldDescriptor,\r\n            instanceId: '' as string,\r\n            processId: '' as string,\r\n            readOnly: false as boolean,\r\n            preparedDsMeta: {},\r\n            progressMode: 'indeterminate',\r\n            cfType: ''\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    async created() {\r\n        this.loading++\r\n        this.descriptorTransformations = Object.assign([], this.descriptor.transformations)\r\n\r\n        await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + '1.0/datasets/dataset/id/' + this.id).then((response: AxiosResponse<any>) => {\r\n            this.dataset = response.data[0]\r\n        })\r\n        if (this.dataset) {\r\n            await this.initDsMetadata()\r\n            this.initTransformations()\r\n\r\n            var url = new URL(window.location.origin)\r\n            url.protocol = url.protocol.replace('http', 'ws')\r\n            var uri = url + 'knowage-data-preparation/ws?' + import.meta.env.VITE_DEFAULT_AUTH_HEADER + '=' + localStorage.getItem('token')\r\n            this.client = new Client({\r\n                brokerURL: uri,\r\n                connectHeaders: {},\r\n                heartbeatIncoming: 4000,\r\n                heartbeatOutgoing: 4000\r\n            })\r\n\r\n            this.client.onConnect = () => {\r\n                this.client.subscribe(\r\n                    '/user/queue/preview',\r\n                    (message) => {\r\n                        // called when the client receives a STOMP message from the server\r\n                        if (message.body) {\r\n                            this.updateTable(message.body)\r\n                        } else {\r\n                            console.log('got empty message')\r\n                        }\r\n                        this.loading--\r\n                    },\r\n                    {\r\n                        dsId: this.dataset.id\r\n                    }\r\n                )\r\n\r\n                this.client.subscribe('/user/queue/error', (error) => {\r\n                    // called when the client receives a STOMP message from the server\r\n                    if (error.body) {\r\n                        let message = JSON.parse(error.body)\r\n                        this.store.setError({ title: 'Error', msg: message.message })\r\n                    } else {\r\n                        this.store.setError({ title: 'Error' })\r\n                    }\r\n                    if (this.dataset.config && this.dataset.config.transformations?.length > 0) this.dataset.config.transformations.splice(-1)\r\n                    this.loading--\r\n                })\r\n\r\n                this.client.subscribe(\r\n                    '/user/queue/prepare',\r\n                    (message) => {\r\n                        // called when the client receives a STOMP message from the server\r\n                        if (message.body) {\r\n                            let avroJobResponse = JSON.parse(message.body)\r\n                            if (avroJobResponse.statusOk) this.store.setInfo({ title: 'Dataset prepared successfully' })\r\n                            else this.store.setError({ title: 'Cannot prepare dataset', msg: avroJobResponse.errorMessage })\r\n                            //TODO: refresh data?\r\n                        } else {\r\n                            this.store.setError({ title: 'Websocket error', msg: 'got empty message' })\r\n                        }\r\n                    },\r\n                    {\r\n                        dsId: this.dataset.id\r\n                    }\r\n                )\r\n\r\n                if (this.transformations) {\r\n                    this.client.publish({ destination: '/app/preview', headers: { dsId: this.dataset.id }, body: JSON.stringify(this.dataset.config.transformations) })\r\n                }\r\n            }\r\n\r\n            this.client.activate()\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        getFormattedDate(date: any, format: any) {\r\n            return formatDateWithLocale(date, format, true)\r\n        },\r\n        getProgressValue() {\r\n            if (this.dataset.config && this.dataset.config.transformations && this.dataset.config.transformations.length && this.dataset.config.transformations.length > 1) {\r\n                this.progressMode = ''\r\n                let tot = this.dataset.config.transformations.length\r\n\r\n                return (100 * (tot - this.loading)) / tot\r\n            }\r\n\r\n            this.progressMode = 'indeterminate'\r\n\r\n            return 0\r\n        },\r\n        reverseTransformations() {\r\n            if (this.dataset.config && this.dataset.config.transformations) {\r\n                let transformations = [...this.dataset.config.transformations]\r\n                return transformations.reverse()\r\n            }\r\n\r\n            return []\r\n        },\r\n        cancelCFDialog(): void {\r\n            this.selectedTransformation = null\r\n            this.showCFDialog = false\r\n            this.cfType = ''\r\n        },\r\n        saveCFDialog(t): void {\r\n            let convertedTransformation = this.convertCFTransformation(t)\r\n            this.handleTransformation(convertedTransformation)\r\n            this.showCFDialog = false\r\n        },\r\n        convertCFTransformation(t) {\r\n            let transformation = { parameters: [] as Array<any>, type: 'calculatedField' }\r\n            let par = { columns: [] as Array<any> }\r\n            Object.keys(t).forEach((key) => {\r\n                if (key === 'column') par.columns.push(t[key].header)\r\n                else par[key] = t[key]\r\n            })\r\n            if (this.cfDescriptor.availableTypes) {\r\n                par['type'] = this.cfType\r\n            }\r\n            transformation.parameters.push(par)\r\n            return transformation\r\n        },\r\n        calculateDisabledProperty(menu): Boolean {\r\n            if (this.loading > 0) return true\r\n            let disabled = false\r\n            if (menu.type === 'advancedFilter') {\r\n                if (!this.dataset.config) disabled = true\r\n                else disabled = this.dataset.config.transformations.filter((x) => x.type === 'filter').length < 2\r\n            }\r\n            return disabled\r\n        },\r\n        changeAlias(col): void {\r\n            if (col.editing) delete col.editing\r\n            else col.editing = true\r\n        },\r\n        closeTemplate(): void {\r\n            this.$router.go(-1)\r\n        },\r\n        refreshOriginalDataset(): void {\r\n            // launch avro export job\r\n            this.$http\r\n                .post(\r\n                    import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/data-preparation/prepare/${this.dataset.id}`,\r\n                    {},\r\n                    {\r\n                        headers: {\r\n                            Accept: 'application/json, text/plain, */*',\r\n                            'Content-Type': 'application/json;charset=UTF-8'\r\n                        }\r\n                    }\r\n                )\r\n                .then(() => {\r\n                    this.store.setInfo({\r\n                        title: this.$t('workspace.myData.isPreparing')\r\n                    })\r\n                })\r\n                .catch(() => {})\r\n\r\n            // listen on websocket for avro export job to be finished\r\n            this.client.publish({ destination: '/app/prepare', body: this.dataset.id })\r\n        },\r\n        openTransformationDetail(t) {\r\n            this.readOnly = true\r\n            let selectedTransformation = this.descriptorTransformations.filter((x) => x.name == t.type)[0]\r\n            selectedTransformation['parameters'] = []\r\n            let param = t.parameters[0]\r\n            Object.keys(param).forEach((key) => {\r\n                let obj = {}\r\n                obj['name'] = key\r\n                if (key == 'columns') {\r\n                    let value = [] as Array<any>\r\n                    for (let i = 0; i < param[key].length; i++) {\r\n                        let col = this.columns.filter((x) => x.fieldAlias.toUpperCase() === param[key][i].toUpperCase())[0]\r\n                        value.push(col)\r\n                    }\r\n                    obj['value'] = value\r\n                } else {\r\n                    obj['value'] = param[key]\r\n                }\r\n\r\n                if (t.type === 'calculatedField' && this.cfDescriptor.availableTypes) {\r\n                    this.cfType = t.parameters[0].type\r\n                }\r\n\r\n                selectedTransformation['parameters'].push(obj)\r\n            })\r\n\r\n            if (t.type == 'filter' || t.type == 'split') {\r\n                let col = this.columns.filter((x) => x.fieldAlias.toUpperCase() === t.parameters[0].columns[0].toUpperCase())[0]\r\n                this.callFunction(selectedTransformation, col)\r\n            } else this.callFunction(selectedTransformation, undefined)\r\n        },\r\n        getTransformationsMenu(col: IDataPreparationColumn): Array<any> {\r\n            return this.descriptorTransformations\r\n                .filter((x) => x.editColumn && !x.hidden)\r\n                .filter((x) => {\r\n                    if (x.incompatibleDataTypes) return !x.incompatibleDataTypes?.includes(col.Type)\r\n                    return true\r\n                })\r\n        },\r\n        initTransformations(): void {\r\n            if (this.transformations) {\r\n                if (!this.dataset.config) this.dataset.config = {}\r\n                this.dataset.config.transformations = this.transformations\r\n                this.loading++\r\n            }\r\n        },\r\n        async initDsMetadata() {\r\n            if (this.existingProcessId) this.processId = this.existingProcessId\r\n            if (this.existingInstanceId) this.instanceId = this.existingInstanceId\r\n            if (this.existingDataset) {\r\n                let dsMeta = JSON.parse(this.existingDataset)\r\n                let tmp = {}\r\n                tmp['label'] = dsMeta.label\r\n                tmp['name'] = dsMeta.name\r\n                tmp['description'] = dsMeta.description\r\n                tmp['id'] = dsMeta.id\r\n                await this.$http.get(import.meta.env.VITE_DATA_PREPARATION_PATH + '1.0/process/by-destination-data-set/' + dsMeta.id).then((response: AxiosResponse<any>) => {\r\n                    let instance = response.data.instance\r\n                    if (instance.config) {\r\n                        tmp['config'] = instance.config\r\n                    }\r\n                })\r\n\r\n                this.preparedDsMeta = tmp\r\n            }\r\n        },\r\n        getColHeader(metadata: Array<any>, idx: Number): string {\r\n            let columnMapping = 'column_' + idx\r\n            let toReturn = metadata.filter((x) => x.mappedTo == columnMapping)[0].alias\r\n            return toReturn\r\n        },\r\n        callFunction(transformation: any, col): void {\r\n            if (transformation.name === 'changeType' || transformation.name === 'split') {\r\n                let parsArray = transformation.name === 'changeType' ? this.simpleDescriptor[transformation.name].parameters : this.splitDescriptor.parameters\r\n                for (var i = 0; i < parsArray.length; i++) {\r\n                    let element = parsArray[i]\r\n                    if (element.name === 'destType' || element.name === 'destType1' || element.name === 'destType2') {\r\n                        element.availableOptions = col ? this.getCompatibilityType(col) : this.descriptor.compatibilityMap['all'].values\r\n\r\n                        element.availableOptions.forEach((element) => {\r\n                            element.label = this.removePrefixFromType(element.label)\r\n                        })\r\n                    }\r\n                }\r\n\r\n                /* this.handleTransformation(transformation) */\r\n                this.selectedTransformation = transformation\r\n                if (col) this.col = col.header\r\n            } else if (transformation.name === 'drop' && col) {\r\n                this.$confirm.require({\r\n                    message: this.$t('common.toast.deleteMessage'),\r\n                    header: this.$t('common.toast.deleteTitle'),\r\n                    icon: 'pi pi-exclamation-triangle',\r\n                    accept: () => {\r\n                        let par = this.simpleDescriptor[transformation.name].parameters[0]\r\n                        par.value = col.header\r\n                        transformation.parameters = []\r\n                        transformation.parameters.push(par)\r\n                        let toReturn = { parameters: [] as Array<any>, type: 'drop' }\r\n                        let obj = { columns: [] as Array<any> }\r\n                        obj.columns.push(col.header)\r\n\r\n                        toReturn.parameters.push(obj)\r\n\r\n                        this.handleTransformation(toReturn)\r\n                    }\r\n                })\r\n            } else {\r\n                this.selectedTransformation = transformation\r\n                if (col) this.col = col.header\r\n                if (transformation.name === 'calculatedField') this.showCFDialog = true\r\n            }\r\n        },\r\n        handleTransformation(t: any): void {\r\n            if (!this.dataset.config) this.dataset.config = {}\r\n            if (!this.dataset.config.transformations) this.dataset.config.transformations = []\r\n            this.dataset.config.transformations.push(t)\r\n            this.loading++\r\n            this.client.publish({ destination: '/app/preview', headers: { dsId: this.dataset.id }, body: JSON.stringify(this.dataset.config.transformations) })\r\n        },\r\n        toggleSidebarVisibility() {\r\n            this.visibleRight = true\r\n        },\r\n        deleteTransformation(index: number): void {\r\n            if (index) this.dataset.config.transformations.splice(index, 1)\r\n            else this.dataset.config.transformations.splice(-1) // remove last element\r\n            this.loading++\r\n            this.client.publish({ destination: '/app/preview', headers: { dsId: this.dataset.id }, body: JSON.stringify(this.dataset.config.transformations) })\r\n        },\r\n        getCompatibilityType(col: IDataPreparationColumn): void {\r\n            return this.descriptor.compatibilityMap[col.Type].values\r\n        },\r\n        toggle(event: Event, trOp: string): void {\r\n            // eslint-disable-next-line\r\n            // @ts-ignore\r\n            this.$refs[trOp].toggle(event)\r\n        },\r\n        getMenuForToolbar(): Array<any> {\r\n            let tmp = this.descriptorTransformations\r\n                .filter((x) => x.toolbar && !x.hidden)\r\n                .sort(function (a, b) {\r\n                    if (a.position > b.position) return 1\r\n                    if (a.position < b.position) return -1\r\n                    return 0\r\n                })\r\n\r\n            let menu = [] as Array<any>\r\n            if (tmp.length > 0) {\r\n                let type = tmp[0].category\r\n                menu.push(tmp[0])\r\n\r\n                for (let i = 1; i < tmp.length; i++) {\r\n                    if (type !== tmp[i].category) {\r\n                        type = tmp[i].category\r\n                        menu.push('divider')\r\n                    }\r\n                    menu.push(tmp[i])\r\n                }\r\n            }\r\n            return menu\r\n        },\r\n        removePrefixFromType(type: String): String {\r\n            let splitted = type.split('.', -1)\r\n\r\n            return splitted.length > 0 ? splitted[splitted.length - 1] : splitted[0]\r\n        },\r\n        saveDataset(): void {\r\n            this.showSaveDialog = true\r\n        },\r\n        translateRoles() {\r\n            let translatedRoles = this.descriptor.roles\r\n            translatedRoles.forEach((x) => (x.label = this.$t(x.label)))\r\n            return translatedRoles\r\n        },\r\n        switchEditMode(col) {\r\n            col.edit = !col.edit\r\n        },\r\n        updateReadOnly(state): void {\r\n            this.readOnly = state\r\n        },\r\n        updateInstanceId(iid): void {\r\n            this.instanceId = iid\r\n        },\r\n        updateprocessId(pid): void {\r\n            this.processId = pid\r\n        },\r\n        updateTable(message) {\r\n            let response = JSON.parse(message)\r\n            // set headers\r\n            let metadata = response.metadata.columns\r\n            this.columns = []\r\n            for (let i = 0; i < metadata.length; i++) {\r\n                let obj = {} as IDataPreparationColumn\r\n                obj.Type = metadata[i].type\r\n                obj.disabled = false\r\n                obj.fieldAlias = metadata[i].alias\r\n                obj.fieldType = metadata[i].fieldType\r\n                obj.header = metadata[i].name\r\n                this.columns.push(obj)\r\n            }\r\n            //set data rows\r\n            this.datasetData = []\r\n            response.rows.forEach((row) => {\r\n                let obj = {}\r\n                for (let i = 0; i < row.length; i++) {\r\n                    let colHeader = this.getColHeader(metadata, i)\r\n                    obj[colHeader] = row[i]\r\n                }\r\n                this.datasetData.push(obj)\r\n            })\r\n        }\r\n    },\r\n    unmounted() {\r\n        if (Object.keys(this.client).length > 0) {\r\n            this.client.deactivate()\r\n            this.client = {}\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.kn-data-preparation {\r\n    .arrow-button-container {\r\n        position: relative;\r\n        left: -10px;\r\n        .p-button {\r\n            padding-left: 20px;\r\n        }\r\n        .arrow-badge {\r\n            position: absolute;\r\n            top: 0;\r\n            left: 25px;\r\n        }\r\n    }\r\n\r\n    .managerDetail {\r\n        width: calc(100vw - var(--kn-mainmenu-width));\r\n    }\r\n\r\n    .p-datatable.p-datatable-sm.data-prep-table {\r\n        width: 100%;\r\n        .p-datatable-thead {\r\n            tr {\r\n                th {\r\n                    background-color: var(--kn-table-header-background-color);\r\n                }\r\n            }\r\n        }\r\n        .p-column-header-content {\r\n            flex: 1;\r\n            .p-button.p-button-icon-only.p-button-rounded {\r\n                min-width: 2.25rem;\r\n            }\r\n        }\r\n        .p-datatable-tbody > tr > td {\r\n            padding: 0.1rem;\r\n            font-size: 0.9rem;\r\n        }\r\n    }\r\n}\r\n.kn-data-preparation-sidenav {\r\n    .info-container {\r\n        border: 1px dashed var(--kn-color-borders);\r\n        border-radius: 4px;\r\n        padding: 4px;\r\n        margin-bottom: 8px;\r\n        .original-dataset {\r\n            height: 32px;\r\n            justify-content: flex-start;\r\n            align-items: center;\r\n            display: flex;\r\n            span {\r\n                margin-left: 4px;\r\n                text-transform: uppercase;\r\n                font-size: 0.9rem;\r\n            }\r\n        }\r\n    }\r\n\r\n    .sidenav-transformation {\r\n        display: flex;\r\n        width: 100%;\r\n        align-items: center;\r\n        .transformation-icon {\r\n            min-width: 24px;\r\n        }\r\n    }\r\n}\r\n.p-column-header-content {\r\n    .p-button {\r\n        min-width: 0;\r\n    }\r\n}\r\n\r\n.toolbarCustomConfig {\r\n    background-color: white !important;\r\n\r\n    .kn-datapreparation-button {\r\n        min-width: 0;\r\n\r\n        span {\r\n            width: 16px;\r\n            height: 16px;\r\n            font-size: 16px;\r\n        }\r\n        i {\r\n            width: 16px;\r\n            height: 16px;\r\n            font-size: 16px;\r\n        }\r\n    }\r\n\r\n    &.kn-datapreparation-button {\r\n        min-width: 0;\r\n\r\n        .menu-icon {\r\n            width: 16px;\r\n            height: 16px;\r\n            font-size: 16px;\r\n        }\r\n        i {\r\n            width: 16px;\r\n            height: 16px;\r\n            font-size: 16px;\r\n        }\r\n    }\r\n}\r\n.dividerCustomConfig {\r\n    border: 1px solid;\r\n    border-color: var(--kn-color-borders);\r\n}\r\n.p-overlaypanel-content {\r\n    padding: 0px !important;\r\n}\r\n.transformationDescription {\r\n    color: var(--kn-list-item-text-secondary-color);\r\n    font-size: var(--kn-list-item-text-secondary-font-size);\r\n}\r\n\r\n.typeAndDescription {\r\n    flex-direction: column;\r\n    display: flex;\r\n    align-items: flex-start;\r\n}\r\n\r\n.p-sidebar-content {\r\n    height: 100vw;\r\n}\r\n\r\n.transformationSidebarElement {\r\n    font-size: 0.75em;\r\n    justify-content: space-between !important;\r\n    padding: 0 !important;\r\n}\r\n\r\n.customSidebarMenu {\r\n    width: 100% !important;\r\n    border: none !important;\r\n    padding: 0px !important;\r\n}\r\n\r\n.roleType {\r\n    font-size: 0.67em;\r\n}\r\n.sidebarClass {\r\n    flex-direction: column-reverse;\r\n}\r\n\r\n.titleContainer {\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 100%;\r\n}\r\n\r\n.aliasAndType {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 1;\r\n}\r\n</style>\r\n"],"names":["_sfc_main","Calendar","Dropdown","InputSwitch","MultiSelect","Textarea","useValidate","_createElementBlock","_hoisted_1","_openBlock","_Fragment","_renderList","_hoisted_2","_createVNode","_normalizeClass","_createElementVNode","_createCommentVNode","_hoisted_4","_hoisted_6","_hoisted_8","_hoisted_10","_hoisted_12","Chips","_hoisted_15","_hoisted_16","_hoisted_3","_toDisplayString","_hoisted_5","_hoisted_7","_hoisted_9","_hoisted_11","_hoisted_13","_hoisted_14","_hoisted_17","_createBlock","_hoisted_18","Fieldset","_withCtx","Dialog","Message","_withDirectives","mainStore","Listbox","Badge","Column","DataTable","Divider","OverlayPanel","Sidebar","Menu","_createTextVNode","_withKeys","_vModelText"],"mappings":"w1WAsEA,KAAKA,IAAa,EAAa,CAC3B,KAAM,0BAEN,MAAO,CAAE,SAAU,QAAS,IAAK,OAAQ,QAAS,CAAE,KAAM,OAAoD,eAAgB,CAAA,CAA0D,EACxL,WAAY,CAAEC,SAAAA,EAAUC,SAAAA,EAAUC,YAAAA,GAAaC,YAAAA,GAAaC,SAAAA,CAAS,EACrE,MAAO,CAAC,uBAAuB,EAC/B,MAAO,CACH,MAAO,CAAE,WAAY,EAAwC,oBAAqB,CAAA,EAAiD,GAAIC,EAAA,EAAsB,MAAO,GAAO,UAAW,CAAE,CAC5L,EACA,aAAc,OACN,GAAA,SAAK,iBAAL,cAAqB,QAAS,SAAU,CACxC,KAAK,WAAW,EAEhB,GAAI,GAAc,KAAK,WAAW,KAAK,oBAAoB,MAAM,YAAc,KAAK,WAAW,KAAK,oBAAoB,MAAM,YAAc,GAC5I,MAAO,CAAE,oBAAqB,EAAkB,sBAAuB,CAAW,CAAE,CACxF,CACJ,EAEA,SAAU,CACN,KAAK,WAAW,CACpB,EACA,QAAS,CACL,wBAAwB,EAAgB,CACpC,AAAI,GACA,KAAK,uBAAuB,CAEpC,EAEA,wBAA+B,CAC3B,AAAI,KAAK,qBAEA,AADM,MAAK,oBAAoB,OAAS,SAAW,KAAK,WAAW,KAAK,oBAAoB,MAAM,WAAa,CAAA,GAC/G,QAAQ,AAAC,GAAS,SACf,GAAA,EAAK,MAAQ,WAAc,GAAK,OAAS,eAAiB,EAAK,OAAS,YAAa,CACjF,GAAA,GAA+B,KAAK,oBAAoB,WAAW,OAAO,AAAC,GAAM,EAAE,MAAQ,EAAK,IAAI,EACpG,GAAA,kBAA8B,QAAS,EAAG,CAC1C,GAAI,GAA0B,EAA6B,GAE3D,GAAI,KAAK,IAAK,CACN,GAAA,GAA0D,QAAK,UAAL,cAAc,OAAO,AAAC,GAAM,EAAE,QAAU,KAAK,KACvG,AAAA,GAAgB,EAAa,OAAS,GACtC,GAAa,GAAG,SAAW,GAC3B,EAAwB,MAAQ,EAAK,OAAS,cAAgB,EAAe,EAAa,GAAG,EAAK,aACtG,KAEA,QAAK,UAAL,QAAc,QAAQ,AAAC,GAAO,EAAE,SAAW,GAEnD,CACJ,CAAA,CACH,CAET,EACA,YAAa,OACT,GAAI,OAAO,KAAK,KAAK,mBAAmB,EAAE,QAAU,EAAG,CAC9C,KAAA,oBAAsB,KAAK,eAAiB,CAAE,GAAG,KAAK,gBAAoB,GAE3E,GAAA,GAAO,KAAK,gBAAkB,KAAK,eAAe,KAAO,KAAK,eAAe,KAAO,GACxF,GAAI,GAAQ,SAAK,iBAAL,cAAqB,QAAS,SAAU,CAC5C,GAAA,GAAO,KAAK,MAAM,KAAK,UAAU,KAAK,WAAW,GAAM,UAAU,CAAC,EACtE,GAAI,KAAK,SACL,OAAS,GAAI,EAAG,EAAI,EAAK,OAAQ,IAAK,CAC9B,GAAA,GAAU,EAAK,GAAG,KACtB,OAAS,GAAI,EAAG,EAAI,KAAK,oBAAoB,WAAW,OAAQ,IAC5D,AAAI,KAAK,oBAAoB,WAAW,GAAG,MAAW,GAAS,GAAK,GAAG,MAAW,KAAK,oBAAoB,WAAW,GAAG,MAEjI,CAEJ,KAAK,oBAAoB,WAAa,CAC1C,CAEA,KAAK,uBAAuB,CAChC,CACJ,EACA,UAAU,EAAU,CAChB,KAAM,GAAQ,EAAK,iBACb,SAAA,QAAQ,AAAC,GAAY,CACvB,EAAQ,MAAQ,KAAK,GAAG,EAAQ,KAAK,CAAA,CACxC,EAEM,CACX,CACJ,EAEA,MAAO,CACH,oBAAqB,CACjB,QAAQ,EAAU,CACd,KAAK,oBAAsB,EACtB,KAAA,MAAM,wBAAyB,CAAQ,CAChD,EACA,KAAM,EACV,CACJ,CACJ,CAAC,0BA9J+C,IAAK,EAAA,MAAA,gCAIN,IAAK,EAAA,MAAA,gCAKF,IAAK,EAAA,MAAA,gCAIJ,IAAK,EAAA,MAAA,gCAeH,IAAK,EAAA,MAAA,gCAiBR,IAAK,EAAA,MAAA,6KA9C/CC,EAkDO,MAAAC,GAAA,CAAAC,GAAA,EAAA,EAAAF,EAlDPG,EAkDO,KAAAC,EAAA,EAAA,oBAAA,WAAA,CAAA,EAAA,IAlDoEF,GAAK,EAAAF,EAAA,OAAA,CAAE,IAAK,EAAA,MAAA,wDACvE,EAAA,CAAA,EAAA,MAAA,SAAAE,GACkN,EAAAF,EAAA,OAAAK,GAAA,CAAAC,EAApM,EAAE,CAAE,GAAI,EAAC,GAAA,KAAA,0BAA8B,sBAAkB,AAAA,GAAA,EAAA,MAAA,EAAG,SAAK,EAAA,SAAA,MAAAC,EAAA,CAAA,oBAAA,EAAA,iBAAA,EAAA,gBAAA,SAAA,UAAA,GAAA,CAAA,EAAA,MAAA,YAAA,EAAA,CAAA,GAC4E,KAAA,EAAA,CAAA,KAAA,aAAA,sBAAA,WAAA,OAAA,CAAA,EAAAC,EAAxJ,QAAwB,CAAE,IAAK,eAAC,EAAA,MAAA,oHAEnCC,EAAU,GAAA,EAAA,EAAA,EAAA,OAAA,OAAAP,GAC4L,EAAAF,EAAA,OAAAU,GAAA,CAAAJ,EAAzL,EAAE,CAAA,GAAA,EAAA,sBAAyB,sBAAkB,AAAA,GAAA,EAAA,MAAA,EAAE,SAAK,EAAA,SAAA,MAAAC,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,iBAAA,EAAA,gBAAA,SAAA,UAAA,GAAA,CAAA,EAAA,KAAA,CAAA,CAAA,GACkG,KAAA,EAAA,CAAA,KAAA,aAAA,sBAAA,WAAA,OAAA,CAAA,EAApJC,EAAA,QAAA,CAAsB,IAAK,EAAC,KAAA,UAAA,EAAA,MAAA,oHAG3CC,EAAU,GAAA,EAAA,EAAA,EAAA,OAAA,UAAAP,GACuD,EAAAF,EAAA,OAAAW,GAAA,CAAAL,EAAjD,EAAE,CAAA,GAAA,EAAA,sBAAyB,sBAAkB,AAAA,GAAA,EAAA,MAAA,EAAA,SAAA,EAAA,UACoG,KAAA,EAAA,CAAA,KAAA,aAAA,sBAAA,UAAA,CAAA,EAA9JE,EAAA,QAAA,CAAgC,IAAK,qBAAC,EAAA,MAAA,oHAEzCC,EAAU,GAAA,EAAA,EAAA,EAAA,OAAA,WAAAP,GAWhB,EAAAF,EAAA,OAAAY,GAAA,CAAAN,EATa,EAAE,CAAA,GAAA,EAAA,sBAEZ,sBAAe,GAAmB,EAAU,MAAA,EAC5C,QAAS,EAAG,iBAAqB,EAAK,UAAM,CAAe,EAAA,EAAA,QAC3D,UAAW,CAAA,EAAO,iBAAoB,EAAC,iBAAW,CAAA,EAAA,gBAAA,SAAA,UAAA,EAClD,YAAa,EAAM,YAAc,EAAM,YAAW,QAClD,YAAW,EAAG,YAAc,EAAmB,YAAA,OAChD,SAAK,SAAC,OAAmB,WAAA,EAAA,SAAA,MAAAC,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,iBAAA,EAAA,gBAAA,SAAA,UAAA,GAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAGkJ,EAAA,KAAA,EAAA,CAAA,KAAA,aAAA,sBAAA,UAAA,YAAA,cAAA,cAAA,WAAA,OAAA,CAAA,EAApKC,EAAA,QAAA,CAAsC,IAAK,2BAA0B,EAAA,MAAA,oHAGxEC,EAAU,GAAA,EAAA,EAAA,EAAA,MAAA,cAAAP,GAchB,EAAAF,EAAA,OAAAa,GAAA,CAAAP,EAZa,EAAE,CAAA,GAAA,EAAA,sBAEZ,sBAAgB,AAAA,GAAA,EAAA,MAAA,EAChB,QAAa,EAAA,QACd,YAAQ,EAAM,YAAA,EAAA,YAAA,QACd,QAAA,OACC,eAAM,WACN,WAAa,IAAK,GAAA,GAAA,AAAA,GAAA,EAAA,wBAAA,CAAA,GAClB,cAAU,GACX,SAAK,EAAC,KAAA,EAAA,SACL,MAAMC,EAAM,CAAA,oBAAA,CAAA,YAAA,EAAA,iBAAA,EAAA,gBAAA,SAAA,UAAA,GAAA,CAAA,EAAA,KAAA,CAAA,CAAA,EAAA,OAAA,EAEsJ,EAAA,KAAA,EAAA,CAAA,KAAA,aAAA,sBAAA,UAAA,cAAA,WAAA,OAAA,CAAA,EAA1JC,EAAA,QAAA,CAAkC,IAAK,uBAAC,EAAA,MAAA,oHAG7CC,EAAU,GAAA,EAAA,EAAA,EAAA,MAAA,WAAAP,GACmO,EAAAF,EAAA,OAAAc,GAAA,CAAAR,EAAhO,EAAE,CAAA,GAAA,EAAA,sBAAyB,sBAAkB,AAAA,GAAA,EAAA,MAAA,EAAE,SAAQ,EAAA,SAAC,KAAK,IAAK,KAAK,KAAoI,MAAiBC,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,iBAAA,EAAA,gBAAA,SAAA,UAAA,GAAA,CAAA,EAAA,KAAA,CAAA,CAAA,EAAA,WAAA,IACtE,KAAA,EAAA,CAAA,KAAA,aAAA,sBAAA,WAAA,OAAA,CAAA,EAApJC,EAAA,QAAA,CAAsB,IAAK,EAAC,KAAA,UAAA,EAAA,MAAA,y+CCCnE,KAAKf,IAAa,EAAa,CAC3B,KAAM,yCAEN,MAAO,CAAE,QAAS,CAAE,KAAM,KAAoD,EAAA,IAAK,OAAQ,SAAU,QAAS,eAAgB,CAAA,CAAU,EAExI,WAAY,CAAEE,SAAAA,WAAUD,EAAA,MAAUqB,EAAM,EACxC,MAAO,CAAC,uBAAuB,EAC/B,MAAO,CACI,MAAA,CACH,oBAAqB,EAAgC,oBACrD,WAAY,EACZ,oBAAqB,CAAC,CAAA,CAAE,CAAA,CAEhC,EACA,SAAU,CAEN,GADK,KAAA,oBAAsB,CAAC,CAAA,CAAE,EAC1B,KAAK,gBAAkB,KAAK,eAAe,WAC3C,OAAS,GAAI,EAAG,EAAI,KAAK,eAAe,WAAW,OAAQ,IAAK,CAC5D,GAAI,GAAO,KAAK,eAAe,WAAW,GAAG,KACzC,EAAQ,KAAK,eAAe,WAAW,GAAG,MACtC,OAAA,OACC,YACI,KAAA,oBAAoB,GAAG,UAAY,EACxC,UACC,OACI,KAAA,oBAAoB,GAAG,KAAO,EACnC,UACC,YACI,KAAA,oBAAoB,GAAG,UAAY,EACxC,UACC,UACI,KAAA,oBAAoB,GAAG,QAAU,EACtC,UACC,SACI,KAAA,oBAAoB,GAAG,OAAS,EACrC,MAEZ,CAEA,AAAA,KAAK,KAAO,KAAK,SAAS,MAAK,oBAAoB,GAAG,OAAS,KAAK,QAAQ,OAAO,AAAC,GAAS,EAAK,SAAW,KAAK,GAAG,EAAE,GAC/H,EACA,QAAS,CACL,WAAY,CACR,GAAI,GAAS,CAAA,EACT,AAAA,KAAK,KAAO,KAAK,SACV,GAAA,OAAS,KAAK,QAAQ,OAAO,AAAC,GAAS,EAAK,SAAW,KAAK,GAAG,EAAE,IAEvE,KAAA,oBAAoB,KAAK,CAAM,CACxC,EACA,UAAU,EAAO,CACR,KAAA,oBAAoB,OAAO,EAAO,CAAC,CAC5C,EACA,uBAAuB,EAAO,CAUnB,MATQ,MAAK,oBAAoB,OAAO,AAAC,GAAS,CACrD,GAAI,GAAoB,EAAK,kBAAkB,MAAM,GAAG,EACpD,EAAO,KAAK,WAAW,KAAK,oBAAoB,GAAO,MAAM,EAC7D,MAAA,IAAkB,SAAS,CAAI,CAInC,CACH,CAEL,EACA,WAAW,EAAK,CACL,MAAA,MAAK,WAAW,SAAS,EAAI,KACxC,EACA,YAAY,EAAO,CACX,GAAA,GAAoB,CAAC,UAAW,QAAQ,EACrC,MAAA,MAAK,WAAW,EAAO,CAAiB,CACnD,EACA,WAAW,EAAO,EAAmB,CAC7B,GAAA,CAAC,KAAK,oBAAoB,GAAO,QAAU,CAAC,KAAK,oBAAoB,GAAO,UAAkB,MAAA,GAClG,GAAI,GAAU,KAAK,WAAW,KAAK,oBAAoB,GAAO,MAAM,EAC/D,MAAA,OAAW,QAAU,GAAW,cAAgB,EAAkB,SAAS,KAAK,oBAAoB,GAAO,SAAS,EAE7H,EACA,cAAc,EAAO,CACb,GAAA,GAAoB,CAAC,UAAW,OAAO,EACpC,MAAA,MAAK,WAAW,EAAO,CAAiB,CACnD,EACA,cAAc,EAAO,CACjB,GAAI,GAAqB,CAAC,SAAU,YAAa,KAAM,OAAO,EAC1D,MAAA,CAAC,KAAK,oBAAoB,GAAO,QAAU,CAAC,KAAK,oBAAoB,GAAO,UAAkB,GAE9F,AADU,KAAK,WAAW,KAAK,oBAAoB,GAAO,MAAM,GACrD,UAAY,CAAC,EAAmB,SAAS,KAAK,oBAAoB,GAAO,SAAS,CAErG,EACA,gBAAgB,EAAO,CACf,GAAA,GAAqB,CAAC,KAAM,OAAO,EACnC,MAAA,CAAC,KAAK,oBAAoB,GAAO,QAAU,CAAC,KAAK,oBAAoB,GAAO,UAAkB,GAE9F,AADU,KAAK,WAAW,KAAK,oBAAoB,GAAO,MAAM,GACrD,UAAY,CAAC,EAAmB,SAAS,KAAK,oBAAoB,GAAO,SAAS,CAErG,EACA,eAAe,EAAO,CACd,GAAA,GAAoB,CAAC,KAAM,OAAO,EAClC,MAAA,CAAC,KAAK,oBAAoB,GAAO,QAAU,CAAC,KAAK,oBAAoB,GAAO,UAAkB,GAC9F,IAAkB,SAAS,KAAK,oBAAoB,GAAO,SAAS,CAE5E,CACJ,EACA,MAAO,CACH,oBAAqB,CACjB,QAAQ,EAAU,CACT,KAAA,MAAM,wBAAyB,CAAQ,CAChD,EACA,KAAM,EACV,CACJ,CACJ,CAAC,EA9JiBd,GAAA,CAAA,MAAM,mCAEDI,GAAA,CAAA,MAAM,0EAEU,IAAK,EAAA,MAAA,yEAIE,IAAK,EAAA,MAAA,0EAIP,IAAK,EAAA,MAAA,0EAIH,IAAK,EAAA,MAAA,0EAIH,IAAK,EAAA,MAAA,0EAIN,IAAK,EAAA,MAAA,WAGzBW,GAAA,CAAA,MAAM,mCAEVC,GAAA,CAAA,MAAG,+BAIZ,GAAM,kLAlCZjB,EAiCM,MAAAC,GAAA,CAAAC,GAAA,EAAA,EAAAF,EAjCNG,EAiCM,KAAAC,EAAA,EAAA,oBAAA,CAAA,EAAA,IAjCIF,GAAW,EAAAF,EAAA,MAAA,CAAuD,MAAK,WAAA,IAAA,CAC7E,EAAA,CACyJQ,EAAA,OAAAH,GAAA,CAArHC,EAAA,EAAA,CAAA,WAAA,EAAA,OAAG,sBAAgB,AAAA,GAAA,EAAA,OAAA,EAAE,QAAM,EAAA,QAAoB,MAAA,oBAA0B,YAAY,aAAG,OAAQ,GAAA,SAAA,EAAA,KAAA,EAAA,QAChI,EAAA,KAAA,EAAA,CAAA,aAA8H,gCAApF,UAAE,CAAA,EAAAE,EAAA,QAAAU,GAAAC,EAAA,EAAA,GAAA,qEAAA,CAAA,EAAA,CAAA,CAEpC,CAAA,EAAA,EAAA,OAAAjB,GAAA,EAC8JF,EAAA,OAAAU,GAAA,CAAnIJ,EAAA,EAAA,CAAA,WAAA,EAAA,UAAG,sBAAkB,AAAA,GAAA,EAAA,UAAA,EAAG,SAAS,EAAA,SAA+B,UAAY,uBAAO,CAAA,EAAC,YAAY,QAAO,YAAM,OAAA,MAAA,mBAChJ,EAAA,KAAA,EAAA,CAAA,aAAkI,iCAAxF,SAAE,CAAA,EAAAE,EAAA,QAAAY,GAAAD,EAAA,EAAA,GAAA,yEAAA,CAAA,EAAA,CAAA,CAEpC,CAAA,GAAAV,EAAc,GAAK,EAAA,EAAA,EAAA,cAA/B,QAC0FT,EAAA,OAAAW,GAAA,CAAnDL,EAAA,EAAA,CAAA,WAAA,EAAA,UAAG,sBAAkB,AAAA,GAAA,EAAA,UAAA,EAAE,SAAM,EAAA,SAAA,MAAA,mBAChE,EAAA,KAAA,EAAA,CAAA,aAAiI,sBAAvF,UAAA,CAAA,EAAAE,EAAA,QAAAa,GAAAF,EAAA,EAAA,GAAA,wEAAA,CAAA,EAAA,CAAA,KAElCV,EAAiB,GAAA,EAAA,EAAA,EAAA,YAAA,CAA7B,OACwFT,EAAA,OAAAY,GAAA,CAAnDN,EAAA,EAAA,CAAA,WAAA,EAAA,QAAG,sBAAkB,AAAA,GAAA,EAAA,QAAA,EAAE,SAAM,EAAA,SAAA,MAAA,mBAC9D,EAAA,KAAA,EAAA,CAAA,aAA+H,sBAArF,UAAA,CAAA,EAAAE,EAAA,QAAAc,GAAAH,EAAA,EAAA,GAAA,sEAAA,CAAA,EAAA,CAAA,CAElC,CAAA,GAAAV,EAAc,GAAK,EAAA,EAAA,EAAA,cAA/B,QACkGT,EAAA,OAAAa,GAAA,CAAAP,EAA9E,EAAM,CAAA,KAAA,yBAAwB,sBAAkB,AAAA,GAAA,EAAA,KAAA,EAAE,SAAM,EAAA,SAAA,MAAA,mBACxE,EAAA,KAAA,EAAA,CAAA,aAA4H,sBAAlF,UAAA,CAAA,EAAAE,EAAA,QAAAe,GAAAJ,EAAA,EAAA,GAAA,mEAAA,CAAA,EAAA,CAAA,CAElC,CAAA,GAAAV,EAAgB,GAAK,EAAA,EAAA,EAAA,gBAAjC,QACsGT,EAAA,OAAAc,GAAA,CAAAR,EAAlF,EAAQ,CAAA,KAAA,6BAA0B,sBAAkB,AAAA,GAAA,EAAA,OAAA,EAAE,SAAM,EAAA,SAAA,MAAA,mBAC5E,EAAA,KAAA,EAAA,CAAA,aAA8H,sBAApF,UAAA,CAAA,EAAAE,EAAA,QAAAgB,GAAAL,EAAA,EAAA,GAAA,qEAAA,CAAA,EAAA,CAAA,CAElC,CAAA,GAAAV,EAAe,GAAK,EAAA,EAAA,EAAA,eAAhC,QAIWT,EAAA,OAAAyB,GAAA,CAFyEjB,EAAA,OAAAQ,GAAA,CAAAV,EAA/D,EAAe,CAAE,MAAA,gBAAA,SAAA,kEACgG,EAAA,KAAA,EAAA,CAAA,aAAA,qBAAA,CAAA,EAAAE,EAAA,QAAAS,GAAAE,EAAA,EAAA,GAAA,qEAAA,CAAA,EAAA,CAAA,CAElI,CAAA,EAAAX,EAAA,QAAAkB,GAAAP,EAAA,EAAA,GAAA,kBAAA,CAAA,EAAA,CAAA,KAEJV,EAAgL,GAAA,EAAA,EAAAD,EAA5C,OAAI,KAAA,CAAA,CAAA,EAAA,UAAjI,EAAkK,oBAAA,OAAA,EAAAN,GAAA,EAAAyB,EAAA,EAAA,CAA1J,IAAI,EAAgB,KAAK,cAAoD,MAAKpB,EAAE,+CAAe,EAAA,QAAA,AAAA,GAAA,EAAA,UAAA,CAAA,qCAEtH,EAAA,GAAA,GAC2BC,EAAA,OAAAoB,GAAA,CAAA,AAAA,EAAA,kBAAA1B,GAAA,EAAAyB,EAAA,EAAA,CAAE,IAAI,EAAc,KAAK,aAAkD,MAAK,gDAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,sqDCkBnH,KAAKlC,IAAa,EAAa,CAC3B,KAAM,wCAEN,MAAO,CAAE,QAAS,CAAE,KAAM,KAAoD,EAAA,IAAK,OAAQ,SAAU,QAAS,eAAgB,CAAA,CAAU,EAExI,WAAY,CAAA,SAAEE,EAAA,SAAUkC,EAAS,EACjC,MAAO,CAAC,uBAAuB,EAC/B,MAAO,CACI,MAAA,CACH,oBAAqB,EAA+B,UAAU,iBAC9D,qBAAsB,EAA+B,qBACrD,WAAY,EACZ,oBAAqB,CAAC,CAAA,CAE9B,EACA,SAAU,CAEN,GADA,KAAK,oBAAsB,GACvB,KAAK,UAAY,KAAK,gBAAkB,KAAK,eAAe,WAC5D,OAAS,GAAI,EAAG,EAAI,KAAK,eAAe,WAAW,OAAQ,IACvD,AAAI,KAAK,eAAe,WAAW,GAAG,MAAW,YAAa,KAAK,oBAAoB,UAAY,KAAK,eAAe,WAAW,GAAG,MAAA,AAC5H,KAAK,eAAe,WAAW,GAAG,MAAW,aAAc,KAAK,oBAAoB,WAAa,KAAK,eAAe,WAAW,GAAG,MAAA,AACnI,KAAK,eAAe,WAAW,GAAG,MAAW,YAAa,KAAK,oBAAoB,UAAY,KAAK,eAAe,WAAW,GAAG,MAAA,AACjI,KAAK,eAAe,WAAW,GAAG,MAAW,gBAAiB,KAAK,oBAAoB,cAAgB,KAAK,eAAe,WAAW,GAAG,MAAA,AACzI,KAAK,eAAe,WAAW,GAAG,MAAW,YAAa,KAAK,oBAAoB,UAAY,KAAK,eAAe,WAAW,GAAG,MAAA,AACjI,KAAK,eAAe,WAAW,GAAG,MAAW,gBAAiB,KAAK,oBAAoB,cAAgB,KAAK,eAAe,WAAW,GAAG,MAAA,AACzI,KAAK,eAAe,WAAW,GAAG,MAAW,gBAAiB,KAAK,oBAAoB,cAAgB,KAAK,eAAe,WAAW,GAAG,MAAA,AACzI,KAAK,eAAe,WAAW,GAAG,MAAW,cAAe,KAAK,oBAAoB,YAAc,KAAK,eAAe,WAAW,GAAG,MAAA,AACrI,KAAK,eAAe,WAAW,GAAG,MAAW,cAAe,KAAK,oBAAoB,YAAc,KAAK,eAAe,WAAW,GAAG,MACrI,KAAK,eAAe,WAAW,GAAG,MAAW,WAAW,MAAK,oBAAoB,OAAS,KAAK,eAAe,WAAW,GAAG,MAAS,GAG1J,EACA,QAAS,CACL,iBAAiB,EAAuE,CACpF,MAAO,GAAQ,OAAO,AAAC,GAAM,EAAE,MAAQ,kBAAkB,CAC7D,EACA,gBAAgB,EAAM,CACX,MAAA,MAAK,GAAG,EAAK,KAAK,CAC7B,CACJ,EACA,MAAO,CACH,oBAAqB,CACjB,QAAQ,EAAU,EAAU,CACxB,AAAI,IAAa,GACR,KAAA,MAAM,wBAAyB,CAAQ,CAEpD,EACA,KAAM,EACV,CACJ,CACJ,CAAC,EAvGY5B,GAAA,CAAA,MAAM,uCACD,MAAM,YAEDiB,GAAA,CAAA,MAAM,4CAEX,MAAM,2BAEDE,GAAA,CAAA,MAAM,iFAE8C,IAAK,EAAA,MAAA,iFAIT,IAAK,EAAA,MAAA,wCAM3DP,GAAA,CAAA,MAAM,+BACD,MAAM,YAEDC,GAAA,CAAA,MAAM,wCAShBU,GAAA,CAAA,MAAM,+BACD,MAAM,YAEDR,GAAA,CAAA,MAAM,mKAlCzBd,GAiBM,EAAAF,EAAA,MAAAC,GAAA,CAAAO,EAhBF,MAGOH,GAHP,CACwLG,EAAA,OAAAU,GAAA,CAAjKZ,EAAA,EAAA,CAAA,WAAA,EAAA,oBAAA,OAA6B,sBAAS,EAAgB,IAAQ,GAAA,GAAA,AAAA,GAAA,EAAA,oBAAA,OAAA,GAAG,QAAM,EAAmB,iBAAA,EAAA,OAAA,EAAC,MAAA,oBAA0B,YAAY,aAAG,OAAQ,GAAA,SAAA,EAAA,KAAA,EAAA,QAC/J,EAAA,KAAA,EAAA,CAAA,aAA8H,UAA9H,UAA8H,CAAA,EAAAE,EAAA,QAAAE,GAAAS,EAAA,EAAA,GAAA,qEAAA,CAAA,EAAA,CAAA,CAElI,CAAA,EACwLX,EAAA,OAAAY,GAAA,CAAjKd,EAAA,EAAA,CAAA,WAAA,EAAA,oBAAA,UAAgC,sBAAkB,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,oBAAA,UAAA,GAAG,SAAS,EAAA,SAAsB,QAAa,EAAA,oBAAiB,YAAY,EAAA,gBAAO,YAAM,OAAA,MAAA,mBAC9J,EAAA,KAAA,EAAA,CAAA,aAAkI,WAAxF,UAAA,aAAA,CAAA,EAAAE,EAAA,QAAAG,GAAAQ,EAAA,EAAA,GAAA,yEAAA,CAAA,EAAA,CAAA,CAElC,CAAA,EAAZ,EAAA,oBAAA,YAGO,qBAFgHnB,EAAA,OAAAqB,GAAA,CAAAf,EAAnG,EAAQ,CAAA,KAAA,qDAA2C,sBAAkB,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,oBAAA,WAAA,GAAE,SAAM,EAAA,SAAA,MAAA,mBAC7F,EAAA,KAAA,EAAA,CAAA,aAAkI,UAAlI,CAAA,EAAAE,EAAA,QAAAI,GAAAO,EAAA,EAAA,GAAA,yEAAA,CAAA,EAAA,CAAA,KAEQV,EAAoB,GAAA,EAAA,EAAhC,EAAA,oBAAA,YAGO,iBAF6GT,EAAA,OAAAsB,GAAA,CAAAhB,EAAhG,EAAM,CAAA,KAAA,kDAA0C,sBAAkB,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,oBAAA,UAAA,GAAE,SAAM,EAAA,SAAA,MAAA,mBAC1F,EAAA,KAAA,EAAA,CAAA,aAAiI,UAAjI,CAAA,EAAAE,EAAA,QAAAK,GAAAM,EAAA,EAAA,GAAA,wEAAA,CAAA,EAAA,CAAA,aAGR,CAAA,EAAAb,EAAmB,EAAE,CAAA,OAAA,EAAA,GAAA,iFAAA,EAAA,eACjBwB,EASM,IAAA,CAAAtB,EARF,MAGOe,GAHP,CACwHf,EAAA,OAAAM,GAAA,CAAAR,EAApG,EAAM,CAAA,KAAA,sDAA8C,sBAAkB,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,oBAAA,cAAA,GAAE,SAAM,EAAA,SAAA,MAAA,mBAC9F,EAAA,KAAA,EAAA,CAAA,aAAsE,UAAtE,CAAA,EAAAE,EAAA,QAAAgB,GAAAL,EAAA,EAAA,GAAA,aAAA,CAAA,EAAA,CAAA,aAmBD,EAAA,CAAA,QAAA,CAAA,EAAAb,EAXQ,EAAE,CAAA,OAAA,EAAA,GAAA,iFAAA,EAAA,eACjBwB,EASM,IAAA,CAAAtB,EARF,MAGOiB,GAHP,CACwHjB,EAAA,OAAAQ,GAAA,CAAAV,EAApG,EAAM,CAAA,KAAA,sDAA8C,sBAAkB,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,oBAAA,cAAA,GAAE,SAAM,EAAA,SAAA,MAAA,mBAC9F,EAAA,KAAA,EAAA,CAAA,aAAsE,UAAtE,CAAA,EAAAE,EAAA,QAAAS,GAAAE,EAAA,EAAA,GAAA,aAAA,CAAA,EAAA,CAAA,0DCDpB,KAAK1B,IAAa,EAAa,CAC3B,KAAM,iCACN,MAAO,CACH,eAAgB,CAAC,EACjB,QAAS,CAAE,KAAM,KAAiD,EAClE,IAAK,OACL,SAAU,OACd,EACA,WAAY,CAAE,yBAAuBsC,OAAAA,EAAQC,QAAAA,GAAS,yBAAuB,uBAAqB,EAClG,MAAO,CACI,MAAA,CAAE,UAAW,CAA6D,EAAA,GAAIjC,IAAsB,qBAAsB,EAAqC,iBAAkB,EAC5L,EACA,aAAc,CACH,MAAA,CACH,gBAAiB,EAAkB,YAAa,KAAK,qBAAqB,YAAY,aAAa,CAAA,CAE3G,EACA,MAAO,CAAC,wBAAyB,aAAc,kBAAmB,qBAAqB,EAEvF,SAAU,CACD,KAAA,iBAAmB,CAAE,GAAG,EACjC,EAEA,QAAS,CACL,WAAkB,SACd,QAAK,YAAL,QAAgB,WAAW,KAAK,QAAK,YAAL,cAAgB,WAAW,GAC/D,EACA,uBAAwB,OACpB,GAAI,GAAI,KAAK,UACT,EAAiB,CAAE,WAAY,CAAA,EAAkB,KAAM,iBAAG,MAE9D,GAAI,kBAAG,QAAS,SAAiB,MAAA,MAAK,4BAA4B,EAAG,CAAc,EACnF,GAAI,kBAAG,QAAS,QAAgB,MAAA,MAAK,2BAA2B,EAAG,CAAc,EAEjF,GAAI,GAAM,CAAE,QAAS,CAAA,GAClB,0BAAA,aAAA,QAAY,QAAQ,AAAC,GAAM,CAC1B,OAAO,KAAK,CAAC,EAAE,QAAQ,AAAC,GAAQ,CAC5B,AAAI,EAAE,OAAS,CAAC,KAAK,cAAc,CAAG,GAC9B,CAAA,GAAO,QAAU,EAAE,IAAQ,UAAe,EAAA,QAAU,KAAK,WAAW,CAAC,EAChE,EAAA,EAAE,IAAQ,EAAE,MACzB,CACH,CAAA,GAEU,EAAA,WAAW,KAAK,CAAG,EAE3B,CACX,EAEA,2BAA2B,EAAG,EAAgB,CAC1C,GAAI,GAAI,iBAAG,WACN,YAAA,4BAA4B,EAAG,CAAc,EAC3C,CACX,EAEA,4BAA4B,EAAG,EAAgB,CAC3C,GAAI,GAAM,CAAE,QAAS,CAAA,GACrB,OAAO,KAAK,CAAC,EAAE,QAAQ,AAAC,GAAQ,CAC5B,AAAI,IAAQ,SAAU,EAAI,QAAQ,KAAK,EAAE,GAAK,MAAM,EAC/C,EAAI,GAAO,EAAE,EAAA,CACrB,EACc,EAAA,WAAW,KAAK,CAAG,CACtC,EAEA,4BAA4B,EAAG,EAAgB,OACxC,0BAAA,aAAA,QAAY,QAAQ,AAAC,GAAM,CACrB,KAAA,4BAA4B,EAAG,CAAc,CAAA,GAE/C,CACX,EAEA,cAAc,EAAsB,CACzB,MAAA,KAAQ,SAAW,IAAQ,QAAU,EAAI,SAAS,QAAQ,GAAK,EAAI,SAAS,WAAW,GAAK,EAAI,SAAS,SAAS,GAAK,EAAI,SAAS,YAAY,GAAK,EAAI,SAAS,aAAa,CAC1L,EAEA,aAAoB,CACX,KAAA,MAAM,kBAAmB,EAAK,EAC9B,KAAA,MAAM,aAAc,EAAK,EACzB,KAAA,MAAM,wBAAyB,EAAK,CAC7C,EAEA,UAAU,EAAa,SACnB,AAAI,KAAK,WACD,SAAK,UAAU,aAAf,cAA2B,QAAS,GAAG,SAAK,YAAL,QAAgB,WAAW,OAAO,EAAO,GAE5F,EAEA,WAAW,EAAuB,CAC9B,GAAI,GAAW,CAAA,EACf,MAAI,OAAM,QAAQ,EAAU,KAAK,EACnB,EAAA,MAAM,QAAQ,AAAC,GAAM,CAClB,EAAA,KAAK,EAAE,MAAM,CAAA,CACzB,EAEQ,EAAA,KAAK,EAAU,KAAK,EAE1B,CACX,EAEA,sBAA6B,CACrB,GAAA,GAA0B,KAAK,wBAC9B,KAAA,MAAM,sBAAuB,CAAuB,EACzD,KAAK,YAAY,CACrB,EAEA,eAAsB,CAClB,KAAK,YAAY,CACrB,EAEA,gBAAgB,EAAS,SACrB,AAAI,SAAK,YAAL,cAAgB,QAAS,UAAY,SAAK,YAAL,cAAgB,QAAS,QAAS,KAAK,UAAU,WAAa,EAClG,KAAK,UAAY,CAC1B,CACJ,EACA,MAAO,CACH,eAAgB,CACZ,QAAQ,EAAU,CACV,KAAK,UAAY,KAAK,MAAM,KAAK,UAAU,CAAQ,CAAC,CAC5D,EACA,KAAM,EACV,CACJ,CACJ,CAAC,iLA1JYG,GAAC,EAAAyB,EAAA,EAAA,CACC,MAAO,oDACb,QAAS,EAAa,gBAAA,EAAA,eAAiB,MAAE,kBACzC,UAAU,WAAK,EAAA,UAAA,KAAA,EAAA,GAAA,gEAAA,EAAA,UAAA,KAAA,QAAA,EAAA,MAAA,IAAA,EAAA,GAAA,sEAAA,EAChB,SAAK,GACJ,MAAA,GAAA,YAAA,CAAA,QAAA,OAAA,QAAA,OAAA,CAQU,EAAA,CAAA,OACPG,EAA0G,IAAA,CAA5FxB,EAAA,EAAA,CAAuC,MAAO,sCAAsB,MAAK,EAAE,GAAa,eAAA,EAAA,QAAA,EAAA,eACvF,KAAQ,EAAA,CAAA,QAAA,SAAA,CAAA,EAAA,AAAA,EAAA,kBAAA2B,EAAA/B,GAAA,EAAAyB,EAAA,EAAA,CAAE,IAAK,EAAsD,MAAK,+BAAA,QAAA,EAAA,oBAAtB,EAAA,KAAA,EAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,EAAA,cAAA,MARtB,QAAAG,EAAS,IAAI,CAAA,EAAA,WAA9D,EAA8H,UAAA,YAAA5B,GAAA,EAAAyB,EAAA,EAAA,CAArH,IAAA,EAAiB,SAAU,OAAA,SAAA,mEAEPlB,EAAc,GAAA,EAAA,EAA3C,EAAA,UAAA,OAAA,SAAAP,GAAA,EAAAyB,EAAA,EAAA,CAA2D,IAAA,EAA4B,eAAA,EAAA,UAAyC,0BAAgB,EAAA,gBAAG,QAAK,EAAG,QAAG,IAAU,EAAA,IAAA,SAAA,EAAA,2FAC3IlB,EAAc,GAAA,EAAA,EAA3C,EAAA,UAAA,OAAA,SAAAP,GAAA,EAAAyB,EAAA,EAAA,CAA2D,IAAA,EAA4B,eAAA,EAAA,UAAyC,0BAAgB,EAAA,gBAAG,QAAK,EAAG,QAAG,IAAU,EAAA,IAAA,SAAA,EAAA,2FAC5IlB,EAAc,GAAA,EAAA,EAA1C,EAAA,UAAA,OAAA,QAAAP,GAAA,EAAAyB,EAAA,EAAA,CAAyD,IAAA,EAA4B,eAAA,EAAA,UAAyC,0BAAgB,EAAA,gBAAG,QAAK,EAAG,QAAG,IAAU,EAAA,IAAA,SAAA,EAAA,gKC8E9K,KAAKlC,IAAa,EAAa,CAC3B,KAAM,sCACN,MAAO,CACH,gBAAiB,CAAC,EAClB,OAAQ,CAAC,EACT,QAAS,CAAC,EACV,WAAY,CAAC,EACb,UAAW,CAAC,EACZ,eAAgB,CAAC,EACjB,WAAY,OAChB,EACA,WAAY,CAAA,OAAEsC,EAAQ,eAAa,wBAAsBjC,SAAAA,CAAS,EAClE,MAAO,CACI,MAAA,CACH,WAAY,EACZ,gBAAiB,CAAC,EAClB,GAAIC,EAAY,EAChB,qBAAsB,EACtB,oBAAqB,GACrB,sBAAuB,GACvB,YAAa,GACb,QAAS,GACT,mBAAoB,GACpB,oBAAqB,GACrB,mBAAoB,EAAA,CAE5B,EACA,OAAQ,CAEJ,MAAO,CAAA,MADOmC,GACC,CACnB,EACA,SAAU,CACF,AAAA,KAAK,WAAa,KAAK,WAAa,IAAI,MAAK,YAAc,GACnE,EACA,MAAO,CAAC,oBAAqB,oBAAqB,kBAAkB,EAEpE,aAAc,CACH,MAAA,CACH,gBAAiB,EAAkB,kBAAmB,KAAK,qBAAqB,YAAY,aAAa,CAAA,CAEjH,EACA,SAAU,CACN,oBAA0B,CACtB,MAAO,MAAK,GAAG,UAAY,CAAC,KAAK,gBAAgB,IACrD,CACJ,EACA,QAAS,CACL,qBAA4B,CACpB,GAAA,GAAoB,KAAK,0BAC7B,KAAK,oBAAoB,CAAiB,EAAE,KACxC,AAAC,GAAiC,CAC1B,GAAA,GAAY,EAAS,KAAK,GACzB,KAAA,MAAM,mBAAoB,CAAS,EACpC,GAAA,GAAoB,KAAK,0BAC7B,KAAK,qBAAqB,EAAW,CAAiB,EAAE,KACpD,AAAC,GAAiC,CAC9B,KAAK,MAAM,oBAAqB,EAAS,KAAK,EAAE,EAChD,KAAK,MAAM,QAAQ,CAAE,MAAO,oBAAsB,CAAA,CAAA,EAEtD,IAAM,CACF,KAAK,MAAM,SAAS,CAAE,MAAO,aAAc,IAAK,8BAA+B,CAAA,CAEvF,CAAA,EAEJ,IAAM,CACF,KAAK,MAAM,SAAS,CAAE,MAAO,aAAc,IAAK,wBAAyB,CAAA,CAEjF,EACA,KAAK,cAAc,CACvB,EACA,oBAAoB,EAAmB,CAC/B,MAAA,MAAK,WAAa,KAAK,WAAa,GAAW,KAAK,MAAM,IAAI,6CAA4D,KAAK,YAAa,CAAiB,EACrJ,KAAK,MAAM,KAAK,4CAA4D,CAAiB,CAC7G,EACA,qBAAqB,EAAW,EAAmB,CAC3C,MAAA,MAAK,YAAc,KAAK,YAAc,GAAW,KAAK,MAAM,KAAK,8CAA6D,KAAK,aAAc,CAAiB,EAC1J,KAAK,MAAM,KAAK,6CAA8D,EAAY,YAAa,CAAiB,CACxI,EACA,yBAA0B,CACtB,GAAI,GAAW,CAAA,EACf,EAAS,OAAY,GACZ,EAAA,OAAU,OAAY,KAAK,mBAEhC,KAAK,qBACI,GAAA,OAAU,KAAU,KAAK,sBACzB,EAAA,OAAU,KAAU,KAAK,oBAG7B,EAAA,aAAkB,KAAK,gBAAgB,MACvC,EAAA,UAAe,KAAK,gBAAgB,GACzC,GAAA,GAAI,GAAI,MACR,MAAA,MAAK,gBAAgB,MACZ,EAAA,wBAA6B,KAAK,gBAAgB,MAE3D,EAAS,wBAA6B,OAAU,EAAE,QAAY,EAAA,IAEzD,EAAA,uBAA4B,KAAK,gBAAgB,KACjD,EAAA,8BAAmC,KAAK,gBAAgB,YACxD,EAAA,KAAU,KAAK,qBAAqB,EACpC,EAAA,KAAU,KAAK,gBAAgB,GACjC,CACX,EACA,sBAAuB,OACnB,GAAI,GAAO,CAAA,EACN,cAAA,UAAA,QAAS,QAAQ,AAAC,GAAQ,CAC3B,GAAI,GAAO,CAAA,EACX,EAAK,cAAmB,EAAI,WAC5B,EAAK,KAAU,EAAI,OACnB,EAAK,UAAe,EAAI,UACxB,EAAK,KAAU,EAAI,KACnB,EAAK,KAAK,CAAI,CAAA,GAEX,CACX,EACA,yBAA0B,CACtB,GAAI,GAAW,CAAA,EACX,MAAA,MAAK,QAAU,KAAK,OAAO,iBAA0B,GAAA,WAAgB,KAAK,OAAO,iBAC9E,CACX,EACA,QAAS,CACL,AAAI,KAAK,QACL,KAAK,SAAS,QAAQ,CAClB,QAAS,KAAK,GAAG,mCAAmC,EACpD,OAAQ,KAAK,GAAG,oCAAoC,EACpD,KAAM,6BACN,OAAQ,IAAM,KAAK,cAAc,CAAA,CACpC,EAED,KAAK,cAAc,CAE3B,EACA,eAAsB,aACb,KAAA,mBAAqB,QAAK,eAAe,SAApB,cAA4B,KACjD,KAAA,sBAAwB,QAAK,eAAe,SAApB,QAA4B,KAAO,KAAK,eAAe,OAAO,KAAO,GAElG,KAAK,mBAAqB,SAAK,eAAe,SAApB,cAA4B,qBAAsB,GAE5E,KAAK,oBAAsB,WAAK,eAAe,SAApB,QAA4B,MACvD,KAAK,YAAY,CACrB,EACA,aAAoB,CACX,KAAA,MAAM,oBAAqB,EAAK,CACzC,EACA,kBAAyB,CACrB,KAAK,WAAW,gBAAgB,YAAY,QAAQ,QAAQ,AAAC,GAAY,CACrE,EAAQ,KAAO,KAAK,GAAG,EAAQ,IAAI,CAAA,CACtC,CACL,EAEA,yBAAyB,EAAuB,CAC5C,KAAK,mBAAqB,CAC9B,EACA,0BAA0B,EAAwB,CAC9C,KAAK,oBAAsB,CAC/B,EACA,4BAA4B,EAAmB,CAC3C,KAAK,sBAAwB,CACjC,EACA,yBAAyB,EAAuB,CAC5C,KAAK,mBAAqB,CAC9B,CACJ,EAEA,MAAO,CACH,eAAgB,CACZ,SAAU,aACN,AAAI,OAAO,KAAK,KAAK,cAAc,EAAE,OAAS,GAC1C,MAAK,gBAAkB,KAAK,eACvB,KAAA,mBAAqB,QAAK,eAAe,SAApB,cAA4B,KACjD,KAAA,sBAAwB,QAAK,eAAe,SAApB,QAA4B,KAAO,KAAK,eAAe,OAAO,KAAO,GAElG,KAAK,mBAAqB,SAAK,eAAe,SAApB,cAA4B,qBAAsB,GAE5E,KAAK,oBAAsB,WAAK,eAAe,SAApB,QAA4B,MAE/D,EACA,KAAM,EACV,CACJ,EAEA,SAAU,CACN,KAAK,iBAAiB,CAC1B,CACJ,CAAC,EA/QgBjC,GAAA,CAAA,MAAM,gBACFI,GAAA,CAAA,MAAM,gBACD,MAAM,sDAYDe,GAAM,CAA0B,MAAI,0BAAA,IAAA,oCAuBxCC,GAAM,CAA0B,MAAI,0BAAA,IAAA,mMAvC9CnB,GAAC,EAAAyB,EAAA,EAAA,CAAuE,MAAO,gEAAc,QAAO,EAAA,WAAU,OAAQ,SAAyE,OAAQ,EAAE,GAAK,kEAAA,EAAE,SAAK,GAAA,MAAA,EAiEnN,EAAA,CAAA,OACPG,EAAoF,IAAA,CAAAxB,EAAtE,EAAsB,CAAE,MAAO,uBAAsB,MAAK,EAAE,GAAM,eAAA,EAAA,QAAA,EAAA,wBAEhF,SAAuH,CAAA,EAAA2B,EAAzG3B,EAAoB,EAAA,CAAsB,MAAA,qBAA+B,SAAK,EAAA,mBAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,sBAApD,EAAA,KAAA,EAAA,CAAA,UAAA,CAAA,EAAA,CAAA,CAAA,EAAA,aAAA,cAnE5CwB,EA+DM,IAAA,CAAAtB,EA9DF,MA6CMP,GAAA,CAAAO,EA5CF,MAqBMH,GAAA,CAAAG,EApBF,MAmBOU,GAnBP,CAWMV,EAAA,OAAAE,GAAA,CAAAJ,EATO,EAAC,CAIqD,MAAAC,EAAA,CAAA,oBAAA,CAAA,YAAA,EAAA,GAAA,gBAAA,KAAA,QAHhD,CAAA,CAAA,EACV,KAAA,OACa,SAAA,CAAA,EAAA,YAAA,WAAA,EAAA,GAAA,gBAAA,KAAA,6BAAd,EAA6C,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,gBAAA,KAAA,OAAA,GAI7C,eAAe,CAAA,KAAA,EAAA,EACd,UAAM,MAAA,SAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,KAEqH,KAAA,EAAA,CAAA,WAAA,aAAA,OAAA,CAAA,EAChIC,EAKwB,QAAAY,GAAAD,EAAA,EAAA,GAAA,2DAAA,CAAA,EAAA,CAAA,EAAAb,EAJZ,EAAuB,CAC9B,MAAyB,EAAA,GAAA,gBAAA,KAAgD,0BAAA,CAAA,UAAA,EAAA,GAAA,+CAAA,mDAOtF,CAAA,EAYME,EAAA,OAAAG,GAAA,CAAAL,EAVO,EAAC,CAIiE,MAAAC,EAAA,CAAA,2BAAA,CAAA,YAAA,EAAA,GAAA,gBAAA,YAAA,SAH5D,CAAA,EACV,KAAA,OACa,SAAA,CAAA,EAAA,YAAA,WAAA,EAAA,GAAA,gBAAA,YAAA,6BAAd,EAAoD,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,GAAA,gBAAA,YAAA,OAAA,GAIpD,eAAQ,CAAA,KAAA,EAAA,EACR,KAAA,IACC,UAAI,QAAA,OAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,KAE8H,KAAA,EAAA,CAAA,WAAA,aAAA,OAAA,CAAA,EACvIC,EAKwB,QAAAa,GAAAF,EAAA,EAAA,GAAA,kEAAA,CAAA,EAAA,CAAA,EAAAb,EAJZ,EAA8B,CACrC,MAAyB,EAAA,GAAA,gBAAA,YAA4C,0BAAA,CAAA,UAAA,EAAA,GAAA,sDAAA,mDAMlF,CAAA,EAcME,EAAA,MAAAI,GAAA,CAAAN,EAZQ,EAAO,CACZ,MAAA,QACA,eAAoB,EAAA,sBACpB,mBAAY,EAAA,mBACZ,WAAO,EAAA,oBACP,UAAW,EAAO,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,QAAA,IAClB,YAAA,GACA,oBAAoB,EAAA,oBACpB,mBAAA,EAAA,mBACA,8BAA0B,EAAE,yBAC5B,+BAA4B,EAAE,0BAC9B,iCAA2B,EAAA,4BAAA,8BAAA,EAAA,sqZCsHhD,KAAK,IAAa,EAAa,CAC3B,KAAM,0BACN,MAAO,CACH,GAAI,OACJ,gBAAiB,MACjB,kBAAmB,OACnB,mBAAoB,OACpB,gBAAiB,MACrB,EACA,WAAY,CAAA,QAAE6B,GAAS,qBAAA,MAAmBC,GAAO,OAAAC,GAAQ,yBAAuB,6BAA2BC,UAAAA,GAAWC,QAAAA,GAAS5C,SAAAA,EAAU6C,aAAAA,GAAcC,QAAAA,GAASC,KAAAA,EAAK,EAErK,MAAO,CACI,MAAA,CACH,WAAY,EACZ,QAAS,EACT,YAAa,MAAW,EACxB,6BAA8B,GAC9B,gBAAiB,KACjB,aAAc,GACd,WAAY,GACZ,uBAAwB,KACxB,eAAgB,GAChB,aAAc,GACd,QAAS,CAAC,EACV,IAAK,KACL,0BAA2B,MAAW,EACtC,QAAS,CAAC,EACV,iBAAkB,EAClB,gBAAiB,EACjB,OAAQ,CAAC,EACT,aAAc,GACd,WAAY,GACZ,UAAW,GACX,SAAU,GACV,eAAgB,CAAC,EACjB,aAAc,gBACd,OAAQ,EAAA,CAEhB,EACA,OAAQ,CAEJ,MAAO,CAAA,MADOR,GACC,CACnB,EACA,KAAM,UAAU,CAOZ,GANK,KAAA,UACL,KAAK,0BAA4B,OAAO,OAAO,CAAI,EAAA,KAAK,WAAW,eAAe,EAElF,KAAM,MAAK,MAAM,IAAI,qDAA0E,KAAK,EAAE,EAAE,KAAK,AAAC,GAAiC,CACtI,KAAA,QAAU,EAAS,KAAK,EAAA,CAChC,EACG,KAAK,QAAS,CACd,KAAM,MAAK,iBACX,KAAK,oBAAoB,EAEzB,GAAI,GAAM,GAAI,KAAI,OAAO,SAAS,MAAM,EACxC,EAAI,SAAW,EAAI,SAAS,QAAQ,OAAQ,IAAI,EAC5C,GAAA,GAAM,EAAM,kDAAkF,aAAa,QAAQ,OAAO,EACzH,KAAA,OAAS,GAAI,IAAO,CACrB,UAAW,EACX,eAAgB,CAAC,EACjB,kBAAmB,IACnB,kBAAmB,GAAA,CACtB,EAEI,KAAA,OAAO,UAAY,IAAM,CAC1B,KAAK,OAAO,UACR,sBACA,AAAC,GAAY,CAET,AAAI,EAAQ,KACH,KAAA,YAAY,EAAQ,IAAI,EAE7B,QAAQ,IAAI,mBAAmB,EAE9B,KAAA,SAAA,EAET,CACI,KAAM,KAAK,QAAQ,EAAA,CAE3B,EAEA,KAAK,OAAO,UAAU,oBAAqB,AAAC,GAAU,OAElD,GAAI,EAAM,KAAM,CACZ,GAAI,GAAU,KAAK,MAAM,EAAM,IAAI,EAC9B,KAAA,MAAM,SAAS,CAAE,MAAO,QAAS,IAAK,EAAQ,QAAS,CAAA,KAE5D,MAAK,MAAM,SAAS,CAAE,MAAO,OAAS,CAAA,EAE1C,AAAI,KAAK,QAAQ,QAAU,SAAK,QAAQ,OAAO,kBAApB,cAAqC,QAAS,GAAG,KAAK,QAAQ,OAAO,gBAAgB,OAAO,EAAE,EACpH,KAAA,SAAA,CACR,EAED,KAAK,OAAO,UACR,sBACA,AAAC,GAAY,CAET,GAAI,EAAQ,KAAM,CACd,GAAI,GAAkB,KAAK,MAAM,EAAQ,IAAI,EAC7C,AAAI,EAAgB,SAAU,KAAK,MAAM,QAAQ,CAAE,MAAO,+BAAiC,CAAA,EACjF,KAAA,MAAM,SAAS,CAAE,MAAO,yBAA0B,IAAK,EAAgB,aAAc,CAAA,KAG/F,MAAK,MAAM,SAAS,CAAE,MAAO,kBAAmB,IAAK,oBAAqB,CAC9E,EAEJ,CACI,KAAM,KAAK,QAAQ,EAAA,CAE3B,EAEI,KAAK,iBACA,KAAA,OAAO,QAAQ,CAAE,YAAa,eAAgB,QAAS,CAAE,KAAM,KAAK,QAAQ,IAAM,KAAM,KAAK,UAAU,KAAK,QAAQ,OAAO,eAAe,EAAG,CACtJ,EAGJ,KAAK,OAAO,UAChB,CACJ,EAEA,QAAS,CACL,iBAAiB,EAAW,EAAa,CAC9B,MAAA,IAAqB,EAAM,EAAQ,EAAI,CAClD,EACA,kBAAmB,CACf,GAAI,KAAK,QAAQ,QAAU,KAAK,QAAQ,OAAO,iBAAmB,KAAK,QAAQ,OAAO,gBAAgB,QAAU,KAAK,QAAQ,OAAO,gBAAgB,OAAS,EAAG,CAC5J,KAAK,aAAe,GACpB,GAAI,GAAM,KAAK,QAAQ,OAAO,gBAAgB,OAEtC,MAAA,KAAa,GAAA,KAAK,SAAY,CAC1C,CAEA,YAAK,aAAe,gBAEb,CACX,EACA,wBAAyB,CACrB,MAAI,MAAK,QAAQ,QAAU,KAAK,QAAQ,OAAO,gBAEpC,AADe,CAAC,GAAG,KAAK,QAAQ,OAAO,eAAe,EACtC,UAGpB,EACX,EACA,gBAAuB,CACnB,KAAK,uBAAyB,KAC9B,KAAK,aAAe,GACpB,KAAK,OAAS,EAClB,EACA,aAAa,EAAS,CACd,GAAA,GAA0B,KAAK,wBAAwB,CAAC,EAC5D,KAAK,qBAAqB,CAAuB,EACjD,KAAK,aAAe,EACxB,EACA,wBAAwB,EAAG,CACvB,GAAI,GAAiB,CAAE,WAAY,CAAC,EAAiB,KAAM,iBAAkB,EACzE,EAAM,CAAE,QAAS,CAAA,GACrB,cAAO,KAAK,CAAC,EAAE,QAAQ,AAAC,GAAQ,CAC5B,AAAI,IAAQ,SAAU,EAAI,QAAQ,KAAK,EAAE,GAAK,MAAM,EAC/C,EAAI,GAAO,EAAE,EAAA,CACrB,EACG,KAAK,aAAa,gBAClB,GAAI,KAAU,KAAK,QAER,EAAA,WAAW,KAAK,CAAG,EAC3B,CACX,EACA,0BAA0B,EAAe,CACrC,GAAI,KAAK,QAAU,EAAU,MAAA,GAC7B,GAAI,GAAW,GACX,MAAA,GAAK,OAAS,kBACV,CAAC,KAAK,QAAQ,OACF,EAAA,KAAK,QAAQ,OAAO,gBAAgB,OAAO,AAAC,GAAM,EAAE,OAAS,QAAQ,EAAE,OAAS,EAD3D,EAAA,IAGlC,CACX,EACA,YAAY,EAAW,CACnB,AAAI,EAAI,QAAS,MAAO,GAAI,QACvB,EAAI,QAAU,EACvB,EACA,eAAsB,CACb,KAAA,QAAQ,GAAG,EAAE,CACtB,EACA,wBAA+B,CAEtB,KAAA,MACA,KACG,0DAA6E,KAAK,QAAQ,KAC1F,GACA,CACI,QAAS,CACL,OAAQ,oCACR,eAAgB,gCACpB,CAAA,CAER,EACC,KAAK,IAAM,CACR,KAAK,MAAM,QAAQ,CACf,MAAO,KAAK,GAAG,8BAA8B,CAAA,CAChD,CAAA,CACJ,EACA,MAAM,IAAM,CAAA,CAAE,EAGd,KAAA,OAAO,QAAQ,CAAE,YAAa,eAAgB,KAAM,KAAK,QAAQ,EAAA,CAAI,CAC9E,EACA,yBAAyB,EAAG,CACxB,KAAK,SAAW,GACZ,GAAA,GAAyB,KAAK,0BAA0B,OAAO,AAAC,GAAM,EAAE,MAAQ,EAAE,IAAI,EAAE,GAC5F,EAAuB,WAAgB,GACnC,GAAA,GAAQ,EAAE,WAAW,GAsBzB,GArBA,OAAO,KAAK,CAAK,EAAE,QAAQ,AAAC,GAAQ,CAChC,GAAI,GAAM,CAAA,EAEV,GADA,EAAI,KAAU,EACV,GAAO,UAAW,CAClB,GAAI,GAAQ,CAAA,EACZ,OAAS,GAAI,EAAG,EAAI,EAAM,GAAK,OAAQ,IAAK,CACxC,GAAI,GAAM,KAAK,QAAQ,OAAO,AAAC,GAAM,EAAE,WAAW,YAAA,IAAkB,EAAM,GAAK,GAAG,YAAa,CAAA,EAAE,GACjG,EAAM,KAAK,CAAG,CAClB,CACA,EAAI,MAAW,CAAA,KAEf,GAAI,MAAW,EAAM,GAGzB,AAAI,EAAE,OAAS,mBAAqB,KAAK,aAAa,gBAC7C,MAAA,OAAS,EAAE,WAAW,GAAG,MAGX,EAAA,WAAc,KAAK,CAAG,CAAA,CAChD,EAEG,EAAE,MAAQ,UAAY,EAAE,MAAQ,QAAS,CACzC,GAAI,GAAM,KAAK,QAAQ,OAAO,AAAC,GAAM,EAAE,WAAW,YAAY,IAAM,EAAE,WAAW,GAAG,QAAQ,GAAG,YAAA,CAAa,EAAE,GACzG,KAAA,aAAa,EAAwB,CAAG,CACjD,KAAY,MAAA,aAAa,EAAwB,MAAS,CAC9D,EACA,uBAAuB,EAAyC,CAC5D,MAAO,MAAK,0BACP,OAAO,AAAC,GAAM,EAAE,YAAc,CAAC,EAAE,MAAM,EACvC,OAAO,AAAC,GAAM,OACX,MAAI,GAAE,sBAA8B,CAAC,MAAE,wBAAF,QAAyB,SAAS,EAAI,OACpE,EAAA,CACV,CACT,EACA,qBAA4B,CACxB,AAAI,KAAK,iBACA,MAAK,QAAQ,QAAa,MAAA,QAAQ,OAAS,IAC3C,KAAA,QAAQ,OAAO,gBAAkB,KAAK,gBACtC,KAAA,UAEb,EACA,KAAM,iBAAiB,CAGnB,GAFI,KAAK,mBAAmB,MAAK,UAAY,KAAK,mBAC9C,KAAK,oBAAoB,MAAK,WAAa,KAAK,oBAChD,KAAK,gBAAiB,CACtB,GAAI,GAAS,KAAK,MAAM,KAAK,eAAe,EACxC,EAAM,CAAA,EACV,EAAI,MAAW,EAAO,MACtB,EAAI,KAAU,EAAO,KACrB,EAAI,YAAiB,EAAO,YAC5B,EAAI,GAAQ,EAAO,GACnB,KAAM,MAAK,MAAM,IAAI,qEAAsF,EAAO,EAAE,EAAE,KAAK,AAAC,GAAiC,CACrJ,GAAA,GAAW,EAAS,KAAK,SAC7B,AAAI,EAAS,QACT,GAAI,OAAY,EAAS,OAC7B,CACH,EAED,KAAK,eAAiB,CAC1B,CACJ,EACA,aAAa,EAAsB,EAAqB,CACpD,GAAI,GAAgB,UAAY,EAEzB,MADQ,GAAS,OAAO,AAAC,GAAM,EAAE,UAAY,CAAa,EAAE,GAAG,KAE1E,EACA,aAAa,EAAqB,EAAW,CACzC,GAAI,EAAe,OAAS,cAAgB,EAAe,OAAS,QAAS,CACrE,GAAA,GAAY,EAAe,OAAS,aAAe,KAAK,iBAAiB,EAAe,MAAM,WAAa,KAAK,gBAAgB,WACpI,OAAS,GAAI,EAAG,EAAI,EAAU,OAAQ,IAAK,CACvC,GAAI,GAAU,EAAU,GACpB,AAAA,GAAQ,OAAS,YAAc,EAAQ,OAAS,aAAe,EAAQ,OAAS,cACxE,GAAA,iBAAmB,EAAM,KAAK,qBAAqB,CAAG,EAAI,KAAK,WAAW,iBAAiB,IAAO,OAElG,EAAA,iBAAiB,QAAQ,AAAC,GAAY,CAC1C,EAAQ,MAAQ,KAAK,qBAAqB,EAAQ,KAAK,CAAA,CAC1D,EAET,CAGA,KAAK,uBAAyB,EAC1B,GAAK,MAAK,IAAM,EAAI,OACjB,KAAA,AAAA,GAAe,OAAS,QAAU,EACzC,KAAK,SAAS,QAAQ,CAClB,QAAS,KAAK,GAAG,4BAA4B,EAC7C,OAAQ,KAAK,GAAG,0BAA0B,EAC1C,KAAM,6BACN,OAAQ,IAAM,CACV,GAAI,GAAM,KAAK,iBAAiB,EAAe,MAAM,WAAW,GAChE,EAAI,MAAQ,EAAI,OAChB,EAAe,WAAa,GACb,EAAA,WAAW,KAAK,CAAG,EAClC,GAAI,GAAW,CAAE,WAAY,CAAC,EAAiB,KAAM,MAAO,EACxD,EAAM,CAAE,QAAS,CAAA,GACjB,EAAA,QAAQ,KAAK,EAAI,MAAM,EAElB,EAAA,WAAW,KAAK,CAAG,EAE5B,KAAK,qBAAqB,CAAQ,CACtC,CAAA,CACH,EAED,MAAK,uBAAyB,EAC1B,GAAK,MAAK,IAAM,EAAI,QACpB,EAAe,OAAS,mBAAmB,MAAK,aAAe,IAE3E,EACA,qBAAqB,EAAc,CAC3B,AAAC,KAAK,QAAQ,QAAa,MAAA,QAAQ,OAAS,IAC3C,KAAK,QAAQ,OAAO,iBAAsB,MAAA,QAAQ,OAAO,gBAAkB,CAAA,GAChF,KAAK,QAAQ,OAAO,gBAAgB,KAAK,CAAC,EACrC,KAAA,UACA,KAAA,OAAO,QAAQ,CAAE,YAAa,eAAgB,QAAS,CAAE,KAAM,KAAK,QAAQ,IAAM,KAAM,KAAK,UAAU,KAAK,QAAQ,OAAO,eAAe,EAAG,CACtJ,EACA,yBAA0B,CACtB,KAAK,aAAe,EACxB,EACA,qBAAqB,EAAqB,CAClC,AAAA,EAAO,KAAK,QAAQ,OAAO,gBAAgB,OAAO,EAAO,CAAC,EACzD,KAAK,QAAQ,OAAO,gBAAgB,OAAO,EAAE,EAC7C,KAAA,UACA,KAAA,OAAO,QAAQ,CAAE,YAAa,eAAgB,QAAS,CAAE,KAAM,KAAK,QAAQ,IAAM,KAAM,KAAK,UAAU,KAAK,QAAQ,OAAO,eAAe,EAAG,CACtJ,EACA,qBAAqB,EAAmC,CACpD,MAAO,MAAK,WAAW,iBAAiB,EAAI,MAAM,MACtD,EACA,OAAO,EAAc,EAAoB,CAGhC,KAAA,MAAM,GAAM,OAAO,CAAK,CACjC,EACA,mBAAgC,CAC5B,GAAI,GAAM,KAAK,0BACV,OAAO,AAAC,GAAM,EAAE,SAAW,CAAC,EAAE,MAAM,EACpC,KAAK,SAAU,EAAG,EAAG,CACd,MAAA,GAAE,SAAW,EAAE,SAAiB,EAChC,EAAE,SAAW,EAAE,SAAiB,GAC7B,CAAA,CACV,EAED,EAAO,CAAA,EACP,GAAA,EAAI,OAAS,EAAG,CACZ,GAAA,GAAO,EAAI,GAAG,SACb,EAAA,KAAK,EAAI,EAAE,EAEhB,OAAS,GAAI,EAAG,EAAI,EAAI,OAAQ,IACxB,AAAA,IAAS,EAAI,GAAG,UAChB,GAAO,EAAI,GAAG,SACd,EAAK,KAAK,SAAS,GAElB,EAAA,KAAK,EAAI,EAAE,CAExB,CACO,MAAA,EACX,EACA,qBAAqB,EAAsB,CACvC,GAAI,GAAW,EAAK,MAAM,IAAK,EAAE,EAEjC,MAAO,GAAS,OAAS,EAAI,EAAS,EAAS,OAAS,GAAK,EAAS,EAC1E,EACA,aAAoB,CAChB,KAAK,eAAiB,EAC1B,EACA,gBAAiB,CACT,GAAA,GAAkB,KAAK,WAAW,MACtB,SAAA,QAAQ,AAAC,GAAO,EAAE,MAAQ,KAAK,GAAG,EAAE,KAAK,CAAE,EACpD,CACX,EACA,eAAe,EAAK,CACZ,EAAA,KAAO,CAAC,EAAI,IACpB,EACA,eAAe,EAAa,CACxB,KAAK,SAAW,CACpB,EACA,iBAAiB,EAAW,CACxB,KAAK,WAAa,CACtB,EACA,gBAAgB,EAAW,CACvB,KAAK,UAAY,CACrB,EACA,YAAY,EAAS,CACb,GAAA,GAAW,KAAK,MAAM,CAAO,EAE7B,EAAW,EAAS,SAAS,QACjC,KAAK,QAAU,GACf,OAAS,GAAI,EAAG,EAAI,EAAS,OAAQ,IAAK,CACtC,GAAI,GAAM,CAAA,EACN,EAAA,KAAO,EAAS,GAAG,KACvB,EAAI,SAAW,GACX,EAAA,WAAa,EAAS,GAAG,MACzB,EAAA,UAAY,EAAS,GAAG,UACxB,EAAA,OAAS,EAAS,GAAG,KACpB,KAAA,QAAQ,KAAK,CAAG,CACzB,CAEA,KAAK,YAAc,GACV,EAAA,KAAK,QAAQ,AAAC,GAAQ,CAC3B,GAAI,GAAM,CAAA,EACV,OAAS,GAAI,EAAG,EAAI,EAAI,OAAQ,IAAK,CACjC,GAAI,GAAY,KAAK,aAAa,EAAU,CAAC,EAC7C,EAAI,GAAa,EAAI,EACzB,CACK,KAAA,YAAY,KAAK,CAAG,CAAA,CAC5B,CACL,CACJ,EACA,WAAY,CACR,AAAI,OAAO,KAAK,KAAK,MAAM,EAAE,OAAS,GAClC,MAAK,OAAO,aACZ,KAAK,OAAS,GAEtB,CACJ,CAAC,EA7kBoB,GAAA,CAAA,MAAM,wDACkC,IAAK,EAAA,MAAA,wCAqC7C,GAAA,CAAA,MAAM,+BAad,MAAM,0BAEE,GAAA,CAAA,MAAM,kDACF,MAAM,kBACP,GAAA,CAAA,MAAA,uBAKmB1B,EAAA,IAAA,CAAA,MAAA,yBAAA,KAAA,EAAA,EACnB,GAAA,CAAA,MAAM,sBAKD,MAAM,mGA0CD,GAAA,CAAA,IAAK,OAIV,MAAM,kGAGK,GAAA,CAAA,SAAA,mFAOkDmC,EAAA,2XAvIlFzC,GA8BoB,EAAAF,EAAA,MAAA,GAAA,CAAAM,EA7BE,EAAc,CAAA,WAAA,EAAA,aAC/B,sBAAM,EAAY,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,aAAA,GAClB,OAAM,EAAE,aACR,SAAQ,EAAA,eACR,OAAY,EAAA,QACZ,WAAA,EAAA,aACA,uBAAkB,EAAA,aAAA,mBAClB,SAAA,EAAA,SACO,oBAAU,EAAA,eAAA,SAAA,EAAA,uBACjB,oBAAa,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,uBAAA,GAAA,MAAA,EAAA,SAAA,EAEH,EAAA,CAAA,iBACPwB,EAeM,IAfN,CAAAtB,EAC4B,MAAC,GAAc,CAAA,EAAA,aAAvC,kBAWM,EAAAR,EAAA,OAAA,GAAA,CATiBM,EAAA,EAAA,CAAA,WAAA,EAAA,OACd,sBAAS,EAAa,IAAc,GAAA,GAAA,AAAA,GAAA,EAAA,OAAA,GACpC,QAAQ,EAAE,aAAQ,eACnB,SAAK,EAAA,SAG0D,MAAAC,EAAA,CAAA,oBAAA,CAAA,YAAA,CAAA,EAAA,OAFpD,CAAA,EACX,YAAY,QAAA,YAAA,QAK8E,KAAA,EAAA,CAAA,aAAA,UAA9F,WAA8F,OAAnD,CAAA,EAAAC,EAAA,QAAA,GAAAW,EAAA,EAAA,GAAA,mCAAA,CAAA,EAAA,CAAA,qBAKsJ,EAAA,EAAA,CAAA,aAAA,SAAA,WAAA,SAAA,aAAA,yBAAA,WAAA,oBAAA,WAAA,OAAA,CAAA,EAAAb,EAAlL,EAAsC,CAAA,eAAA,EAAA,uBAAG,0BAAqB,EAAoB,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,uBAAA,GAAG,qBAAgB,EAAA,qBAAU,QAAK,EAAG,QAAA,IAAA,EAAA,IAAG,eAAU,EAAQ,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,IAAA,GAAG,SAAA,EAAA,SAAA,oBAAA,EAAA,gBACqH,KAAA,EAAA,CAAA,iBAAA,uBAAA,UAAA,MAAA,WAAA,mBAAA,CAAA,EAAAA,EAAtP,EAAgB,CAAA,WAAA,EAAA,eAAG,sBAAiB,EAAO,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,eAAA,GAAG,gBAAQ,EAAQ,QAAS,OAAO,EAAE,QAAO,OAAG,QAAY,EAAA,QAAa,WAAA,EAAA,WAAsC,sBAAW,EAAS,iBAAG,UAAA,EAAA,UAAoC,qBAAgB,EAAA,gBAAA,eAAA,EAAA,cACjR,EAAA,KAAA,EAAA,CAMW,+BANI,SAAsC,UAAA,aAAA,sBAAA,YAAA,qBAAA,gBAAA,CAAA,EAAAA,EACjC,EAAgE,CAAA,MAAA,sCAAA,EAAA,CAAA,MAAAwB,EAAA,IAAA,2KACrE,CAAA,EACP,IAAAA,EAAA,IAAA,CAAAG,EAAa3B,EAAe,EAAA,CAAC,KAAK,gBAA0F,MAAK,gDAA2B,QAAQ,EAAE,uBAAA,SAAA,EAAA,QAAA,oCAAjE,EAAA,EAAA,GAAA,gBAAA,0BACxFA,EAAY,EAAA,CAAC,KAAK,aAAuF,MAAK,gDAAgB,QAAQ,EAAE,YAAA,SAAA,EAAA,QAAA,oCAAnD,EAAA,EAAA,GAAA,aAAA,0BACrFA,EAAa,EAAA,CAAC,KAAK,cAAwF,MAAK,gDAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,8BAA1B,EAAA,EAAA,GAAA,cAAA,6BAE3G,CAAA,EAAAA,EACoB,EAC0C,CAAA,MAAA,4DAAA,EAAA,CAAtD,MAAAwB,EAAA,IAAA,CAAwE5B,GAAA,EAAA,EAAAF,EAAAG,EAAA,KAAAC,EAAA,EAAA,kBAAA,EAAA,CAAA,EAAA,IAClDF,GAAA,EAAAF,EAAAG,EAAA,CAAA,IAAA,GAAA,CAAA,IAAA,UAAA8B,EAAA/B,GAAA,EAAAyB,EAAA,EAAA,CAAiB,IAAK,EAAuE,MAAKpB,EAAE,EAAA,WAAa,IAAI,iBAAA,EAAI,QAAQ,GAAE,EAA0B,aAAA,CAAA,EAAA,SAAA,EAAA,0BAAA,CAAA,YAC1JuB,EAAU,IAAA,CAAA,EAAA,KAAA,MAAA5B,GAAA,EAAAF,EAAA,OAAA,CAAG,IAAK,EAAA,MAAAO,EAA2B,EAAK,KAAI,KAAA,CAAA,EAAAY,EACvE,EAAiC,KAAA,IAAA,EAAA,CAAA,GAAAjB,GAAA,EAAAF,EAAA,IAAA,CAAtB,IAAK,EAAA,MAAAO,EAAA,EAAA,IAAA,2DAF0E,EAAA,EAAA,GAAA,EAAA,KAAA,kCAI9E,IAAA,EAAA,OAAA,0BAGb,CAAA,EACP,IAAAuB,EAAA,IAAA,CAC6ItB,EAAA,MAAA,GAAA,CAAAF,EAA5H,EAAkB,CAAE,KAAK,mBAAoC,MAAyBC,EAAA,EAAA,WAAA,IAAA,iBAAA,EAAE,MAAK,CAAA,SAAA,SAAA,EAAA,QAAA,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,0BACzE,EAAA,KAAA,EAAA,CAAO,OAAO,CAAA,EAAA,EAAA,QAAA,QAA/C,EAA2O,QAAA,OAAA,iBAAA,EAAA,QAAA,OAAA,gBAAA,OAAA,EAAAL,GAAA,EAAAyB,EAAA,EAAA,CAApO,IAAK,EAAqH,MAAO,cAAA,MAAA,EAAA,QAAA,QAAA,EAAA,QAAA,OAAA,iBAAA,EAAA,QAAA,OAAA,gBAAA,2CAIpI,CAAA,EAAA,EAAA,QAAA,EAAAzB,GACgB,EAAAF,EAAAG,EAAA,CAAA,IAAA,GAAA,CACxB,EAAA,eAAA,gBAAAD,GAAA,EAAAyB,EAAA,EAAA,CAAa,IAAK,EAAoB,MAAM,kBAAe,KAAK,EAAE,aAAA,MAAA,EAAA,iBAAA,kBAErD,OAAmE,CAAA,GAAAzB,GAAA,EAAAyB,EAAA,EAAA,CAAtD,IAAK,EAAoB,MAAO,kBAAA,MAAA,EAAA,iBAAA,4BAElElB,EAAkD,GAAA,EAAA,EAClDH,EAkFM,EAAA,CAAA,MAAA,gCAAA,CAAA,EA1DQE,EAAA,MAAA,GAAA,CAAAF,EAvBgB,EAAY,CAAA,QAAA,EAAA,aAAE,mBAAgB,EAAA,IAAA,GAAA,GAAA,AAAA,GAAA,EAAA,aAAA,GAAC,SAAM,QAAA,MAAA,wCAC3DwB,EAKM,IAAA,CAAAtB,EAJF,MAGM,GAAA,CAFmCA,EAAA,MAAA,GAAA,CAAA,GACpCA,EAAA,OAAE,KAAGW,EAAA,EAAQ,GAAK,8DAAA,CAAA,EAAA,CAAA,EAAAwB,EAAA,KAAAxB,EAAA,EAAA,QAAA,KAAA,EAAA,CAAA,GAI3B,CAAA,EAAAX,EACI,MAA4G,GAAA,CAAAA,EAAA,KAAA,GAAAW,EAAA,EAAA,GAAA,oEAAA,CAAA,EAAA,CAAA,CAEhH,CAAA,EACAb,EAUW,EAAA,CAAA,MAAA,iCAAA,CAAA,EAVIA,EAAA,EAAA,CAA2C,MAAO,0CAA4B,UAAY,uBAAM,EAAA,YAAA,MAC/F,EAAA,CACR,OAAAwB,EAAA,AAAA,GAAA,CAAAtB,EACgC,MAAI,GAAA,CAAA,EAAA,OAAA,MAAhC,kBACAN,GAAA,EAAAF,EAA4F,MAA7E,GAAAmB,EAAA,EAAU,OAAO,IAAI,EAAG,MAAGA,EAAG,EAAU,OAAO,WAAU,GAAI,QAAO,QAI7EjB,GAAA,EAAAF,EAAA,MAAA,GAAAmB,EAAA,EAAA,OAAA,IAAA,EAAA,MAAAA,EAAA,EAAA,OAAA,WAAA,GAAA,OAAA,EAAA,CAAA,GAAAX,EAF6B,MAAI,KAAA,CAAA,EAAA,OAAA,MAAA,QAAnC,EAAqO,OAAA,MAAA,OAAAyB,EAAA/B,KAAAyB,EAAA,EAAA,CAAnJ,IAAI,EAAe,KAAK,aAAqC,MAAKpB,EAAE,EAAmC,WAAA,IAAA,iBAAA,EAAA,QAAA,AAAA,GAAA,EAAA,yBAAA,EAAA,MAAA,CAAsB,EAAA,KAAA,EAAA,CAAA,QAAA,SAAA,CAAA,GAAA,CAAA,CAAA,EAAA,EAAA,GAAA,gBAAA,CAAA,IACjME,EAAe,GAAA,EAAA,EAAA,EAAA,OAAA,EAAAwB,EAAA/B,GAAA,EAAAyB,EAAA,EAAA,CAAO,IAAI,EAAyB,KAAK,uBAAqC,MAAKpB,EAAE,EAAA,WAAA,IAAA,iBAAA,EAAyD,QAAQ,EAAE,IAAO,GAAA,GAAA,AAAA,GAAA,EAAA,wBAAA,SAAA,EAAA,QAAA,CAArC,EAAA,KAAA,EAAA,CAAA,QAAA,UAAA,CAAA,GAAA,CAAA,CAAA,EAAA,EAAA,GAAA,eAAA,CAAA,8CA6D/J,EAAA,CAAA,SAAA,CAAA,EAvDAD,EAAA,EAAA,CACP,IAAK,KACN,MAAM,EAAA,YACN,MAAO,0CACN,QAAS,KACT,UAAQ,EAAA,YAAA,OAAA,GACT,KAAA,GACA,kBAAkB,uGACjB,WAAA,QACA,0BAAgB,EAAA,GAAA,gCAAA,CAAA,MAAA,UAAA,KAAA,SAAA,aAAA,gBAAA,CAAA,EAChB,QAAsB,EAAA,QAAA,EACvB,iBAAiB,GACjB,iBAAa,SACb,cAAA,GACC,iBAAgB,SACjB,WAAA,GAAA,gBAAA,MAEW,EAAA,CAAA,MAAAwB,EAAA,IAAA,wCAGA,CAAA,EAAA,QAAAA,EAAA,IAAA,2CAIX,QAAAA,EAAA,IAAA,CA8BC5B,GAAA,EAAA,EAAAF,EAAAG,EAAA,KAAAC,EAAA,EAAA,QAAA,CAAA,EAAA,IA9BgDF,GAAY,EAAAyB,EAAA,EAAA,CAAG,MAAK,EAAA,OAAW,IAAK,EAAA,MAAA,CAAA,MAAA,OAAA,CACtE,EAAA,CAAA,OACWG,EAAS,IAAA,CAAA,EAAA,UAAA5B,KAAAyB,EAAA,EAAA,CAAG,IAAK,EAAqC,MAAKpB,EAAE,EAAA,WAAa,IAAsB,iBAAA,EAAA,QAAA,AAAA,GAAA,EAAA,OAAA,EAAA,UAAA,CAAA,IAClG,QAAAuB,EAAU,IAAM,CAAA,EAAA,WAAA,MAA5B,OAAsP,AAAA,GAAA,EAAA,OAAA,EAAA,SAAA,EAAA,GAAA,KAAA,MAAA5B,GAAA,EAAAF,EAAA,OAAA,CAAjK,IAAK,EAA6E,MAAAO,EAAA,EAAA,WAAgB,MAAC,OAAS,AAAA,GAAO,EAAI,OAAS,EAAA,SAAc,KAAK,KAAI,KAAA,CAAA,EAAAY,EAC5O,EAAwF,WAAA,MAAA,OAAA,AAAA,GAAA,EAAA,OAAA,EAAA,SAAA,EAAA,GAAA,KAAA,IAAA,EAAA,CAAA,GAAAjB,GAAA,EAAAF,EAAA,IAAA,CAA7E,IAAK,EAAA,MAAAO,EAAA,EAAA,WAAA,MAAA,OAAA,AAAA,GAAA,EAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,8CAEpBE,EAIe,GAAA,EAAA,EAAAH,EAAA,EAAA,CAJA,QAAG,GAAyB,IAAK,UAAM,EAAA,MAAA,aAClDwB,EAEO,IAAA,CAD8HtB,EAAA,OAAA,GAAA,CAAjGF,EAAA,EAAA,CAAA,WAAA,EAAA,UAAG,sBAAS,AAAc,GAAA,EAAA,UAAA,EAAI,UAAY,eAAO,EAAC,YAAY,QAAO,YAAM,OAAA,MAAA,mFAGnH,EAAA,IAAA,EAC0FE,EAAA,MAAA,GAAA,CAAA,EAAA,QAAAyB,EAAA/B,GAAA,EAAAF,EAAA,QAAA,CAA/E,IAAK,EAAoB,MAAK,mBAAA,KAAA,OAAoD,sBAAM,GAAW,EAAI,WAAA,EAAI,UAAO,EAAQ,YAAA,CAAA,EAAA,UAAA4C,GAAA,AAAA,GAAA,EAAA,YAAA,CAAA,EAAA,CAAA,OAAA,CAAA,CAAxE,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,CAAAC,GAAA,EAAA,UAAA,mBAC5C,IAAK,EAAiB,MAAK,eAAA,QAAA,AAAA,GAAuB,EAAI,YAAU,CAAA,CAAA,EAC7E1B,EAA+G,EAA/G,UAA+G,EAAA,EAAA,EAAA,GAAAX,EAAA,OAAA,GAAAW,EAAA,EAAA,GAAA,EAAA,qBAAA,EAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAEnH,CAAA,EAAAb,EAAa,EAAkB,CAAE,KAAK,mBAAqC,MAAKC,EAAE,EAAA,WAAa,IAAgB,iBAAA,EAAA,QAAA,AAAA,GAAA,EAAA,OAAA,EAAA,YAAA,CAAA,CAQxG,EAAA,KAAA,EAAA,CAAA,QAAA,SAAA,CAAA,EAPOD,EAAA,EAAA,CAAA,MAAA,EAAA,uBAAA,CAAA,EAA8B,QAAG,GAA2B,IAAK,YAAM,EAAA,MAAA,EACtE,EAAA,CAAA,KACPwB,EAGO,CAAA,CAAA,UAAA,CAHKtB,EAAA,OAAA,CAAiF,MAAKD,EAAE,CAAA,kBAAiB,sBAAK,EAAA,WAAA,IAAA,iBAAA,CAAA,EAAA,QAAA,AAAA,IAAA,EAAA,aAAA,EAAA,CAAA,CAC/D,EAAA,CAAA,EAAA,KAAA,MAAAL,GAAA,EAAAF,EAAA,OAAA,CAAhD,IAAK,EAAA,MAAAO,EAAoE,GAAK,KAAI,MAAA,WAAA,CAAA,CAAA,EAAAY,EACzF,EAAiC,KAAA,IAAA,EAAA,CAAA,GAAAjB,GAAA,EAAAF,EAAA,IAAA,CAAtB,IAAK,EAAA,MAAAO,EAAA,EAAA,IAAA,YAAkB,GAAAC,EAAA,OAAA,GAAAW,EAAA,EAAA,GAAA,EAAA,KAAA,CAAA,EAAA,CAAA,gCAItC,CAAA,EAAA,KACOW,EAAM,CAAc,CAAA,UAAA,CAAnC,EAAA,KAAA,YAAA,EAAA,SAAA,MAAmN,EAClM5B,GAA+B,EAAAF,EAAA,OAAA,GAAAmB,EAAA,EAAA,iBAAA,EAAA,EAAA,QAAA,CAAA,KAAA,UAAA,MAAA,UAAA,IAAA,UAAA,KAAA,UAAA,OAAA,UAAA,OAAA,SAAA,CAAA,CAAA,EAAA,CAAA,GAAA,EAAA,KAAA,YAAA,iBAAiH,EACjKjB,GAAA,EAAAF,EAA2C,OAA1B,GAAAmB,EAAA,EAAK,iBAAU,EAAA,EAAA,QAAA,CAAA,KAAA,UAAA,MAAA,UAAA,IAAA,UAAA,CAAA,EAAA,CAAA,GAAAjB,GAAA,EAAAF,EAAA,OAAA,GAAAmB,EAAA,EAAA,EAAA,OAAA,EAAA,CAAA"}