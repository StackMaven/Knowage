{"version":3,"file":"GlossaryDefinition-fdb7bc6b.js","sources":["../../../../modules/managers/glossaryDefinition/dialogs/GlossaryDefinitionNodeDialog.vue","../../../../modules/managers/glossaryDefinition/GlossaryDefinitionDetail.vue","../../../../modules/managers/glossaryDefinition/dialogs/GlossaryDefinitionInfoDialog.vue","../../../../modules/managers/glossaryDefinition/dialogs/GlossaryDefinitionWordEdit.vue","../../../../modules/managers/glossaryDefinition/GlossaryDefinition.vue"],"sourcesContent":["<template>\r\n    <Dialog :breakpoints=\"glossaryDefinitionDialogDescriptor.dialog.breakpoints\" :style=\"glossaryDefinitionDialogDescriptor.dialog.style\" :visible=\"visible\" :modal=\"true\" class=\"p-fluid kn-dialog--toolbar--primary\" :closable=\"false\">\r\n        <template #header>\r\n            {{ content.CONTENT_ID ? $t('managers.glossary.glossaryDefinition.editNode') : $t('managers.glossary.glossaryDefinition.newNode') }}\r\n        </template>\r\n        <div class=\"p-field p-m-4\">\r\n            <span class=\"p-float-label\">\r\n                <InputText\r\n                    id=\"contentName\"\r\n                    class=\"kn-material-input\"\r\n                    v-model.trim=\"content.CONTENT_NM\"\r\n                    max=\"100\"\r\n                    :class=\"{\r\n                        'p-invalid': content.CONTENT_NM?.length === 0 && contentNameDirty\r\n                    }\"\r\n                    @blur=\"contentNameDirty = true\"\r\n                />\r\n                <label for=\"contentName\" class=\"kn-material-input-label\"> {{ $t('common.name') }} *</label>\r\n            </span>\r\n            <div v-if=\"content.CONTENT_NM.length === 0 && contentNameDirty\" class=\"p-error p-grid p-mt-2\">\r\n                {{ $t('common.validation.required', { fieldName: $t('common.name') }) }}\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"p-field p-m-4\">\r\n            <span class=\"p-float-label\">\r\n                <InputText id=\"contentCode\" class=\"kn-material-input\" v-model.trim=\"content.CONTENT_CD\" max=\"30\" />\r\n                <label for=\"contentCode\" class=\"kn-material-input-label\"> {{ $t('managers.glossary.common.code') }}</label>\r\n            </span>\r\n        </div>\r\n        <div class=\"p-field p-m-4\">\r\n            <span class=\"p-float-label\">\r\n                <Textarea id=\"contentDescription\" class=\"kn-material-input\" v-model.trim=\"content.CONTENT_DS\" :autoResize=\"true\" maxLength=\"500\" rows=\"1\" />\r\n                <label for=\"contentDescription\" class=\"kn-material-input-label\"> {{ $t('common.description') }}</label>\r\n            </span>\r\n            <div id=\"description-help\">\r\n                <small id=\"description-help\">{{ descriptionHelp }}</small>\r\n            </div>\r\n        </div>\r\n        <template #footer>\r\n            <Button class=\"kn-button kn-button--primary\" @click=\"$emit('close')\"> {{ $t('common.close') }}</Button>\r\n            <Button :label=\"$t('common.save')\" @click=\"$emit('save', content)\" class=\"kn-button kn-button--primary\" :disabled=\"buttonDisabled\" />\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { iContent } from '../GlossaryDefinition'\r\nimport Dialog from 'primevue/dialog'\r\nimport glossaryDefinitionDialogDescriptor from './GlossaryDefinitionDialogDescriptor.json'\r\nimport Textarea from 'primevue/textarea'\r\n\r\nexport default defineComponent({\r\n    name: 'glossary-definition-node-dialog',\r\n    components: { Dialog, Textarea },\r\n    emits: ['close', 'save'],\r\n    props: {\r\n        visible: { type: Boolean },\r\n        selectedContent: { type: Object }\r\n    },\r\n    watch: {\r\n        selectedContent() {\r\n            this.loadContent()\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            glossaryDefinitionDialogDescriptor,\r\n            content: {} as iContent,\r\n            contentNameDirty: false\r\n        }\r\n    },\r\n    computed: {\r\n        descriptionHelp(): string {\r\n            return (this.content.CONTENT_DS?.length ?? '0') + ' / 500'\r\n        },\r\n        buttonDisabled(): boolean {\r\n            return this.content.CONTENT_NM?.length === 0\r\n        }\r\n    },\r\n    created() {\r\n        this.loadContent()\r\n    },\r\n    methods: {\r\n        loadContent() {\r\n            this.contentNameDirty = false\r\n            this.content = { ...this.selectedContent } as iContent\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#description-help {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n}\r\n</style>\r\n","<template>\r\n    <div class=\"kn-page-content p-m-0\">\r\n        <Toolbar class=\"kn-toolbar kn-toolbar--primary p-m-0\">\r\n            <template #start>{{ $t('managers.glossary.glossaryDefinition.title') }}</template>\r\n\r\n            <template #end>\r\n                <FabButton icon=\"fas fa-plus\" class=\"fab-button\" @click=\"addNewGlossary('Save')\" />\r\n            </template>\r\n        </Toolbar>\r\n        <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar\" v-if=\"loading\" />\r\n        <Card class=\"p-m-3\">\r\n            <template #header>\r\n                <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                    <template #start>\r\n                        {{ $t('managers.glossary.glossaryDefinition.glossary') }}\r\n                    </template>\r\n                    <template #end>\r\n                        <div class=\"p-d-flex p-flex-row\">\r\n                            <div v-if=\"selectedGlossary && selectedGlossaryId && selectedGlossaryId != -1\">\r\n                                <Button class=\"kn-button p-button-text\" @click=\"addNewGlossary('Clone')\">{{ $t('common.clone') }}</Button>\r\n                                <Button class=\"kn-button p-button-text\" @click=\"deleteGlossaryConfirm\">{{ $t('common.delete') }}</Button>\r\n                            </div>\r\n                        </div>\r\n                    </template>\r\n                </Toolbar>\r\n            </template>\r\n            <template #content>\r\n                <Message class=\"p-mt-0\">{{ $t('managers.glossary.glossaryDefinition.help') }}</Message>\r\n                <div>\r\n                    <div class=\"p-field p-d-flex p-ai-center\">\r\n                        <div class=\"p-d-flex p-flex-column p-mr-2\" id=\"glossary-select-container\">\r\n                            <label for=\"glossary\" class=\"kn-material-input-label\">{{ $t('managers.glossary.glossaryDefinition.title') }}</label>\r\n                            <Dropdown\r\n                                id=\"glossary\"\r\n                                class=\"kn-material-input\"\r\n                                v-model=\"selectedGlossaryId\"\r\n                                :options=\"glossaries\"\r\n                                optionLabel=\"GLOSSARY_NM\"\r\n                                optionValue=\"GLOSSARY_ID\"\r\n                                :editable=\"selectedGlossary\"\r\n                                :placeholder=\"$t('managers.glossary.glossaryDefinition.glossary')\"\r\n                                @change=\"loadGlossaryInfo($event.value, null)\"\r\n                                @input=\"updateGlossaryName($event.target.value)\"\r\n                                @blur=\"handleSaveGlossary\"\r\n                            />\r\n                            <small id=\"glossary-help\">{{ $t('managers.glossary.glossaryDefinition.glossaryHint') }}</small>\r\n                        </div>\r\n                        <div v-if=\"selectedGlossary\" id=\"code-container\">\r\n                            <span class=\"p-float-label\">\r\n                                <InputText id=\"code\" class=\"kn-material-input full-width\" v-model.trim=\"selectedGlossary.GLOSSARY_CD\" @blur=\"handleSaveGlossary\" />\r\n                                <label for=\"code\" class=\"kn-material-input-label\"> {{ $t('managers.glossary.common.code') }}</label>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div v-if=\"selectedGlossary\" class=\"p-field p-d-flex kn-flex\">\r\n                        <div class=\"p-float-label kn-flex\">\r\n                            <InputText id=\"description\" class=\"kn-material-input full-width\" v-model.trim=\"selectedGlossary.GLOSSARY_DS\" @blur=\"handleSaveGlossary\" />\r\n                            <label for=\"description\" class=\"kn-material-input-label\"> {{ $t('common.description') }}</label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div v-if=\"selectedGlossary && showTree\">\r\n                    <Toolbar class=\"kn-toolbar kn-toolbar--default\">\r\n                        <template #start>\r\n                            {{ $tc('managers.glossary.common.word', 2) }}\r\n                        </template>\r\n                        <template #end>\r\n                            <Button v-if=\"selectedGlossary && selectedGlossaryId && selectedGlossaryId != -1\" class=\"kn-button p-button-text\" @click=\"showNodeDialog(null, 'new')\">{{ $t('managers.glossary.glossaryDefinition.addNode') }}</Button>\r\n                        </template>\r\n                    </Toolbar>\r\n                    <div class=\"p-d-flex p-flex-row p-m-3\">\r\n                        <InputText id=\"search-input\" class=\"kn-material-input\" v-model=\"searchWord\" :placeholder=\"$t('common.search')\" @input=\"filterGlossaryTree\" data-test=\"search-input\" />\r\n                    </div>\r\n                    <Tree id=\"glossary-tree\" :value=\"nodes\" :expandedKeys=\"expandedKeys\" @nodeExpand=\"listContents(selectedGlossary.GLOSSARY_ID, $event)\">\r\n                        <template #default=\"slotProps\">\r\n                            <div\r\n                                class=\"p-d-flex p-flex-row p-ai-center\"\r\n                                :class=\"{ dropzone: dropzoneActive[slotProps.node.key] }\"\r\n                                @mouseover=\"buttonVisible[slotProps.node.key] = true\"\r\n                                @mouseleave=\"buttonVisible[slotProps.node.key] = false\"\r\n                                @drop=\"saveWordConfirm($event, slotProps.node)\"\r\n                                @dragover.prevent\r\n                                @dragenter.prevent=\"setDropzoneClass(true, slotProps.node)\"\r\n                                @dragleave.prevent=\"setDropzoneClass(false, slotProps.node)\"\r\n                            >\r\n                                <span class=\"node-label p-mr-2\">{{ slotProps.node.label }}</span>\r\n                                <div v-show=\"buttonVisible[slotProps.node.key]\">\r\n                                    <Button\r\n                                        v-if=\"!slotProps.node.data.HAVE_WORD_CHILD && slotProps.node.data.CONTENT_NM\"\r\n                                        icon=\"pi pi-bars\"\r\n                                        class=\"p-button-link p-button-sm p-p-0\"\r\n                                        v-tooltip.top=\"$t('managers.glossary.glossaryDefinition.addNode')\"\r\n                                        @click.stop=\"showNodeDialog(slotProps.node, 'new')\"\r\n                                    />\r\n                                    <Button v-if=\"!slotProps.node.data.HAVE_CONTENTS_CHILD && slotProps.node.data.CONTENT_NM\" icon=\"pi pi-book\" class=\"p-button-link p-button-sm p-p-0\" v-tooltip.top=\"$t('managers.glossary.glossaryDefinition.addWord')\" @click.stop=\"addWord(slotProps.node)\" />\r\n                                    <Button v-if=\"slotProps.node.data.CONTENT_NM\" icon=\"pi pi-pencil\" class=\"p-button-link p-button-sm p-p-0\" v-tooltip.top=\"$t('common.edit')\" @click.stop=\"showNodeDialog(slotProps.node, 'edit')\" />\r\n                                    <Button icon=\"pi pi-info-circle\" class=\"p-button-link p-button-sm p-p-0\" v-tooltip.top=\"$t('managers.glossary.glossaryDefinition.showInfo')\" @click.stop=\"$emit('infoClicked', slotProps.node.data)\" />\r\n                                    <Button icon=\"far fa-trash-alt\" class=\"p-button-link p-button-sm p-p-0\" v-tooltip.top=\"$t('common.delete')\" @click.stop=\"deleteNodeConfirm(slotProps.node)\" />\r\n                                </div>\r\n                            </div>\r\n                        </template>\r\n                    </Tree>\r\n                </div>\r\n            </template>\r\n        </Card>\r\n        <GlossaryDefinitionHint v-if=\"showHint\"></GlossaryDefinitionHint>\r\n        <GlossaryDefinitionNodeDialog :visible=\"nodeDialogVisible\" :selectedContent=\"selectedContent\" @save=\"saveContent\" @close=\"nodeDialogVisible = false\"></GlossaryDefinitionNodeDialog>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { iContent, iGlossary, iNode, iWord } from './GlossaryDefinition'\r\nimport { AxiosResponse } from 'axios'\r\nimport Card from 'primevue/card'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Message from 'primevue/message'\r\nimport glossaryDefinitionDescriptor from './GlossaryDefinitionDescriptor.json'\r\nimport GlossaryDefinitionHint from './GlossaryDefinitionHint.vue'\r\nimport GlossaryDefinitionNodeDialog from './dialogs/GlossaryDefinitionNodeDialog.vue'\r\nimport FabButton from '@/components/UI/KnFabButton.vue'\r\nimport Tree from 'primevue/tree'\r\nimport mainStore from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'glossary-definition-detail',\r\n    components: {\r\n        Card,\r\n        Dropdown,\r\n        GlossaryDefinitionHint,\r\n        GlossaryDefinitionNodeDialog,\r\n        FabButton,\r\n        Message,\r\n        Tree\r\n    },\r\n    props: { reloadTree: { type: Boolean } },\r\n    emits: ['addWord', 'infoClicked'],\r\n    data() {\r\n        return {\r\n            glossaryDefinitionDescriptor,\r\n            glossaries: [] as iGlossary[],\r\n            selectedGlossaryId: null as number | null,\r\n            selectedGlossary: null as iGlossary | null,\r\n            originalGlossary: null as iGlossary | null,\r\n            nodes: [] as iNode[],\r\n            buttonVisible: [],\r\n            searchWord: null,\r\n            timer: null as any,\r\n            expandedKeys: {},\r\n            nodeDialogVisible: false,\r\n            selectedContent: {} as iContent,\r\n            selectedNode: {} as iNode,\r\n            dropzoneActive: [] as boolean[],\r\n            showTree: false,\r\n            showHint: true,\r\n            loading: false\r\n        }\r\n    },\r\n    watch: {\r\n        async reloadTree() {\r\n            this.updateParentNode('HAVE_WORD_CHILD', true)\r\n            await this.listContents(this.selectedGlossaryId as number, this.selectedNode)\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    async created() {\r\n        await this.loadGlossaryList()\r\n    },\r\n    methods: {\r\n        async loadGlossaryInfo(glossaryId: number, parent: any) {\r\n            await this.loadGlossary(glossaryId)\r\n            await this.listContents(glossaryId, parent)\r\n        },\r\n        async loadGlossaryList() {\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/listGlossary`).then((response: AxiosResponse<any>) => (this.glossaries = response.data))\r\n        },\r\n        async loadGlossary(glossaryId: number) {\r\n            this.loading = true\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/getGlossary?GLOSSARY_ID=${glossaryId}`)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.selectedGlossary = { ...response.data, SaveOrUpdate: 'Update' }\r\n                    this.originalGlossary = { ...response.data, SaveOrUpdate: 'Update' }\r\n                    this.showTree = true\r\n                    this.showHint = false\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async listContents(glossaryId: number, parent: any) {\r\n            this.loading = true\r\n\r\n            if (parent?.WORD_ID || this.searchWord) {\r\n                this.loading = false\r\n                return\r\n            }\r\n\r\n            const parentId = parent ? parent.id : null\r\n            let content = [] as iNode[]\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/listContents?GLOSSARY_ID=${glossaryId}&PARENT_ID=${parentId}`).then((response: AxiosResponse<any>) => {\r\n                response.data.forEach((el: any) => content.push(this.createNode(el, parent)))\r\n                content.sort((a: iNode, b: iNode) => (a.label > b.label ? 1 : -1))\r\n            })\r\n            this.attachContentToTree(parent, content)\r\n            this.loading = false\r\n        },\r\n        attachContentToTree(parent: iNode, content: iNode[]) {\r\n            if (parent) {\r\n                parent.children = []\r\n                parent.children = content\r\n            } else {\r\n                this.nodes = []\r\n                this.nodes = content\r\n            }\r\n        },\r\n        createNode(el: any, parent: any) {\r\n            return {\r\n                key: el.CONTENT_ID ? `content-${el.CONTENT_ID}` : `word-${el.WORD_ID}`,\r\n                id: el.CONTENT_ID ?? el.WORD_ID,\r\n                label: el.CONTENT_NM ?? el.WORD,\r\n                icon: el.WORD_ID && !(el.HAVE_WORD_CHILD || el.HAVE_CONTENTS_CHILD) ? 'pi pi-circle-on' : '',\r\n                children: [] as iNode[],\r\n                data: el,\r\n                style: this.glossaryDefinitionDescriptor.node.style,\r\n                leaf: !(el.HAVE_WORD_CHILD || el.HAVE_CONTENTS_CHILD),\r\n                selectable: !(el.HAVE_WORD_CHILD || el.HAVE_CONTENTS_CHILD),\r\n                parent: parent\r\n            }\r\n        },\r\n        async filterGlossaryTree() {\r\n            if (this.timer) {\r\n                clearTimeout(this.timer)\r\n                this.timer = null\r\n            }\r\n            let tempData = []\r\n            this.timer = setTimeout(() => {\r\n                this.loading = true\r\n                this.$http\r\n                    .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/glosstreeLike?WORD=${this.searchWord}&GLOSSARY_ID=${this.selectedGlossary?.GLOSSARY_ID}`)\r\n                    .then((response: AxiosResponse<any>) => (tempData = response.data))\r\n                    .finally(() => {\r\n                        this.createGlossaryTree(tempData)\r\n                        this.loading = false\r\n                    })\r\n            }, 1000)\r\n        },\r\n        createGlossaryTree(data: any) {\r\n            this.nodes = []\r\n            this.expandedKeys = {}\r\n            data.GlossSearch.SBI_GL_CONTENTS.forEach((el: any) => {\r\n                const tempNode = this.createNode(el, null)\r\n                el.CHILD?.forEach((el: any) => {\r\n                    tempNode.children.push(this.createNode(el, tempNode))\r\n                })\r\n                this.nodes.push(tempNode)\r\n            })\r\n        },\r\n        async saveWordConfirm(event: any, item: any) {\r\n            if (item.data.HAVE_CONTENTS_CHILD || item.data.WORD_ID) {\r\n                return\r\n            }\r\n\r\n            const word = JSON.parse(event.dataTransfer.getData('text/plain'))\r\n            this.$confirm.require({\r\n                message: this.$t('managers.glossary.glossaryDefinition.saveWordConfirmMessage'),\r\n                header: this.$t('managers.glossary.glossaryDefinition.saveWordConfirmTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: async () => await this.saveWord(word, item)\r\n            })\r\n        },\r\n        async saveWord(word: iWord, item: any) {\r\n            this.loading = true\r\n            this.selectedNode = item\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + '1.0/glossary/business/addContents', {\r\n                    GLOSSARY_ID: this.selectedGlossaryId,\r\n                    PARENT_ID: item.id,\r\n                    WORD_ID: word.WORD_ID\r\n                })\r\n                .then(async (response: AxiosResponse<any>) => {\r\n                    if (response.data.Status !== 'NON OK') {\r\n                        this.store.setInfo({\r\n                            title: this.$t('common.toast.createTitle'),\r\n                            msg: this.$t('common.toast.success')\r\n                        })\r\n                        this.updateParentNode('HAVE_WORD_CHILD', true)\r\n                        await this.listContents(this.selectedGlossaryId as number, item)\r\n                    } else {\r\n                        this.store.setError({\r\n                            title: this.$t('common.error.generic'),\r\n                            msg: this.$t(this.glossaryDefinitionDescriptor.translation[response.data.Message])\r\n                        })\r\n                    }\r\n                })\r\n                .catch((response) => {\r\n                    this.store.setError({\r\n                        title: this.$t('common.error.generic'),\r\n                        msg: response\r\n                    })\r\n                })\r\n                .finally(() => {\r\n                    this.loading = false\r\n                    this.dropzoneActive = []\r\n                })\r\n        },\r\n        async deleteNodeConfirm(node: any) {\r\n            this.$confirm.require({\r\n                message: this.$t('managers.glossary.glossaryDefinition.deleteNodeConfirmMessage'),\r\n                header: this.$t('common.toast.deleteTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: async () => await this.deleteNode(node)\r\n            })\r\n        },\r\n        async deleteNode(node: any) {\r\n            this.loading = true\r\n            this.selectedNode = node.parent\r\n            const url = node.data.CONTENT_ID ? `1.0/glossary/business/deleteContents?CONTENTS_ID=${node.data.CONTENT_ID}` : `1.0/glossary/business/deleteContents?PARENT_ID=${node.parent.id}&WORD_ID=${node.data.WORD_ID}`\r\n            let status = ''\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url, {})\r\n                .then((response: AxiosResponse<any>) => (status = response.data.Status))\r\n                .catch((response) => {\r\n                    this.store.setError({\r\n                        title: this.$t('common.error.generic'),\r\n                        msg: response\r\n                    })\r\n                })\r\n\r\n            if (status === 'OK') {\r\n                let property = 'HAVE_CONTENTS_CHILD'\r\n                if (node.data.WORD_ID) {\r\n                    property = 'HAVE_WORD_CHILD'\r\n                }\r\n\r\n                this.searchWord ? await this.filterGlossaryTree() : await this.listContents(this.selectedGlossaryId as number, node.parent)\r\n                if (this.selectedNode.children.length === 0) {\r\n                    this.updateParentNode(property, false)\r\n                }\r\n            }\r\n\r\n            this.dropzoneActive = []\r\n            this.loading = false\r\n        },\r\n        async showNodeDialog(node: any, mode: string) {\r\n            this.selectedNode = node\r\n            if (mode === 'edit') {\r\n                await this.loadContent(node.data.CONTENT_ID)\r\n            } else {\r\n                this.selectedContent = {\r\n                    CONTENT_ID: '',\r\n                    CONTENT_NM: '',\r\n                    CONTENT_CD: '',\r\n                    CONTENT_DS: '',\r\n                    GLOSSARY_ID: this.selectedGlossaryId as number,\r\n                    NEWCONT: true,\r\n                    PARENT_ID: node ? node.data.CONTENT_ID : null,\r\n                    SaveOrUpdate: 'Save'\r\n                }\r\n            }\r\n            this.nodeDialogVisible = true\r\n        },\r\n        async loadContent(contentId: number) {\r\n            this.loading = true\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/getContent?CONTENT_ID=${contentId}`)\r\n                .then(\r\n                    (response: AxiosResponse<any>) =>\r\n                        (this.selectedContent = {\r\n                            ...response.data,\r\n                            CONTENT_ID: contentId,\r\n                            SaveOrUpdate: 'Update'\r\n                        })\r\n                )\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async saveContent(content: iContent) {\r\n            this.loading = true\r\n\r\n            let result = { status: '', message: '' } as any\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + '1.0/glossary/business/addContents', content)\r\n                .then(\r\n                    (response: AxiosResponse<any>) =>\r\n                        (result = {\r\n                            status: response.data.Status,\r\n                            message: response.data.Message\r\n                        })\r\n                )\r\n                .catch((response) => {\r\n                    this.store.setError({\r\n                        title: this.$t('common.error.generic'),\r\n                        msg: response\r\n                    })\r\n                })\r\n\r\n            await this.updateTree(result, content)\r\n            this.loading = false\r\n        },\r\n        async updateTree(result: { status: string; message: string }, content: iContent) {\r\n            if (result.status === 'NON OK') {\r\n                this.store.setError({\r\n                    title: this.$t('common.toast.createTitle'),\r\n                    msg: this.$t(this.glossaryDefinitionDescriptor.translation[result.message])\r\n                })\r\n            } else {\r\n                this.store.setInfo({\r\n                    title: this.$t('common.toast.createTitle'),\r\n                    msg: this.$t('common.toast.success')\r\n                })\r\n                this.nodeDialogVisible = false\r\n                this.updateParentNode('HAVE_CONTENTS_CHILD', true)\r\n                content.SaveOrUpdate === 'Save' ? await this.listContents(this.selectedGlossaryId as number, this.selectedNode) : this.updateNode(content)\r\n            }\r\n        },\r\n        updateNode(content: iContent) {\r\n            let temp = null as any\r\n            for (let i = 0; i < this.nodes.length; i++) {\r\n                temp = this.findNode(this.nodes[i], this.selectedNode?.id)\r\n                if (temp) break\r\n            }\r\n\r\n            if (temp) {\r\n                temp.data = content\r\n                temp.label = content.CONTENT_NM\r\n            }\r\n        },\r\n        findNode(node: iNode, nodeId: number) {\r\n            if (node.id === nodeId) {\r\n                return node\r\n            } else if (node.children != null) {\r\n                let result = null as any\r\n                for (let i = 0; result == null && i < node.children.length; i++) {\r\n                    result = this.findNode(node.children[i], nodeId)\r\n                }\r\n                return result\r\n            }\r\n            return null\r\n        },\r\n        deleteGlossaryConfirm() {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.toast.deleteTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => {\r\n                    this.deleteGlossary()\r\n                }\r\n            })\r\n        },\r\n        async deleteGlossary() {\r\n            this.loading = true\r\n            await this.$http.post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/business/deleteGlossary?GLOSSARY_ID=${this.selectedGlossaryId}`).then(() => {\r\n                this.store.setInfo({\r\n                    title: this.$t('common.toast.deleteTitle'),\r\n                    msg: this.$t('common.toast.deleteSuccess')\r\n                })\r\n                this.selectedGlossaryId = null\r\n                this.selectedGlossary = null\r\n                this.originalGlossary = null\r\n            })\r\n            await this.loadGlossaryList()\r\n            this.loading = false\r\n        },\r\n        addWord(node: iNode) {\r\n            this.selectedNode = node\r\n            this.$emit('addWord', {\r\n                parent: node.data,\r\n                glossaryId: this.selectedGlossaryId\r\n            })\r\n        },\r\n        async addNewGlossary(type: string) {\r\n            this.showTree = false\r\n            this.showHint = false\r\n            this.selectedGlossaryId = null\r\n            this.expandedKeys = {}\r\n\r\n            if (type === 'Save') {\r\n                this.nodes = []\r\n                this.selectedGlossary = {\r\n                    GLOSSARY_CD: '',\r\n                    GLOSSARY_DS: '',\r\n                    GLOSSARY_NM: '',\r\n                    NEWGLOSS: true,\r\n                    SBI_GL_CONTENTS: [],\r\n                    SaveOrUpdate: 'Save'\r\n                }\r\n            } else {\r\n                this.selectedGlossary = {\r\n                    GLOSSARY_ID: this.selectedGlossary?.GLOSSARY_ID,\r\n                    GLOSSARY_CD: this.selectedGlossary?.GLOSSARY_CD,\r\n                    GLOSSARY_DS: this.selectedGlossary?.GLOSSARY_DS,\r\n                    GLOSSARY_NM: this.$t('common.copyOf') + ' ' + this.selectedGlossary?.GLOSSARY_NM\r\n                } as iGlossary\r\n                await this.handleSaveGlossary()\r\n            }\r\n\r\n            this.originalGlossary = {\r\n                GLOSSARY_CD: '',\r\n                GLOSSARY_DS: '',\r\n                GLOSSARY_NM: ''\r\n            } as iGlossary\r\n        },\r\n        async handleSaveGlossary() {\r\n            this.loading = true\r\n\r\n            if (!this.selectedGlossary?.GLOSSARY_NM || !this.glossaryChanged()) {\r\n                this.loading = false\r\n                return\r\n            }\r\n\r\n            const url = this.selectedGlossary?.SaveOrUpdate ? '1.0/glossary/business/addGlossary' : '1.0/glossary/business/cloneGlossary'\r\n            let tempData = {} as any\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url, this.selectedGlossary)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    tempData = response.data\r\n                })\r\n                .catch((response) => {\r\n                    this.store.setError({\r\n                        title: this.$t('common.error.generic'),\r\n                        msg: response\r\n                    })\r\n                })\r\n\r\n            this.updateGlossaryList(tempData)\r\n            this.loading = false\r\n        },\r\n        async updateGlossaryList(tempData: any) {\r\n            if (tempData.Status && tempData.Status !== 'NON OK') {\r\n                this.store.setInfo({\r\n                    title: this.$t('common.toast.createTitle'),\r\n                    msg: this.$t('common.toast.success')\r\n                })\r\n                if (this.selectedGlossary?.SaveOrUpdate === 'Update') {\r\n                    this.updateGlossary()\r\n                } else {\r\n                    if (tempData.id && this.selectedGlossary) {\r\n                        this.selectedGlossary.GLOSSARY_ID = tempData.id\r\n                        this.selectedGlossaryId = tempData.id\r\n                        if (this.selectedGlossaryId) await this.loadGlossaryInfo(this.selectedGlossaryId, null)\r\n                    }\r\n                    await this.loadGlossaryList()\r\n                }\r\n                this.showTree = true\r\n                if (this.selectedGlossary) {\r\n                    this.selectedGlossary.SaveOrUpdate = 'Update'\r\n                }\r\n                this.originalGlossary = { ...this.selectedGlossary } as iGlossary\r\n            } else {\r\n                this.store.setError({\r\n                    title: this.$t('common.error.generic'),\r\n                    msg: this.glossaryDefinitionDescriptor.translation[tempData.Message] ? this.$t(this.glossaryDefinitionDescriptor.translation[tempData.Message]) : ''\r\n                })\r\n            }\r\n        },\r\n        glossaryChanged() {\r\n            return this.selectedGlossary?.GLOSSARY_NM !== this.originalGlossary?.GLOSSARY_NM || this.selectedGlossary?.GLOSSARY_CD !== this.originalGlossary?.GLOSSARY_CD || this.selectedGlossary?.GLOSSARY_DS !== this.originalGlossary?.GLOSSARY_DS\r\n        },\r\n        updateGlossary() {\r\n            const index = this.glossaries.findIndex((el: iGlossary) => el.GLOSSARY_ID === this.selectedGlossary?.GLOSSARY_ID)\r\n            this.glossaries[index] = this.selectedGlossary as iGlossary\r\n        },\r\n        updateGlossaryName(newName: any) {\r\n            if (this.selectedGlossary) {\r\n                this.selectedGlossary.GLOSSARY_NM = newName\r\n            }\r\n        },\r\n        updateParentNode(property: string, value: any) {\r\n            let temp = null as any\r\n            if (this.selectedNode) {\r\n                for (let i = 0; i < this.nodes.length; i++) {\r\n                    temp = this.findNode(this.nodes[i], this.selectedNode.id)\r\n                    if (temp) break\r\n                }\r\n            }\r\n\r\n            if (temp) {\r\n                temp.data[property] = value\r\n            }\r\n        },\r\n        setDropzoneClass(value: boolean, node: any) {\r\n            if (node.data.CONTENT_ID && !node.data.HAVE_CONTENTS_CHILD) {\r\n                this.dropzoneActive[node.key] = value\r\n            }\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n#glossary-select-container {\r\n    width: 60%;\r\n}\r\n\r\n#code-container {\r\n    width: 40%;\r\n}\r\n\r\n.full-width {\r\n    width: 100%;\r\n}\r\n\r\n#glossary-tree {\r\n    border: none;\r\n}\r\n\r\n.fab-button {\r\n    color: white;\r\n}\r\n\r\n.dropzone {\r\n    background-color: #c2c2c2;\r\n    color: white;\r\n    width: 200px;\r\n    height: 30px;\r\n    border: 1px dashed;\r\n}\r\n\r\n.node-label {\r\n    word-wrap: break-word;\r\n}\r\n</style>\r\n","<template>\r\n    <div>\r\n        <Dialog\r\n            :header=\"$t('managers.glossary.glossaryDefinition.details')\"\r\n            :breakpoints=\"glossaryDefinitionDialogDescriptor.dialog.breakpoints\"\r\n            :style=\"glossaryDefinitionDialogDescriptor.dialog.style\"\r\n            :visible=\"visible\"\r\n            :modal=\"true\"\r\n            class=\"glossaryDefinitionDetail p-fluid kn-dialog--toolbar--primary\"\r\n            :closable=\"false\"\r\n        >\r\n            <div v-if=\"contentInfo && contentInfo.CONTENT_ID\">\r\n                <ul>\r\n                    <li>\r\n                        <span>{{ $t('common.name') }}:</span>\r\n                        <span>{{ contentInfo.CONTENT_NM }}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.common.code') }}:</span>\r\n                        <span>{{ contentInfo.CONTENT_CD }}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('common.description') }}:</span>\r\n                        <span>{{ contentInfo.CONTENT_DS }}</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <div v-else-if=\"contentInfo?.WORD_ID\">\r\n                <ul>\r\n                    <li>\r\n                        <span>{{ $tc('managers.glossary.common.word', 1) }}:</span>\r\n                        <span>{{ contentInfo.WORD }}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.common.status') }}:</span>\r\n                        <span v-if=\"contentInfo.STATE_NM\">{{ $t(glossaryDefinitionDescriptor.translation[contentInfo.STATE_NM]) }}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.common.category') }}:</span>\r\n                        <span v-if=\"contentInfo.CATEGORY_NM\">{{ $t(glossaryDefinitionDescriptor.translation[contentInfo.CATEGORY_NM]) }}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('common.description') }}:</span>\r\n                        <span>{{ contentInfo.DESCR }}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.common.formula') }}:</span>\r\n                        <span>{{ contentInfo.FORMULA }}</span>\r\n                    </li>\r\n                    <li>\r\n                        <span class=\"p-mr-2\">{{ $t('managers.glossary.common.link') }}:</span>\r\n                        <div class=\"p-d-flex p-flex-row p-flex-wrap\">\r\n                            <Chip class=\"p-m-1\" v-for=\"(link, index) in contentInfo.LINK\" :key=\"index\">{{ link.WORD }}</Chip>\r\n                        </div>\r\n                    </li>\r\n                    <li>\r\n                        <span>{{ $t('managers.glossary.common.attributes') }}:</span>\r\n                        <ul>\r\n                            <li v-for=\"(attribute, index) in contentInfo.SBI_GL_WORD_ATTR\" :key=\"index\">\r\n                                <span>{{ attribute.ATTRIBUTE_NM }}:</span>\r\n                                <span></span>\r\n                                <ul>\r\n                                    <li class=\"p-mr-2\">{{ attribute.VALUE }}</li>\r\n                                    <div class=\"p-d-flex p-flex-row p-flex-wrap\">\r\n                                        <Chip class=\"p-m-1\" v-for=\"(link, index) in contentInfo.LINK\" :key=\"index\">{{ link.WORD }}</Chip>\r\n                                    </div>\r\n                                </ul>\r\n                            </li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <template #footer>\r\n                <Button class=\"kn-button kn-button--primary\" @click=\"$emit('close')\"> {{ $t('common.close') }}</Button>\r\n            </template>\r\n        </Dialog>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport Chip from 'primevue/chip'\r\nimport Dialog from 'primevue/dialog'\r\nimport glossaryDefinitionDescriptor from '../GlossaryDefinitionDescriptor.json'\r\nimport glossaryDefinitionDialogDescriptor from './GlossaryDefinitionDialogDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'glossary-definition-info-dialog',\r\n    components: { Chip, Dialog },\r\n    emits: ['close'],\r\n    props: {\r\n        visible: { type: Boolean },\r\n        contentInfo: { type: Object }\r\n    },\r\n    data() {\r\n        return {\r\n            glossaryDefinitionDescriptor,\r\n            glossaryDefinitionDialogDescriptor\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.glossaryDefinitionDetail {\r\n    div {\r\n        ul {\r\n            list-style: none;\r\n            padding: 0;\r\n            display: flex;\r\n            flex-direction: column;\r\n            li {\r\n                display: inline-flex;\r\n                justify-content: flex-start;\r\n                min-height: 40px;\r\n                &:nth-child(even) {\r\n                    background-color: var(--kn-list-item-alternated-background-color);\r\n                }\r\n                span {\r\n                    height: 40px;\r\n                    display: flex;\r\n                    justify-content: flex-start;\r\n                    align-items: center;\r\n                    &:first-child {\r\n                        font-weight: 600;\r\n                        padding-left: 10px;\r\n                        text-transform: capitalize;\r\n                        width: 150px;\r\n                        align-items: center;\r\n                    }\r\n                    &:nth-child(2) {\r\n                        flex: 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    p {\r\n        margin: 1rem 0 1rem 1.5rem;\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <Dialog :header=\"$tc('managers.glossary.common.word', 1)\" :breakpoints=\"glossaryDefinitionDialogDescriptor.dialog.breakpoints\" :style=\"glossaryDefinitionDialogDescriptor.dialog.style\" :visible=\"visible\" :modal=\"true\" :closable=\"false\" class=\"p-fluid kn-dialog--toolbar--primary\">\r\n        <div class=\"p-mt-3\">\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-4 p-mb-3\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"word\"\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            v-model.trim=\"v$.word.WORD.$model\"\r\n                            maxLength=\"100\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.word.WORD.$invalid && v$.word.WORD.$dirty\r\n                            }\"\r\n                            @blur=\"v$.word.WORD.$touch()\"\r\n                        />\r\n                        <label for=\"word\" class=\"kn-material-input-label\">{{ $t('managers.glossary.common.word', 1) }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.word.WORD\" :additionalTranslateParams=\"{ fieldName: $tc('managers.glossary.common.word', 1) }\"></KnValidationMessages>\r\n                </div>\r\n                <div class=\"p-field p-col-4\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown id=\"status\" class=\"kn-material-input\" v-model=\"word.STATE\" :options=\"tState\" optionValue=\"id\" optionLabel=\"name\" />\r\n\r\n                        <label for=\"status\" class=\"kn-material-input-label\"> {{ $t('managers.glossary.common.status') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col-4\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown id=\"category\" class=\"kn-material-input\" v-model=\"word.CATEGORY\" :options=\"tCategory\" optionValue=\"id\" optionLabel=\"name\" />\r\n                        <label for=\"category\" class=\"kn-material-input-label\"> {{ $t('common.category') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col-12\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"description\"\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            v-model=\"v$.word.DESCR.$model\"\r\n                            maxLength=\"500\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.word.DESCR.$invalid && v$.word.DESCR.$dirty\r\n                            }\"\r\n                            @blur=\"v$.word.DESCR.$touch()\"\r\n                        />\r\n                        <label for=\"description\" class=\"kn-material-input-label\">{{ $t('common.description') }} *</label>\r\n                    </span>\r\n                    <KnValidationMessages class=\"p-mt-1\" :vComp=\"v$.word.DESCR\" :additionalTranslateParams=\"{ fieldName: $t('common.description') }\"></KnValidationMessages>\r\n                </div>\r\n                <div class=\"p-field p-col-12\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText id=\"formula\" class=\"kn-material-input\" type=\"text\" v-model=\"word.FORMULA\" maxLength=\"500\" />\r\n                        <label for=\"formula\" class=\"kn-material-input-label\">{{ $t('managers.glossary.common.formula') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col-12\">\r\n                    <span class=\"p-float-label\">\r\n                        <AutoComplete id=\"link\" class=\"kn-material-input\" :multiple=\"true\" v-model=\"word.LINK\" :suggestions=\"availableWords\" @complete=\"searchWord($event)\" field=\"WORD\"></AutoComplete>\r\n                        <label for=\"link\" class=\"kn-material-input-label\">{{ $t('managers.glossary.common.link') }} </label>\r\n                    </span>\r\n                </div>\r\n            </form>\r\n            <!-- <AttributesTable></AttributesTable> -->\r\n        </div>\r\n        <template #footer>\r\n            <Button :label=\"$t('common.cancel')\" @click=\"closeDialog\" class=\"kn-button kn-button--secondary\" />\r\n            <Button :label=\"$t('common.save')\" @click=\"saveWord\" class=\"kn-button kn-button--primary\" :disabled=\"buttonDisabled\" />\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { iWord } from '../GlossaryDefinition'\r\nimport { createValidations } from '@/helpers/commons/validationHelper'\r\nimport { AxiosResponse } from 'axios'\r\nimport Dialog from 'primevue/dialog'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport AutoComplete from 'primevue/autocomplete'\r\n//import AttributesTable from './tables/GlossaryDefinitionAttributesTable.vue'\r\nimport glossaryDefinitionDialogDescriptor from './GlossaryDefinitionDialogDescriptor.json'\r\nimport glossaryDefinitionDescriptor from '../GlossaryDefinitionDescriptor.json'\r\nimport glossaryDefinitionDialogValidationDescriptor from './GlossaryDefinitionDialogValidationDescriptor.json'\r\nimport useValidate from '@vuelidate/core'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport mainStore from '../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'edit-word',\r\n    components: {\r\n        Dialog,\r\n        Dropdown,\r\n        AutoComplete,\r\n        KnValidationMessages\r\n        //AttributesTable\r\n    },\r\n    props: {\r\n        visible: {\r\n            type: Boolean,\r\n            required: true\r\n        },\r\n        propWord: {\r\n            type: Object,\r\n            required: false\r\n        },\r\n        state: {\r\n            type: Array,\r\n            required: true\r\n        },\r\n        category: {\r\n            type: Array,\r\n            required: true\r\n        },\r\n        selectedGlossaryId: {\r\n            type: Number\r\n        }\r\n    },\r\n    emits: ['close', 'saved', 'reloadTree'],\r\n    data() {\r\n        return {\r\n            glossaryDefinitionDialogDescriptor,\r\n            glossaryDefinitionDialogValidationDescriptor,\r\n            glossaryDefinitionDescriptor,\r\n            word: {} as iWord,\r\n            tState: [] as any,\r\n            tCategory: [] as any,\r\n            oldWordName: null as any,\r\n            filteredWords: [] as iWord[],\r\n            operation: 'insert',\r\n            v$: useValidate() as any\r\n        }\r\n    },\r\n    computed: {\r\n        buttonDisabled(): any {\r\n            return this.v$.$invalid\r\n        },\r\n        availableWords(): any {\r\n            if (this.word && this.word.LINK) {\r\n                return this.filteredWords.filter((word: iWord) => this.word && this.word.LINK && this.word.LINK.findIndex((link: any) => word.WORD_ID === link.WORD_ID) < 0)\r\n            }\r\n            return this.filteredWords\r\n        }\r\n    },\r\n    validations() {\r\n        const validationObject = {\r\n            word: createValidations('word', glossaryDefinitionDialogValidationDescriptor.validations.word)\r\n        }\r\n        return validationObject\r\n    },\r\n    watch: {\r\n        propWord() {\r\n            this.v$.$reset()\r\n            this.word = { ...this.propWord } as iWord\r\n            this.oldWordName = this.word.WORD\r\n        },\r\n        state() {\r\n            this.tState = this.state.map((s: any) => {\r\n                return {\r\n                    id: s.VALUE_ID,\r\n                    name: this.$t(glossaryDefinitionDescriptor.translation[s.VALUE_NM])\r\n                }\r\n            })\r\n        },\r\n        category() {\r\n            this.tCategory = this.category.map((c: any) => {\r\n                return {\r\n                    id: c.VALUE_ID,\r\n                    name: this.$t(glossaryDefinitionDescriptor.translation[c.VALUE_NM])\r\n                }\r\n            })\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    mounted() {\r\n        if (this.propWord) {\r\n            this.word = { ...this.propWord } as iWord\r\n            this.oldWordName = this.word.WORD\r\n        }\r\n        this.tState = this.state.map((s: any) => {\r\n            return {\r\n                id: s.VALUE_ID,\r\n                name: this.$t(glossaryDefinitionDescriptor.translation[s.VALUE_NM])\r\n            }\r\n        })\r\n        this.tCategory = this.state.map((c: any) => {\r\n            return {\r\n                id: c.VALUE_ID,\r\n                name: this.$t(glossaryDefinitionDescriptor.translation[c.VALUE_NM])\r\n            }\r\n        })\r\n    },\r\n    methods: {\r\n        async saveWord() {\r\n            if (this.word?.WORD_ID) {\r\n                this.operation = 'update'\r\n                this.word.oldWord = { WORD_ID: this.word.WORD_ID, WORD: this.oldWordName }\r\n                this.word.SaveOrUpdate = 'Update'\r\n            } else {\r\n                this.operation = 'insert'\r\n                this.word.NEWWORD = true\r\n                this.word.SaveOrUpdate = 'Save'\r\n            }\r\n\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + '1.0/glossary/business/addWord', this.word)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.$emit('saved')\r\n                    if (this.word.PARENT) {\r\n                        this.saveContent(response.data.id)\r\n                    }\r\n                    this.store.setInfo({\r\n                        title: this.$t(this.glossaryDefinitionDialogDescriptor.operation[this.operation].toastTitle),\r\n                        msg: this.$t(this.glossaryDefinitionDialogDescriptor.operation.success)\r\n                    })\r\n                })\r\n                .catch((error) => {\r\n                    this.store.setError({\r\n                        title: this.$t('managers.constraintManagment.saveError'),\r\n                        msg: error.message\r\n                    })\r\n                })\r\n        },\r\n        closeDialog() {\r\n            this.$emit('close')\r\n        },\r\n        async loadWords(word: string) {\r\n            this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/listWords?WORD=` + word).then((response: AxiosResponse<any>) => (this.filteredWords = response.data))\r\n        },\r\n        searchWord(event) {\r\n            this.loadWords(event.query)\r\n        },\r\n        async saveContent(wordId: number) {\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + '1.0/glossary/business/addContents', { GLOSSARY_ID: this.selectedGlossaryId, PARENT_ID: this.word.PARENT.CONTENT_ID, WORD_ID: wordId })\r\n                .then((response: AxiosResponse<any>) => {\r\n                    if (response.data.Status !== 'NON OK') {\r\n                        this.$emit('reloadTree')\r\n                    } else {\r\n                        this.store.setError({\r\n                            title: this.$t('common.error.generic'),\r\n                            msg: this.$t(this.glossaryDefinitionDescriptor.translation[response.data.Message])\r\n                        })\r\n                    }\r\n                })\r\n                .catch((response: AxiosResponse<any>) => {\r\n                    this.store.setError({\r\n                        title: this.$t('common.error.generic'),\r\n                        msg: response\r\n                    })\r\n                })\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div class=\"kn-page\">\r\n        <div class=\"kn-page-content p-grid p-m-0\">\r\n            <GlossaryDefinitionInfoDialog v-show=\"infoDialogVisible\" :visible=\"infoDialogVisible\" :contentInfo=\"contentInfo\" @close=\"infoDialogVisible = false\"></GlossaryDefinitionInfoDialog>\r\n\r\n            <div class=\"p-col-8 p-sm-8 p-md-9 p-p-0 p-m-0 kn-page\">\r\n                <GlossaryDefinitionDetail :reloadTree=\"reloadTree\" @infoClicked=\"showInfo\" @addWord=\"editWord(-1, $event)\"></GlossaryDefinitionDetail>\r\n            </div>\r\n\r\n            <div class=\"kn-list--column kn-list-border-left p-col-4 p-sm-4 p-md-3 p-p-0\">\r\n                <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                    <template #start>\r\n                        {{ $t('managers.glossary.glossaryDefinition.wordsList') }}\r\n                    </template>\r\n                    <template #end>\r\n                        <FabButton icon=\"fas fa-plus\" @click.stop=\"editWord(-1)\" data-test=\"new-button\" />\r\n                    </template>\r\n                </Toolbar>\r\n                <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar\" v-if=\"loading\" data-test=\"progress-bar\" />\r\n                <Listbox\r\n                    v-if=\"!loading\"\r\n                    class=\"kn-list--column\"\r\n                    :options=\"wordsList\"\r\n                    :filter=\"true\"\r\n                    :filterPlaceholder=\"$t('common.search')\"\r\n                    filterMatchMode=\"contains\"\r\n                    :filterFields=\"glossaryDefinitionDescriptor.filterFields\"\r\n                    :emptyFilterMessage=\"$t('common.info.noDataFound')\"\r\n                    data-test=\"words-list\"\r\n                >\r\n                    <template #empty>{{ $t('common.info.noDataFound') }}</template>\r\n                    <template #option=\"slotProps\">\r\n                        <div class=\"kn-list-item kn-draggable\" draggable=\"true\" @dragstart=\"onDragStart($event, slotProps.option)\" data-test=\"list-item\">\r\n                            <i class=\"pi pi-bars\"></i>\r\n                            <div class=\"kn-list-item-text\" @click.stop=\"editWord(slotProps.option.WORD_ID)\">\r\n                                <span>{{ slotProps.option.WORD }}</span>\r\n                            </div>\r\n                            <Button icon=\"pi pi-info-circle\" class=\"p-button-text p-button-rounded p-button-plain\" @click.stop=\"showInfo(slotProps.option)\" data-test=\"info-button\" />\r\n                            <Button icon=\"far fa-trash-alt\" class=\"p-button-text p-button-rounded p-button-plain\" @click.stop=\"deleteWordConfirm(slotProps.option.WORD_ID)\" data-test=\"delete-button\" />\r\n                        </div>\r\n                    </template>\r\n                </Listbox>\r\n            </div>\r\n        </div>\r\n        <GlossaryDefinitionWordEdit :visible=\"editWordDialogVisible\" @close=\"editWordDialogVisible = false\" @saved=\"wordSaved\" :state=\"state\" :category=\"category\" :propWord=\"contentInfo\" :selectedGlossaryId=\"selectedGlossaryId\" @reloadTree=\"reloadTree = !reloadTree\"></GlossaryDefinitionWordEdit>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { iWord } from './GlossaryDefinition'\r\nimport { AxiosResponse } from 'axios'\r\nimport FabButton from '@/components/UI/KnFabButton.vue'\r\nimport Listbox from 'primevue/listbox'\r\nimport glossaryDefinitionDescriptor from './GlossaryDefinitionDescriptor.json'\r\nimport GlossaryDefinitionDetail from './GlossaryDefinitionDetail.vue'\r\nimport GlossaryDefinitionInfoDialog from './dialogs/GlossaryDefinitionInfoDialog.vue'\r\nimport GlossaryDefinitionWordEdit from './dialogs/GlossaryDefinitionWordEdit.vue'\r\nimport mainStore from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'glossary-definition',\r\n    components: {\r\n        FabButton,\r\n        Listbox,\r\n        GlossaryDefinitionDetail,\r\n        GlossaryDefinitionInfoDialog,\r\n        GlossaryDefinitionWordEdit\r\n    },\r\n    data() {\r\n        return {\r\n            glossaryDefinitionDescriptor,\r\n            wordsList: [] as iWord[],\r\n            contentInfo: null as any,\r\n            infoDialogVisible: false,\r\n            state: [] as any,\r\n            category: [] as any,\r\n            selectedGlossaryId: null as any,\r\n            user: {} as any,\r\n            reloadTree: false,\r\n            loading: false,\r\n            editWordDialogVisible: false\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    async created() {\r\n        await this.loadPage()\r\n    },\r\n    methods: {\r\n        async loadPage() {\r\n            this.loading = true\r\n            await this.loadWordsList()\r\n            await this.loadState()\r\n            await this.loadCategory()\r\n            this.loading = false\r\n        },\r\n        async loadWordsList() {\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/listWords?Page=1&ItemPerPage=`).then((response: AxiosResponse<any>) => (this.wordsList = response.data))\r\n        },\r\n        async loadState() {\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `domains/listValueDescriptionByType?DOMAIN_TYPE=GLS_STATE`).then((response: AxiosResponse<any>) => (this.state = response.data))\r\n        },\r\n        async loadCategory() {\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `domains/listValueDescriptionByType?DOMAIN_TYPE=GLS_CATEGORY`).then((response: AxiosResponse<any>) => (this.category = response.data))\r\n        },\r\n        async showInfo(content: any) {\r\n            this.loading = true\r\n            const url = content.CONTENT_ID ? `1.0/glossary/getContent?CONTENT_ID=${content.CONTENT_ID}` : `1.0/glossary/getWord?WORD_ID=${content.WORD_ID}`\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.contentInfo = response.data\r\n                    this.infoDialogVisible = true\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        deleteWordConfirm(wordId: number) {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.toast.deleteTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => {\r\n                    this.deleteWord(wordId)\r\n                }\r\n            })\r\n        },\r\n        async deleteWord(wordId: number) {\r\n            await this.$http.post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/business/deleteWord?WORD_ID=${wordId}`).then(() => {\r\n                this.store.setInfo({\r\n                    title: this.$t('common.toast.deleteTitle'),\r\n                    msg: this.$t('common.toast.deleteSuccess')\r\n                })\r\n                this.$router.push('/glossary-definition')\r\n                this.loadWordsList()\r\n            })\r\n        },\r\n        onDragStart(event: any, word: iWord) {\r\n            event.dataTransfer.setData('text/plain', JSON.stringify(word))\r\n            event.dataTransfer.dropEffect = 'move'\r\n            event.dataTransfer.effectAllowed = 'move'\r\n        },\r\n        async editWord(id: number, event: any) {\r\n            if (id != -1) {\r\n                await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `1.0/glossary/getWord?WORD_ID=${id}`).then((response: AxiosResponse<any>) => {\r\n                    this.contentInfo = response.data\r\n                })\r\n            } else this.contentInfo = { LINK: [], SBI_GL_WORD_ATTR: [], STATE: '', CATEGORY: '', FORMULA: '' }\r\n            if (event) {\r\n                this.contentInfo.PARENT = event.parent\r\n                this.selectedGlossaryId = event.glossaryId\r\n            }\r\n\r\n            this.editWordDialogVisible = true\r\n        },\r\n        wordSaved() {\r\n            this.editWordDialogVisible = false\r\n            this.loadWordsList()\r\n        }\r\n    }\r\n})\r\n</script>\r\n"],"names":["_sfc_main","Dialog","Textarea","_hoisted_1","_hoisted_3","_hoisted_5","_hoisted_7","_hoisted_8","_hoisted_10","_hoisted_11","_openBlock","_createBlock","_normalizeStyle","_withCtx","_createVNode","_createElementVNode","_hoisted_2","_normalizeClass","_toDisplayString","_createElementBlock","_hoisted_4","_createCommentVNode","_hoisted_6","_hoisted_9","_hoisted_12","Card","Dropdown","FabButton","Message","Tree","mainStore","_hoisted_13","_hoisted_14","_hoisted_15","_withModifiers","_hoisted_17","_withDirectives","Chip","_Fragment","_renderList","AutoComplete","useValidate","Listbox","_vShow"],"mappings":"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"}