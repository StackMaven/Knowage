{"version":3,"file":"ResourceManagement-13a739b5.js","sources":["../../../../modules/managers/resourceManagement/ResourceManagementMetadataDialog.vue","../../../../modules/managers/resourceManagement/ResourceManagementImportFileDialog.vue","../../../../modules/managers/resourceManagement/ResourceManagementDetail.vue","../../../../modules/managers/resourceManagement/ResourceManagementCreateFolderDialog.vue","../../../../modules/managers/resourceManagement/ResourceManagement.vue"],"sourcesContent":["<template>\r\n    <div class=\"managerDetail\">\r\n        <Dialog class=\"kn-dialog--toolbar--primary knMetadataDialog\" v-bind:visible=\"visibility\" footer=\"footer\" :header=\"$t('managers.resourceManagement.metadata.dialog.title')\" :closable=\"false\" modal @id=\"loadMetadata\">\r\n            <div class=\"p-grid p-m-3 p-fluid p-ai-start\">\r\n                <span class=\"p-float-label p-col-4\">\r\n                    <InputText id=\"name\" class=\"kn-material-input\" type=\"text\" v-model=\"metadata.name\" @change=\"setDirty\" />\r\n                    <label class=\"kn-material-input-label\" for=\"name\">{{ $t('common.name') }}</label>\r\n                </span>\r\n\r\n                <span class=\"p-float-label p-col-2\">\r\n                    <InputText id=\"name\" class=\"kn-material-input\" type=\"text\" v-model=\"metadata.version\" @change=\"setDirty\" />\r\n                    <label class=\"kn-material-input-label\" for=\"name\">{{ $t(descriptor.metadata.version.label) }}</label>\r\n                </span>\r\n\r\n                <span class=\"p-float-label p-col-3\">\r\n                    <Dropdown id=\"typeOfAnalytics\" class=\"kn-material-input\" v-model=\"metadata.typeOfAnalytics\" @change=\"setDirty\" :options=\"translatedOptions\" optionLabel=\"name\" optionValue=\"value\"> </Dropdown>\r\n                    <label class=\"kn-material-input-label\" for=\"outputType\">{{ $t(descriptor.metadata.typeOfAnalytics.label) }}</label>\r\n                </span>\r\n                <span class=\"p-col-3 p-d-flex p-jc-end\">\r\n                    <label class=\"kn-material-input-label p-mr-2\" for=\"name\">{{ $t(descriptor.metadata.openSource.label) }}</label>\r\n                    <InputSwitch v-model=\"metadata.openSource\" @change=\"setDirty\" />\r\n                </span>\r\n                <span class=\"p-float-label p-col-8 descriptionTextArea\">\r\n                    <Textarea v-model=\"metadata.description\" class=\"kn-material-input\" style=\"resize: none\" id=\"description\" rows=\"5\" @change=\"setDirty\" />\r\n                    <label class=\"kn-material-input-label\" for=\"description\">{{ $t('common.description') }}</label>\r\n                </span>\r\n                <span class=\"p-col-4 kn-height-full\">\r\n                    <span class=\"p-d-flex p-jc-end p-ai-center\">\r\n                        <input id=\"inputImage\" type=\"file\" @change=\"uploadFile\" accept=\"image/png, image/jpeg\" />\r\n                        <label for=\"inputImage\" v-tooltip.bottom=\"$t('common.upload')\">\r\n                            <i class=\"p-button-text p-button-sm p-button-rounded p-button-plain p-p-0 pi pi-upload\" />\r\n                        </label>\r\n                        <i class=\"p-button-text p-button-sm p-button-rounded p-button-plain p-p-0 pi pi-times p-ml-2\" v-if=\"metadata.image\" @click=\"removeImage\" v-tooltip.bottom=\"$t('common.delete')\" />\r\n                    </span>\r\n                    <div class=\"imageContainer p-d-flex p-jc-center p-ai-center\">\r\n                        <i class=\"far fa-image fa-5x icon\" v-if=\"!metadata.image\" />\r\n                        <img :src=\"metadata.image\" v-if=\"metadata.image\" height=\"100%\" class=\"kn-no-select\" />\r\n                    </div>\r\n                </span>\r\n            </div>\r\n\r\n            <Accordion class=\"p-col-12\">\r\n                <AccordionTab :header=\"$t(descriptor.metadata.accuracyAndPerformance.label)\">\r\n                    <Textarea v-model=\"metadata.accuracyAndPerformance\" class=\"kn-material-input metadataTextArea\" style=\"resize: none\" id=\"accuracyAndPerformance\" rows=\"3\" @change=\"setDirty\" />\r\n                </AccordionTab>\r\n                <AccordionTab :header=\"$t(descriptor.metadata.usageOfTheModel.label)\">\r\n                    <Textarea v-model=\"metadata.usageOfTheModel\" class=\"kn-material-input metadataTextArea\" style=\"resize: none\" id=\"usageOfTheModel\" rows=\"3\" @change=\"setDirty\" />\r\n                </AccordionTab>\r\n                <AccordionTab :header=\"$t(descriptor.metadata.formatOfData.label)\">\r\n                    <Textarea v-model=\"metadata.formatOfData\" class=\"kn-material-input metadataTextArea\" style=\"resize: none\" id=\"formatOfData\" rows=\"3\" @change=\"setDirty\" />\r\n                </AccordionTab>\r\n            </Accordion>\r\n\r\n            <template #footer>\r\n                <Button class=\"kn-button kn-button--secondary\" @click=\"closeDialog\">{{ $t('common.close') }} </Button>\r\n                <Button class=\"kn-button kn-button--primary\" @click=\"saveMetadata\" :disabled=\"!dirty\"> {{ $t('common.save') }}</Button>\r\n            </template>\r\n        </Dialog>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { AxiosResponse } from 'axios'\r\nimport Dialog from 'primevue/dialog'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport { mapState } from 'pinia'\r\nimport InputSwitch from 'primevue/inputswitch'\r\nimport resourceManagementDescriptor from './ResourceManagementDescriptor.json'\r\nimport Textarea from 'primevue/textarea'\r\n\r\nimport Accordion from 'primevue/accordion'\r\nimport AccordionTab from 'primevue/accordiontab'\r\nimport { iModelMetadataTemplate } from './ResourceManagement'\r\nimport mainStore from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'metadata-dialog',\r\n    components: { Dialog, Dropdown, InputSwitch, Accordion, AccordionTab, Textarea },\r\n    data() {\r\n        return {\r\n            dirty: false,\r\n            loading: true,\r\n            metadata: {} as iModelMetadataTemplate,\r\n            checked: false,\r\n            descriptor: resourceManagementDescriptor,\r\n            translatedOptions: Array<any>()\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.loadMetadata()\r\n        let notTranslatedOptions = this.descriptor.metadata.typeOfAnalytics.options\r\n        for (var idx in notTranslatedOptions) {\r\n            let translatedOption = notTranslatedOptions[idx]\r\n            translatedOption.name = this.$t(translatedOption.name)\r\n            this.translatedOptions.push(translatedOption)\r\n        }\r\n    },\r\n    props: {\r\n        id: String,\r\n        visibility: Boolean\r\n    },\r\n    emits: ['update:visibility'],\r\n    methods: {\r\n        closeDialog() {\r\n            this.$emit('update:visibility', false)\r\n        },\r\n        loadMetadata() {\r\n            this.loading = true\r\n\r\n            if (this.id) {\r\n                this.$http\r\n                    .get(import.meta.env.VITE_API_PATH + `2.0/resources/files/metadata?key=` + this.id)\r\n                    .then((response: AxiosResponse<any>) => {\r\n                        this.metadata = response.data\r\n                    })\r\n                    .catch(() => {\r\n                        this.store.setError({\r\n                            title: this.$t('common.toast.metadata'),\r\n                            msg: this.$t('common.toast.metadataLoadingFailed')\r\n                        })\r\n                    })\r\n            }\r\n            this.loading = false\r\n        },\r\n        removeImage() {\r\n            this.metadata.image = ''\r\n            this.setDirty()\r\n        },\r\n        saveMetadata(): void {\r\n            this.loading = true\r\n            if (this.id) {\r\n                this.$http\r\n                    .post(import.meta.env.VITE_API_PATH + `2.0/resources/files/metadata?key=` + this.id, this.metadata, {\r\n                        responseType: 'arraybuffer', // important...because we need to convert it to a blob. If we don't specify this, response.data will be the raw data. It cannot be converted to blob directly.\r\n\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        }\r\n                    })\r\n                    .then(() => {\r\n                        this.store.setInfo({\r\n                            title: this.$t('common.toast.updateTitle'),\r\n                            msg: this.$t('common.toast.updateSuccess')\r\n                        })\r\n                    })\r\n                    .catch((error) => {\r\n                        this.store.setError({\r\n                            title: this.$t('common.toast.updateTitle'),\r\n                            msg: this.$t(error)\r\n                        })\r\n                    })\r\n            }\r\n            this.loading = false\r\n            this.closeDialog()\r\n        },\r\n        setDirty(): void {\r\n            this.dirty = true\r\n        },\r\n        uploadFile(event): void {\r\n            const reader = new FileReader()\r\n            let self = this\r\n            reader.addEventListener(\r\n                'load',\r\n                function () {\r\n                    self.metadata.image = reader.result || ''\r\n                },\r\n                false\r\n            )\r\n            if (event.srcElement.files[0] && event.srcElement.files[0].size < import.meta.env.VITE_MAX_UPLOAD_IMAGE_SIZE) {\r\n                reader.readAsDataURL(event.srcElement.files[0])\r\n                this.setDirty()\r\n            } else this.store.setError({ title: this.$t('common.error.uploading'), msg: this.$t('common.error.exceededSize', { size: '(200KB)' }) })\r\n        }\r\n    },\r\n    computed: {\r\n        ...mapState(mainStore, {\r\n            locale: 'locale'\r\n        })\r\n    },\r\n    watch: {\r\n        id() {\r\n            this.loadMetadata()\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n#inputImage {\r\n    display: none;\r\n}\r\n.knMetadataDialog {\r\n    &:deep(.p-dialog-content) {\r\n        width: 600px;\r\n        min-width: 600px;\r\n        max-width: 1200px;\r\n\r\n        height: 600px;\r\n        min-height: 600px;\r\n        max-height: 900px;\r\n    }\r\n\r\n    .p-fileupload-buttonbar {\r\n        border: none;\r\n\r\n        .p-button:not(.p-fileupload-choose) {\r\n            display: none;\r\n        }\r\n\r\n        .p-fileupload-choose {\r\n            @extend .kn-button--primary;\r\n        }\r\n    }\r\n\r\n    .metadataTextArea {\r\n        width: 100%;\r\n    }\r\n    .imageContainer {\r\n        height: 100%;\r\n        .icon {\r\n            color: var(--kn-color-secondary);\r\n        }\r\n        img {\r\n            height: 150px;\r\n            max-width: 300px;\r\n        }\r\n    }\r\n\r\n    .descriptionTextArea {\r\n        height: 200px;\r\n\r\n        &:deep(.p-inputtextarea) {\r\n            height: 200px;\r\n        }\r\n    }\r\n}\r\n</style>\r\n","<template>\r\n    <Dialog class=\"kn-dialog--toolbar--primary importFileDialog\" v-bind:visible=\"visibility\" footer=\"footer\" :header=\"$t('common.import')\" :closable=\"false\" modal>\r\n        <span v-if=\"checkExistingFile()\">\r\n            <Message severity=\"warn\">{{ $t('managers.resourceManagement.uploadFile.fileWillBeOverwritten') }}</Message>\r\n        </span>\r\n        <span v-if=\"notifyExtractionWarning()\">\r\n            <Message severity=\"warn\">{{ $t('managers.resourceManagement.uploadFile.fileAndFoldersContentWillBeOverwritten') }}</Message>\r\n        </span>\r\n        <FileUpload name=\"demo[]\" :chooseLabel=\"$t('common.choose')\" :customUpload=\"true\" @uploader=\"onUpload\" @remove=\"onDelete\" auto=\"true\" :maxFileSize=\"50000000\" :multiple=\"false\" :fileLimit=\"1\">\r\n            <template #empty>\r\n                <p>{{ $t('common.dragAndDropFileHere') }}</p>\r\n            </template>\r\n        </FileUpload>\r\n\r\n        <span :class=\"notifyExtractionWarning() || checkExistingFile() ? 'inputFileToggleWithToolbar' : 'inputFileToggle'\" v-if=\"isArchive()\">\r\n            <label for=\"active\" class=\"kn-material-input-label p-mr-3\"> {{ $t('managers.resourceManagement.extract') }}</label>\r\n            <InputSwitch v-model=\"checked\" />\r\n        </span>\r\n        <template #footer>\r\n            <Button class=\"p-button-text kn-button\" :label=\"$t('common.cancel')\" @click=\"closeDialog\" />\r\n            <Button class=\"kn-button kn-button--primary\" v-t=\"'common.import'\" :disabled=\"uploadedFiles && uploadedFiles.length == 0\" @click=\"startImportFile\" />\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { AxiosResponse } from 'axios'\r\nimport { defineComponent } from 'vue'\r\nimport Dialog from 'primevue/dialog'\r\nimport FileUpload from 'primevue/fileupload'\r\nimport InputSwitch from 'primevue/inputswitch'\r\nimport resourceManagementDescriptor from './ResourceManagementDescriptor.json'\r\nimport { PropType } from 'vue'\r\nimport { IFileTemplate } from './ResourceManagement'\r\nimport Message from 'primevue/message'\r\nimport mainStore from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'import-file-dialog',\r\n    components: { Dialog, FileUpload, InputSwitch, Message },\r\n    props: {\r\n        path: String,\r\n        visibility: Boolean,\r\n        existingFiles: Array as PropType<Array<IFileTemplate>>\r\n    },\r\n    data() {\r\n        return { checked: false, descriptor: resourceManagementDescriptor, uploadedFiles: [], loading: false }\r\n    },\r\n    emits: ['update:visibility', 'fileUploaded'],\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    methods: {\r\n        isArchive() {\r\n            // eslint-disable-next-line\r\n            // @ts-ignore\r\n            return this.uploadedFiles.length == 1 && (this.uploadedFiles[0].type == 'application/zip' || this.uploadedFiles[0].type == 'application/x-zip-compressed')\r\n        },\r\n        closeDialog(): void {\r\n            this.uploadedFiles = []\r\n            this.$emit('update:visibility', false)\r\n        },\r\n        onDelete(idx) {\r\n            this.uploadedFiles.splice(idx)\r\n        },\r\n        onUpload(data) {\r\n            // eslint-disable-next-line\r\n            // @ts-ignore\r\n            this.uploadedFiles[0] = data.files[0]\r\n        },\r\n        checkExistingFile() {\r\n            let found = false\r\n            if (this.existingFiles && this.uploadedFiles[0]) {\r\n                for (var idx in this.existingFiles) {\r\n                    let element = this.existingFiles[idx]\r\n                    // eslint-disable-next-line\r\n                    // @ts-ignore\r\n                    if (element.name === this.uploadedFiles[0].name) {\r\n                        found = true\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n\r\n            return found && !this.checked\r\n        },\r\n        notifyExtractionWarning() {\r\n            return this.isArchive() && this.checked\r\n        },\r\n        async startImportFile() {\r\n            if (this.uploadedFiles[0] && this.path) {\r\n                this.loading = true\r\n\r\n                var formData = new FormData()\r\n                formData.append('file', this.uploadedFiles[0])\r\n                formData.append('key', this.path)\r\n                let checkedAsString = this.checked ? 'true' : 'false'\r\n                formData.append('extract', checkedAsString)\r\n                await this.$http\r\n                    .post(import.meta.env.VITE_API_PATH + '2.0/resources/files/uploadFile', formData, {\r\n                        headers: {\r\n                            'Content-Type': 'multipart/form-data'\r\n                        }\r\n                    })\r\n                    .then(\r\n                        (response: AxiosResponse<any>) => {\r\n                            if (response.data.errors) {\r\n                                this.store.setError({ title: this.$t('common.error.uploading'), msg: this.$t('managers.resourceManagement.upload.completedWithErrors') })\r\n                            } else {\r\n                                this.store.setInfo({ title: this.$t('common.uploading'), msg: this.$t('common.toast.uploadSuccess') })\r\n                            }\r\n                        },\r\n                        (error) => this.store.setError({ title: this.$t('common.error.uploading'), msg: this.$t(error) })\r\n                    )\r\n\r\n                    .finally(() => {\r\n                        this.loading = false\r\n                        this.closeDialog()\r\n                        this.uploadedFiles = []\r\n                        this.$emit('fileUploaded')\r\n                    })\r\n            } else {\r\n                this.store.setWarning({ title: this.$t('common.uploading'), msg: this.$t('managers.widgetGallery.noFileProvided') })\r\n            }\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\">\r\n.importFileDialog {\r\n    position: relative;\r\n    min-width: 600px;\r\n    width: 60%;\r\n    max-width: 1200px;\r\n\r\n    .p-fileupload-buttonbar {\r\n        border: none;\r\n\r\n        .p-button:not(.p-fileupload-choose) {\r\n            display: none;\r\n        }\r\n\r\n        .p-fileupload-choose {\r\n            @extend .kn-button--primary;\r\n        }\r\n    }\r\n\r\n    .p-dialog-content {\r\n        position: relative;\r\n    }\r\n\r\n    .functionalityTable {\r\n        min-height: 400px;\r\n        height: 40%;\r\n    }\r\n}\r\n\r\n.inputFileToggle {\r\n    right: 20px;\r\n    position: absolute;\r\n    top: 20px;\r\n}\r\n.inputFileToggleWithToolbar {\r\n    @extend .inputFileToggle;\r\n\r\n    top: 80px;\r\n}\r\n</style>\r\n","<template>\r\n    <div class=\"kn-page\">\r\n        <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-m-0\">\r\n            <template #start\r\n                ><span class=\"cleanText\">{{ folder.label }}</span></template\r\n            >\r\n\r\n            <template #end>\r\n                <Button icon=\"pi pi-times\" class=\"p-button-text p-button-rounded p-button-plain\" v-tooltip.bottom=\"$t('common.close')\" @click=\"closeDetail()\" />\r\n            </template>\r\n        </Toolbar>\r\n        <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar\" v-if=\"loading\" />\r\n        <Breadcrumb :home=\"home\" :model=\"items\"> </Breadcrumb>\r\n        <div class=\"kn-page-content\">\r\n            <Toolbar v-if=\"selectedFiles.length > 0\" class=\"kn-toolbar kn-toolbar--default p-m-0\">\r\n                <template #start>{{ $tc('managers.resourceManagement.selectedFiles', selectedFiles.length, { num: selectedFiles.length }) }}</template>\r\n                <template #end>\r\n                    <Button icon=\"fas fa-download\" class=\"p-button-text p-button-rounded p-button-plain kn-button-light\" @click=\"downloadFiles\" />\r\n                    <Button icon=\"fas fa-trash\" class=\"p-button-text p-button-rounded p-button-plain kn-button-light\" @click=\"showDeleteDialog\" />\r\n                </template>\r\n            </Toolbar>\r\n\r\n            <ResourceManagementImportFileDialog v-model:visibility=\"importFile\" v-bind:path=\"folder.key\" @fileUploaded=\"fileUploaded\" v-bind:existingFiles=\"files\" />\r\n\r\n            <div class=\"managerDetail p-grid p-m-0 kn-height-full\">\r\n                <div class=\"p-col\">\r\n                    <DataTable\r\n                        ref=\"dt\"\r\n                        :value=\"files\"\r\n                        :loading=\"loading\"\r\n                        v-model:selection=\"selectedFiles\"\r\n                        v-model:filters=\"filters\"\r\n                        class=\"p-datatable-sm kn-table\"\r\n                        :paginator=\"true\"\r\n                        :rows=\"10\"\r\n                        paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\r\n                        :rowsPerPageOptions=\"[10, 15, 20]\"\r\n                        responsiveLayout=\"stack\"\r\n                        breakpoint=\"960px\"\r\n                        :currentPageReportTemplate=\"$t('common.table.footer.paginated', { first: '{first}', last: '{last}', totalRecords: '{totalRecords}' })\"\r\n                        :globalFilterFields=\"['name', 'type', 'tags']\"\r\n                    >\r\n                        <template #header>\r\n                            <div class=\"p-grid p-pt-0\">\r\n                                <div class=\"p-col-10\">\r\n                                    <span class=\"p-input-icon-left p-col p-p-0\">\r\n                                        <i class=\"pi pi-search\" />\r\n                                        <InputText class=\"kn-material-input\" type=\"text\" v-model=\"filters['global'].value\" :placeholder=\"$t('common.search')\" badge=\"0\"\r\n                                    /></span>\r\n                                </div>\r\n                                <div class=\"p-col p-d-flex p-jc-end p-ai-center\">\r\n                                    <Button icon=\"fas fa-sync-alt\" class=\"p-button-text p-button-sm p-button-rounded p-button-plain p-p-0\" @click=\"loadSelectedFolder()\" :disabled=\"selectedFiles.length > 0\" />\r\n                                    <Button icon=\"fas fa-upload\" class=\"p-button-text p-button-sm p-button-rounded p-button-plain p-p-0\" @click=\"openImportFileDialog\" :disabled=\"selectedFiles.length > 0\" />\r\n                                </div>\r\n                            </div>\r\n                        </template>\r\n                        <template #empty>\r\n                            {{ $t('common.info.noDataFound') }}\r\n                        </template>\r\n                        <template #loading>\r\n                            {{ $t('common.info.dataLoading') }}\r\n                        </template>\r\n\r\n                        <Column v-for=\"col in getOrderedColumns()\" :field=\"col.field\" :header=\"$t(col.header)\" class=\"kn-truncated\" :key=\"col.position\" :style=\"col.style\" :selectionMode=\"col.field == 'selectionMode' ? 'multiple' : ''\" :exportable=\"col.field == 'selectionMode' ? false : ''\">\r\n                            <template #body=\"{ data }\" v-if=\"col.field != 'selectionMode'\">\r\n                                <span v-if=\"col.displayType == 'fileSize'\">\r\n                                    {{ getDataValue(data.size) }}\r\n                                </span>\r\n                                <span v-else-if=\"col.displayType == 'date'\">\r\n                                    {{ getDate(data.lastModified) }}\r\n                                </span>\r\n                                <span v-else>\r\n                                    <span class=\"kn-truncated\" :title=\"data[col.field]\">{{ data[col.field] }}</span>\r\n                                </span>\r\n                            </template>\r\n                        </Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { AxiosResponse } from 'axios'\r\nimport descriptor from './ResourceManagementDescriptor.json'\r\nimport Column from 'primevue/column'\r\nimport DataTable from 'primevue/datatable'\r\nimport { IFileTemplate } from '@/modules/managers/resourceManagement/ResourceManagement'\r\nimport { FilterMatchMode, FilterOperator } from 'primevue/api'\r\nimport { byteToHumanFriendlyFormat } from '@/helpers/commons/fileHelper'\r\nimport { ITableColumn } from '../../commons/ITableColumn'\r\nimport { formatDate } from '@/helpers/commons/localeHelper'\r\nimport Breadcrumb from 'primevue/breadcrumb'\r\nimport ResourceManagementImportFileDialog from './ResourceManagementImportFileDialog.vue'\r\nimport { downloadDirectFromResponse } from '@/helpers/commons/fileHelper'\r\nimport mainStore from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    components: { Breadcrumb, Column, DataTable, ResourceManagementImportFileDialog },\r\n    props: {\r\n        folder: Object\r\n    },\r\n    emits: ['touched', 'closed', 'inserted', 'folderCreated', 'fileUploaded'],\r\n    data() {\r\n        return {\r\n            descriptor,\r\n            loading: false,\r\n            touched: false,\r\n            files: [] as Array<IFileTemplate>,\r\n            selectedFiles: [] as Array<IFileTemplate>,\r\n            filters: {\r\n                global: { value: null, matchMode: FilterMatchMode.CONTAINS },\r\n                name: { operator: FilterOperator.OR, constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }] },\r\n                size: { operator: FilterOperator.OR, constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }] },\r\n                lastModified: { operator: FilterOperator.OR, constraints: [{ value: null, matchMode: FilterMatchMode.CONTAINS }] }\r\n            },\r\n            home: { icon: 'pi pi-home' },\r\n            items: [] as Array<{ label: String }>,\r\n            folderName: '',\r\n            importFile: false,\r\n            selectedFolder: {} as any\r\n        }\r\n    },\r\n    computed: {},\r\n    beforeRouteUpdate() {\r\n        this.loadSelectedFolder()\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.loadSelectedFolder()\r\n    },\r\n    mounted() {},\r\n    methods: {\r\n        closeDetail() {\r\n            this.$emit('closed')\r\n        },\r\n        downloadFiles() {\r\n            this.$http\r\n                .post(import.meta.env.VITE_API_PATH + `2.0/resources/files/download`, this.getKeyAndFilenamesObj(), {\r\n                    responseType: 'arraybuffer', // important...because we need to convert it to a blob. If we don't specify this, response.data will be the raw data. It cannot be converted to blob directly.\r\n\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Accept: 'application/zip; charset=utf-8'\r\n                    }\r\n                })\r\n                .then((response: AxiosResponse<any>) => {\r\n                    downloadDirectFromResponse(response)\r\n                    this.selectedFiles = []\r\n                })\r\n                .catch((error) => {\r\n                    this.store.setError({\r\n                        title: this.$t('common.error.downloading'),\r\n                        msg: this.$t(error)\r\n                    })\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        getBreadcrumbs() {\r\n            this.items = []\r\n            let relativePath = this.getCurrentFolderPath()\r\n            if (relativePath) {\r\n                let pathFolders = relativePath.split('\\\\')\r\n                pathFolders.forEach((element) => {\r\n                    let obj = { label: element, to: null }\r\n                    this.items.push(obj)\r\n                })\r\n            }\r\n        },\r\n        getCurrentFolderPath() {\r\n            return this.folder ? this.folder.relativePath : undefined\r\n        },\r\n        getCurrentFolderKey() {\r\n            return this.folder ? '' + this.folder.key : undefined\r\n        },\r\n        getOrderedColumns(): Array<ITableColumn> {\r\n            let columns = this.descriptor['column']\r\n            columns.sort(function (a, b) {\r\n                if (a.position > b.position) return 1\r\n                if (a.position < b.position) return -1\r\n                return 0\r\n            })\r\n            return columns\r\n        },\r\n        getDataValue(data) {\r\n            return byteToHumanFriendlyFormat(data)\r\n        },\r\n        getDate(date) {\r\n            return formatDate(date, 'LLL')\r\n        },\r\n        async loadSelectedFolder() {\r\n            this.loading = true\r\n            this.files = []\r\n            this.selectedFiles = []\r\n            if (this.folder) {\r\n                await this.$http\r\n                    .get(import.meta.env.VITE_API_PATH + `2.0/resources/files` + '?key=' + this.folder.key)\r\n                    .then((response: AxiosResponse<any>) => {\r\n                        this.files = response.data\r\n                        this.getBreadcrumbs()\r\n                    })\r\n                    .catch((error) => {\r\n                        this.store.setError({\r\n                            title: this.$t('common.error.downloading'),\r\n                            msg: this.$t(error)\r\n                        })\r\n                    })\r\n                    .finally(() => (this.loading = false))\r\n            }\r\n        },\r\n        openImportFileDialog() {\r\n            this.importFile = !this.importFile\r\n        },\r\n        setDirty() {\r\n            this.touched = true\r\n            this.$emit('touched')\r\n        },\r\n        showDeleteDialog() {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.toast.deleteConfirmTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => this.deleteFiles()\r\n            })\r\n        },\r\n        deleteFiles() {\r\n            this.loading = true\r\n\r\n            this.$http\r\n                .delete(import.meta.env.VITE_API_PATH + `2.0/resources/files`, {\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    data: this.getKeyAndFilenamesObj()\r\n                })\r\n                .then(() => {\r\n                    this.selectedFiles = []\r\n                    this.loadSelectedFolder()\r\n                    this.store.setInfo({\r\n                        title: this.$t('common.toast.deleteTitle'),\r\n                        msg: this.$t('common.toast.deleteSuccess')\r\n                    })\r\n                })\r\n                .catch(() => {\r\n                    this.store.setError({\r\n                        title: this.$t('common.toast.deleteTitle'),\r\n                        msg: this.$t('common.error.deleting')\r\n                    })\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        getKeyAndFilenamesObj() {\r\n            let obj = {} as JSON\r\n            if (this.folder) {\r\n                obj['key'] = this.folder.key\r\n                obj['selectedFilesNames'] = []\r\n                for (var idx in this.selectedFiles) {\r\n                    obj['selectedFilesNames'].push(this.selectedFiles[idx].name)\r\n                }\r\n            }\r\n            return obj\r\n        },\r\n        fileUploaded() {\r\n            this.loadSelectedFolder()\r\n            this.$emit('fileUploaded')\r\n        }\r\n    },\r\n    watch: {\r\n        id(oldId, newId) {\r\n            if (oldId != newId) this.loadSelectedFolder()\r\n        },\r\n        folder() {\r\n            this.loading = true\r\n            /* this.v$.$reset() */\r\n            this.selectedFolder = { ...this.folder }\r\n            this.loadSelectedFolder()\r\n            this.loading = false\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.p-breadcrumb {\r\n    border: none;\r\n    border-radius: 0;\r\n    border-bottom: 1px solid var(--kn-list-border-color);\r\n\r\n    cursor: default !important;\r\n\r\n    &:deep(.p-menuitem-link) {\r\n        cursor: default !important;\r\n    }\r\n}\r\n.cleanText {\r\n    text-transform: none;\r\n}\r\n</style>\r\n","<template>\r\n    <Dialog class=\"kn-dialog--toolbar--primary createFolderDialog\" v-bind:visible=\"visibility\" footer=\"footer\" :header=\"$t('managers.resourceManagement.createFolder')\" :closable=\"false\" modal>\r\n        <Breadcrumb :home=\"home\" :model=\"items\"> </Breadcrumb>\r\n        <div class=\"createFolderDialogContent\">\r\n            <span class=\"p-float-label\">\r\n                <InputText class=\"folderNameInputText\" type=\"text\" v-model=\"folderName\" />\r\n                <label class=\"kn-material-input-label\" for=\"label\">{{ $t('managers.resourceManagement.foldernamePlaceholder') }}</label>\r\n            </span>\r\n        </div>\r\n        <template #footer>\r\n            <Button class=\"kn-button kn-button--secondary\" @click=\"closeDialog\"> {{ $t('common.cancel') }}</Button>\r\n            <Button class=\"kn-button kn-button--primary\" :disabled=\"folderName && folderName.length == 0\" @click=\"emitCreateFolder\"> {{ $t('common.save') }}</Button>\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport Breadcrumb from 'primevue/breadcrumb'\r\nimport Dialog from 'primevue/dialog'\r\nimport resourceManagementDescriptor from './ResourceManagementDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'import-file-dialog',\r\n    components: { Breadcrumb, Dialog },\r\n    props: {\r\n        visibility: Boolean,\r\n        path: String\r\n    },\r\n    emits: ['update:visibility', 'createFolder'],\r\n    data() {\r\n        return {\r\n            descriptor: resourceManagementDescriptor,\r\n            home: { icon: 'pi pi-home' },\r\n            items: [] as Array<{ label: String }>,\r\n            folderName: '',\r\n            loading: false\r\n        }\r\n    },\r\n    mounted() {\r\n        this.setBreadcrumbs()\r\n        this.folderName = ''\r\n    },\r\n    methods: {\r\n        closeDialog(): void {\r\n            this.folderName = ''\r\n            this.$emit('update:visibility', false)\r\n        },\r\n        emitCreateFolder(): void {\r\n            this.$emit('createFolder', this.folderName)\r\n            this.folderName = ''\r\n        },\r\n        setBreadcrumbs() {\r\n            this.folderName = ''\r\n            this.items = []\r\n\r\n            if (this.path) {\r\n                let pathFolders = this.path.split('\\\\', -1)\r\n                pathFolders.forEach((element) => {\r\n                    let obj = { label: element }\r\n                    this.items.push(obj)\r\n                })\r\n            }\r\n        }\r\n    },\r\n    watch: {\r\n        path(oldPath, newPath) {\r\n            if (oldPath != newPath) this.setBreadcrumbs()\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.createFolderDialog {\r\n    min-width: 600px;\r\n    width: 600px;\r\n    max-width: 1200px;\r\n\r\n    .p-fileupload-buttonbar {\r\n        border: none;\r\n        .p-button:not(.p-fileupload-choose) {\r\n            display: none;\r\n        }\r\n    }\r\n}\r\n.p-breadcrumb {\r\n    border: none;\r\n    border-radius: 0;\r\n    border-bottom: 1px solid var(--kn-list-border-color);\r\n\r\n    cursor: default !important;\r\n\r\n    &:deep(.p-menuitem-link) {\r\n        cursor: default !important;\r\n    }\r\n}\r\n\r\n.folderNameInputText {\r\n    width: 100%;\r\n}\r\n.createFolderDialogContent {\r\n    padding: 16px;\r\n}\r\n</style>\r\n","<template>\r\n    <div class=\"kn-page\">\r\n        <div class=\"kn-page-content p-grid p-m-0\">\r\n            <div class=\"p-col-4 p-sm-4 p-md-3 p-p-0 p-d-flex p-flex-column\">\r\n                <Toolbar class=\"kn-toolbar kn-toolbar--primary\">\r\n                    <template #start>\r\n                        {{ $t('managers.resourceManagement.title') }}\r\n                    </template>\r\n                    <template #end>\r\n                        <Button icon=\"fas fa-sync-alt\" class=\"p-button-text p-button-sm p-button-rounded p-button-plain p-p-0\" @click=\"loadPage(showHint, formVisible)\" />\r\n                        <Button icon=\"fas fa-folder-plus\" class=\"p-button-text p-button-sm p-button-rounded p-button-plain p-p-0\" @click=\"openCreateFolderDialog\"\r\n                    /></template>\r\n                </Toolbar>\r\n                <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar\" v-if=\"loading\" data-test=\"progress-bar\" />\r\n                <ResourceManagementMetadataDialog v-model:visibility=\"displayMetadataDialog\" v-model:id=\"metadataKey\"></ResourceManagementMetadataDialog>\r\n                <ResourceManagementCreateFolderDialog v-model:visibility=\"folderCreation\" @createFolder=\"createFolder\" v-bind:path=\"selectedFolder ? selectedFolder.relativePath : ''\" />\r\n\r\n                <Tree id=\"folders-tree\" :value=\"nodes\" selectionMode=\"single\" :expandedKeys=\"expandedKeys\" :filter=\"true\" filterMode=\"lenient\" data-test=\"functionality-tree\" class=\"kn-tree kn-flex p-flex-column foldersTree\" @node-select=\"showForm($event)\" v-model:selectionKeys=\"selectedKeys\">\r\n                    <template #default=\"slotProps\">\r\n                        <div class=\"p-d-flex p-flex-row p-ai-center p-jc-between\" @mouseover=\"buttonsVisible[slotProps.node.key] = true\" @mouseleave=\"buttonsVisible[slotProps.node.key] = false\" :data-test=\"'tree-item-' + slotProps.node.key\">\r\n                            <span v-if=\"!slotProps.node.edit\" class=\"kn-truncated\" @dblclick=\"toggleInput(slotProps.node)\">\r\n                                {{ slotProps.node.label }}\r\n                            </span>\r\n                            <InputText class=\"kn-material-input fileNameInputText\" type=\"text\" v-if=\"slotProps.node.edit\" v-model=\"slotProps.node.label\" maxlength=\"50\" @blur=\"toggleInput(slotProps.node)\" @keyup.enter=\"toggleInput(slotProps.node)\" />\r\n\r\n                            <div>\r\n                                <Button v-if=\"slotProps.node.modelFolder\" icon=\"fas fa-table\" v-tooltip.top=\"$t('managers.resourceManagement.openMetadata')\" :class=\"getButtonClass(slotProps.node)\" @click=\"openMetadataDialog(slotProps.node)\" :data-test=\"'move-up-button-' + slotProps.node.key\" />\r\n                                <Button icon=\"fa fa-download \" v-tooltip.top=\"$t('common.download')\" :class=\"getButtonClass(slotProps.node)\" @click=\"downloadDirect(slotProps.node)\" :data-test=\"'move-down-button-' + slotProps.node.key\" />\r\n                                <Button icon=\"far fa-trash-alt\" v-tooltip.top=\"$t('common.delete')\" :class=\"getButtonClass(slotProps.node)\" @click=\"showDeleteDialog(slotProps.node)\" :data-test=\"'delete-button-' + slotProps.node.key\" v-if=\"slotProps.node.level > 0\" />\r\n                            </div>\r\n                        </div>\r\n                    </template>\r\n                </Tree>\r\n            </div>\r\n            <div class=\"p-col-8 p-sm-8 p-md-9 p-p-0 p-m-0 kn-page\">\r\n                <KnHint :title=\"'managers.resourceManagement.title'\" :hint=\"'managers.resourceManagement.hint'\" v-if=\"showHint\"></KnHint>\r\n                <ResourceManagementDetail v-if=\"formVisible\" :folder=\"selectedFolder\" :parentKey=\"folderParentKey\" @touched=\"touched = true\" @close=\"onClose\" @inserted=\"loadPage($event)\" @folderCreated=\"loadPage\" @closed=\"switchToHint()\" @fileUploaded=\"loadPage(false, true)\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { AxiosResponse } from 'axios'\r\nimport descriptor from './ResourceManagementDescriptor.json'\r\nimport Tree from 'primevue/tree'\r\nimport { IFolderTemplate } from '@/modules/managers/resourceManagement/ResourceManagement'\r\nimport { downloadDirectFromResponseWithCustomName } from '@/helpers/commons/fileHelper'\r\nimport ResourceManagementMetadataDialog from '@/modules/managers/resourceManagement/ResourceManagementMetadataDialog.vue'\r\nimport ResourceManagementDetail from './ResourceManagementDetail.vue'\r\nimport KnHint from '@/components/UI/KnHint.vue'\r\nimport ResourceManagementCreateFolderDialog from './ResourceManagementCreateFolderDialog.vue'\r\nimport mainStore from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'resource-management',\r\n    components: { KnHint, ResourceManagementMetadataDialog, ResourceManagementCreateFolderDialog, ResourceManagementDetail, Tree },\r\n    data() {\r\n        return {\r\n            descriptor,\r\n            displayMetadataDialog: false,\r\n            loading: false,\r\n            nodes: [] as IFolderTemplate[],\r\n            expandedKeys: {},\r\n            selectedKeys: null,\r\n            metadataKey: null,\r\n            dirty: false,\r\n            buttonsVisible: [],\r\n            showHint: true,\r\n            touched: false,\r\n            selectedFolder: {} as IFolderTemplate,\r\n            folderCreation: false,\r\n            formVisible: false\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    async created() {\r\n        this.loadPage()\r\n    },\r\n    methods: {\r\n        createFolder(folderName: string) {\r\n            if (folderName && this.selectedFolder) {\r\n                let obj = {} as JSON\r\n                obj['key'] = '' + this.selectedFolder.key\r\n                obj['folderName'] = folderName\r\n                this.$http\r\n                    .post(import.meta.env.VITE_API_PATH + `2.0/resources/folders`, obj, {\r\n                        responseType: 'arraybuffer', // important...because we need to convert it to a blob. If we don't specify this, response.data will be the raw data. It cannot be converted to blob directly.\r\n\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        }\r\n                    })\r\n                    .then(() => {\r\n                        this.$emit('folderCreated', true)\r\n                    })\r\n                    .catch((error) => {\r\n                        this.store.setError({\r\n                            title: this.$t('common.error.saving'),\r\n                            msg: this.$t(error)\r\n                        })\r\n                    })\r\n                    .finally(() => {\r\n                        this.loading = false\r\n                        this.openCreateFolderDialog()\r\n                        this.loadPage(this.showHint, this.formVisible)\r\n                    })\r\n            }\r\n        },\r\n        getCurrentFolderPath() {\r\n            return this.selectedFolder ? this.selectedFolder.relativePath : undefined\r\n        },\r\n        getCurrentFolderKey() {\r\n            return this.selectedFolder ? '' + this.selectedFolder.key : undefined\r\n        },\r\n        getButtonClass(node) {\r\n            let visibility = ' kn-hide'\r\n            if (this.buttonsVisible[node.key] && !node.edit) visibility = ''\r\n            return 'p-button-text p-button-sm p-button-rounded p-button-plain p-p-0' + visibility\r\n        },\r\n        openCreateFolderDialog() {\r\n            this.folderCreation = !this.folderCreation\r\n        },\r\n        toggleInput(node) {\r\n            if (node.level > 0) {\r\n                if (node.edit && node.label !== node.edit) {\r\n                    if (this.selectedFolder) {\r\n                        let obj = {} as JSON\r\n                        obj['key'] = this.selectedFolder.key\r\n                        obj['folderName'] = node.label\r\n                        this.loading = true\r\n                        this.$http\r\n                            .post(import.meta.env.VITE_API_PATH + `2.0/resources/folders/update`, obj, {\r\n                                responseType: 'arraybuffer', // important...because we need to convert it to a blob. If we don't specify this, response.data will be the raw data. It cannot be converted to blob directly.\r\n\r\n                                headers: {\r\n                                    'Content-Type': 'application/json'\r\n                                }\r\n                            })\r\n                            .then(() => {\r\n                                delete node.edit\r\n                                this.store.setInfo({\r\n                                    title: this.$t('managers.resoruceManagement.renameFolder'),\r\n                                    msg: this.$t('managers.resoruceManagement.folderRenamedSuccessfully')\r\n                                })\r\n                            })\r\n                            .catch((error) => {\r\n                                this.store.setError({\r\n                                    title: this.$t('managers.resoruceManagement.renameFolder'),\r\n                                    msg: this.$t(error)\r\n                                })\r\n                            })\r\n                            .finally(() => {\r\n                                this.loading = false\r\n                            })\r\n                    }\r\n                } else node.edit = node.label\r\n            }\r\n        },\r\n        addIcon(nodes) {\r\n            for (var idx in nodes) {\r\n                let node = nodes[idx]\r\n                node.icon = 'far fa-folder'\r\n                if (node.children && node.children.length > 0) {\r\n                    this.addIcon(node.children)\r\n                }\r\n            }\r\n        },\r\n        loadPage(showHint?, formVisible?): void {\r\n            this.loading = true\r\n            this.showHint = showHint != undefined ? showHint : true\r\n            this.formVisible = formVisible != undefined ? formVisible : false\r\n            this.$http\r\n                .get(import.meta.env.VITE_API_PATH + `2.0/resources/folders`)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    let root = response.data.root[0]\r\n                    root.label = 'HOME'\r\n                    root.icon = 'pi pi-home'\r\n                    root.disabled = true\r\n                    this.addIcon(root.children)\r\n                    this.nodes = response.data.root\r\n                    this.loading = false\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        openMetadataDialog(node): void {\r\n            this.metadataKey = node.key\r\n            this.displayMetadataDialog = !this.displayMetadataDialog\r\n        },\r\n        deleteFolder(node) {\r\n            this.loading = true\r\n            this.$http\r\n                .delete(import.meta.env.VITE_API_PATH + `2.0/resources/folders`, {\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    data: {\r\n                        key: node.key\r\n                    }\r\n                })\r\n                .then(() => {\r\n                    this.loadPage()\r\n                    this.store.setInfo({\r\n                        title: this.$t('common.toast.deleteTitle'),\r\n                        msg: this.$t('common.toast.deleteSuccess')\r\n                    })\r\n                })\r\n                .catch(() => {\r\n                    this.store.setError({\r\n                        title: this.$t('common.toast.deleteTitle'),\r\n                        msg: this.$t('common.toast.deleteFailed')\r\n                    })\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        downloadDirect(node) {\r\n            this.loading = true\r\n            let obj = {} as JSON\r\n            obj['key'] = node.key\r\n            this.$http\r\n                .post(import.meta.env.VITE_API_PATH + `2.0/resources/folders/download`, obj, {\r\n                    responseType: 'arraybuffer', // important...because we need to convert it to a blob. If we don't specify this, response.data will be the raw data. It cannot be converted to blob directly.\r\n\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        Accept: 'application/zip; charset=utf-8'\r\n                    }\r\n                })\r\n                .then((response: AxiosResponse<any>) => {\r\n                    downloadDirectFromResponseWithCustomName(response, this.selectedFolder.label + '.zip')\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        setDirty(): void {\r\n            this.dirty = true\r\n        },\r\n        showForm(functionality: IFolderTemplate) {\r\n            /*             this.functionalityParentId = parentId */\r\n            if (!this.touched) {\r\n                this.setSelected(functionality)\r\n            } else {\r\n                this.$confirm.require({\r\n                    message: this.$t('common.toast.unsavedChangesMessage'),\r\n                    header: this.$t('common.toast.unsavedChangesHeader'),\r\n                    icon: 'pi pi-exclamation-triangle',\r\n                    accept: () => {\r\n                        this.touched = false\r\n                        this.setSelected(functionality)\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        setSelected(functionality: IFolderTemplate) {\r\n            this.selectedFolder = functionality\r\n            this.formVisible = true\r\n            this.showHint = false\r\n        },\r\n        showDeleteDialog(node) {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.toast.deleteConfirmTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => this.deleteFolder(node)\r\n            })\r\n        },\r\n        switchToHint() {\r\n            this.formVisible = false\r\n            this.showHint = true\r\n\r\n            this.expandedKeys = {}\r\n            this.selectedKeys = null\r\n            this.metadataKey = null\r\n            this.dirty = false\r\n\r\n            this.touched = false\r\n            this.selectedFolder = {} as IFolderTemplate\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.knTreeLabel {\r\n    border: none;\r\n}\r\n.foldersTree {\r\n    border-radius: 0;\r\n}\r\n.rightFolderIconsBar {\r\n    align-items: center;\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n    justify-content: flex-end;\r\n    flex: 1;\r\n}\r\n.treeCustomElement {\r\n    align-items: center;\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: nowrap;\r\n}\r\n.rightFolderIcon {\r\n    margin-right: 0.5rem;\r\n}\r\n.p-tree .p-tree-container .p-treenode {\r\n    padding: 0;\r\n    margin: 0;\r\n}\r\n.p-treenode-content {\r\n    border-radius: 0 !important;\r\n}\r\n.p-treenode-label {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n.p-tree-toggler p-link {\r\n    margin: 0px;\r\n}\r\n.p-treenode-icon {\r\n    margin: 0px;\r\n}\r\n</style>\r\n"],"names":["_sfc_main","Dialog","Dropdown","InputSwitch","Accordion","AccordionTab","Textarea","resourceManagementDescriptor","mainStore","_withScopeId","_popScopeId","_hoisted_2","_hoisted_4","_hoisted_6","_hoisted_8","_hoisted_10","_hoisted_12","_hoisted_14","_openBlock","_createElementBlock","_hoisted_1","_createVNode","_withCtx","_createElementVNode","_hoisted_3","_toDisplayString","_hoisted_5","_hoisted_7","_hoisted_9","_hoisted_11","_hoisted_13","_withDirectives","_createCommentVNode","FileUpload","Message","_createBlock","_normalizeClass","Breadcrumb","Column","DataTable","_pushScopeId","_Fragment","_renderList","_createSlots","Tree","_withKeys"],"mappings":"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"}