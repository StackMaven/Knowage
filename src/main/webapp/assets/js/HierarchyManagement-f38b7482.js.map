{"version":3,"file":"HierarchyManagement-f38b7482.js","sources":["../../../../modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementDimensionsCard/HierarchyManagementDimensionsTable/HierarchyManagementDimensionsInfoDialog.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementDimensionsCard/HierarchyManagementDimensionsTable/HierarchyManagementDimensionsTable.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementDimensionsCard/HierarchyManagementHierarchyMasterDialog/HierarchyManagementHierarchyMasterForm.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementDimensionsCard/HierarchyManagementHierarchyMasterDialog/HierarchyManagementHierarchyMasterSelectList.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementDimensionsCard/HierarchyManagementHierarchyMasterDialog/HierarchyManagementHierarchyMasterDialog.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementDimensionsCard/HierarchyManagementDimensionsFilterCard/HierarchyManagementDimensionsFilterCard.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementDimensionsCard/HierarchyManagementDimensionsCard.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementHierarchiesCard/HierarchyManagementHierarchiesTree/HierarchyManagementNodeDetailDialog.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementHierarchiesCard/HierarchyManagementHierarchiesTree/HierarchyManagementHierarchiesTargetDialog.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementHierarchiesCard/HierarchyManagementHierarchiesTree/HierarchyManagementHierarchiesTree.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementHierarchiesCard/HierarchyManagementHierarchiesFilterCard/HierarchyManagementHierarchiesFilterCard.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementHierarchiesCard/HierarchyManagementHierarchiesCard.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementMasterTab.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementTechnicalTab/HierarchyManagementSourceCard/HierarchyManagementSourceCard.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementTechnicalTab/HierarchyManagementTargetCard/HierarchyManagementTargetCard.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementTechnicalTab/HierarchyManagementTechnicalTab.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagementBackupTab/HierarchyManagementBackupTab.vue","../../../../modules/managers/hierarchyManagement/HierarchyManagement.vue"],"sourcesContent":["<template>\r\n    <Dialog id=\"hierarchy-management-dimension-info-dialog\" class=\"p-fluid kn-dialog--toolbar--primary\" :visible=\"visible\" :modal=\"true\" :closable=\"false\" :style=\"hierarchyManagementDimensionsTableDescriptor.dialog.style\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--primary\">\r\n                <template #start>\r\n                    {{ $t('common.details') }}\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n        <form v-if=\"selectedItem\" class=\"marginated-form p-fluid p-formgrid p-grid kn-flex p-m-2\">\r\n            <div class=\"p-field p-col-12 p-md-6 p-lg-4\" v-for=\"(item, index) in selectedItem\" :key=\"index\">\r\n                <span class=\"p-float-label\">\r\n                    <InputText class=\"kn-material-input\" v-model.trim=\"item.value\" :disabled=\"true\" />\r\n                    <label class=\"kn-material-input-label\"> {{ item.label }}</label>\r\n                </span>\r\n            </div>\r\n        </form>\r\n\r\n        <template #footer>\r\n            <Button class=\"kn-button kn-button--primary\" :label=\"$t('common.ok')\" @click=\"close\" />\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport Dialog from 'primevue/dialog'\r\nimport hierarchyManagementDimensionsTableDescriptor from './HierarchyManagementDimensionsTableDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-dimension-info-dialog',\r\n    components: { Dialog },\r\n    props: { visible: { type: Boolean }, selectedItem: { type: Array as PropType<{ value: string; label: string }[]> } },\r\n    emits: ['close'],\r\n    data() {\r\n        return {\r\n            hierarchyManagementDimensionsTableDescriptor\r\n        }\r\n    },\r\n    watch: {\r\n        nodeMetadata() {\r\n            this.loadNodeData()\r\n        }\r\n    },\r\n    async created() {\r\n        this.loadNodeData()\r\n    },\r\n    methods: {\r\n        loadNodeData() {},\r\n        save() {},\r\n        close() {\r\n            this.$emit('close')\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n#hierarchy-management-dimension-info-dialog .p-dialog-header,\r\n#hierarchy-management-dimension-info-dialog .p-dialog-content {\r\n    padding: 0;\r\n}\r\n#hierarchy-management-dimension-info-dialog .p-dialog-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 1;\r\n}\r\n.marginated-form {\r\n    margin-top: 15px !important;\r\n}\r\n</style>\r\n","<template>\r\n    <div class=\"p-mt-2\">\r\n        <DataTable :value=\"rows\" class=\"p-datatable-sm kn-table\" v-model:filters=\"filters\" :globalFilterFields=\"globalFilterFields\">\r\n            <template #empty>\r\n                {{ $t('common.info.noDataFound') }}\r\n            </template>\r\n            <template #header>\r\n                <div class=\"table-header p-d-flex\">\r\n                    <span class=\"p-input-icon-left p-mr-3 p-col-12\">\r\n                        <i class=\"pi pi-search\" />\r\n                        <InputText class=\"kn-material-input\" v-model=\"filters['global'].value\" type=\"text\" :placeholder=\"$t('common.search')\" />\r\n                    </span>\r\n                </div>\r\n            </template>\r\n            <Column :style=\"hierarchyManagementDimensionsTableDescriptor.smallIconColumn\">\r\n                <template #body=\"slotProps\">\r\n                    <div class=\"pi pi-bars p-button-link\" :draggable=\"true\" @dragstart.stop=\"onDragStart($event, slotProps.data)\" />\r\n                </template>\r\n            </Column>\r\n            <Column class=\"kn-truncated\" v-for=\"column in columns\" :header=\"$t(column.header)\" :key=\"column.field\" :sortField=\"column.field\" :sortable=\"true\">\r\n                <template #body=\"slotProps\">\r\n                    <span v-tooltip.top=\"slotProps.data[column.field]\" class=\"kn-cursor-pointer\" :draggable=\"true\" @dragstart=\"onDragStart($event, slotProps.data)\"> {{ slotProps.data[column.field] }}</span>\r\n                </template>\r\n            </Column>\r\n            <Column :style=\"hierarchyManagementDimensionsTableDescriptor.smallIconColumn\">\r\n                <template #body=\"slotProps\">\r\n                    <Button icon=\"pi pi-info\" class=\"p-button-link\" v-tooltip.top=\"$t('common.detail')\" @click.stop=\"showInfo(slotProps.data)\" />\r\n                </template>\r\n            </Column>\r\n        </DataTable>\r\n\r\n        <HierarchyManagementDimensionsInfoDialog :visible=\"infoDialogVisible\" :selectedItem=\"selectedItem\" @close=\"closeInfoDialog\" />\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { filterDefault } from '@/helpers/commons/filterHelper'\r\nimport Column from 'primevue/column'\r\nimport DataTable from 'primevue/datatable'\r\nimport hierarchyManagementDimensionsTableDescriptor from './HierarchyManagementDimensionsTableDescriptor.json'\r\nimport HierarchyManagementDimensionsInfoDialog from './HierarchyManagementDimensionsInfoDialog.vue'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-dimensions-table',\r\n    components: { Column, DataTable, HierarchyManagementDimensionsInfoDialog },\r\n    props: { dimensionData: { type: Object } },\r\n    data() {\r\n        return {\r\n            hierarchyManagementDimensionsTableDescriptor,\r\n            rows: [] as any[],\r\n            columns: [] as { field: string; header: string }[],\r\n            filters: { global: [filterDefault] },\r\n            globalFilterFields: [] as string[],\r\n            selectedItem: [] as { value: string; label: string }[],\r\n            infoDialogVisible: false\r\n        }\r\n    },\r\n    watch: {\r\n        dimensionData() {\r\n            this.loadData()\r\n        }\r\n    },\r\n    created() {\r\n        this.loadData()\r\n    },\r\n    methods: {\r\n        loadData() {\r\n            if (!this.dimensionData) return\r\n\r\n            this.rows = this.dimensionData.root\r\n            this.columns = this.dimensionData.columns\r\n                ?.filter((column: any) => column.VISIBLE)\r\n                .map((column: any) => {\r\n                    return { field: column.ID, header: column.NAME }\r\n                })\r\n            this.globalFilterFields = this.dimensionData.columns_search\r\n        },\r\n        showInfo(item: any) {\r\n            this.selectedItem = []\r\n            Object.keys(item).forEach((key: string) => this.selectedItem.push({ label: this.getColumnLabel(key), value: item[key] }))\r\n            this.infoDialogVisible = true\r\n        },\r\n        getColumnLabel(key: string) {\r\n            if (!this.dimensionData) return\r\n            const index = this.dimensionData.columns.findIndex((column: any) => column.ID === key)\r\n            return index !== -1 ? this.dimensionData.columns[index].NAME : ''\r\n        },\r\n        onDragStart(event: any, item: any) {\r\n            event.dataTransfer.setData('text/plain', JSON.stringify(item))\r\n            event.dataTransfer.dropEffect = 'move'\r\n            event.dataTransfer.effectAllowed = 'move'\r\n        },\r\n        closeInfoDialog() {\r\n            this.selectedItem = []\r\n            this.infoDialogVisible = false\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <form class=\"marginated-form p-fluid p-formgrid p-grid kn-flex p-m-2\">\r\n        <template v-for=\"(field, index) in fields\" :key=\"index\">\r\n            <div class=\"p-field p-col-6\" v-if=\"field.VISIBLE\">\r\n                <span class=\"p-float-label\">\r\n                    <InputText\r\n                        class=\"kn-material-input\"\r\n                        :type=\"field.TYPE === 'Number' ? 'number' : 'text'\"\r\n                        v-model.trim=\"field.value\"\r\n                        :class=\"{\r\n                            'p-invalid': !field.value\r\n                        }\"\r\n                        :disabled=\"!field.EDITABLE\"\r\n                    />\r\n                    <label class=\"kn-material-input-label\"> {{ field.NAME + ' *' }}</label>\r\n                </span>\r\n            </div>\r\n        </template>\r\n    </form>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iNodeMetadataField } from '../../../HierarchyManagement'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-hierarchy-master-form',\r\n    components: {},\r\n    props: { nodeGeneralFields: { type: Array as PropType<iNodeMetadataField[]> } },\r\n    data() {\r\n        return {\r\n            fields: [] as iNodeMetadataField[]\r\n        }\r\n    },\r\n    watch: {\r\n        nodeGeneralFields() {\r\n            this.loadFields()\r\n        }\r\n    },\r\n    created() {\r\n        this.loadFields()\r\n    },\r\n    methods: {\r\n        loadFields() {\r\n            this.fields = this.nodeGeneralFields as iNodeMetadataField[]\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <small v-if=\"errorMessageVisible\" class=\"p-error p-ml-2\" data-test=\"error-message\">{{ $t('managers.hierarchyManagement.createHierarchyMasterErrorMessage') }}</small>\r\n    <div class=\"p-d-flex kn-flex kn-overflow\">\r\n        <div id=\"list-container\" class=\"p-d-flex p-ml-2\" style=\"flex: 1 1 0;\">\r\n            <Listbox class=\"kn-list kn-list-border-all kn-flex hierarchy-management-list\" listStyle=\"max-height:calc(100% - 62px)\" v-model=\"selectedSourceFields\" :options=\"dimensionSourceFields\" optionLabel=\"NAME\" :multiple=\"true\" :filter=\"true\" @change=\"onSelectedField\">\r\n                <template #empty>{{ $t('common.info.noDataFound') }}</template>\r\n                <template #option=\"slotProps\">\r\n                    <div class=\"kn-list-item\">\r\n                        <div class=\"kn-list-item-text\">\r\n                            <span :data-test=\"'list-item-' + slotProps.option.NAME\">{{ slotProps.option.NAME }}</span>\r\n                        </div>\r\n                    </div>\r\n                </template>\r\n            </Listbox>\r\n        </div>\r\n\r\n        <div id=\"button-container\" class=\"p-as-center p-mx-2\">\r\n            <div class=\"p-d-flex p-flex-column\">\r\n                <Button class=\"kn-button kn-button--primary hierarchy-management-master-selecet-list-button\" icon=\"pi pi-angle-double-right\" :disabled=\"selectedSourceFields.length === 0\" @click=\"moveToTheRight\" data-test=\"move-right-button\" />\r\n                <Button class=\"kn-button kn-button--primary hierarchy-management-master-selecet-list-button p-mt-2\" icon=\"pi pi-angle-double-left\" :disabled=\"selectedDestinationFields.length === 0\" @click=\"moveToTheLeft\" />\r\n            </div>\r\n        </div>\r\n\r\n        <div id=\"identifier-container\" class=\"p-d-flex p-mr-2\" style=\"flex: 1 1 0;\">\r\n            <Listbox class=\"kn-list kn-list-border-all kn-flex hierarchy-management-list\" listStyle=\"max-height:100%\" v-model=\"selectedDestinationFields\" :options=\"dimensionDestinationFields\" optionLabel=\"NAME\" :multiple=\"true\" @change=\"onSelectedField\" data-test=\"selected-destinations-list\">\r\n                <template #empty>{{ $t('common.info.noDataFound') }}</template>\r\n                <template #option=\"slotProps\">\r\n                    <div class=\"kn-list-item\">\r\n                        <div class=\"p-d-flex p-flex-row kn-flex\">\r\n                            <span>\r\n                                <b>{{ $t('managers.hierarchyManagement.lev') + ' ' + slotProps.option.code.level + ' ' }}</b>\r\n                                {{ slotProps.option.code.NAME + ', ' + slotProps.option.name.NAME }}\r\n                            </span>\r\n                            <div class=\"p-ml-auto\">\r\n                                <Button\r\n                                    v-if=\"slotProps.index === dimensionDestinationFields.length - 1\"\r\n                                    icon=\"fa fa-plus\"\r\n                                    class=\"p-button-text p-button-plain p-button-sm p-p-0\"\r\n                                    @click.stop=\"moveToRecursive(slotProps.option, slotProps.index)\"\r\n                                    :data-test=\"'recursive-button-' + slotProps.option.code.NAME\"\r\n                                />\r\n                                <Button v-if=\"slotProps.index !== 0\" icon=\"fa fa-arrow-up\" class=\"p-button-text p-button-plain p-button-sm p-p-0\" @click.stop=\"move(slotProps.option, slotProps.index, 'up')\" />\r\n                                <Button v-if=\"slotProps.index !== dimensionDestinationFields.length - 1\" icon=\"fa fa-arrow-down\" class=\"p-button-text p-button-plain p-button-sm p-p-0\" @click.stop=\"move(slotProps.option, slotProps.index, 'down')\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </template>\r\n            </Listbox>\r\n        </div>\r\n    </div>\r\n    <div id=\"recursive-container\" class=\"p-m-2\">\r\n        <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-p-0 p-m-0 p-col-12\">\r\n            <template #start>\r\n                {{ $t('managers.hierarchyManagement.recursive') + ': ' }}\r\n                <span class=\"p-ml-2\" v-if=\"recursive\">{{ recursive.code.NAME + ' ' + recursive.name.NAME }}</span>\r\n            </template>\r\n            <template #end>\r\n                <Button v-show=\"recursive\" icon=\"pi pi-trash\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"removeRecursive\" />\r\n            </template>\r\n        </Toolbar>\r\n        <form class=\"marginated-form p-fluid p-formgrid p-grid\">\r\n            <div class=\"p-field p-col-6\">\r\n                <span class=\"p-float-label\">\r\n                    <Dropdown\r\n                        class=\"kn-material-input\"\r\n                        v-model=\"recursiveParentName\"\r\n                        :options=\"parentDimensionSourceFields\"\r\n                        optionLabel=\"NAME\"\r\n                        :disabled=\"!recursive\"\r\n                        @change=\"$emit('recursiveChanged', { recursive: recursive, recursiveParentName: recursiveParentName, recursiveParentDescription: recursiveParentDescription })\"\r\n                    >\r\n                    </Dropdown>\r\n                    <label class=\"kn-material-input-label\"> {{ $t('common.name') }} </label>\r\n                </span>\r\n            </div>\r\n            <div class=\"p-field p-col-6\">\r\n                <span class=\"p-float-label\">\r\n                    <Dropdown\r\n                        class=\"kn-material-input\"\r\n                        v-model=\"recursiveParentDescription\"\r\n                        :options=\"parentDimensionSourceFields\"\r\n                        optionLabel=\"NAME\"\r\n                        :disabled=\"!recursive\"\r\n                        @change=\"$emit('recursiveChanged', { recursive: recursive, recursiveParentName: recursiveParentName, recursiveParentDescription: recursiveParentDescription })\"\r\n                    >\r\n                    </Dropdown>\r\n                    <label class=\"kn-material-input-label\"> {{ $t('common.description') }} </label>\r\n                </span>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iDimensionField, iDimensionMetadata } from '../../../HierarchyManagement'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Listbox from 'primevue/listbox'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-hierarchy-master-select-list',\r\n    components: {\r\n        Dropdown,\r\n        Listbox\r\n    },\r\n    props: { dimensionMetadata: { type: Object as PropType<iDimensionMetadata | null> } },\r\n    emits: ['recursiveChanged', 'levelsChanged'],\r\n    data() {\r\n        return {\r\n            dimensionSourceFields: [] as iDimensionField[],\r\n            selectedSourceFields: [] as iDimensionField[],\r\n            dimensionDestinationFields: [] as any[],\r\n            selectedDestinationFields: [] as any[],\r\n            errorMessageVisible: false,\r\n            recursive: null as any,\r\n            parentDimensionSourceFields: [] as iDimensionField[],\r\n            recursiveParentName: null as any,\r\n            recursiveParentDescription: null as any\r\n        }\r\n    },\r\n    watch: {\r\n        dimensionMetadata() {\r\n            this.loadDimensionData()\r\n        }\r\n    },\r\n    created() {\r\n        this.loadDimensionData()\r\n    },\r\n    methods: {\r\n        loadDimensionData() {\r\n            this.dimensionSourceFields = []\r\n            this.parentDimensionSourceFields = []\r\n            this.dimensionMetadata?.DIM_FIELDS.forEach((filter: iDimensionField) => (filter.PARENT ? this.parentDimensionSourceFields.push(filter) : this.dimensionSourceFields.push(filter)))\r\n        },\r\n        onSelectedField() {\r\n            if (this.selectedSourceFields.length === 3) {\r\n                this.selectedSourceFields.splice(2, 1)\r\n                this.errorMessageVisible = true\r\n            } else {\r\n                this.errorMessageVisible = false\r\n            }\r\n        },\r\n        moveToTheRight() {\r\n            if (this.selectedSourceFields.length === 1 || this.selectedSourceFields.length === 2) {\r\n                const newLevel = { code: this.selectedSourceFields[0], name: this.selectedSourceFields[1] ?? this.selectedSourceFields[0], hasCopy: this.selectedSourceFields.length === 1, isLast: true } as any\r\n                newLevel.code.level = this.dimensionDestinationFields.length + 1\r\n                newLevel.name.level = this.dimensionDestinationFields.length + 1\r\n                if (this.dimensionDestinationFields.length > 0) this.dimensionDestinationFields[this.dimensionDestinationFields.length - 1].isLast = false\r\n                for (let i = 0; i < this.selectedSourceFields.length; i++) {\r\n                    const index = this.dimensionSourceFields.findIndex((el: any) => el.ID === this.selectedSourceFields[i].ID)\r\n                    if (index !== -1) this.dimensionSourceFields.splice(index, 1)\r\n                }\r\n                this.selectedSourceFields = []\r\n                this.dimensionDestinationFields.push(newLevel)\r\n            }\r\n            this.$emit('levelsChanged', this.dimensionDestinationFields)\r\n        },\r\n\r\n        moveToTheLeft() {\r\n            if (this.selectedDestinationFields.length === 0) return\r\n            for (let i = 0; i < this.selectedDestinationFields.length; i++) {\r\n                delete this.selectedDestinationFields[i].code.level\r\n                delete this.selectedDestinationFields[i].name.maxLevel\r\n                this.dimensionSourceFields.push(this.selectedDestinationFields[i].code)\r\n                if (!this.selectedDestinationFields[i].hasCopy) {\r\n                    this.dimensionSourceFields.push(this.selectedDestinationFields[i].name)\r\n                }\r\n\r\n                const index = this.dimensionDestinationFields.findIndex((el: any) => el.code.ID === this.selectedDestinationFields[i].code.ID)\r\n                if (index !== -1) this.dimensionDestinationFields.splice(index, 1)\r\n            }\r\n\r\n            this.selectedDestinationFields = []\r\n\r\n            for (let i = 0; i < this.dimensionDestinationFields.length; i++) {\r\n                this.dimensionDestinationFields[i].code.level = i + 1\r\n                this.dimensionDestinationFields[i].name.level = i + 1\r\n            }\r\n            this.$emit('levelsChanged', this.dimensionDestinationFields)\r\n        },\r\n        move(destinationField: any, index: number, direction: 'up' | 'down') {\r\n            const tempIndex = direction === 'up' ? index - 1 : index + 1\r\n\r\n            destinationField.code.level = tempIndex + 1\r\n            destinationField.name.level = tempIndex + 1\r\n\r\n            this.dimensionDestinationFields[index] = this.dimensionDestinationFields[tempIndex]\r\n            this.dimensionDestinationFields[index].code.level = index + 1\r\n            this.dimensionDestinationFields[index].level = index + 1\r\n            this.dimensionDestinationFields[tempIndex] = destinationField\r\n            this.$emit('levelsChanged', this.dimensionDestinationFields)\r\n        },\r\n        moveToRecursive(destinationField: any, index: number) {\r\n            if (this.recursive) {\r\n                this.selectedDestinationFields = [this.recursive]\r\n                this.moveToTheLeft()\r\n            }\r\n            destinationField.isLast = false\r\n            this.dimensionDestinationFields.splice(index, 1)\r\n            if (this.dimensionDestinationFields.length > 0) {\r\n                this.dimensionDestinationFields[this.dimensionDestinationFields.length - 1].isLast = true\r\n            }\r\n            this.selectedDestinationFields = []\r\n            this.recursive = destinationField\r\n            this.$emit('recursiveChanged', { recursive: this.recursive, recursiveParentName: this.recursiveParentName, recursiveParentDescription: this.recursiveParentDescription, levels: this.dimensionDestinationFields })\r\n        },\r\n        removeRecursive() {\r\n            this.selectedDestinationFields = [this.recursive]\r\n            this.moveToTheLeft()\r\n            this.recursive = false\r\n            this.recursiveParentName = null\r\n            this.recursiveParentDescription = null\r\n            this.$emit('recursiveChanged', null)\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Dialog class=\"p-fluid kn-dialog--toolbar--primary hierarchy-dialog\" style=\"width: 70%\" :visible=\"visible\" :modal=\"true\" :closable=\"false\" :draggable=\"false\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--primary p-p-0 p-m-0 p-col-12\">\r\n                <template #start>\r\n                    {{ $t('managers.hierarchyManagement.createHierarchyMaster') }}\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n\r\n        <HierarchyManagementHierarchyMasterForm :nodeGeneralFields=\"nodeGeneralFields\"></HierarchyManagementHierarchyMasterForm>\r\n        <HierarchyManagementHierarchyMasterSelectList :dimensionMetadata=\"dimensionMetadata\" @recursiveChanged=\"onRecursiveChanged\" @levelsChanged=\"onLevelsChanged\"></HierarchyManagementHierarchyMasterSelectList>\r\n\r\n        <template #footer>\r\n            <Button class=\"kn-button kn-button--secondary\" @click=\"close\">{{ $t('common.close') }}</Button>\r\n            <Button class=\"kn-button kn-button--primary\" :disabled=\"saveButtonDisabled\" @click=\"save\">{{ $t('common.save') }}</Button>\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iNodeMetadata, iNodeMetadataField, iDimensionMetadata, iDimension, iDimensionFilter } from '../../../HierarchyManagement'\r\nimport { AxiosResponse } from 'axios'\r\nimport moment from 'moment'\r\nimport Dialog from 'primevue/dialog'\r\nimport hierarchyManagementHierarchyMasterDialogDescriptor from './HierarchyManagementMasterDescriptor.json'\r\nimport HierarchyManagementHierarchyMasterForm from './HierarchyManagementHierarchyMasterForm.vue'\r\nimport HierarchyManagementHierarchyMasterSelectList from './HierarchyManagementHierarchyMasterSelectList.vue'\r\nimport mainStore from '../../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-hierarchy-master-dialog',\r\n    components: { Dialog, HierarchyManagementHierarchyMasterForm, HierarchyManagementHierarchyMasterSelectList },\r\n    props: {\r\n        visible: { type: Boolean },\r\n        nodeMetadata: { type: Object as PropType<iNodeMetadata | null> },\r\n        dimensionMetadata: { type: Object as PropType<iDimensionMetadata | null> },\r\n        validityDate: { type: Date },\r\n        selectedDimension: { type: Object as PropType<iDimension | null> },\r\n        dimensionFilters: { type: Array as PropType<iDimensionFilter[]> }\r\n    },\r\n    emits: ['close', 'masterHierarchyCreated'],\r\n    data() {\r\n        return {\r\n            hierarchyManagementHierarchyMasterDialogDescriptor,\r\n            nodeGeneralFields: [] as iNodeMetadataField[],\r\n            recursive: null as { NM: string; CD: string; NM_PARENT: string; CD_PARENT: string } | null,\r\n            levels: [] as { CD: string; NM: string }[],\r\n            loading: false\r\n        }\r\n    },\r\n    computed: {\r\n        saveButtonDisabled(): boolean {\r\n            return this.requiredFieldMissing()\r\n        }\r\n    },\r\n    watch: {\r\n        visible(value: boolean) {\r\n            if (value) this.loadNodeData()\r\n        },\r\n        nodeMetadata() {\r\n            this.loadNodeData()\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    async created() {\r\n        this.loadNodeData()\r\n    },\r\n    methods: {\r\n        loadNodeData() {\r\n            this.nodeGeneralFields = this.nodeMetadata\r\n                ? this.nodeMetadata.GENERAL_FIELDS.map((field: iNodeMetadataField) => {\r\n                      return { ...field, value: '' }\r\n                  })\r\n                : []\r\n        },\r\n        requiredFieldMissing() {\r\n            let requiredMissing = false\r\n\r\n            for (let i = 0; i < this.nodeGeneralFields.length; i++) {\r\n                if (this.nodeGeneralFields[i].VISIBLE && !this.nodeGeneralFields[i].value) {\r\n                    requiredMissing = true\r\n                    break\r\n                }\r\n            }\r\n\r\n            return requiredMissing\r\n        },\r\n        onLevelsChanged(selectedLevels: any[]) {\r\n            this.levels = selectedLevels?.map((level: any) => {\r\n                return { CD: level.code?.ID, NM: level.name?.ID }\r\n            })\r\n        },\r\n        onRecursiveChanged(payload: any) {\r\n            if (!payload) {\r\n                this.recursive = null\r\n                return\r\n            }\r\n\r\n            if (payload.levels) this.onLevelsChanged(payload.levels)\r\n\r\n            this.recursive = { NM: payload.recursive.name?.ID, CD: payload.recursive.code?.ID, NM_PARENT: payload.recursiveParentName?.ID, CD_PARENT: payload.recursiveParentDescription?.ID }\r\n        },\r\n        async save() {\r\n            const postData = {\r\n                dimension: this.selectedDimension?.DIMENSION_NM,\r\n                validityDate: moment(this.validityDate).format('YYYY-MM-DD'),\r\n                optionalFilters: this.dimensionFilters?.filter((filter: iDimensionFilter) => filter.VALUE && filter.VALUE !== ''),\r\n                levels: this.levels,\r\n                recursive: this.recursive\r\n            }\r\n            for (let i = 0; i < this.nodeGeneralFields.length; i++) {\r\n                if (this.nodeGeneralFields[i].VISIBLE) {\r\n                    postData[this.nodeGeneralFields[i].ID] = this.nodeGeneralFields[i].TYPE === 'NUMBER' && this.nodeGeneralFields[i].value ? parseInt(this.nodeGeneralFields[i].value as string) : this.nodeGeneralFields[i].value\r\n                }\r\n            }\r\n\r\n            this.loading = true\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `hierarchiesMaster/createHierarchyMaster`, postData)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    if (response.data?.response === 'ok') {\r\n                        this.$emit('masterHierarchyCreated')\r\n                        this.store.setInfo({\r\n                            title: this.$t('common.toast.createTitle'),\r\n                            msg: this.$t('common.toast.success')\r\n                        })\r\n                    }\r\n                })\r\n                .catch(() => {})\r\n            this.loading = false\r\n        },\r\n        close() {\r\n            this.nodeGeneralFields = []\r\n            this.levels = []\r\n            this.recursive = null\r\n            this.$emit('close')\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\">\r\n.hierarchy-dialog .p-dialog-header,\r\n.hierarchy-dialog .p-dialog-content {\r\n    padding: 0;\r\n}\r\n.hierarchy-dialog .p-dialog-content {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 1;\r\n}\r\n</style>\r\n","<template>\r\n    <Toolbar class=\"kn-toolbar kn-toolbar--default\">\r\n        <template #start>\r\n            <Button v-if=\"!expandFilterCard\" icon=\"fas fa-chevron-down\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"expandFilterCard = true\" />\r\n            <Button v-else icon=\"fas fa-chevron-up\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"expandFilterCard = false\" />\r\n            <span>{{ $t('common.filters') }}</span>\r\n        </template>\r\n        <template #end>\r\n            <Button v-if=\"expandFilterCard\" icon=\"pi pi-check\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"applyFilters\" />\r\n            <Button v-if=\"expandFilterCard\" icon=\"fas fa-eraser\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"resetFilters\" />\r\n        </template>\r\n    </Toolbar>\r\n    <Card v-show=\"expandFilterCard\">\r\n        <template #content>\r\n            <div class=\"p-grid p-fluid p-formgrid\">\r\n                <div class=\"p-field-checkbox p-col-12\">\r\n                    <Checkbox class=\"p-mr-2\" v-model=\"showMissingElements\" :binary=\"true\" :disabled=\"!selectedHierarchy\" />\r\n                    <label class=\"kn-material-input-label p-as-center\"> {{ $t('managers.hierarchyManagement.showMissingElements') }}</label>\r\n                </div>\r\n\r\n                <div class=\"p-field p-col-12 p-lg-6\" v-for=\"(filter, index) in filters\" :key=\"index\">\r\n                    <span class=\"p-float-label\">\r\n                        <Calendar v-if=\"filter.TYPE === 'Date'\" class=\"kn-material-input\" v-model=\"filter.VALUE\" :manualInput=\"true\" :showIcon=\"true\" />\r\n                        <InputText v-else class=\"kn-material-input\" :type=\"filter.TYPE === 'number' ? 'number' : 'text'\" v-model.trim=\"filter.VALUE\" />\r\n                        <label class=\"kn-material-input-label\"> {{ filter.NAME }}</label>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iDimensionFilter, iHierarchy } from '../../../HierarchyManagement'\r\nimport moment from 'moment'\r\nimport Calendar from 'primevue/calendar'\r\nimport Checkbox from 'primevue/checkbox'\r\nimport Card from 'primevue/card'\r\n\r\nimport deepcopy from 'deepcopy'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-dimensions-filter-card',\r\n    components: { Calendar, Checkbox, Card },\r\n    props: { dimensionFilters: { type: Array as PropType<iDimensionFilter[]> }, selectedHierarchy: { type: Object as PropType<iHierarchy | null> } },\r\n    emits: ['applyFilters'],\r\n    data() {\r\n        return {\r\n            filters: [] as iDimensionFilter[],\r\n            showMissingElements: false,\r\n            expandFilterCard: false\r\n        }\r\n    },\r\n    watch: {\r\n        dimensionFilters() {\r\n            this.loadFilters()\r\n        }\r\n    },\r\n    async created() {\r\n        this.loadFilters()\r\n    },\r\n    methods: {\r\n        loadFilters() {\r\n            this.filters = this.dimensionFilters as iDimensionFilter[]\r\n        },\r\n        applyFilters() {\r\n            let tempFilters = deepcopy(this.filters)\r\n            tempFilters = tempFilters.filter((filter: iDimensionFilter) => filter.VALUE && filter.VALUE !== '')\r\n            tempFilters.forEach((filter: iDimensionFilter) => {\r\n                if (filter.TYPE === 'Date') {\r\n                    filter.VALUE = moment(filter.VALUE).format('YYYY-MM-DD')\r\n                }\r\n            })\r\n            this.$emit('applyFilters', { filters: tempFilters, showMissingElements: this.showMissingElements })\r\n        },\r\n        resetFilters() {\r\n            this.showMissingElements = false\r\n            this.filters?.forEach((filter: iDimensionFilter) => (filter.VALUE = ''))\r\n            this.$emit('applyFilters', { filters: [], showMissingElements: this.showMissingElements })\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2 p-d-flex p-flex-column hierarchy-scrollable-card\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    <i class=\"fa fa-list p-mr-2\"></i>\r\n                    <span>{{ $t('managers.hierarchyManagement.dimensions') }}</span>\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-12 p-lg-6\">\r\n                    <Calendar class=\"kn-material-input\" v-model=\"validityDate\" :manualInput=\"true\" :showIcon=\"true\" @dateSelect=\"onValidityDateSelected\" />\r\n                </div>\r\n                <div class=\"p-field p-col-12 p-lg-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown class=\"kn-material-input\" v-model=\"selectedDimension\" :options=\"dimensions\" optionLabel=\"DIMENSION_NM\" @change=\"onSelectedDimensionChange\" />\r\n                        <label class=\"kn-material-input-label\"> {{ $t('managers.hierarchyManagement.dimensions') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col-6\">\r\n                    <Button class=\"kn-button kn-button--primary kn-truncated\" :label=\"$t('managers.hierarchyManagement.createHierarchyMaster')\" :disabled=\"!selectedDimension\" @click=\"openHierarchyMasterDialog\" />\r\n                </div>\r\n                <div class=\"p-field p-col-6\">\r\n                    <Button class=\"kn-button kn-button--primary\" :label=\"$t('managers.hierarchyManagement.synchronize')\" :disabled=\"synchronizeButtonDisabled\" @click=\"synchronize\" />\r\n                </div>\r\n            </form>\r\n\r\n            <HierarchyManagementDimensionsFilterCard v-show=\"selectedDimension\" :dimensionFilters=\"dimensionFilters\" :selectedHierarchy=\"selectedHierarchy\" @applyFilters=\"onApplyFilters\" />\r\n            <HierarchyManagementDimensionsTable v-show=\"dimensionData\" :dimensionData=\"dimensionData\" />\r\n        </template>\r\n    </Card>\r\n\r\n    <HierarchyManagementHierarchyMasterDialog\r\n        :visible=\"hierarchyMasterDialogVisible\"\r\n        :nodeMetadata=\"nodeMetadata\"\r\n        :dimensionMetadata=\"dimensionMetadata\"\r\n        :validityDate=\"validityDate\"\r\n        :selectedDimension=\"selectedDimension\"\r\n        :dimensionFilters=\"dimensionFilters\"\r\n        @close=\"hierarchyMasterDialogVisible = false\"\r\n        @masterHierarchyCreated=\"onMasterHierarchyCreated\"\r\n    />\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iDimension, iDimensionMetadata, iNodeMetadata, iDimensionFilter, iHierarchy } from '../../HierarchyManagement'\r\nimport { AxiosResponse } from 'axios'\r\nimport moment from 'moment'\r\nimport Card from 'primevue/card'\r\nimport Calendar from 'primevue/calendar'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport HierarchyManagementDimensionsTable from './HierarchyManagementDimensionsTable/HierarchyManagementDimensionsTable.vue'\r\nimport HierarchyManagementHierarchyMasterDialog from './HierarchyManagementHierarchyMasterDialog/HierarchyManagementHierarchyMasterDialog.vue'\r\nimport HierarchyManagementDimensionsFilterCard from './HierarchyManagementDimensionsFilterCard/HierarchyManagementDimensionsFilterCard.vue'\r\nimport mainStore from '../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-dimensions-card',\r\n    components: { Card, Calendar, Dropdown, HierarchyManagementDimensionsTable, HierarchyManagementHierarchyMasterDialog, HierarchyManagementDimensionsFilterCard },\r\n    props: { dimensions: { type: Array as PropType<iDimension[]> }, hierarchyType: { type: String }, selectedHierarchy: { type: Object as PropType<iHierarchy | null> }, validityTreeDate: { type: Object as PropType<Date | null> } },\r\n    emits: ['loading', 'dimensionSelected', 'nodeMetadataChanged', 'validityDateSelected', 'dimensionMetadataChanged', 'synchronized', 'masterHierarchyCreated'],\r\n    data() {\r\n        return {\r\n            validityDate: new Date(),\r\n            selectedDimension: null as iDimension | null,\r\n            hierarchyMasterDialogVisible: false,\r\n            dimensionData: null as any,\r\n            dimensionMetadata: null as iDimensionMetadata | null,\r\n            nodeMetadata: null as iNodeMetadata | null,\r\n            dimensionFilters: [] as iDimensionFilter[],\r\n            filterData: null as { filters: iDimensionFilter[]; showMissingElements: boolean } | null\r\n        }\r\n    },\r\n    computed: {\r\n        synchronizeButtonDisabled(): boolean {\r\n            return !this.dimensionData || this.dimensionData.root.length === 0 || this.hierarchyType?.toUpperCase() !== 'MASTER' || !this.selectedHierarchy\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    async created() {},\r\n    methods: {\r\n        async onValidityDateSelected() {\r\n            this.$emit('validityDateSelected', this.validityDate)\r\n            await this.loadData()\r\n        },\r\n        async onSelectedDimensionChange() {\r\n            this.$emit('dimensionSelected', this.selectedDimension)\r\n            await this.loadData()\r\n        },\r\n        async loadData() {\r\n            await this.loadDimensionData()\r\n            await this.loadDimensionMetadata()\r\n            await this.loadNodeMetadata()\r\n            await this.loadDimensionFilters()\r\n        },\r\n        async loadDimensionData() {\r\n            this.$emit('loading', true)\r\n            this.dimensionData = null\r\n            const date = moment(this.validityDate).format('YYYY-MM-DD')\r\n            let url = `dimensions/dimensionData?dimension=${this.selectedDimension?.DIMENSION_NM}&validityDate=${date}`\r\n            if (this.filterData) {\r\n                if (this.filterData.showMissingElements) {\r\n                    const filterDate = this.validityTreeDate ? moment(this.validityTreeDate).format('YYYY-MM-DD') : ''\r\n                    url = url.concat('&filterDate=' + filterDate)\r\n                    url = url.concat('&filterHierType=' + this.hierarchyType)\r\n                    url = url.concat('&filterHierarchy=' + this.selectedHierarchy?.HIER_NM)\r\n                }\r\n                if (this.filterData.filters.length > 0) url = url.concat('&optionalFilters=' + encodeURI(JSON.stringify(this.filterData.filters)))\r\n            }\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url).then((response: AxiosResponse<any>) => (this.dimensionData = response.data))\r\n            this.$emit('loading', false)\r\n        },\r\n        async loadDimensionMetadata() {\r\n            this.$emit('loading', true)\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `dimensions/dimensionMetadata?dimension=${this.selectedDimension?.DIMENSION_NM}`).then((response: AxiosResponse<any>) => (this.dimensionMetadata = response.data))\r\n            this.$emit('dimensionMetadataChanged', this.dimensionMetadata)\r\n            this.$emit('loading', false)\r\n        },\r\n        async loadNodeMetadata() {\r\n            this.$emit('loading', true)\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `hierarchies/nodeMetadata?dimension=${this.selectedDimension?.DIMENSION_NM}&excludeLeaf=false`).then((response: AxiosResponse<any>) => (this.nodeMetadata = response.data))\r\n            this.$emit('nodeMetadataChanged', this.nodeMetadata)\r\n            this.$emit('loading', false)\r\n        },\r\n        async loadDimensionFilters() {\r\n            this.$emit('loading', true)\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `dimensions/dimensionFilterMetadata?dimension=CDC`).then((response: AxiosResponse<any>) => (this.dimensionFilters = response.data?.DIM_FILTERS))\r\n            this.$emit('loading', false)\r\n        },\r\n        onApplyFilters(filtersData: { filters: iDimensionFilter[]; showMissingElements: boolean }) {\r\n            this.filterData = filtersData\r\n            this.loadDimensionData()\r\n        },\r\n        openHierarchyMasterDialog() {\r\n            this.hierarchyMasterDialogVisible = true\r\n        },\r\n        async synchronize() {\r\n            this.$emit('loading', true)\r\n            const postData = {\r\n                dimension: this.selectedDimension?.DIMENSION_NM,\r\n                validityDate: moment(this.validityDate).format('YYYY-MM-DD'),\r\n                validityTreeDate: this.validityTreeDate ? moment(this.validityTreeDate).format('YYYY-MM-DD') : null,\r\n                filterHierarchy: this.selectedHierarchy?.HIER_NM,\r\n                filterHierType: this.hierarchyType,\r\n                optionalFilters: this.filterData ? this.filterData.filters : []\r\n            }\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `hierarchiesMaster/syncronizeHierarchyMaster`, postData)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    if (response.data.response === 'ok') {\r\n                        this.store.setInfo({\r\n                            title: this.$t('common.info.info'),\r\n                            msg: this.$t('managers.hierarchyManagement.synchronizationSuccess')\r\n                        })\r\n                        this.$emit('synchronized')\r\n                    }\r\n                })\r\n                .catch(() => {})\r\n            this.$emit('loading', false)\r\n        },\r\n        onMasterHierarchyCreated() {\r\n            this.hierarchyMasterDialogVisible = false\r\n            this.$emit('masterHierarchyCreated')\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Dialog class=\"kn-dialog--toolbar--primary node-detail-dialog\" :visible=\"visible\" :modal=\"true\" :closable=\"false\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--primary p-p-0 p-m-0 p-col-12\">\r\n                <template #start>\r\n                    {{ $t('managers.hierarchyManagement.modifyHierarchy') }}\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n\r\n        <div v-if=\"node\" class=\"p-fluid p-formgrid p-grid p-mt-3\">\r\n            <template v-for=\"(item, index) in metadata\" :key=\"index\">\r\n                <div class=\"p-field p-col-12 p-lg-6\" v-if=\"mode === 'createRoot' || item.VISIBLE\">\r\n                    <span class=\"p-float-label\">\r\n                        <Calendar v-if=\"item.TYPE === 'Date'\" v-model=\"node[item.ID]\" :manualInput=\"true\" :disabled=\"mode === 'info' || (!item.EDITABLE && mode !== 'create')\" />\r\n                        <InputText v-else class=\"kn-material-input\" v-model.trim=\"node[item.ID]\" :type=\"item.TYPE === 'Number' ? 'number' : 'text'\" :disabled=\"mode === 'info' || (!item.EDITABLE && mode !== 'create') || item.FIX_VALUE\" />\r\n                        <label class=\"kn-material-input-label\"> {{ item.NAME }}</label>\r\n                    </span>\r\n                </div>\r\n            </template>\r\n        </div>\r\n\r\n        <template #footer>\r\n            <Button class=\"kn-button kn-button--secondary\" @click=\"close\"> {{ mode === 'info' ? $t('common.ok') : $t('common.cancel') }}</Button>\r\n            <Button v-if=\"mode !== 'info'\" class=\"kn-button kn-button--primary\" @click=\"save\"> {{ $t('common.save') }}</Button>\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iNodeMetadataField } from '../../../HierarchyManagement'\r\nimport moment from 'moment'\r\nimport Calendar from 'primevue/calendar'\r\nimport Dialog from 'primevue/dialog'\r\nimport hierarchyManagementHierarchiesTreeDescriptor from './HierarchyManagementHierarchiesTreeDescriptor.json'\r\n\r\nimport deepcopy from 'deepcopy'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-node-detail-dialog',\r\n    components: { Calendar, Dialog },\r\n    props: { visible: { type: Boolean }, selectedNode: { type: Object }, metadata: { type: Array as PropType<iNodeMetadataField[]> }, mode: { type: String } },\r\n    emits: ['save', 'close'],\r\n    data() {\r\n        return {\r\n            hierarchyManagementHierarchiesTreeDescriptor,\r\n            node: null as any\r\n        }\r\n    },\r\n    watch: {\r\n        selectedNode() {\r\n            this.loadNode()\r\n        }\r\n    },\r\n    async created() {\r\n        this.loadNode()\r\n    },\r\n    methods: {\r\n        loadNode() {\r\n            this.node = deepcopy(this.selectedNode)\r\n            this.metadata?.forEach((el: iNodeMetadataField) => {\r\n                if (el.TYPE === 'Date' && this.node[el.ID]) {\r\n                    this.node[el.ID] = this.mode === 'clone' ? new Date() : moment(this.node[el.ID], 'YYYY-MM-DD').toDate()\r\n                }\r\n            })\r\n        },\r\n        close() {\r\n            this.node = null\r\n            this.$emit('close')\r\n        },\r\n        save() {\r\n            this.formatNode()\r\n            this.$emit('save', { node: this.node, mode: this.mode })\r\n            this.node = null\r\n        },\r\n        formatNode() {\r\n            this.node.name = this.node[this.node?.aliasName]\r\n            this.metadata?.forEach((el: iNodeMetadataField) => {\r\n                if (el.TYPE === 'Date' && this.node[el.ID]) {\r\n                    this.node[el.ID] = moment(this.node[el.ID]).format('YYYY-MM-DD')\r\n                }\r\n            })\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\">\r\n.node-detail-dialog {\r\n    width: 60%;\r\n}\r\n</style>\r\n","<template>\r\n    <Dialog class=\"kn-dialog--toolbar--primary hierarchies-target-dialog\" :visible=\"visible\" :modal=\"true\" :closable=\"false\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--primary p-p-0 p-m-0 p-col-12\">\r\n                <template #start>\r\n                    {{ $t('managers.hierarchyManagement.hierarchiesTarget') }}\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n\r\n        <DataTable class=\"p-datatable-sm kn-table\" :value=\"targets\" v-model:selection=\"selectedTargets\" dataKey=\"MT_ID\">\r\n            <template #empty>\r\n                {{ $t('common.info.noDataFound') }}\r\n            </template>\r\n\r\n            <Column selectionMode=\"multiple\" :style=\"hierarchyManagementHierarchiesTreeDescriptor.selectColumnStyle\" />\r\n            <Column field=\"label\" :header=\"$t('common.label')\" :sortable=\"true\">\r\n                <template #body=\"slotProps\">\r\n                    <div>\r\n                        <span\r\n                            ><b> {{ getLabel(slotProps.data) }}</b></span\r\n                        ><br />\r\n                        <span>{{ slotProps.data.PATH_NM_T }}</span>\r\n                    </div>\r\n                </template>\r\n            </Column>\r\n        </DataTable>\r\n\r\n        <template #footer>\r\n            <Button class=\"kn-button kn-button--primary\" @click=\"close\"> {{ $t('common.cancel') }}</Button>\r\n            <Button class=\"kn-button kn-button--primary\" @click=\"save\"> {{ $t('common.ok') }}</Button>\r\n        </template>\r\n    </Dialog>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iHierarchyTarget } from '../../../HierarchyManagement'\r\nimport Column from 'primevue/column'\r\nimport DataTable from 'primevue/datatable'\r\nimport Dialog from 'primevue/dialog'\r\nimport hierarchyManagementHierarchiesTreeDescriptor from './HierarchyManagementHierarchiesTreeDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-node-detail-dialog',\r\n    components: { Column, DataTable, Dialog },\r\n    props: { visible: { type: Boolean }, hierarchiesTargets: { type: Array as PropType<iHierarchyTarget[]> } },\r\n    emits: ['save', 'close'],\r\n    data() {\r\n        return {\r\n            hierarchyManagementHierarchiesTreeDescriptor,\r\n            targets: [] as iHierarchyTarget[],\r\n            selectedTargets: [] as iHierarchyTarget[]\r\n        }\r\n    },\r\n    watch: {\r\n        hierarchiesTargets() {\r\n            if (this.visible) this.loadTargets()\r\n        }\r\n    },\r\n    created() {\r\n        this.loadTargets()\r\n    },\r\n    methods: {\r\n        loadTargets() {\r\n            this.targets = this.hierarchiesTargets as iHierarchyTarget[]\r\n        },\r\n        getLabel(target: iHierarchyTarget) {\r\n            return this.$t('managers.hierarchyManagement.hierarchy').toUpperCase() + ': ' + target.HIER_CD_T + ' - ' + target.HIER_NM_T + ' - ' + this.$t('managers.hierarchyManagement.levelNode') + ': ' + target.NODE_LEV_T\r\n        },\r\n        close() {\r\n            this.selectedTargets = []\r\n            this.$emit('close')\r\n        },\r\n        save() {\r\n            this.$emit('save', [...this.selectedTargets])\r\n            this.selectedTargets = []\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\">\r\n.hierarchies-target-dialog {\r\n    width: 40%;\r\n}\r\n</style>\r\n","<template>\r\n    <div>\r\n        <form class=\"p-mt-2 p-fluid p-formgrid p-grid\">\r\n            <div class=\"p-field p-col-12\">\r\n                <span class=\"p-float-label\">\r\n                    <Dropdown class=\"kn-material-input\" v-model=\"orderBy\" :options=\"hierarchyManagementHierarchiesTreeDescriptor.orderByOptions\" @change=\"sortTree(nodes)\" />\r\n                    <label class=\"kn-material-input-label\"> {{ $t('common.orderBy') + ' ... ' }} </label>\r\n                </span>\r\n            </div>\r\n        </form>\r\n        <Tree class=\"hierarchies-tree p-col-12\" :value=\"nodes\" :filter=\"true\" filterMode=\"lenient\">\r\n            <template #default=\"slotProps\">\r\n                <div\r\n                    class=\"p-d-flex p-flex-row p-ai-center\"\r\n                    :class=\"{ dropzone: dropzoneActive[slotProps.node.key] }\"\r\n                    :draggable=\"!slotProps.node.data.root\"\r\n                    @dragstart.stop=\"onDragStart($event, slotProps.node)\"\r\n                    @mouseover=\"buttonVisible[slotProps.node.key] = true\"\r\n                    @mouseleave=\"buttonVisible[slotProps.node.key] = false\"\r\n                    @drop.stop=\"onDragDrop($event, slotProps.node, slotProps.node.key)\"\r\n                    @dragover.prevent\r\n                    @dragenter.prevent=\"setDropzoneClass(true, slotProps.node)\"\r\n                    @dragleave.prevent=\"setDropzoneClass(false, slotProps.node)\"\r\n                >\r\n                    <span class=\"node-label\">{{ slotProps.node.label }}</span>\r\n                    <div v-show=\"buttonVisible[slotProps.node.key]\">\r\n                        <template v-if=\"treeMode !== 'info'\">\r\n                            <Button v-if=\"slotProps.node.leaf\" icon=\"pi pi-clone\" class=\"p-button-link p-button-sm p-p-0\" v-tooltip.top=\"$t('common.clone')\" @click.stop=\"cloneNode(slotProps.node)\" />\r\n                            <Button v-else icon=\"pi pi-plus\" class=\"p-button-link p-button-sm p-p-0\" v-tooltip.top=\"$t('common.add')\" @click.stop=\"addNode(slotProps.node)\" />\r\n                            <Button v-if=\"!slotProps.node.data.root\" icon=\"pi pi-pencil\" class=\"p-button-link p-button-sm p-p-0\" v-tooltip.top=\"$t('common.edit')\" @click.stop=\"editNode(slotProps.node)\" />\r\n                            <Button v-if=\"!slotProps.node.data.root\" icon=\"pi pi-trash\" class=\"p-button-link p-button-sm p-p-0\" v-tooltip.top=\"$t('common.delete')\" @click.stop=\"deleteNodeConfirm(slotProps.node)\" />\r\n                        </template>\r\n                        <Button icon=\"pi pi-info\" class=\"p-button-link p-button-sm p-p-0\" v-tooltip.top=\"$t('common.detail')\" @click.stop=\"showNodeInfo(slotProps.node)\" />\r\n                    </div>\r\n                </div>\r\n            </template>\r\n        </Tree>\r\n\r\n        <HierarchyManagementNodeDetailDialog :visible=\"detailDialogVisible\" :selectedNode=\"selectedNode\" :metadata=\"metadata\" :mode=\"mode\" @save=\"onNodeSave\" @close=\"closeNodeDialog\" />\r\n        <HierarchyManagementHierarchiesTargetDialog :visible=\"targetDialogVisible\" :hierarchiesTargets=\"relations\" @close=\"closeTargetDialog\" @save=\"onTargetsSave\"></HierarchyManagementHierarchiesTargetDialog>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iNode, iNodeMetadata, iNodeMetadataField, iDimension, iHierarchy, iDimensionMetadata, iHierarchyTarget } from '../../../HierarchyManagement'\r\nimport { AxiosResponse } from 'axios'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport hierarchyManagementHierarchiesTreeDescriptor from './HierarchyManagementHierarchiesTreeDescriptor.json'\r\nimport HierarchyManagementNodeDetailDialog from './HierarchyManagementNodeDetailDialog.vue'\r\nimport HierarchyManagementHierarchiesTargetDialog from './HierarchyManagementHierarchiesTargetDialog.vue'\r\nimport Tree from 'primevue/tree'\r\nimport deepEqual from 'deep-equal'\r\nimport deepcopy from 'deepcopy'\r\nimport cryptoRandomString from 'crypto-random-string'\r\nimport mainStore from '../../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-hierarchies-tree',\r\n    components: { Dropdown, HierarchyManagementNodeDetailDialog, HierarchyManagementHierarchiesTargetDialog, Tree },\r\n    props: {\r\n        propTree: { type: Object },\r\n        nodeMetadata: { type: Object as PropType<iNodeMetadata | null> },\r\n        selectedDimension: { type: Object as PropType<iDimension | null> },\r\n        selectedHierarchy: { type: Object as PropType<iHierarchy | null> },\r\n        dimensionMetadata: { type: Object as PropType<iDimensionMetadata | null> },\r\n        propRelationsMasterTree: { type: Array as PropType<any[]> },\r\n        treeMode: { type: String }\r\n    },\r\n    emits: ['loading', 'treeUpdated'],\r\n    data() {\r\n        return {\r\n            hierarchyManagementHierarchiesTreeDescriptor,\r\n            tree: null as any,\r\n            nodes: [] as iNode[],\r\n            buttonVisible: [],\r\n            detailDialogVisible: false,\r\n            selectedNode: null as any,\r\n            metadata: [] as iNodeMetadataField[],\r\n            mode: '' as string,\r\n            orderBy: '' as string,\r\n            dropzoneActive: [] as boolean[],\r\n            relations: [] as iHierarchyTarget[],\r\n            selectedRelations: [] as iHierarchyTarget[],\r\n            relationsMasterTree: [] as any[],\r\n            targetDialogVisible: false,\r\n            nodeToMove: null as any,\r\n            targetForMove: null as any\r\n        }\r\n    },\r\n    watch: {\r\n        propTree() {\r\n            this.loadTree()\r\n        },\r\n        propRelationsMasterTree() {\r\n            this.loadMasterTreeRelations()\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.loadTree()\r\n        this.loadMasterTreeRelations()\r\n    },\r\n    methods: {\r\n        loadTree() {\r\n            this.tree = this.propTree\r\n            this.orderBy = ''\r\n            if (this.tree) this.createNodeTree()\r\n        },\r\n\r\n        loadMasterTreeRelations() {\r\n            this.relationsMasterTree = this.propRelationsMasterTree as any[]\r\n        },\r\n        createNodeTree() {\r\n            this.nodes = this.formatNodes([this.tree], null)\r\n        },\r\n        formatNodes(tree: any, parent: any) {\r\n            return tree.map((node: any) => {\r\n                node = {\r\n                    key: cryptoRandomString({ length: 16, type: 'base64' }),\r\n                    id: node.id,\r\n                    label: node.name,\r\n                    children: node.children ?? [],\r\n                    data: node,\r\n                    style: this.hierarchyManagementHierarchiesTreeDescriptor.node.style,\r\n                    leaf: node.leaf,\r\n                    parent: parent,\r\n                    icon: node.root ? '' : 'pi pi-bars'\r\n                }\r\n                if (node.children && node.children.length > 0) {\r\n                    node.children = this.formatNodes(node.children, node)\r\n                }\r\n                return node\r\n            })\r\n        },\r\n        sortTree(nodes: iNode[]) {\r\n            let sortValue = ''\r\n            if (this.orderBy === 'name' || this.orderBy === '') {\r\n                sortValue = 'label'\r\n            } else if (this.orderBy === 'id') {\r\n                sortValue = 'id'\r\n            }\r\n            nodes.sort((a: iNode, b: iNode) => {\r\n                return a[sortValue] > b[sortValue] ? 1 : -1\r\n            })\r\n            nodes.forEach((childNode: iNode) => {\r\n                if (childNode.children) {\r\n                    this.sortTree(childNode.children)\r\n                }\r\n            })\r\n        },\r\n        addNode(node: iNode) {\r\n            this.mode = 'create'\r\n            this.selectedNode = { CDC_CD_LEV: '', CDC_OCD_LEV: '', CDC_NM_LEV: '', ORDER_LEV: '', FORM_LIV: '', aliasId: this.selectedDimension?.DIMENSION_NM + '_CD_LEV', aliasName: this.selectedDimension?.DIMENSION_NM + '_NM_LEV', children: [], leaf: false, parent: node }\r\n            this.setMetadata()\r\n\r\n            this.detailDialogVisible = true\r\n        },\r\n        cloneNode(node: iNode) {\r\n            this.selectedNode = { ...node.data, originalNode: deepcopy(node), parentNode: node.parent }\r\n            this.setMetadata()\r\n            this.mode = 'clone'\r\n            this.detailDialogVisible = true\r\n        },\r\n        editNode(node: iNode) {\r\n            this.selectedNode = { ...node.data, key: node.key }\r\n            this.setMetadata()\r\n            this.mode = 'edit'\r\n            this.detailDialogVisible = true\r\n        },\r\n        deleteNodeConfirm(node: iNode) {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.toast.deleteConfirmTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => this.deleteNode(node)\r\n            })\r\n        },\r\n        deleteNode(node: iNode) {\r\n            if (!node.parent) return\r\n            const index = node.parent.children.findIndex((el: iNode) => el.key === node.key)\r\n            if (index !== -1) node.parent.children.splice(index, 1)\r\n\r\n            const relationsIndex = this.relationsMasterTree.findIndex((el: any) => el.leafData.CDC_NM === node.data.CDC_NM && el.leafData.CDC_CD === node.data.CDC_CD)\r\n            if (relationsIndex !== -1) this.relationsMasterTree.splice(relationsIndex, 1)\r\n\r\n            this.$emit('treeUpdated', this.nodes)\r\n        },\r\n        showNodeInfo(node: iNode) {\r\n            this.selectedNode = node.data\r\n\r\n            this.setMetadata()\r\n            this.mode = 'info'\r\n            this.detailDialogVisible = true\r\n        },\r\n        setMetadata() {\r\n            if (!this.nodeMetadata) return\r\n\r\n            if (this.selectedNode.root) {\r\n                this.metadata = this.nodeMetadata.GENERAL_FIELDS\r\n            } else if (this.selectedNode.leaf) {\r\n                this.metadata = this.nodeMetadata.LEAF_FIELDS\r\n            } else {\r\n                this.metadata = this.nodeMetadata.NODE_FIELDS\r\n            }\r\n        },\r\n        closeNodeDialog() {\r\n            this.selectedNode = null\r\n            this.metadata = []\r\n            this.mode = ''\r\n            this.detailDialogVisible = false\r\n        },\r\n        onNodeSave(payload: any) {\r\n            if (payload.mode === 'edit') {\r\n                this.updateNode(payload.node)\r\n            } else if (payload.mode === 'create') {\r\n                this.createNode(payload.node)\r\n            } else if (payload.mode === 'clone') {\r\n                this.copyNode(payload.node)\r\n            }\r\n            this.detailDialogVisible = false\r\n        },\r\n        updateNode(node: any) {\r\n            let tempNode = null as any\r\n            for (let i = 0; i < this.nodes.length; i++) {\r\n                tempNode = this.findNode(this.nodes[i], node.key)\r\n                if (tempNode) break\r\n            }\r\n\r\n            if (tempNode) {\r\n                tempNode.data = node\r\n                tempNode.key = cryptoRandomString({ length: 16, type: 'base64' })\r\n                tempNode.label = node.name\r\n            }\r\n            this.$emit('treeUpdated', this.nodes)\r\n        },\r\n        createNode(node: any) {\r\n            node.id = node.name\r\n\r\n            let tempNode = this.findNodeInTree(node.parent.key) as any\r\n            node.LEVEL = tempNode.data.LEVEL + 1\r\n            if (tempNode) tempNode.children.push({ key: cryptoRandomString({ length: 16, type: 'base64' }), id: node.name, label: node.name, children: node.children, data: node, style: this.hierarchyManagementHierarchiesTreeDescriptor.node.style, leaf: node.leaf, parent: tempNode })\r\n            this.$emit('treeUpdated', this.nodes)\r\n        },\r\n        copyNode(node: any) {\r\n            const originalNode = node.originalNode\r\n            const parentNode = node.parentNode\r\n            delete node.originalNode\r\n            delete node.parentNode\r\n\r\n            if (deepEqual(node, originalNode)) {\r\n                this.store.setError({\r\n                    title: this.$t('common.error.generic'),\r\n                    msg: this.$t('managers.hierarchyManagement.nodeCloneError')\r\n                })\r\n                return\r\n            }\r\n\r\n            this.createNode({ ...node, parent: parentNode })\r\n            this.$emit('treeUpdated', this.nodes)\r\n        },\r\n        findNodeInTree(key: any) {\r\n            let node = null as any\r\n            for (let i = 0; i < this.nodes.length; i++) {\r\n                node = this.findNode(this.nodes[i], key)\r\n                if (node) break\r\n            }\r\n\r\n            return node\r\n        },\r\n        findNode(node: iNode, nodeKey: string) {\r\n            if (node.key === nodeKey) {\r\n                return node\r\n            } else if (node.children != null) {\r\n                let result = null as any\r\n                for (let i = 0; result == null && i < node.children.length; i++) {\r\n                    result = this.findNode(node.children[i], nodeKey)\r\n                }\r\n                return result\r\n            }\r\n            return null\r\n        },\r\n        async onDragDrop(event: any, item: any, key: any) {\r\n            this.dropzoneActive[key] = false\r\n            if (this.treeMode === 'info') return\r\n            const droppedItem = JSON.parse(event.dataTransfer.getData('text/plain'))\r\n            this.handleItemDrop(droppedItem, item)\r\n        },\r\n        async handleItemDrop(droppedItem: any, item: any) {\r\n            droppedItem.children = this.formatNodeAfterDrop(droppedItem.children, droppedItem)\r\n            const parentNode = item.data.leaf ? item.parent : item\r\n            if (droppedItem.movedFrom === 'tree') {\r\n                this.moveNodeInsideTree(droppedItem, item)\r\n            } else if (droppedItem.movedFrom === 'sourceTree') {\r\n                this.addNodeFromSourceTree(droppedItem, item)\r\n            } else {\r\n                await this.loadRelations(droppedItem, parentNode)\r\n            }\r\n        },\r\n        formatNodeAfterDrop(nodes: iNode[], parent: iNode) {\r\n            return nodes?.map((node: any) => {\r\n                node = {\r\n                    ...node,\r\n                    children: node.children,\r\n                    parent: parent\r\n                }\r\n                if (node.parentKey) delete node.parentKey\r\n                if (node.children && node.children.length > 0) {\r\n                    node.children = this.formatNodeForDrag(node.children.node)\r\n                }\r\n                return node\r\n            })\r\n        },\r\n        setDropzoneClass(value: boolean, node: any) {\r\n            this.dropzoneActive[node.key] = value\r\n        },\r\n        async loadRelations(node: any, targetNode: any) {\r\n            if (!this.selectedDimension || !this.selectedHierarchy) return\r\n            this.$emit('loading', true)\r\n            const nodeSourceCode = targetNode.data[targetNode.data.aliasId]\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `hierarchies/getRelationsMasterTechnical?dimension=${this.selectedDimension.DIMENSION_NM}&hierSourceCode=${this.selectedHierarchy.HIER_CD}&hierSourceName=${this.selectedHierarchy.HIER_NM}&nodeSourceCode=${nodeSourceCode}`)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.relations = response.data?.root\r\n                    if (this.relations && this.relations.length === 0) {\r\n                        this.store.setInfo({\r\n                            title: this.$t('common.info.info'),\r\n                            msg: this.$t('managers.hierarchyManagement.noHierarchiesForPropagation')\r\n                        })\r\n                        this.copyNodeFromTableToTree(node, targetNode)\r\n                    } else {\r\n                        this.nodeToMove = node\r\n                        this.targetForMove = targetNode\r\n                        this.targetDialogVisible = true\r\n                    }\r\n                })\r\n\r\n            this.$emit('loading', false)\r\n        },\r\n        copyNodeFromTableToTree(node: any, targetNode: any) {\r\n            let parentNode = this.findNodeInTree(targetNode.key) as any\r\n\r\n            if (!parentNode) return\r\n\r\n            const dimensionName = this.selectedDimension ? this.selectedDimension.DIMENSION_NM : ''\r\n            const dimensionPrefix = this.selectedDimension ? this.selectedDimension.DIMENSION_PREFIX : ''\r\n\r\n            const keyName = dimensionName + '_NM'\r\n            const keyId = dimensionPrefix + '_CD'\r\n            node.name = node[keyName]\r\n            node.id = node[keyId]\r\n            node.LEAF_PARENT_NM = parentNode.data[parentNode.data.aliasName]\r\n            node.LEAF_PARENT_CD = parentNode.data[parentNode.data.aliasId]\r\n            node.LEAF_ORIG_PARENT_CD = parentNode.data[parentNode.data.aliasId]\r\n            node.LEVEL = parentNode.LEVEL ? parentNode.data.LEVEL + 1 : 1\r\n            node.leaf = true\r\n            const fields = this.nodeMetadata\r\n                ? this.nodeMetadata.LEAF_FIELDS.map((el: iNodeMetadataField) => {\r\n                      return { key: el.ID, type: el.TYPE }\r\n                  })\r\n                : []\r\n\r\n            for (let i = 0; i < fields.length; i++) {\r\n                if (!node[fields[i].key]) {\r\n                    let value = '' as string | number | Date\r\n                    if (fields[i].type === 'Date') value = new Date()\r\n                    else if (fields[i].type === 'Number') value = -1\r\n                    node[fields[i].key] = value\r\n                }\r\n            }\r\n\r\n            const leafFields = this.dimensionMetadata?.MATCH_LEAF_FIELDS\r\n            for (let key in leafFields) {\r\n                if (node[key]) {\r\n                    node[leafFields[key]] = node[key]\r\n                }\r\n            }\r\n\r\n            if (this.selectedRelations) {\r\n                const newElement = { leafData: { [keyName]: node[keyName], [keyId]: node[keyId], BEGIN_DT: node.BEGIN_DT, END_DT: node.END_DT }, relationsArray: [] as any[] }\r\n                newElement.leafData[dimensionName + '_ID'] = node[dimensionName + '_ID']\r\n\r\n                for (let i = 0; i < this.selectedRelations.length; i++) {\r\n                    newElement.relationsArray.push(deepcopy(this.selectedRelations[i]))\r\n                }\r\n\r\n                this.relationsMasterTree.push(newElement)\r\n            }\r\n\r\n            parentNode.children.push({ key: cryptoRandomString({ length: 16, type: 'base64' }), id: node.name, label: node.name, children: [], data: node, style: this.hierarchyManagementHierarchiesTreeDescriptor.node.style, leaf: true, parent: parentNode })\r\n            this.nodeToMove = null\r\n            this.targetForMove = null\r\n            this.$emit('treeUpdated', this.nodes)\r\n        },\r\n        onDragStart(event: any, item: any) {\r\n            const tempItem = deepcopy(item)\r\n            tempItem.children = this.formatNodeForDrag(tempItem.children)\r\n            tempItem.movedFrom = this.treeMode === 'info' ? 'sourceTree' : 'tree'\r\n            tempItem.parentKey = item.parent ? item.parent.key : item.parentKey\r\n            delete tempItem.parent\r\n            event.dataTransfer.setData('text/plain', JSON.stringify(tempItem))\r\n            event.dataTransfer.dropEffect = 'move'\r\n            event.dataTransfer.effectAllowed = 'move'\r\n        },\r\n        formatNodeForDrag(nodes: iNode[]) {\r\n            return nodes.map((node: any) => {\r\n                node = {\r\n                    ...node,\r\n                    children: node.children\r\n                }\r\n                if (node.parent) delete node.parent\r\n                if (node.children && node.children.length > 0) {\r\n                    node.children = this.formatNodeForDrag(node.children)\r\n                }\r\n                return node\r\n            })\r\n        },\r\n        moveNodeInsideTree(node: any, parent: any) {\r\n            delete node.movedFrom\r\n\r\n            let parentToAdd = this.findNodeInTree(parent.key)\r\n            let parentToRemoveFrom = this.findNodeInTree(node.parentKey)\r\n\r\n            if (!parentToAdd || !parentToRemoveFrom) return\r\n\r\n            const index = parentToRemoveFrom.children?.findIndex((el: any) => el.key === node.key)\r\n            if (index !== -1) parentToRemoveFrom.children.splice(index, 1)\r\n\r\n            parentToAdd.children ? parentToAdd.children.push({ ...node, parentKey: parentToAdd.key }) : (parentToAdd.children = [{ ...node, parentKey: parentToAdd.key }])\r\n\r\n            this.$emit('treeUpdated', this.nodes)\r\n        },\r\n        closeTargetDialog() {\r\n            this.selectedRelations = []\r\n            this.targetDialogVisible = false\r\n        },\r\n        onTargetsSave(targets: iHierarchyTarget[]) {\r\n            this.selectedRelations = targets\r\n            this.targetDialogVisible = false\r\n            this.copyNodeFromTableToTree(this.nodeToMove, this.targetForMove)\r\n        },\r\n        addNodeFromSourceTree(node: any, parent: any) {\r\n            delete node.movedFrom\r\n            node.parent = parent\r\n\r\n            let parentToAdd = this.findNodeInTree(parent.key)\r\n            parentToAdd.children ? parentToAdd.children.push({ ...node, parentKey: parentToAdd.key, key: cryptoRandomString({ length: 4, type: 'base64' }) }) : (parentToAdd.children = [{ ...node, parentKey: parentToAdd.key, key: cryptoRandomString({ length: 16, type: 'base64' }) }])\r\n            this.$emit('treeUpdated', this.nodes)\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.hierarchies-tree {\r\n    border: none;\r\n}\r\n\r\n.dropzone {\r\n    background-color: #c2c2c2;\r\n    color: white;\r\n    width: 200px;\r\n    height: 30px;\r\n    border: 1px dashed;\r\n}\r\n</style>\r\n<style>\r\n.hierarchies-tree .p-tree-filter-container .p-tree-filter {\r\n    border-top: none !important;\r\n    border-left: none !important;\r\n    border-right: none !important;\r\n    border-radius: 0 !important;\r\n}\r\n</style>\r\n","<template>\r\n    <Toolbar class=\"kn-toolbar kn-toolbar--default\">\r\n        <template #start>\r\n            <Button v-if=\"!expandFilterCard\" icon=\"fas fa-chevron-down\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"expandFilterCard = true\" />\r\n            <Button v-else icon=\"fas fa-chevron-up\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"expandFilterCard = false\" />\r\n            <span>{{ $t('common.filters') }}</span>\r\n        </template>\r\n        <template #end>\r\n            <Button v-if=\"expandFilterCard\" icon=\"pi pi-check\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"applyFilters\" />\r\n            <Button v-if=\"expandFilterCard\" icon=\"fas fa-eraser\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"resetFilters\" />\r\n        </template>\r\n    </Toolbar>\r\n    <Card v-show=\"expandFilterCard\">\r\n        <template #content>\r\n            <div class=\"p-grid p-fluid p-formgrid\">\r\n                <div class=\"p-field-checkbox p-col-12\">\r\n                    <Checkbox class=\"p-mr-2\" v-model=\"showMissingElements\" :binary=\"true\" :disabled=\"!selectedHierarchy\" />\r\n                    <label class=\"kn-material-input-label\"> {{ $t('managers.hierarchyManagement.showMissingElements') }}</label>\r\n                </div>\r\n                <div class=\"p-field p-col-12\">\r\n                    <span class=\"p-float-label\">\r\n                        <Calendar class=\"kn-material-input\" v-model=\"afterDate\" :manualInput=\"true\" :showIcon=\"true\" :disabled=\"!selectedHierarchy\" />\r\n                        <label class=\"kn-material-input-label\"> {{ $t('managers.hierarchyManagement.afterDate') }}</label>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iHierarchy } from '../../../HierarchyManagement'\r\nimport Calendar from 'primevue/calendar'\r\nimport Checkbox from 'primevue/checkbox'\r\nimport Card from 'primevue/card'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-hierarchies-filter-card',\r\n    components: { Calendar, Checkbox, Card },\r\n    props: { selectedHierarchy: { type: Object as PropType<iHierarchy | null> } },\r\n    emits: ['applyFilters'],\r\n    data() {\r\n        return {\r\n            showMissingElements: false,\r\n            expandFilterCard: false,\r\n            afterDate: null as Date | null\r\n        }\r\n    },\r\n    created() {},\r\n    methods: {\r\n        applyFilters() {\r\n            this.$emit('applyFilters', { showMissingElements: this.showMissingElements, afterDate: this.afterDate })\r\n        },\r\n        resetFilters() {\r\n            this.showMissingElements = false\r\n            this.afterDate = null\r\n            this.$emit('applyFilters', null)\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2 p-d-flex p-flex-column hierarchy-scrollable-card\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    <i class=\"fa fa-list p-mr-2\"></i>\r\n                    <span>{{ $t('managers.hierarchyManagement.hierarchies') }}</span>\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-12 p-lg-6\">\r\n                    <Calendar class=\"kn-material-input\" v-model=\"date\" :manualInput=\"true\" :showIcon=\"true\" @dateSelect=\"onTreeDateChanged\" />\r\n                </div>\r\n                <div class=\"p-field p-col-8 p-lg-4\">\r\n                    <Button class=\"kn-button kn-button--primary\" :label=\"$t('common.save')\" :disabled=\"!treeModel\" @click=\"handleSaveHiararchy\" />\r\n                </div>\r\n                <div class=\"p-field-checkbox p-col-4 p-lg-2\">\r\n                    <Checkbox v-model=\"backup\" :binary=\"true\" :disabled=\"!treeModel\" />\r\n                    <label class=\"kn-material-input-label p-ml-2\"> {{ $t('managers.hierarchyManagement.backup') }}</label>\r\n                </div>\r\n                <div class=\"p-field p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown class=\"kn-material-input\" v-model=\"hierarchyType\" :options=\"hierarchyManagementHierarchiesCardDescriptor.hierarchyTypes\" :disabled=\"!dimension\" @change=\"onHierarchyTypeSelected\" />\r\n                        <label class=\"kn-material-input-label\"> {{ $t('managers.hierarchyManagement.hierarchyType') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col-6\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown class=\"kn-material-input\" v-model=\"selectedHierarchy\" :options=\"hierarchies\" optionLabel=\"HIER_NM\" :disabled=\"!dimension\" @change=\"onHierarchySelected\" />\r\n                        <label class=\"kn-material-input-label\"> {{ $t('managers.hierarchyManagement.hierarchies') }} </label>\r\n                    </span>\r\n                </div>\r\n            </form>\r\n\r\n            <HierarchyManagementHierarchiesFilterCard :selectedHierarchy=\"selectedHierarchy\" @applyFilters=\"onApplyFilters\" />\r\n            <HierarchyManagementHierarchiesTree\r\n                v-show=\"tree\"\r\n                :propTree=\"tree\"\r\n                :nodeMetadata=\"nodeMetadata\"\r\n                :selectedDimension=\"dimension\"\r\n                :selectedHierarchy=\"selectedHierarchy\"\r\n                :dimensionMetadata=\"dimensionMetadata\"\r\n                :propRelationsMasterTree=\"relationsMasterTree\"\r\n                @treeUpdated=\"updateTreeModel\"\r\n                @loading=\"$emit('loading', $event)\"\r\n            />\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iDimension, iHierarchy, iNodeMetadata, iNode, iDimensionMetadata } from '../../HierarchyManagement'\r\nimport { AxiosResponse } from 'axios'\r\nimport moment from 'moment'\r\nimport Card from 'primevue/card'\r\nimport Calendar from 'primevue/calendar'\r\nimport Checkbox from 'primevue/checkbox'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport hierarchyManagementHierarchiesCardDescriptor from './HierarchyManagementHierarchiesCardDescriptor.json'\r\nimport HierarchyManagementHierarchiesTree from './HierarchyManagementHierarchiesTree/HierarchyManagementHierarchiesTree.vue'\r\nimport HierarchyManagementHierarchiesFilterCard from './HierarchyManagementHierarchiesFilterCard/HierarchyManagementHierarchiesFilterCard.vue'\r\nimport mainStore from '../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-hierarchies-card',\r\n    components: { Card, Calendar, Checkbox, Dropdown, HierarchyManagementHierarchiesTree, HierarchyManagementHierarchiesFilterCard },\r\n    props: {\r\n        selectedDimension: { type: Object as PropType<iDimension | null> },\r\n        nodeMetadata: { type: Object as PropType<iNodeMetadata | null> },\r\n        validityDate: { type: Object as PropType<Date | null> },\r\n        dimensionMetadata: { type: Object as PropType<iDimensionMetadata | null> },\r\n        synchronizationTrigger: { type: Boolean },\r\n        reloadHierarchiesTrigger: { type: Boolean }\r\n    },\r\n    emits: ['loading', 'hierarchySelected', 'dateSelected', 'hierarchyTypeSelected'],\r\n    data() {\r\n        return {\r\n            hierarchyManagementHierarchiesCardDescriptor,\r\n            date: new Date(),\r\n            backup: true,\r\n            dimension: null as iDimension | null,\r\n            hierarchyType: '' as string,\r\n            hierarchies: [] as iHierarchy[],\r\n            selectedHierarchy: null as iHierarchy | null,\r\n            tree: null as any,\r\n            treeModel: null as any,\r\n            filterData: null as { showMissingElements: boolean; afterDate: Date | null } | null,\r\n            relationsMasterTree: [] as any[]\r\n        }\r\n    },\r\n    computed: {},\r\n    watch: {\r\n        selectedDimension() {\r\n            this.loadDimension()\r\n        },\r\n        synchronizationTrigger() {\r\n            this.loadHierarchyTree()\r\n        },\r\n        reloadHierarchiesTrigger() {\r\n            if (this.hierarchyType === 'MASTER') this.loadHierarchies()\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {\r\n        this.loadDimension()\r\n    },\r\n    methods: {\r\n        loadDimension() {\r\n            this.dimension = this.selectedDimension as iDimension\r\n        },\r\n\r\n        async loadHierarchies() {\r\n            this.$emit('loading', true)\r\n            const url = this.hierarchyType === 'MASTER' ? `hierarchiesMaster/getHierarchiesMaster?dimension=${this.selectedDimension?.DIMENSION_NM}` : `hierarchiesTechnical/getHierarchiesTechnical?dimension=${this.selectedDimension?.DIMENSION_NM}`\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url).then((response: AxiosResponse<any>) => (this.hierarchies = response.data))\r\n            this.relationsMasterTree = []\r\n            this.$emit('loading', false)\r\n        },\r\n        async loadHierarchyTree() {\r\n            this.$emit('loading', true)\r\n            const date = moment(this.date).format('YYYY-MM-DD')\r\n            let url = `hierarchies/getHierarchyTree?dimension=${this.selectedDimension?.DIMENSION_NM}&filterHierarchy=${this.selectedHierarchy?.HIER_NM}&filterType=${this.hierarchyType}&validityDate=${date}`\r\n            if (this.filterData) {\r\n                if (this.filterData.showMissingElements) url = url.concat('&filterDimension=' + this.filterData.showMissingElements)\r\n                if (this.validityDate) url = url.concat('&optionDate=' + moment(this.validityDate).format('YYYY-MM-DD'))\r\n                if (this.filterData.afterDate) url = url.concat('&filterDate=' + moment(this.filterData.afterDate).format('YYYY-MM-DD'))\r\n            }\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url)\r\n                .then((response: AxiosResponse<any>) => (this.tree = response.data))\r\n                .catch(() => {})\r\n            this.relationsMasterTree = []\r\n            this.$emit('loading', false)\r\n        },\r\n        async onHierarchyTypeSelected() {\r\n            this.selectedHierarchy = null\r\n            this.$emit('hierarchyTypeSelected', this.hierarchyType)\r\n            this.$emit('hierarchySelected', this.selectedHierarchy)\r\n            await this.loadHierarchies()\r\n        },\r\n        async onHierarchySelected() {\r\n            this.$emit('hierarchySelected', this.selectedHierarchy)\r\n            await this.loadHierarchyTree()\r\n        },\r\n        async onTreeDateChanged() {\r\n            this.$emit('dateSelected', this.date)\r\n            await this.loadHierarchyTree()\r\n        },\r\n        onApplyFilters(filterData: { showMissingElements: boolean; afterDate: Date | null }) {\r\n            this.filterData = filterData\r\n            this.loadHierarchyTree()\r\n        },\r\n        updateTreeModel(nodes: iNode[]) {\r\n            this.treeModel = this.formatNodes(nodes)[0]\r\n        },\r\n        formatNodes(nodes: iNode[]) {\r\n            return nodes?.map((node: any) => {\r\n                node = {\r\n                    ...node.data,\r\n                    children: node.children\r\n                }\r\n                if (node.parent) delete node.parent\r\n                if (node.leaf && node.children) delete node.children\r\n                if (node.children && node.children.length > 0) {\r\n                    node.children = this.formatNodes(node.children)\r\n                }\r\n                return node\r\n            })\r\n        },\r\n        async handleSaveHiararchy() {\r\n            this.$emit('loading', true)\r\n\r\n            if (this.checkIfNodesWithoutChildren(this.treeModel)) {\r\n                this.$confirm.require({\r\n                    message: this.$t('managers.hierarchyManagement.parentWithoutChildrenConfirm'),\r\n                    header: this.$t('managers.hierarchyManagement.saveChanges'),\r\n                    icon: 'pi pi-exclamation-triangle',\r\n                    accept: async () => await this.saveHierarchy()\r\n                })\r\n            } else {\r\n                await this.saveHierarchy()\r\n            }\r\n            this.$emit('loading', false)\r\n        },\r\n        async saveHierarchy() {\r\n            if (!this.dimension || !this.selectedHierarchy) return\r\n\r\n            this.updateLevelRecursive(this.treeModel, 0)\r\n            const postData = {\r\n                dimension: this.dimension.DIMENSION_NM,\r\n                code: this.selectedHierarchy.HIER_CD,\r\n                description: this.selectedHierarchy.HIER_DS,\r\n                name: this.selectedHierarchy.HIER_NM,\r\n                type: this.selectedHierarchy.HIER_TP,\r\n                dateValidity: moment(this.date).format('YYYY-MM-DD'),\r\n                isInsert: false,\r\n                doBackup: this.backup,\r\n                relationsMT: this.relationsMasterTree,\r\n                root: this.treeModel\r\n            }\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `hierarchies/saveHierarchy`, postData)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    if (response.data.response === 'ok') {\r\n                        this.store.setInfo({ title: this.$t('common.toast.createTitle'), msg: this.$t('common.toast.success') })\r\n                        this.loadHierarchyTree()\r\n                    }\r\n                })\r\n                .catch(() => {})\r\n        },\r\n        updateLevelRecursive(node, level) {\r\n            if (level !== 0) node.LEVEL = level\r\n            if (node.children && node.children.length > 0) {\r\n                for (let i = 0; i < node.children.length; i++) {\r\n                    this.updateLevelRecursive(node.children[i], level + 1)\r\n                }\r\n            }\r\n        },\r\n        checkIfNodesWithoutChildren(node: any) {\r\n            if (!node.root && !node.leaf && node.children?.length === 0) {\r\n                return true\r\n            } else if (node.children != null) {\r\n                let result = false as any\r\n                for (let i = 0; result === false && i < node.children.length; i++) {\r\n                    result = this.checkIfNodesWithoutChildren(node.children[i])\r\n                }\r\n                return result\r\n            }\r\n            return false\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n","<template>\r\n    <div class=\"p-d-flex p-flex-row\">\r\n        <HierarchyManagementDimensionsCard\r\n            :dimensions=\"dimensions\"\r\n            :selectedHierarchy=\"selectedHierarchy\"\r\n            :validityTreeDate=\"validityTreeDate\"\r\n            :hierarchyType=\"hierarchyType\"\r\n            @synchronized=\"onSynchronized\"\r\n            @dimensionSelected=\"setSelectedDimension\"\r\n            @loading=\"$emit('loading', $event)\"\r\n            @nodeMetadataChanged=\"onNodeMetadataChange\"\r\n            @dimensionMetadataChanged=\"onDimensionMetadataChange\"\r\n            @validityDateSelected=\"setValidityDate\"\r\n            @masterHierarchyCreated=\"onMasterHierarchyCreated\"\r\n        />\r\n        <HierarchyManagementHierarchiesCard\r\n            :selectedDimension=\"selectedDimension\"\r\n            :nodeMetadata=\"nodeMetadata\"\r\n            :validityDate=\"validityDate\"\r\n            :dimensionMetadata=\"dimensionMetadata\"\r\n            :synchronizationTrigger=\"synchronizationTrigger\"\r\n            :reloadHierarchiesTrigger=\"reloadHierarchiesTrigger\"\r\n            @loading=\"$emit('loading', $event)\"\r\n            @hierarchyTypeSelected=\"onHierarchyTypeSelected\"\r\n            @hierarchySelected=\"onHierarchySelected\"\r\n            @dateSelected=\"onValidityTreeDateSelected\"\r\n        />\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iDimension, iNodeMetadata, iDimensionMetadata, iHierarchy } from '../HierarchyManagement'\r\nimport HierarchyManagementDimensionsCard from './HierarchyManagementDimensionsCard/HierarchyManagementDimensionsCard.vue'\r\nimport HierarchyManagementHierarchiesCard from './HierarchyManagementHierarchiesCard/HierarchyManagementHierarchiesCard.vue'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-master-tab',\r\n    components: { HierarchyManagementDimensionsCard, HierarchyManagementHierarchiesCard },\r\n    props: { dimensions: { type: Array as PropType<iDimension[]> } },\r\n    data() {\r\n        return {\r\n            selectedDimension: null as iDimension | null,\r\n            nodeMetadata: null as iNodeMetadata | null,\r\n            validityDate: new Date(),\r\n            dimensionMetadata: null as iDimensionMetadata | null,\r\n            hierarchyType: '' as string,\r\n            selectedHierarchy: null as iHierarchy | null,\r\n            validityTreeDate: new Date() as Date | null,\r\n            synchronizationTrigger: false,\r\n            reloadHierarchiesTrigger: false\r\n        }\r\n    },\r\n    async created() {},\r\n    methods: {\r\n        setSelectedDimension(dimension: iDimension | null) {\r\n            this.selectedDimension = dimension\r\n        },\r\n        onNodeMetadataChange(metadata: iNodeMetadata | null) {\r\n            this.nodeMetadata = metadata\r\n        },\r\n        setValidityDate(date: Date) {\r\n            this.validityDate = date\r\n        },\r\n        onDimensionMetadataChange(metadata: iDimensionMetadata | null) {\r\n            this.dimensionMetadata = metadata\r\n        },\r\n        onHierarchyTypeSelected(hierarchyType: string) {\r\n            this.hierarchyType = hierarchyType\r\n        },\r\n        onHierarchySelected(hierarchy: iHierarchy | null) {\r\n            this.selectedHierarchy = hierarchy\r\n        },\r\n        onValidityTreeDateSelected(date: Date | null) {\r\n            this.validityTreeDate = date\r\n        },\r\n        onSynchronized() {\r\n            this.synchronizationTrigger = !this.synchronizationTrigger\r\n        },\r\n        onMasterHierarchyCreated() {\r\n            this.reloadHierarchiesTrigger = !this.reloadHierarchiesTrigger\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2 p-d-flex p-flex-column hierarchy-scrollable-card\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    <i class=\"fa fa-list p-mr-2\"></i>\r\n                    <span>{{ $t('managers.hierarchyManagement.hierarchiesSource') }}</span>\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-12 p-lg-3\">\r\n                    <Calendar class=\"kn-material-input\" v-model=\"validityDate\" :manualInput=\"true\" :showIcon=\"true\" @dateSelect=\"onValidityDateSelected\" />\r\n                </div>\r\n                <div class=\"p-field p-col-12 p-lg-3\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown class=\"kn-material-input\" v-model=\"selectedDimension\" :options=\"dimensions\" optionLabel=\"DIMENSION_NM\" @change=\"onSelectedDimensionChange\" />\r\n                        <label class=\"kn-material-input-label\"> {{ $t('managers.hierarchyManagement.dimensions') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col-12 p-lg-3\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown class=\"kn-material-input\" v-model=\"hierarchyType\" :options=\"hierarchyManagementSourceCardDescriptor.hierarchyTypes\" :disabled=\"!selectedDimension\" @change=\"onHierarchyTypeSelected\" />\r\n                        <label class=\"kn-material-input-label\"> {{ $t('managers.hierarchyManagement.hierarchyType') }} </label>\r\n                    </span>\r\n                </div>\r\n                <div class=\"p-field p-col-12 p-lg-3\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown class=\"kn-material-input\" v-model=\"selectedHierarchy\" :options=\"hierarchies\" optionLabel=\"HIER_NM\" :disabled=\"!hierarchyType\" @change=\"onHierarchySelected\" />\r\n                        <label class=\"kn-material-input-label\"> {{ $t('managers.hierarchyManagement.hierarchies') }} </label>\r\n                    </span>\r\n                </div>\r\n            </form>\r\n\r\n            <HierarchyManagementHierarchiesFilterCard :selectedHierarchy=\"selectedHierarchy\" @applyFilters=\"onApplyFilters\"></HierarchyManagementHierarchiesFilterCard>\r\n            <HierarchyManagementHierarchiesTree\r\n                v-if=\"tree\"\r\n                :propTree=\"tree\"\r\n                :nodeMetadata=\"nodeMetadata\"\r\n                :selectedDimension=\"selectedDimension\"\r\n                :selectedHierarchy=\"selectedHierarchy\"\r\n                :dimensionMetadata=\"dimensionMetadata\"\r\n                treeMode=\"info\"\r\n                @loading=\"$emit('loading', $event)\"\r\n            ></HierarchyManagementHierarchiesTree>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iDimension, iHierarchy, iDimensionMetadata, iNodeMetadata } from '../../HierarchyManagement'\r\nimport { AxiosResponse } from 'axios'\r\nimport moment from 'moment'\r\nimport Card from 'primevue/card'\r\nimport Calendar from 'primevue/calendar'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport hierarchyManagementSourceCardDescriptor from './HierarchyManagementSourceCardDescriptor.json'\r\nimport HierarchyManagementHierarchiesTree from '../../HierarchyManagementMasterTab/HierarchyManagementHierarchiesCard/HierarchyManagementHierarchiesTree/HierarchyManagementHierarchiesTree.vue'\r\nimport HierarchyManagementHierarchiesFilterCard from '../../HierarchyManagementMasterTab/HierarchyManagementHierarchiesCard/HierarchyManagementHierarchiesFilterCard/HierarchyManagementHierarchiesFilterCard.vue'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-source-card',\r\n    components: { Card, Calendar, Dropdown, HierarchyManagementHierarchiesTree, HierarchyManagementHierarchiesFilterCard },\r\n    props: { dimensions: { type: Array as PropType<iDimension[]> }, optionsDate: { type: Date } },\r\n    emits: ['loading', 'validityDateSelected', 'dimensionSelected', 'nodeMetadataChanged', 'hierarchyTypeSelected', 'hierarchySelected'],\r\n    data() {\r\n        return {\r\n            hierarchyManagementSourceCardDescriptor,\r\n            validityDate: new Date(),\r\n            selectedDimension: null as iDimension | null,\r\n            dimensionMetadata: null as iDimensionMetadata | null,\r\n            nodeMetadata: null as iNodeMetadata | null,\r\n            hierarchyType: '' as string,\r\n            hierarchies: [] as iHierarchy[],\r\n            selectedHierarchy: null as iHierarchy | null,\r\n            filterData: null as { showMissingElements: boolean; afterDate: Date | null } | null,\r\n            tree: null as any\r\n        }\r\n    },\r\n    async created() {},\r\n    methods: {\r\n        async onValidityDateSelected() {\r\n            this.$emit('validityDateSelected', this.validityDate)\r\n            await this.loadNodeMetadata()\r\n        },\r\n        async onSelectedDimensionChange() {\r\n            this.$emit('dimensionSelected', this.selectedDimension)\r\n            await this.loadNodeMetadata()\r\n        },\r\n        async onHierarchyTypeSelected() {\r\n            this.selectedHierarchy = null\r\n            this.$emit('hierarchyTypeSelected', this.hierarchyType)\r\n            this.$emit('hierarchySelected', this.selectedHierarchy)\r\n            await this.loadHierarchies()\r\n        },\r\n        async onHierarchySelected() {\r\n            this.$emit('hierarchySelected', this.selectedHierarchy)\r\n            await this.loadHierarchyTree()\r\n        },\r\n        async loadNodeMetadata() {\r\n            this.$emit('loading', true)\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `hierarchies/nodeMetadata?dimension=${this.selectedDimension?.DIMENSION_NM}&excludeLeaf=false`).then((response: AxiosResponse<any>) => (this.nodeMetadata = response.data))\r\n            this.$emit('nodeMetadataChanged', this.nodeMetadata)\r\n            this.$emit('loading', false)\r\n        },\r\n        async loadHierarchies() {\r\n            this.$emit('loading', true)\r\n            const url = this.hierarchyType === 'MASTER' ? `hierarchiesMaster/getHierarchiesMaster?dimension=${this.selectedDimension?.DIMENSION_NM}` : `hierarchiesTechnical/getHierarchiesTechnical?dimension=${this.selectedDimension?.DIMENSION_NM}`\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url).then((response: AxiosResponse<any>) => (this.hierarchies = response.data))\r\n            this.$emit('loading', false)\r\n        },\r\n        async loadHierarchyTree() {\r\n            this.$emit('loading', true)\r\n            const date = moment(this.validityDate).format('YYYY-MM-DD')\r\n            let url = `hierarchies/getHierarchyTree?dimension=${this.selectedDimension?.DIMENSION_NM}&filterHierarchy=${this.selectedHierarchy?.HIER_NM}&filterType=${this.hierarchyType}&validityDate=${date}`\r\n            if (this.filterData) {\r\n                if (this.filterData.showMissingElements) {\r\n                    url = url.concat('&optionDate=' + moment(this.optionsDate).format('YYYY-MM-DD'))\r\n                }\r\n                if (this.filterData.afterDate) url = url.concat('&filterDate=' + moment(this.filterData.afterDate).format('YYYY-MM-DD'))\r\n            }\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.tree = response.status === 200 ? response.data : null\r\n                })\r\n                .catch(() => {})\r\n            this.$emit('loading', false)\r\n        },\r\n        onApplyFilters(filterData: { showMissingElements: boolean; afterDate: Date | null }) {\r\n            this.filterData = filterData\r\n            this.loadHierarchyTree()\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <Card class=\"p-m-2 p-d-flex p-flex-column hierarchy-scrollable-card\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    <i class=\"fa fa-list p-mr-2\"></i>\r\n                    <span>{{ $t('managers.hierarchyManagement.hierarchiesTarget') }}</span>\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n\r\n        <template #content>\r\n            <form class=\"p-fluid p-formgrid p-grid\">\r\n                <div class=\"p-field p-col-6 p-lg-4\">\r\n                    <Calendar class=\"kn-material-input\" v-model=\"optionsDate\" :manualInput=\"true\" :showIcon=\"true\" @dateSelect=\"onOptionsDateSelected\" />\r\n                </div>\r\n                <div class=\"p-field p-col-6 p-lg-3\">\r\n                    <Button class=\"kn-button kn-button--primary\" :label=\"$t('common.create')\" :disabled=\"!selectedDimension\" @click=\"createHierarchy\" />\r\n                </div>\r\n                <div class=\"p-field p-col-6 p-lg-3\">\r\n                    <Button class=\"kn-button kn-button--primary\" :label=\"$t('common.save')\" :disabled=\"!treeModel\" @click=\"handleSaveHiararchy\" />\r\n                </div>\r\n                <div class=\"p-field-checkbox p-col-6 p-lg-2\">\r\n                    <Checkbox v-model=\"backup\" :binary=\"true\" :disabled=\"!treeModel\" />\r\n                    <label class=\"kn-material-input-label p-ml-2\"> {{ $t('managers.hierarchyManagement.backup') }}</label>\r\n                </div>\r\n                <div class=\"p-field p-col-12\">\r\n                    <span class=\"p-float-label\">\r\n                        <Dropdown class=\"kn-material-input\" v-model=\"selectedHierarchy\" :options=\"hierarchies\" optionLabel=\"HIER_NM\" :disabled=\"!selectedDimension\" @change=\"onHierarchySelected\" />\r\n                        <label class=\"kn-material-input-label\"> {{ $t('managers.hierarchyManagement.hierarchies') }} </label>\r\n                    </span>\r\n                </div>\r\n            </form>\r\n\r\n            <HierarchyManagementHierarchiesFilterCard :selectedHierarchy=\"selectedHierarchy\" @applyFilters=\"onApplyFilters\"></HierarchyManagementHierarchiesFilterCard>\r\n            <HierarchyManagementHierarchiesTree\r\n                v-if=\"tree\"\r\n                :propTree=\"tree\"\r\n                :nodeMetadata=\"nodeMetadata\"\r\n                :selectedDimension=\"selectedDimension\"\r\n                :selectedHierarchy=\"selectedHierarchy\"\r\n                :dimensionMetadata=\"dimensionMetadata\"\r\n                :propRelationsMasterTree=\"[]\"\r\n                @treeUpdated=\"updateTreeModel\"\r\n                @loading=\"$emit('loading', $event)\"\r\n            ></HierarchyManagementHierarchiesTree>\r\n            <HierarchyManagementNodeDetailDialog :visible=\"detailDialogVisible\" :selectedNode=\"selectedNode\" :metadata=\"metadata\" :mode=\"mode\" @save=\"onNodeSave\" @close=\"closeNodeDialog\"></HierarchyManagementNodeDetailDialog>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iDimension, iHierarchy, iNodeMetadata, iDimensionMetadata, iNodeMetadataField, iNode } from '../../HierarchyManagement'\r\nimport { AxiosResponse } from 'axios'\r\nimport Card from 'primevue/card'\r\nimport Calendar from 'primevue/calendar'\r\nimport Checkbox from 'primevue/checkbox'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport moment from 'moment'\r\nimport HierarchyManagementHierarchiesFilterCard from '../../HierarchyManagementMasterTab/HierarchyManagementHierarchiesCard/HierarchyManagementHierarchiesFilterCard/HierarchyManagementHierarchiesFilterCard.vue'\r\nimport HierarchyManagementHierarchiesTree from '../../HierarchyManagementMasterTab/HierarchyManagementHierarchiesCard/HierarchyManagementHierarchiesTree/HierarchyManagementHierarchiesTree.vue'\r\nimport HierarchyManagementNodeDetailDialog from '../../HierarchyManagementMasterTab/HierarchyManagementHierarchiesCard/HierarchyManagementHierarchiesTree/HierarchyManagementNodeDetailDialog.vue'\r\nimport hierarchyManagementTargetCardDescriptor from './HierarchyManagementTargetCardDescriptor.json'\r\nimport mainStore from '../../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-target-card',\r\n    components: { Card, Calendar, Checkbox, Dropdown, HierarchyManagementHierarchiesFilterCard, HierarchyManagementHierarchiesTree, HierarchyManagementNodeDetailDialog },\r\n    props: {\r\n        selectedDimension: { type: Object as PropType<iDimension | null> },\r\n        validityDate: { type: Date },\r\n        dimensionMetadata: { type: Object as PropType<iDimensionMetadata | null> },\r\n        nodeMetadata: { type: Object as PropType<iNodeMetadata | null> },\r\n        selectedSourceHierarchy: { type: Object as PropType<iHierarchy | null> }\r\n    },\r\n    emits: ['loading', 'optionsDateSelected'],\r\n    data() {\r\n        return {\r\n            hierarchyManagementTargetCardDescriptor,\r\n            optionsDate: new Date(),\r\n            backup: true,\r\n            hierarchies: [] as iHierarchy[],\r\n            selectedHierarchy: null as iHierarchy | null,\r\n            filterData: null as { showMissingElements: boolean; afterDate: Date | null } | null,\r\n            tree: null as any,\r\n            detailDialogVisible: false,\r\n            selectedNode: null as any,\r\n            mode: 'createRoot',\r\n            metadata: [] as iNodeMetadataField[],\r\n            treeModel: null as any\r\n        }\r\n    },\r\n    watch: {\r\n        async selectedDimension() {\r\n            if (this.selectedDimension) await this.loadTechnicalHierarchies()\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    async created() {},\r\n    methods: {\r\n        async onOptionsDateSelected() {\r\n            this.$emit('optionsDateSelected', this.optionsDate)\r\n            await this.loadHierarchyTree()\r\n        },\r\n        async loadTechnicalHierarchies() {\r\n            this.$emit('loading', true)\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `hierarchiesTechnical/getHierarchiesTechnical?dimension=${this.selectedDimension?.DIMENSION_NM}`).then((response: AxiosResponse<any>) => (this.hierarchies = response.data))\r\n            this.$emit('loading', false)\r\n        },\r\n        async onHierarchySelected() {\r\n            await this.loadHierarchyTree()\r\n        },\r\n        async loadHierarchyTree() {\r\n            this.$emit('loading', true)\r\n            const date = moment(this.optionsDate).format('YYYY-MM-DD')\r\n            let url = `hierarchies/getHierarchyTree?dimension=${this.selectedDimension?.DIMENSION_NM}&filterHierarchy=${this.selectedHierarchy?.HIER_NM}&filterType=TECHNICAL&validityDate=${date}`\r\n            if (this.filterData) {\r\n                if (this.filterData.showMissingElements) {\r\n                    url = url.concat('&filterDimension=' + this.filterData.showMissingElements)\r\n                    url = url.concat('&optionDate=' + moment(this.validityDate).format('YYYY-MM-DD'))\r\n                }\r\n                if (this.filterData.afterDate) url = url.concat('&filterDate=' + moment(this.filterData.afterDate).format('YYYY-MM-DD'))\r\n            }\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.tree = response.status === 200 ? response.data : null\r\n                })\r\n                .catch(() => {})\r\n            this.$emit('loading', false)\r\n        },\r\n        onApplyFilters(filterData: { showMissingElements: boolean; afterDate: Date | null }) {\r\n            this.filterData = filterData\r\n            this.loadHierarchyTree()\r\n        },\r\n        createHierarchy() {\r\n            this.selectedNode = { HIER_TP: 'TECHNICAL', aliasId: 'HIER_CD', aliasName: 'HIER_NM', leaf: false, root: true, children: [] }\r\n            this.metadata = this.nodeMetadata ? this.nodeMetadata.GENERAL_FIELDS : []\r\n            for (let i = 0; i < this.metadata.length; i++) {\r\n                const temp = this.metadata[i] as any\r\n                this.selectedNode[temp.ID] = ''\r\n                if (temp.TYPE === 'Number') {\r\n                    this.selectedNode[temp.ID] = -1\r\n                } else if (temp.TYPE === 'Date') {\r\n                    this.selectedNode[temp.ID] = new Date()\r\n                } else if (temp.FIX_VALUE) {\r\n                    this.selectedNode[temp.ID] = temp.FIX_VALUE\r\n                }\r\n            }\r\n\r\n            this.detailDialogVisible = true\r\n        },\r\n        closeNodeDialog() {\r\n            this.selectedNode = null\r\n            this.metadata = []\r\n            this.mode = ''\r\n            this.detailDialogVisible = false\r\n        },\r\n        onNodeSave(payload: any) {\r\n            const node = payload.node\r\n            if (payload.mode === 'createRoot') {\r\n                this.selectedHierarchy = null\r\n                this.tree = { ...node, id: node.name, HIER_TP: 'TECHNICAL' }\r\n            }\r\n            this.detailDialogVisible = false\r\n        },\r\n        updateTreeModel(nodes: iNode[]) {\r\n            this.treeModel = this.formatNodes(nodes)[0]\r\n            if (this.treeModel.data) this.treeModel = this.treeModel.data\r\n        },\r\n        formatNodes(nodes: iNode[]) {\r\n            return nodes.map((node: any) => {\r\n                node = {\r\n                    ...node.data,\r\n                    children: node.children\r\n                }\r\n                if (node.parent) delete node.parent\r\n                if (node.leaf && node.children) delete node.children\r\n                if (node.children && node.children.length > 0) {\r\n                    node.children = this.formatNodes(node.children)\r\n                }\r\n                return node\r\n            })\r\n        },\r\n        async handleSaveHiararchy() {\r\n            this.$emit('loading', true)\r\n\r\n            if (this.checkIfNodesWithoutChildren(this.treeModel)) {\r\n                this.$confirm.require({\r\n                    message: this.$t('common.toast.deleteMessage'),\r\n                    header: this.$t('common.toast.deleteConfirmTitle'),\r\n                    icon: 'pi pi-exclamation-triangle',\r\n                    accept: async () => await this.saveHierarchy()\r\n                })\r\n            } else {\r\n                await this.saveHierarchy()\r\n            }\r\n            this.$emit('loading', false)\r\n        },\r\n        async saveHierarchy() {\r\n            if (!this.selectedDimension) return\r\n            this.updateLevelRecursive(this.treeModel, 0)\r\n            const isInsert = this.selectedHierarchy ? false : true\r\n            const postData = {\r\n                dimension: this.selectedDimension.DIMENSION_NM,\r\n                code: this.selectedHierarchy?.HIER_CD,\r\n                description: this.selectedHierarchy?.HIER_DS,\r\n                name: this.selectedHierarchy?.HIER_NM,\r\n                type: this.selectedHierarchy?.HIER_TP,\r\n                hierSourceCode: this.selectedSourceHierarchy?.HIER_CD,\r\n                hierSourceName: this.selectedSourceHierarchy?.HIER_NM,\r\n                hierSourceType: this.selectedSourceHierarchy?.HIER_TP,\r\n                dateValidity: moment(this.optionsDate).format('YYYY-MM-DD'),\r\n                isInsert: isInsert,\r\n                doBackup: this.backup,\r\n                root: this.treeModel\r\n            }\r\n            await this.$http\r\n                .post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `hierarchies/saveHierarchy`, postData)\r\n                .then(async (response: AxiosResponse<any>) => {\r\n                    if (response.data.response === 'ok') {\r\n                        this.store.setInfo({ title: this.$t('common.toast.createTitle'), msg: this.$t('common.toast.success') })\r\n                        if (this.selectedHierarchy) {\r\n                            this.loadHierarchyTree()\r\n                        } else {\r\n                            await this.loadTechnicalHierarchies()\r\n                            const index = this.hierarchies?.findIndex((hierarchy: iHierarchy) => {\r\n                                return hierarchy.HIER_CD === this.treeModel.HIER_CD\r\n                            })\r\n                            if (index !== -1) this.selectedHierarchy = this.hierarchies[index]\r\n                        }\r\n                    }\r\n                })\r\n                .catch(() => {})\r\n        },\r\n        updateLevelRecursive(node, level) {\r\n            if (level !== 0) node.LEVEL = level\r\n            if (node.children && node.children.length > 0) {\r\n                for (let i = 0; i < node.children.length; i++) {\r\n                    this.updateLevelRecursive(node.children[i], level + 1)\r\n                }\r\n            }\r\n        },\r\n        checkIfNodesWithoutChildren(node: any) {\r\n            if (!node.root && !node.leaf && node.children?.length === 0) {\r\n                return true\r\n            } else if (node.children != null) {\r\n                let result = false as any\r\n                for (let i = 0; result === false && i < node.children.length; i++) {\r\n                    result = this.checkIfNodesWithoutChildren(node.children[i])\r\n                }\r\n                return result\r\n            }\r\n            return false\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div class=\"p-d-flex p-flex-row\">\r\n        <HierarchyManagementSourceCard\r\n            :dimensions=\"dimensions\"\r\n            :optionsDate=\"optionsDate\"\r\n            @loading=\"$emit('loading', $event)\"\r\n            @validityDateSelected=\"setValidityDate\"\r\n            @dimensionSelected=\"setSelectedDimension\"\r\n            @nodeMetadataChanged=\"onNodeMetadataChange\"\r\n            @hierarchyTypeSelected=\"onHierarchyTypeSelected\"\r\n            @hierarchySelected=\"onHierarchySelected\"\r\n        ></HierarchyManagementSourceCard>\r\n        <HierarchyManagementTargetCard :selectedDimension=\"selectedDimension\" :validityDate=\"validityDate\" :nodeMetadata=\"nodeMetadata\" :selectedSourceHierarchy=\"selectedHierarchy\" @loading=\"$emit('loading', $event)\" @optionsDateSelected=\"setOptionsDate\"></HierarchyManagementTargetCard>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iDimension, iHierarchy, iDimensionMetadata, iNodeMetadata } from '../HierarchyManagement'\r\nimport HierarchyManagementSourceCard from './HierarchyManagementSourceCard/HierarchyManagementSourceCard.vue'\r\nimport HierarchyManagementTargetCard from './HierarchyManagementTargetCard/HierarchyManagementTargetCard.vue'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-technical-tab',\r\n    components: { HierarchyManagementSourceCard, HierarchyManagementTargetCard },\r\n    props: { dimensions: { type: Array as PropType<iDimension[]> } },\r\n    data() {\r\n        return {\r\n            validityDate: new Date(),\r\n            selectedDimension: null as iDimension | null,\r\n            dimensionMetadata: null as iDimensionMetadata | null,\r\n            nodeMetadata: null as iNodeMetadata | null,\r\n            hierarchyType: '' as string,\r\n            selectedHierarchy: null as iHierarchy | null,\r\n            optionsDate: new Date()\r\n        }\r\n    },\r\n    created() {},\r\n    methods: {\r\n        setValidityDate(date: Date) {\r\n            this.validityDate = date\r\n        },\r\n        setSelectedDimension(dimension: iDimension | null) {\r\n            this.selectedDimension = dimension\r\n        },\r\n        onNodeMetadataChange(metadata: iNodeMetadata | null) {\r\n            this.nodeMetadata = metadata\r\n        },\r\n        onHierarchyTypeSelected(hierarchyType: string) {\r\n            this.hierarchyType = hierarchyType\r\n        },\r\n        onHierarchySelected(hierarchy: iHierarchy | null) {\r\n            this.selectedHierarchy = hierarchy\r\n        },\r\n        setOptionsDate(date: Date) {\r\n            this.optionsDate = date\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div class=\"p-d-flex p-flex-row\">\r\n        <Card class=\"p-m-2 p-d-flex p-flex-column hierarchy-scrollable-card\">\r\n            <template #header>\r\n                <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                    <template #start>\r\n                        <i class=\"fa fa-list p-mr-2\"></i>\r\n                        <span>{{ $t('managers.hierarchyManagement.backup') }}</span>\r\n                    </template>\r\n                </Toolbar>\r\n            </template>\r\n\r\n            <template #content>\r\n                <form class=\"p-fluid p-formgrid p-grid\">\r\n                    <div class=\"p-field p-col-12 p-lg-4\">\r\n                        <span class=\"p-float-label\">\r\n                            <Dropdown class=\"kn-material-input\" v-model=\"selectedDimension\" :options=\"dimensions\" optionLabel=\"DIMENSION_NM\" @change=\"onSelectedDimensionChange\" />\r\n                            <label class=\"kn-material-input-label\"> {{ $t('managers.hierarchyManagement.dimensions') }} </label>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"p-field p-col-12 p-lg-4\">\r\n                        <span class=\"p-float-label\">\r\n                            <Dropdown class=\"kn-material-input\" v-model=\"hierarchyType\" :options=\"hierarchyManagementHierarchiesCardDescriptor.hierarchyTypes\" :disabled=\"!selectedDimension\" @change=\"onHierarchyTypeSelected\" />\r\n                            <label class=\"kn-material-input-label\"> {{ $t('managers.hierarchyManagement.hierarchyType') }} </label>\r\n                        </span>\r\n                    </div>\r\n                    <div class=\"p-field p-col-12 p-lg-4\">\r\n                        <span class=\"p-float-label\">\r\n                            <Dropdown class=\"kn-material-input\" v-model=\"selectedHierarchy\" :options=\"hierarchies\" optionLabel=\"HIER_NM\" :disabled=\"!hierarchyType\" @change=\"onHierarchySelected\" />\r\n                            <label class=\"kn-material-input-label\"> {{ $t('managers.hierarchyManagement.hierarchies') }} </label>\r\n                        </span>\r\n                    </div>\r\n                </form>\r\n\r\n                <DataTable :value=\"rows\" class=\"p-datatable-sm kn-table\" edit-mode=\"row\" v-model:editing-rows=\"editingRows\" @row-edit-save=\"updateBackupConfirm\" v-model:filters=\"filters\" :globalFilterFields=\"globalFilterFields\" :loading=\"loading\" responsiveLayout=\"stack\" breakpoint=\"700px\">\r\n                    <template #empty>\r\n                        {{ $t('common.info.noDataFound') }}\r\n                    </template>\r\n                    <template #header>\r\n                        <div class=\"table-header p-d-flex\">\r\n                            <span class=\"p-input-icon-left p-mr-3 p-col-12\">\r\n                                <i class=\"pi pi-search\" />\r\n                                <InputText class=\"kn-material-input\" v-model=\"filters['global'].value\" type=\"text\" :placeholder=\"$t('common.search')\" />\r\n                            </span>\r\n                        </div>\r\n                    </template>\r\n                    <Column class=\"kn-truncated\" v-for=\"column in columns\" :header=\"$t(column.header)\" :key=\"column.field\" :sortField=\"column.field\" :sortable=\"true\">\r\n                        <template #body=\"slotProps\">\r\n                            <span v-tooltip.top=\"slotProps.data[column.field]\" class=\"kn-cursor-pointer\"> {{ slotProps.data[column.field] }}</span>\r\n                        </template>\r\n                        <template #editor=\"slotProps\">\r\n                            <InputText v-if=\"column.header == 'Name' || column.header == 'Description'\" class=\"kn-material-input\" v-model=\"slotProps.data[column.field]\" v-tooltip.top=\"slotProps.data[column.field]\" />\r\n                            <span v-else v-tooltip.top=\"slotProps.data[column.field]\" class=\"kn-cursor-pointer\"> {{ slotProps.data[column.field] }}</span>\r\n                        </template>\r\n                    </Column>\r\n                    <Column :rowEditor=\"true\" :style=\"hierarchyManagementDimensionsTableDescriptor.iconColumnStyle\"></Column>\r\n                    <Column :style=\"hierarchyManagementDimensionsTableDescriptor.iconColumnStyle\">\r\n                        <template #body=\"slotProps\">\r\n                            <Button icon=\"pi pi-history\" class=\"p-button-link\" v-tooltip.top=\"$t('common.restore')\" @click=\"restoreBackupConfirm(slotProps.data)\" />\r\n                            <Button icon=\"pi pi-trash\" class=\"p-button-link\" v-tooltip.top=\"$t('common.delete')\" @click=\"deleteBackupConfirm(slotProps.data)\" />\r\n                        </template>\r\n                    </Column>\r\n                </DataTable>\r\n            </template>\r\n        </Card>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, PropType } from 'vue'\r\nimport { iDimension, iHierarchy, iNodeMetadata } from '../HierarchyManagement'\r\nimport { AxiosResponse } from 'axios'\r\nimport { filterDefault } from '@/helpers/commons/filterHelper'\r\nimport hierarchyManagementHierarchiesCardDescriptor from '@/modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementHierarchiesCard/HierarchyManagementHierarchiesCardDescriptor.json'\r\nimport hierarchyManagementDimensionsTableDescriptor from '@/modules/managers/hierarchyManagement/HierarchyManagementMasterTab/HierarchyManagementDimensionsCard//HierarchyManagementDimensionsTable/HierarchyManagementDimensionsTableDescriptor.json'\r\nimport Dropdown from 'primevue/dropdown'\r\nimport Column from 'primevue/column'\r\nimport DataTable from 'primevue/datatable'\r\nimport mainStore from '../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management-technical-tab',\r\n    components: { Dropdown, Column, DataTable },\r\n    props: { dimensions: { type: Array as PropType<iDimension[]> } },\r\n    data() {\r\n        return {\r\n            hierarchyManagementHierarchiesCardDescriptor,\r\n            hierarchyManagementDimensionsTableDescriptor,\r\n            selectedDimension: null as iDimension | null,\r\n            hierarchyType: '' as string,\r\n            selectedHierarchy: null as iHierarchy | null,\r\n            nodeMetadata: null as iNodeMetadata | null,\r\n            hierarchies: [] as iHierarchy[],\r\n            backupData: [] as any,\r\n            rows: [] as any[],\r\n            editingRows: [] as any[],\r\n            columns: [] as { field: string; header: string }[],\r\n            globalFilterFields: [] as string[],\r\n            filters: { global: [filterDefault] },\r\n            loading: false\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    created() {},\r\n    methods: {\r\n        async onSelectedDimensionChange() {\r\n            await this.loadNodeMetadata()\r\n        },\r\n        async onHierarchyTypeSelected() {\r\n            this.selectedHierarchy = null\r\n            await this.loadHierarchies()\r\n        },\r\n        async onHierarchySelected() {\r\n            await this.loadBackupData()\r\n        },\r\n        async loadNodeMetadata() {\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `hierarchies/nodeMetadata?dimension=${this.selectedDimension?.DIMENSION_NM}&excludeLeaf=false`).then((response: AxiosResponse<any>) => (this.nodeMetadata = response.data))\r\n        },\r\n        async loadHierarchies() {\r\n            const url = this.hierarchyType === 'MASTER' ? `hierarchiesMaster/getHierarchiesMaster?dimension=${this.selectedDimension?.DIMENSION_NM}` : `hierarchiesTechnical/getHierarchiesTechnical?dimension=${this.selectedDimension?.DIMENSION_NM}`\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url).then((response: AxiosResponse<any>) => (this.hierarchies = response.data))\r\n        },\r\n        async loadBackupData() {\r\n            this.loading = true\r\n            const url = `hierarchiesBackup/getHierarchyBkps?dimension=${this.selectedDimension?.DIMENSION_NM}&hierarchyCode=${this.selectedHierarchy?.HIER_CD}&hierarchyName=${this.selectedHierarchy?.HIER_NM}&hierarchyType=${this.selectedHierarchy?.HIER_TP}`\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url).then((response: AxiosResponse<any>) => {\r\n                this.rows = response.data.root\r\n                this.columns = response.data.columns\r\n                    ?.filter((column: any) => column.VISIBLE)\r\n                    .map((column: any) => {\r\n                        return { field: column.ID, header: column.NAME }\r\n                    })\r\n                this.globalFilterFields = response.data.columns_search\r\n            })\r\n            this.loading = false\r\n        },\r\n        deleteBackupConfirm(hierarchy) {\r\n            this.$confirm.require({\r\n                header: this.$t('common.delete'),\r\n                message: this.$t('managers.hierarchyManagement.deleteBackupConfirm'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => this.deleteBackup(hierarchy)\r\n            })\r\n        },\r\n        async deleteBackup(hierarchy) {\r\n            const url = `hierarchies/deleteHierarchy`\r\n            let postData = { dimension: this.selectedDimension?.DIMENSION_NM, name: hierarchy.HIER_NM }\r\n            await this.$http.post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url, postData).then((response: AxiosResponse<any>) => {\r\n                if (response.data.response === 'ok') {\r\n                    this.store.setInfo({\r\n                        title: this.$t('common.toast.deleteTitle'),\r\n                        msg: this.$t('managers.hierarchyManagement.backupDeleted')\r\n                    })\r\n                    this.loadBackupData()\r\n                }\r\n            })\r\n        },\r\n        updateBackupConfirm(event) {\r\n            this.$confirm.require({\r\n                header: this.$t('common.update'),\r\n                message: this.$t('managers.hierarchyManagement.saveBackupMessage'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => this.updateBackup(event)\r\n            })\r\n        },\r\n        async updateBackup(eventData) {\r\n            const url = `hierarchiesBackup/modifyHierarchyBkps`\r\n            let postData = { HIER_DS: eventData.newData.HIER_DS, HIER_NM: eventData.newData.HIER_NM, HIER_NM_ORIG: eventData.data.HIER_NM, dimension: this.selectedDimension?.DIMENSION_NM }\r\n            await this.$http.post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url, postData).then((response: AxiosResponse<any>) => {\r\n                if (response.data.response === 'ok') {\r\n                    this.store.setInfo({\r\n                        title: this.$t('common.toast.updateTitle'),\r\n                        msg: this.$t('common.toast.success')\r\n                    })\r\n                    this.loadBackupData()\r\n                }\r\n            })\r\n        },\r\n        restoreBackupConfirm(backup) {\r\n            this.$confirm.require({\r\n                header: this.$t('managers.hierarchyManagement.restoreTitle'),\r\n                message: this.$t('managers.hierarchyManagement.restoreMsg'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => this.restoreBackup(backup)\r\n            })\r\n        },\r\n        async restoreBackup(backup) {\r\n            const url = `hierarchiesBackup/restoreHierarchyBkps`\r\n            let postData = { code: backup.HIER_CD, name: backup.HIER_NM, dimension: this.selectedDimension?.DIMENSION_NM }\r\n            await this.$http.post(import.meta.env.VITE_RESTFUL_SERVICES_PATH + url, postData).then((response: AxiosResponse<any>) => {\r\n                if (response.data.response === 'ok') {\r\n                    this.store.setInfo({\r\n                        title: this.$t('common.restore'),\r\n                        msg: this.$t('common.toast.success')\r\n                    })\r\n                    this.loadBackupData()\r\n                }\r\n            })\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div class=\"kn-page\">\r\n        <div class=\"kn-page-content\">\r\n            <ProgressSpinner class=\"kn-progress-spinner\" v-if=\"loading\" data-test=\"spinner\" />\r\n\r\n            <TabView class=\"hierarchy-tabview kn-height-full\">\r\n                <TabPanel>\r\n                    <template #header>\r\n                        <span>{{ $t('managers.hierarchyManagement.master') }}</span>\r\n                    </template>\r\n\r\n                    <HierarchyManagementMasterTab :dimensions=\"dimensions\" @loading=\"setLoading\" />\r\n                </TabPanel>\r\n                <TabPanel>\r\n                    <template #header>\r\n                        <span>{{ $t('managers.hierarchyManagement.technical') }}</span>\r\n                    </template>\r\n\r\n                    <HierarchyManagementTechnicalTab :dimensions=\"dimensions\" @loading=\"setLoading\"></HierarchyManagementTechnicalTab>\r\n                </TabPanel>\r\n                <TabPanel>\r\n                    <template #header>\r\n                        <span>{{ $t('managers.hierarchyManagement.backup') }}</span>\r\n                    </template>\r\n\r\n                    <HierarchyManagementBackupTab :dimensions=\"dimensions\" />\r\n                </TabPanel>\r\n            </TabView>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { iDimension } from './HierarchyManagement.d'\r\nimport { AxiosResponse } from 'axios'\r\nimport HierarchyManagementMasterTab from './HierarchyManagementMasterTab/HierarchyManagementMasterTab.vue'\r\nimport HierarchyManagementTechnicalTab from './HierarchyManagementTechnicalTab/HierarchyManagementTechnicalTab.vue'\r\nimport HierarchyManagementBackupTab from './HierarchyManagementBackupTab/HierarchyManagementBackupTab.vue'\r\nimport TabView from 'primevue/tabview'\r\nimport TabPanel from 'primevue/tabpanel'\r\nimport ProgressSpinner from 'primevue/progressspinner'\r\nimport descriptor from './HierarchyManagementDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'hierarchy-management',\r\n    components: { ProgressSpinner, HierarchyManagementMasterTab, HierarchyManagementTechnicalTab, HierarchyManagementBackupTab, TabView, TabPanel },\r\n    data() {\r\n        return {\r\n            dimensions: [] as iDimension[],\r\n            loading: false,\r\n            descriptor\r\n        }\r\n    },\r\n    async created() {\r\n        await this.loadDimensions()\r\n    },\r\n    methods: {\r\n        async loadDimensions() {\r\n            this.loading = true\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `dimensions/getDimensions`)\r\n                .then((response: AxiosResponse<any>) => (this.dimensions = response.data))\r\n                .catch(() => {})\r\n            this.loading = false\r\n        },\r\n        setLoading(value: boolean) {\r\n            this.loading = value\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\">\r\n.hierarchy-tabview,\r\n.hierarchy-tabview .p-tabview-panels,\r\n.hierarchy-tabview .p-tabview-panel {\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 1;\r\n}\r\n\r\n.hierarchy-tabview .p-tabview-panels {\r\n    padding: 0 !important;\r\n}\r\n\r\n.hierarchy-scrollable-card {\r\n    height: calc(100vh - 55px);\r\n    flex: 1 1 0;\r\n    .p-card-body {\r\n        flex: 1;\r\n        overflow: auto;\r\n    }\r\n}\r\n</style>\r\n"],"names":["_sfc_main","Dialog","_openBlock","_createBlock","_normalizeStyle","_withCtx","_createVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","Column","DataTable","_hoisted_4","_withModifiers","_withDirectives","_normalizeClass","Dropdown","Listbox","_hoisted_7","_hoisted_9","_hoisted_11","_hoisted_13","_hoisted_15","_hoisted_16","_createCommentVNode","_hoisted_5","_hoisted_6","_hoisted_8","_hoisted_10","_createTextVNode","_hoisted_12","_hoisted_14","_vShow","_hoisted_17","mainStore","moment","Calendar","Checkbox","Card","Tree","deepEqual","ProgressSpinner","TabView","TabPanel"],"mappings":"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"}