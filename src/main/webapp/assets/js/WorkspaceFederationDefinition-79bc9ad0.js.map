{"version":3,"file":"WorkspaceFederationDefinition-79bc9ad0.js","sources":["../../../../modules/workspace/federationDefinition/dialogs/WorskpaceFederationDatasetDialog.vue","../../../../modules/workspace/federationDefinition/dialogs/WorkspaceFederationSaveDialog.vue","../../../../modules/workspace/federationDefinition/WorkspaceFederationDatasetList.vue","../../../../modules/workspace/federationDefinition/WorkspaceFederationDefinitionMetafieldsList.vue","../../../../modules/workspace/federationDefinition/WorkspaceFederationDefinitionAssociationsEditor.vue","../../../../modules/workspace/federationDefinition/WorkspaceFederationDefinitionAssociationsList.vue","../../../../modules/workspace/federationDefinition/WorkspaceFederationDefinition.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <Dialog :header=\"$t('workspace.federationDefinition.datasetDetail')\" :style=\"worskpaceFederationDatasetDialogDescriptor.dialog.style\" :visible=\"visible\" :modal=\"true\" class=\"p-fluid kn-dialog--toolbar--primary\" :closable=\"false\">\r\n            <div>\r\n                <div class=\"p-d-flex p-flex-row p-ai-center\">\r\n                    <h3 class=\"p-m-2\">{{ $t('common.name') }}</h3>\r\n                    <span class=\"dataset-info-span\">{{ dataset.name }}</span>\r\n                </div>\r\n                <div class=\"p-d-flex p-flex-row p-ai-center\">\r\n                    <h3 class=\"p-m-2\">{{ $t('common.label') }}</h3>\r\n                    <span class=\"dataset-info-span\">{{ dataset.label }}</span>\r\n                </div>\r\n                <div v-if=\"dataset.description\" class=\"p-d-flex p-flex-row p-ai-center\">\r\n                    <h3 class=\"p-m-2\">{{ $t('common.description') }}</h3>\r\n                    <span class=\"dataset-info-span\">{{ dataset.description }}</span>\r\n                </div>\r\n            </div>\r\n            <template #footer>\r\n                <Button class=\"kn-button kn-button--primary\" @click=\"$emit('close')\"> {{ $t('common.close') }}</Button>\r\n            </template>\r\n        </Dialog>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport Dialog from 'primevue/dialog'\r\nimport worskpaceFederationDatasetDialogDescriptor from './WorskpaceFederationDatasetDialogDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'workspace-federation-dataset-dialog',\r\n    components: { Dialog },\r\n    emits: ['close'],\r\n    props: { visible: { type: Boolean }, dataset: { type: Object } },\r\n    data() {\r\n        return {\r\n            worskpaceFederationDatasetDialogDescriptor\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.dataset-info-span {\r\n    margin-left: auto;\r\n}\r\n</style>\r\n","<template>\r\n    <div>\r\n        <Dialog :header=\"$t('workspace.federationDefinition.savingFederation')\" :style=\"workspaceFederationSaveDialogDescriptor.dialog.style\" :visible=\"visible\" :modal=\"true\" class=\"p-fluid kn-dialog--toolbar--primary\" :closable=\"false\">\r\n            <div v-if=\"dataset\">\r\n                <div class=\"p-m-4\">\r\n                    <span>\r\n                        <label class=\"kn-material-input-label\">{{ $t('common.label') }} *</label>\r\n                        <InputText\r\n                            class=\"kn-material-input p-inputtext-sm\"\r\n                            v-model=\"dataset.label\"\r\n                            :class=\"{\r\n                                'p-invalid': labelDirty && (!dataset.label || dataset.label.length === 0)\r\n                            }\"\r\n                            @input=\"labelDirty = true\"\r\n                            @blur=\"labelDirty = true\"\r\n                        />\r\n                    </span>\r\n\r\n                    <div v-show=\"labelDirty && (!dataset.label || dataset.label.length === 0)\" class=\"p-error p-my-2\">\r\n                        {{ $t('common.validation.required', { fieldName: $t('common.label') }) }}\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"p-m-4\">\r\n                    <span>\r\n                        <label class=\"kn-material-input-label\">{{ $t('common.name') }} *</label>\r\n                        <InputText\r\n                            class=\"kn-material-input p-inputtext-sm\"\r\n                            v-model=\"dataset.name\"\r\n                            :class=\"{\r\n                                'p-invalid': nameDirty && (!dataset.name || dataset.name.length === 0)\r\n                            }\"\r\n                            @input=\"nameDirty = true\"\r\n                            @blur=\"nameDirty = true\"\r\n                        />\r\n                    </span>\r\n\r\n                    <div v-show=\"nameDirty && (!dataset.name || dataset.name.length === 0)\" class=\"p-error p-my-2\">\r\n                        {{ $t('common.validation.required', { fieldName: $t('common.name') }) }}\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"p-m-4\">\r\n                    <span>\r\n                        <label class=\"kn-material-input-label\">{{ $t('common.description') }}</label>\r\n                        <InputText class=\"kn-material-input p-inputtext-sm\" v-model=\"dataset.description\" />\r\n                    </span>\r\n                </div>\r\n            </div>\r\n\r\n            <template #footer>\r\n                <Button class=\"kn-button kn-button--primary\" @click=\"closeDialog\"> {{ $t('common.close') }}</Button>\r\n                <Button class=\"kn-button kn-button--primary\" :disabled=\"saveButtonDisabled\" @click=\"saveFederation\"> {{ $t('common.save') }}</Button>\r\n            </template>\r\n        </Dialog>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport Dialog from 'primevue/dialog'\r\nimport workspaceFederationSaveDialogDescriptor from './WorkspaceFederationSaveDialogDescriptor.json'\r\n\r\nexport default defineComponent({\r\n    name: 'workspace-federation-save-dialog',\r\n    components: { Dialog },\r\n    emits: ['close', 'save'],\r\n    props: { visible: { type: Boolean }, federatedDataset: { type: Object } },\r\n    data() {\r\n        return {\r\n            workspaceFederationSaveDialogDescriptor,\r\n            dataset: null as any,\r\n            labelDirty: false,\r\n            nameDirty: false\r\n        }\r\n    },\r\n    watch: {\r\n        federatedDataset() {\r\n            this.loadDataset()\r\n        }\r\n    },\r\n    computed: {\r\n        saveButtonDisabled(): boolean {\r\n            return this.dataset.label.length === 0 || this.dataset.name.length === 0\r\n        }\r\n    },\r\n    created() {\r\n        this.loadDataset()\r\n    },\r\n    methods: {\r\n        loadDataset() {\r\n            this.dataset = this.federatedDataset ? { ...this.federatedDataset } : {}\r\n        },\r\n        closeDialog() {\r\n            this.dataset = { ...this.federatedDataset }\r\n            this.labelDirty = false\r\n            this.nameDirty = false\r\n            this.$emit('close')\r\n        },\r\n        saveFederation() {\r\n            this.$emit('save', this.dataset)\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div class=\"p-col federation-listbox-container\">\r\n        <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n            <template #start>\r\n                {{ mode === 'available' ? $t('workspace.federationDefinition.availableDatasets') : $t('workspace.federationDefinition.selectedDatasets') }}\r\n            </template>\r\n        </Toolbar>\r\n        <Message class=\"p-m-4\" severity=\"info\" :closable=\"false\" :style=\"workspaceFederationDatasetListDescriptor.styles.message\">\r\n            {{ mode === 'available' ? $t('workspace.federationDefinition.availableDatasetsMessage') : $t('workspace.federationDefinition.selectedDatasetsMessage') }}\r\n        </Message>\r\n        <Listbox class=\"kn-list listbox-container\" :listStyle=\"workspaceFederationDatasetListDescriptor.styles.dsList\" :options=\"dataset\" :filter=\"true\" optionLabel=\"name\" @change=\"selectDataset($event.value)\">\r\n            <template #empty>{{ $t('common.info.noDataFound') }}</template>\r\n            <template #option=\"slotProps\">\r\n                <div class=\"kn-list-item p-d-flex p-flex-row\">\r\n                    <div class=\"kn-list-item-text\">\r\n                        <span>{{ slotProps.option.name }}</span>\r\n                    </div>\r\n                    <i v-if=\"mode === 'available'\" class=\"fas fa-info-circle dataset-info-icon\" @click.stop=\"$emit('showInfo', slotProps.option)\"></i>\r\n                </div>\r\n            </template>\r\n        </Listbox>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { defineComponent } from 'vue'\r\n    import Listbox from 'primevue/listbox'\r\n    import Message from 'primevue/message'\r\n    import workspaceFederationDatasetListDescriptor from './WorkspaceFederationDatasetListDescriptor.json'\r\n\r\n    export default defineComponent({\r\n        name: 'workspace-federation-dataset-list',\r\n        components: {\r\n            Listbox,\r\n            Message\r\n        },\r\n        props: { mode: { type: String }, propDatasets: { type: Array } },\r\n        emits: ['showInfo', 'datasetSelected'],\r\n        data() {\r\n            return {\r\n                workspaceFederationDatasetListDescriptor,\r\n                dataset: [] as any[]\r\n            }\r\n        },\r\n        watch: {\r\n            propDatasets() {\r\n                this.loadDatasets()\r\n            }\r\n        },\r\n        created() {\r\n            this.loadDatasets()\r\n        },\r\n        methods: {\r\n            loadDatasets() {\r\n                this.dataset = this.propDatasets as any[]\r\n            },\r\n            selectDataset(dataset: any) {\r\n                this.$emit('datasetSelected', { dataset: dataset, mode: this.mode })\r\n            }\r\n        }\r\n    })\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .federation-listbox-container {\r\n        :deep(.p-card-body) {\r\n            padding: 0;\r\n            .p-card-content {\r\n                padding: 0;\r\n            }\r\n        }\r\n        .listbox-container {\r\n            border: 1px solid var(--kn-color-borders);\r\n            border-top: none;\r\n            border-radius: 0;\r\n        }\r\n    }\r\n\r\n    .dataset-info-icon {\r\n        margin-left: auto;\r\n        color: #a7a7a7;\r\n    }\r\n</style>\r\n","<template>\r\n    <Card v-if=\"dataset\">\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    {{ dataset.name }}\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n\r\n        <template #content>\r\n            <Listbox class=\"metafield-list\" v-model=\"selectedMetafield\" :options=\"dataset.metadata.fieldsMeta\" @change=\"metafieldsSelected($event.value)\">\r\n                <template #empty>{{ $t('common.info.noDataFound') }}</template>\r\n                <template #option=\"slotProps\">\r\n                    <div class=\"kn-list-item p-d-flex p-flex-row\" :class=\"{ ' selected-metafield': slotProps.option.selected }\">\r\n                        <div class=\"kn-list-item-text\">\r\n                            <span class=\"p-text-uppercase\">{{ slotProps.option.name }}</span>\r\n                        </div>\r\n                    </div>\r\n                </template>\r\n            </Listbox>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { defineComponent } from 'vue'\r\n    import Card from 'primevue/card'\r\n    import Listbox from 'primevue/listbox'\r\n\r\n    export default defineComponent({\r\n        name: 'workspace-federation-definition-metafields-list',\r\n        components: { Card, Listbox },\r\n        props: { propDataset: { type: Object }, selectedMetafields: { type: Array }, resetSelectedMetafield: { type: Boolean } },\r\n        data() {\r\n            return {\r\n                dataset: null as any,\r\n                selectedMetafield: null as any,\r\n                selected: [] as any[]\r\n            }\r\n        },\r\n        watch: {\r\n            propDataset() {\r\n                this.loadDataset()\r\n            },\r\n            selectedMetafields() {\r\n                this.loadSelectedMetafields()\r\n            },\r\n            resetSelectedMetafield() {\r\n                this.selectedMetafield = null\r\n            }\r\n        },\r\n        created() {\r\n            this.loadDataset()\r\n            this.loadSelectedMetafields()\r\n        },\r\n        methods: {\r\n            loadDataset() {\r\n                this.dataset = this.propDataset as any[]\r\n            },\r\n            loadSelectedMetafields() {\r\n                this.selected = this.selectedMetafields as any[]\r\n            },\r\n            metafieldsSelected(metafield: any) {\r\n                if (!this.selectedMetafield) {\r\n                    this.removeMetafieldFromSelected()\r\n                } else if (this.selected.length < 2 && this.dataset.id !== this.selected[0]?.dataset.id && this.dataset.id !== this.selected[1]?.dataset.id) {\r\n                    this.selected.push({ dataset: this.dataset, metafield: metafield })\r\n                } else if (this.dataset.id === this.selected[0]?.dataset.id || this.dataset.id === this.selected[1]?.dataset.id) {\r\n                    this.removeMetafieldFromSelected()\r\n                    this.selected.push({ dataset: this.dataset, metafield: metafield })\r\n                } else if (this.selected.length === 2) {\r\n                    this.removeMetafieldFromSelected()\r\n                    this.selectedMetafield = null\r\n                }\r\n            },\r\n            removeMetafieldFromSelected() {\r\n                const index = this.selected.findIndex((el: any) => el.dataset.id === this.dataset.id)\r\n                if (index !== -1) this.selected.splice(index, 1)\r\n            }\r\n        }\r\n    })\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .metafield-list {\r\n        border: none;\r\n        height: 25vh;\r\n        overflow-y: auto;\r\n    }\r\n\r\n    .selected-metafield {\r\n        color: #3f51b5;\r\n        background: rgba(63, 81, 181, 0.12);\r\n    }\r\n</style>\r\n","<template>\r\n    <Card>\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    {{ $t('workspace.federationDefinition.associationsEditor') }}\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n\r\n        <template #content>\r\n            <div class=\"p-d-flex kn-flex\" :style=\"workspaceFederationDatasetListDescriptor.styles.metaContainer\">\r\n                <div class=\"p-d-flex p-flex-row kn-flex kn-overflow\">\r\n                    <WorkspaceFederationDefinitionMetafieldsList\r\n                        :style=\"workspaceFederationDatasetListDescriptor.styles.metaList\"\r\n                        v-for=\"dataset in datasets\"\r\n                        class=\"metafield-select-list p-mx-2 p-mb-2\"\r\n                        :key=\"dataset.id\"\r\n                        :propDataset=\"dataset\"\r\n                        :selectedMetafields=\"selectedMetafields\"\r\n                        :resetSelectedMetafield=\"resetSelectedMetafield\"\r\n                    ></WorkspaceFederationDefinitionMetafieldsList>\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { defineComponent } from 'vue'\r\n    import Card from 'primevue/card'\r\n    import WorkspaceFederationDefinitionMetafieldsList from './WorkspaceFederationDefinitionMetafieldsList.vue'\r\n    import workspaceFederationDatasetListDescriptor from './WorkspaceFederationDatasetListDescriptor.json'\r\n\r\n    export default defineComponent({\r\n        name: 'workspace-federation-definition-associations-editor',\r\n        components: { Card, WorkspaceFederationDefinitionMetafieldsList },\r\n        props: { selectedDatasets: { type: Array }, selectedMetafields: { type: Array }, resetSelectedMetafield: { type: Boolean } },\r\n        data() {\r\n            return {\r\n                datasets: [] as any[],\r\n                workspaceFederationDatasetListDescriptor\r\n            }\r\n        },\r\n        watch: {\r\n            selectedDatasets() {\r\n                this.loadDatasets()\r\n            }\r\n        },\r\n        created() {\r\n            this.loadDatasets()\r\n        },\r\n        methods: {\r\n            loadDatasets() {\r\n                this.datasets = this.selectedDatasets as any[]\r\n            }\r\n        }\r\n    })\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    .metafield-select-list {\r\n        width: 250px;\r\n    }\r\n</style>\r\n","<template>\r\n    <Card>\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    {{ $t('workspace.federationDefinition.associationsList') }}\r\n                </template>\r\n                <template #end>\r\n                    <KnFabButton icon=\"fas fa-plus\" @click=\"createAssociation\"></KnFabButton>\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n\r\n        <template #content>\r\n            <div :style=\"workspaceFederationDatasetListDescriptor.styles.assContainer\">\r\n                <Listbox id=\"associations-list\" :options=\"associations\" :listStyle=\"workspaceFederationDatasetListDescriptor.styles.maxHeight\">\r\n                    <template #empty>{{ $t('common.info.noDataFound') }}</template>\r\n                    <template #option=\"slotProps\">\r\n                        <div class=\"kn-list-item p-d-flex p-flex-row\">\r\n                            <div class=\"kn-list-item-text\">\r\n                                <span>{{ slotProps.option.relationship }}</span>\r\n                            </div>\r\n                            <i class=\"fas fa-trash-alt delete-association-icon\" @click.stop=\"deleteAssociationConfirm(slotProps.option)\"></i>\r\n                        </div>\r\n                    </template>\r\n                </Listbox>\r\n            </div>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\n    import { defineComponent } from 'vue'\r\n    import Card from 'primevue/card'\r\n    import KnFabButton from '@/components/UI/KnFabButton.vue'\r\n    import Listbox from 'primevue/listbox'\r\n    import workspaceFederationDatasetListDescriptor from './WorkspaceFederationDatasetListDescriptor.json'\r\n\r\n    export default defineComponent({\r\n        name: 'workspace-federation-definition-associations-list',\r\n        components: { Card, KnFabButton, Listbox },\r\n        props: { propAssociations: { type: Array } },\r\n        emits: ['createAssociationClick'],\r\n        data() {\r\n            return {\r\n                workspaceFederationDatasetListDescriptor,\r\n                associations: [] as any[]\r\n            }\r\n        },\r\n        watch: {\r\n            propAssociations() {\r\n                this.loadAssociations()\r\n            }\r\n        },\r\n        created() {\r\n            this.loadAssociations()\r\n        },\r\n        methods: {\r\n            loadAssociations() {\r\n                this.associations = this.propAssociations as any[]\r\n            },\r\n            createAssociation() {\r\n                this.$emit('createAssociationClick')\r\n            },\r\n            deleteAssociationConfirm(association: any) {\r\n                this.$confirm.require({\r\n                    message: this.$t('common.toast.deleteMessage'),\r\n                    header: this.$t('common.toast.deleteTitle'),\r\n                    icon: 'pi pi-exclamation-triangle',\r\n                    accept: () => this.deleteAssociation(association)\r\n                })\r\n            },\r\n            deleteAssociation(association: any) {\r\n                const index = this.associations.findIndex((el: any) => el.relationship === association.relationship)\r\n                if (index !== -1) this.associations.splice(index, 1)\r\n            }\r\n        }\r\n    })\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n    #associations-list {\r\n        border: none;\r\n    }\r\n\r\n    .delete-association-icon {\r\n        margin-left: auto;\r\n    }\r\n</style>\r\n","<template>\r\n    <Toolbar class=\"kn-toolbar kn-toolbar--primary\" :style=\"mainDescriptor.style.maxWidth\">\r\n        <template #start> {{ $t('workspace.federationDefinition.title') }}</template>\r\n        <template #end>\r\n            <Button class=\"kn-button p-button-text p-button-rounded\" @click=\"closeFederationDefinition\"> {{ $t('common.close') }}</Button></template\r\n        >\r\n    </Toolbar>\r\n    <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar\" v-if=\"loading\" />\r\n\r\n    <div class=\"kn-overflow-y kn-flex p-d-flex p-flex-column\">\r\n        <div v-if=\"step === 0\" class=\"p-d-flex p-flex-row p-flex-wrap kn-flex\">\r\n            <WorkspaceFederationDatasetList class=\"kn-flex p-m-2\" :mode=\"'available'\" :propDatasets=\"availableDatasets\" @showInfo=\"showDatasetInfo\" @datasetSelected=\"moveDataset\"></WorkspaceFederationDatasetList>\r\n            <WorkspaceFederationDatasetList class=\"kn-flex p-m-2\" :mode=\"'selected'\" :propDatasets=\"selectedDatasets\" @datasetSelected=\"moveDataset\"></WorkspaceFederationDatasetList>\r\n        </div>\r\n        <div v-else class=\"kn-flex\">\r\n            <WorkspaceFederationDefinitionAssociationsEditor class=\"p-m-2\" :selectedDatasets=\"selectedDatasets\" :selectedMetafields=\"selectedMetafields\" :resetSelectedMetafield=\"resetSelectedMetafield\"></WorkspaceFederationDefinitionAssociationsEditor>\r\n            <WorkspaceFederationDefinitionAssociationsList class=\"p-m-2\" :propAssociations=\"multirelationships\" @createAssociationClick=\"createAssociation()\"></WorkspaceFederationDefinitionAssociationsList>\r\n        </div>\r\n\r\n        <div class=\"p-d-flex p-flex-row p-jc-end p-m-2\">\r\n            <Button class=\"kn-button kn-button--secondary\" @click=\"changeSteps\"> {{ step === 0 ? $t('common.next') : $t('common.back') }}</Button>\r\n            <Button v-if=\"step === 1\" class=\"kn-button kn-button--secondary p-mx-2\" @click=\"saveFederation\"> {{ $t('workspace.federationDefinition.saveFederation') }}</Button>\r\n        </div>\r\n\r\n        <WorskpaceFederationDatasetDialog :visible=\"infoDialogVisible\" :dataset=\"selectedDataset\" @close=\"closeInfoDialog\"></WorskpaceFederationDatasetDialog>\r\n        <WorkspaceFederationSaveDialog :visible=\"saveDialogVisible\" :federatedDataset=\"federatedDataset\" @close=\"closeSaveDialog\" @save=\"handleSaveFederation\"></WorkspaceFederationSaveDialog>\r\n        <WorkspaceWarningDialog :visible=\"warningDialogVisbile\" :title=\"$t('workspace.federationDefinition.title')\" :warningMessage=\"warningMessage\" @close=\"closeWarningDialog\"></WorkspaceWarningDialog>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { IFederatedDataset } from '../Workspace'\r\nimport mainDescriptor from '@/modules/workspace/WorkspaceDescriptor.json'\r\nimport WorskpaceFederationDatasetDialog from './dialogs/WorskpaceFederationDatasetDialog.vue'\r\nimport WorkspaceWarningDialog from '../genericComponents/WorkspaceWarningDialog.vue'\r\nimport WorkspaceFederationSaveDialog from './dialogs/WorkspaceFederationSaveDialog.vue'\r\nimport WorkspaceFederationDatasetList from './WorkspaceFederationDatasetList.vue'\r\nimport WorkspaceFederationDefinitionAssociationsEditor from './WorkspaceFederationDefinitionAssociationsEditor.vue'\r\nimport WorkspaceFederationDefinitionAssociationsList from './WorkspaceFederationDefinitionAssociationsList.vue'\r\nimport { AxiosResponse } from 'axios'\r\nimport mainStore from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'workspace-federation-definition',\r\n    components: { WorkspaceFederationDatasetList, WorskpaceFederationDatasetDialog, WorkspaceWarningDialog, WorkspaceFederationDefinitionAssociationsEditor, WorkspaceFederationDefinitionAssociationsList, WorkspaceFederationSaveDialog },\r\n    props: { id: { type: String } },\r\n    data() {\r\n        return {\r\n            mainDescriptor,\r\n            federatedDataset: null as IFederatedDataset | null,\r\n            datasets: [] as any[],\r\n            availableDatasets: [] as any[],\r\n            selectedDatasets: [] as any[],\r\n            sourceDatasetUsedInRelations: [] as any[],\r\n            multirelationships: [] as any[],\r\n            selectedDataset: null as any,\r\n            selectedMetafields: [] as any[],\r\n            resetSelectedMetafield: false,\r\n            infoDialogVisible: false,\r\n            warningDialogVisbile: false,\r\n            warningMessage: '' as string,\r\n            saveDialogVisible: false,\r\n            operation: 'create',\r\n            user: null as any,\r\n            step: 0,\r\n            loading: false\r\n        }\r\n    },\r\n    watch: {\r\n        async id() {\r\n            await this.loadPage()\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    async created() {\r\n        this.user = (this.store.$state as any).user\r\n        await this.loadPage()\r\n    },\r\n    methods: {\r\n        async loadPage() {\r\n            this.loading = true\r\n            await this.loadDatasets()\r\n            if (this.id) {\r\n                await this.loadFederatedDataset()\r\n                this.formatRelationship()\r\n            } else {\r\n                this.federatedDataset = { name: '', label: '', description: '', relationships: [], degenerated: false, owner: this.user.userId }\r\n            }\r\n            this.setSelectedDatasets()\r\n            this.loading = false\r\n        },\r\n        async loadFederatedDataset() {\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `federateddataset/${this.id}/`).then((response: AxiosResponse<any>) => (this.federatedDataset = { ...response.data, relationships: JSON.parse(response.data.relationships) }))\r\n        },\r\n        async loadDatasets() {\r\n            this.datasets = []\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/datasets/?includeDerived=no`).then((response: AxiosResponse<any>) => {\r\n                response.data.forEach((el: any) => {\r\n                    if (el.pars.length === 0) {\r\n                        this.formatDatasetMetaFields(el)\r\n                        this.datasets.push(el)\r\n                    }\r\n                })\r\n            })\r\n        },\r\n        formatDatasetMetaFields(dataset: any) {\r\n            if (!dataset.metadata) {\r\n                dataset.metadata = {}\r\n            }\r\n\r\n            if (!dataset.metadata.fieldsMeta) {\r\n                dataset.metadata.fieldsMeta = []\r\n                if (dataset.meta && dataset.meta.columns) {\r\n                    let columnsJson = {}\r\n                    for (let c in dataset.meta.columns) {\r\n                        if (dataset.meta.columns[c].pname === 'fieldAlias') {\r\n                            columnsJson[dataset.meta.columns[c].column] = dataset.meta.columns[c].pvalue\r\n                        }\r\n                    }\r\n\r\n                    for (let column in columnsJson) {\r\n                        dataset.metadata.fieldsMeta.push({ name: column, alias: columnsJson[column] })\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        formatRelationship() {\r\n            this.federatedDataset?.relationships.forEach((relationship: any) => {\r\n                relationship.forEach((el: any) => {\r\n                    this.sourceDatasetUsedInRelations.push(el.sourceTable.name)\r\n                    this.sourceDatasetUsedInRelations.push(el.destinationTable.name)\r\n                    this.multirelationships.push({\r\n                        relationship: el.sourceTable?.name.toUpperCase() + '.' + el.sourceColumns[0] + ' -> ' + el.destinationTable?.name.toUpperCase() + '.' + el.destinationColumns[0],\r\n                        datasets: [\r\n                            { ...el.sourceTable, label: el.sourceTable?.name },\r\n                            { ...el.destinationTable, label: el.destinationTable?.name }\r\n                        ]\r\n                    })\r\n                })\r\n            })\r\n        },\r\n        setSelectedDatasets() {\r\n            this.availableDatasets = [...this.datasets]\r\n            this.sourceDatasetUsedInRelations.forEach((el: any) => {\r\n                const index = this.availableDatasets.findIndex((dataset: any) => {\r\n                    return dataset.label === el\r\n                })\r\n\r\n                if (index !== -1) {\r\n                    this.selectedDatasets.push(this.availableDatasets[index])\r\n                    this.availableDatasets.splice(index, 1)\r\n                }\r\n            })\r\n        },\r\n        changeSteps() {\r\n            if (this.step === 0 && this.canMoveToNextStep()) {\r\n                this.step = 1\r\n            } else {\r\n                this.step = 0\r\n            }\r\n        },\r\n        canMoveToNextStep() {\r\n            if (this.selectedDatasets.length === 0 || this.selectedDatasets.length === 1) {\r\n                this.warningMessage = this.selectedDatasets.length === 0 ? this.$t('workspace.federationDefinition.noDatasetsSelectedError') : this.$t('workspace.federationDefinition.onlyOneSelectedDatasetError')\r\n                this.warningDialogVisbile = true\r\n                return false\r\n            }\r\n\r\n            return true\r\n        },\r\n\r\n        showDatasetInfo(dataset: any) {\r\n            this.selectedDataset = dataset\r\n            this.infoDialogVisible = true\r\n        },\r\n        closeInfoDialog() {\r\n            this.selectedDataset = null\r\n            this.infoDialogVisible = false\r\n        },\r\n        moveDataset(payload: any) {\r\n            const fromArray = payload.mode === 'available' ? this.availableDatasets : this.selectedDatasets\r\n            const toArray = payload.mode === 'available' ? this.selectedDatasets : this.availableDatasets\r\n\r\n            if (payload.mode === 'selected' && !this.datasetCanBeUnselected(payload.dataset)) {\r\n                this.warningMessage = this.$t('workspace.federationDefinition.removeSelectedDatasetError')\r\n                this.warningDialogVisbile = true\r\n                return\r\n            }\r\n\r\n            const index = fromArray.findIndex((el: any) => el.name === payload.dataset.name)\r\n            if (index !== -1) {\r\n                toArray.push(fromArray[index])\r\n                fromArray.splice(index, 1)\r\n            }\r\n        },\r\n        datasetCanBeUnselected(dataset: any) {\r\n            const index = this.multirelationships.findIndex((el: any) => {\r\n                return el.datasets[0].name === dataset.name || el.datasets[1].name === dataset.name\r\n            })\r\n            return index === -1\r\n        },\r\n        closeWarningDialog() {\r\n            this.warningMessage = ''\r\n            this.warningDialogVisbile = false\r\n        },\r\n        closeFederationDefinition() {\r\n            this.federatedDataset = null\r\n            this.$router.push('/workspace/models')\r\n        },\r\n        createAssociation() {\r\n            if (this.selectedMetafields.length === 2) {\r\n                const association = {\r\n                    relationship: this.selectedMetafields[0].dataset.label + '.' + this.selectedMetafields[0].metafield.name + ' -> ' + this.selectedMetafields[1].dataset.label + '.' + this.selectedMetafields[1].metafield.name,\r\n                    datasets: [this.selectedMetafields[0].dataset, this.selectedMetafields[1].dataset]\r\n                }\r\n                if (!this.checkIfAssociationAlreadyPresent(association)) {\r\n                    this.multirelationships.push(association)\r\n                    this.selectedMetafields = []\r\n                    this.resetSelectedMetafield = !this.resetSelectedMetafield\r\n                } else {\r\n                    this.warningMessage = this.$t('workspace.federationDefinition.relationshipAlreadyPresentError')\r\n                    this.warningDialogVisbile = true\r\n                }\r\n            }\r\n        },\r\n        checkIfAssociationAlreadyPresent(association: any) {\r\n            const index = this.multirelationships.findIndex((el: any) => el.relationship === association.relationship)\r\n            return index !== -1\r\n        },\r\n        checkIfAllSelectedDatasetArePresentInRelationships() {\r\n            let present = true\r\n\r\n            for (let i = 0; i < this.selectedDatasets.length; i++) {\r\n                const index = this.multirelationships.findIndex((el: any) => {\r\n                    return el.datasets[0].label === this.selectedDatasets[i].label || el.datasets[1].label === this.selectedDatasets[i].label\r\n                })\r\n\r\n                if (index === -1) {\r\n                    present = false\r\n                    break\r\n                }\r\n            }\r\n\r\n            return present\r\n        },\r\n        saveFederation() {\r\n            if (!this.checkIfAllSelectedDatasetArePresentInRelationships()) {\r\n                this.warningMessage = this.$t('workspace.federationDefinition.datasetNotInRelationshipError')\r\n                this.warningDialogVisbile = true\r\n            } else {\r\n                this.saveDialogVisible = true\r\n            }\r\n        },\r\n        closeSaveDialog() {\r\n            this.saveDialogVisible = false\r\n        },\r\n        async handleSaveFederation(federationDataset: IFederatedDataset) {\r\n            federationDataset.relationships = [this.getFormattedRelationshipsForSave()]\r\n            await this.saveFederationDataset(federationDataset)\r\n        },\r\n        getFormattedRelationshipsForSave() {\r\n            const formattedRelationships = [] as any[]\r\n            this.multirelationships.forEach((el: any) => {\r\n                const sourceAndDestination = el.relationship?.split('->')\r\n                const source = sourceAndDestination ? sourceAndDestination[0]?.trim().split('.') : []\r\n                const destination = sourceAndDestination ? sourceAndDestination[1]?.trim().split('.') : []\r\n\r\n                const tempRelationship = {\r\n                    bidirectional: true,\r\n                    cardinality: 'many-to-one',\r\n                    sourceTable: {\r\n                        name: source[0],\r\n                        className: source[0]\r\n                    },\r\n                    sourceColumns: [source[1]],\r\n                    destinationTable: {\r\n                        name: destination[0],\r\n                        className: destination[0]\r\n                    },\r\n                    destinationColumns: [destination[1]]\r\n                }\r\n                formattedRelationships.push(tempRelationship)\r\n            })\r\n\r\n            return formattedRelationships\r\n        },\r\n        async saveFederationDataset(federatedDataset: IFederatedDataset) {\r\n            let url = import.meta.env.VITE_RESTFUL_SERVICES_PATH + 'federateddataset/post'\r\n            const tempDataset = { ...federatedDataset }\r\n\r\n            if (tempDataset.federation_id) {\r\n                this.operation = 'update'\r\n                url = import.meta.env.VITE_RESTFUL_SERVICES_PATH + `federateddataset/${federatedDataset.federation_id}`\r\n                delete tempDataset.federation_id\r\n            }\r\n\r\n            delete tempDataset.owner\r\n            delete tempDataset.degenerated\r\n\r\n            await this.sendRequest(url, tempDataset)\r\n                .then(() => {\r\n                    this.store.setInfo({\r\n                        title: this.$t('common.toast.' + this.operation + 'Title'),\r\n                        msg: this.$t('common.toast.success')\r\n                    })\r\n                    this.saveDialogVisible = false\r\n                    this.$router.push('/workspace/models')\r\n                })\r\n                .catch((response: any) => {\r\n                    this.warningMessage = response.message\r\n                    this.warningDialogVisbile = true\r\n                })\r\n        },\r\n        sendRequest(url: string, federatedDataset: IFederatedDataset) {\r\n            if (this.operation === 'create') {\r\n                return this.$http.post(url, federatedDataset, { headers: { 'X-Disable-Errors': 'true' } })\r\n            } else {\r\n                return this.$http.put(url, federatedDataset, { headers: { 'X-Disable-Errors': 'true' } })\r\n            }\r\n        }\r\n    }\r\n})\r\n</script>\r\n"],"names":["_sfc_main","Dialog","_hoisted_1","_hoisted_4","_openBlock","_createElementBlock","_createVNode","_normalizeStyle","_withCtx","_createElementVNode","_hoisted_3","_toDisplayString","_hoisted_6","_hoisted_7","_hoisted_2","_normalizeClass","_withDirectives","_vShow","Listbox","Message","_withModifiers","Card","_createBlock","_Fragment","_renderList","mainStore","_createCommentVNode"],"mappings":"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"}