{"version":3,"file":"SchedulationAgendaDisplay-54d5a8f3.js","sources":["../../../../modules/managers/schedulationAgendaManagement/SchedulationAgendaDisplay.vue"],"sourcesContent":["<template>\r\n    <div class=\"parent-card p-d-flex p-flex-column\">\r\n        <span class=\"p-d-flex flex-no-grow p-mx-2\" :style=\"schedulationAgendaDescriptor.span.style\">\r\n            <SelectButton class=\"p-m-1\" v-model=\"selectedDisplayMode\" :options=\"displayModes\" optionLabel=\"name\" data-test=\"select-button\" />\r\n        </span>\r\n        <div class=\"flex-grow overflow-auto\">\r\n            <template v-for=\"dataItem in groupedItemList\" :key=\"dataItem\">\r\n                <Card class=\"p-mx-3 p-my-1\">\r\n                    <template #content>\r\n                        <div class=\"p-grid p-m-0\">\r\n                            <div class=\" p-col-3\">\r\n                                <div class=\"p-d-flex p-jc-center p-ai-center\" v-if=\"displayMode === 'time'\">\r\n                                    <div class=\"p-d-flex p-mx-3\">\r\n                                        <p class=\"p-text-bold p-text-center p-large\">{{ dataItem.day }}</p>\r\n                                    </div>\r\n                                    <div class=\"p-d-flex p-flex-column p-t-2\">\r\n                                        <p class=\"p-text-left p-text-bold p-m-1 \">{{ dataItem.dayOfWeek }}</p>\r\n                                        <p class=\"p-text-left p-m-1\">{{ dataItem.monthName + ' ' + dataItem.year }}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"p-d-flex p-jc-center p-ai-center\" v-if=\"displayMode === 'package'\">\r\n                                    <div class=\"p-d-flex\">\r\n                                        <h2>{{ dataItem.jobName }}</h2>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"p-d-flex p-jc-center p-ai-center\" v-if=\"displayMode === 'document'\">\r\n                                    <div class=\"p-d-flex\">\r\n                                        <h2>{{ dataItem.document }}</h2>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"p-col-9\">\r\n                                <DataTable :value=\"dataItem.executions\" v-model:expandedRows=\"expandedRows\" class=\"custom-row-border p-datatable-sm kn-table\" dataKey=\"id\" :rows=\"10\" :rowClass=\"rowClass\" responsiveLayout=\"stack\" breakpoint=\"960px\" data-test=\"data-table\">\r\n                                    <template #empty>\r\n                                        {{ $t('common.info.noDataFound') }}\r\n                                    </template>\r\n\r\n                                    <Column field=\"date\" :style=\"schedulationAgendaDescriptor.table.dateColumn.style\">\r\n                                        <template #body=\"slotProps\">\r\n                                            <div v-if=\"displayMode == 'time'\" class=\"p-pl-1 color-left-border\" :style=\"{ borderLeftColor: getRandomColor(slotProps.data.jobName) }\">\r\n                                                {{ new Date(slotProps.data.date).getHours() + ':' + new Date(slotProps.data.date).getMinutes() }}\r\n                                            </div>\r\n                                            <div v-if=\"displayMode == 'package' || displayMode == 'document'\" class=\"p-pl-1 color-left-border\" :style=\"{ borderLeftColor: getRandomColor(slotProps.data.jobName) }\">\r\n                                                {{ slotProps.data.date }}\r\n                                            </div>\r\n                                        </template></Column\r\n                                    >\r\n                                    <Column field=\"jobName\"></Column>\r\n                                    <Column field=\"numberOfDocuments\" :style=\"schedulationAgendaDescriptor.table.badgeColumn.style\">\r\n                                        <template #body=\"slotProps\">\r\n                                            <Badge :value=\"slotProps.data.numberOfDocuments\"></Badge>\r\n                                        </template>\r\n                                    </Column>\r\n                                    <Column :style=\"schedulationAgendaDescriptor.table.rowExpanderColumn.style\" :expander=\"true\" />\r\n                                    <Column :style=\"schedulationAgendaDescriptor.table.iconColumn.style\">\r\n                                        <template #body=\"slotProps\">\r\n                                            <Button icon=\"pi pi-pencil\" class=\"p-button-link\" @click=\"openRedirection(slotProps.data.jobName)\" :data-test=\"'action-button'\" />\r\n                                        </template>\r\n                                    </Column>\r\n                                    <template #expansion=\"slotProps\">\r\n                                        <div>\r\n                                            <DataTable :value=\"slotProps.data.documents\">\r\n                                                <Column>\r\n                                                    <template #body>\r\n                                                        <Button icon=\"pi pi-book\" class=\"p-button-link\" />\r\n                                                    </template>\r\n                                                </Column>\r\n                                                <Column :style=\"schedulationAgendaDescriptor.table.iconColumn.style\">\r\n                                                    <template #body>\r\n                                                        <Button icon=\"pi pi-document\" class=\"p-button-link\" />\r\n                                                    </template>\r\n                                                </Column>\r\n                                                <Column>\r\n                                                    <template #body=\"slotProps\">\r\n                                                        {{ slotProps.data }}\r\n                                                    </template>\r\n                                                </Column>\r\n                                            </DataTable>\r\n                                        </div>\r\n                                    </template>\r\n                                </DataTable>\r\n                            </div>\r\n                        </div>\r\n                    </template>\r\n                </Card>\r\n            </template>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { iSchedulation, iGroupDataItem, iDisplayMode } from './SchedulationAgenda'\r\nimport DataTable from 'primevue/datatable'\r\nimport Badge from 'primevue/badge'\r\nimport Column from 'primevue/column'\r\nimport SelectButton from 'primevue/selectbutton'\r\nimport schedulationAgendaDescriptor from './SchedulationAgendaDescriptor.json'\r\nimport { formatDate, formatDateWithLocale } from '@/helpers/commons/localeHelper'\r\nimport Card from 'primevue/card'\r\nimport moment from 'moment'\r\n\r\nexport default defineComponent({\r\n    name: 'schedulation-agenda-display',\r\n    components: {\r\n        Card,\r\n        Badge,\r\n        Column,\r\n        DataTable,\r\n        SelectButton\r\n    },\r\n    props: {\r\n        itemList: Array\r\n    },\r\n    data() {\r\n        return {\r\n            selectedItem: {},\r\n            displayMode: 'time',\r\n            expandedRows: [],\r\n            schedulationAgendaDescriptor,\r\n            dataItemList: [] as iSchedulation[],\r\n            groupedItemList: [] as iGroupDataItem[],\r\n            colorDictionary: {},\r\n            selectedDisplayMode: null as iDisplayMode | null,\r\n            displayModes: [\r\n                { name: this.$t('managers.schedulationAgendaManagement.detail.time'), code: 'time' },\r\n                { name: this.$t('managers.schedulationAgendaManagement.detail.package'), code: 'package' },\r\n                { name: this.$t('managers.schedulationAgendaManagement.detail.document'), code: 'document' }\r\n            ]\r\n        }\r\n    },\r\n    watch: {\r\n        itemList() {\r\n            this.dataItemList = this.itemList as iSchedulation[]\r\n            if (this.displayMode) {\r\n                this.updateDisplayData(this.displayMode)\r\n            }\r\n        },\r\n        selectedDisplayMode() {\r\n            if (this.selectedDisplayMode) {\r\n                this.displayMode = this.selectedDisplayMode.code\r\n                this.updateDisplayData(this.displayMode)\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        updateDisplayData(displayType: string) {\r\n            this.runDisplay(displayType)\r\n        },\r\n        runDisplay(displayType: string) {\r\n            this.groupedItemList = [] as iGroupDataItem[]\r\n            this.displayMode = displayType\r\n            switch (displayType) {\r\n                case 'time':\r\n                    this.groupedItemList = this.createTimeItemList()\r\n                    break\r\n                case 'package':\r\n                    this.groupedItemList = this.createPackageItemList()\r\n                    break\r\n                case 'document':\r\n                    this.groupedItemList = this.createDocumentItemList()\r\n                    break\r\n            }\r\n        },\r\n        openRedirection(jobName: String) {\r\n            if (jobName) {\r\n                this.$router.push(`/scheduler/edit-package-schedule?id=${jobName}&clone=false`)\r\n            }\r\n        },\r\n        getRandomColor(inputName: any) {\r\n            let currentColor = this.colorDictionary[inputName]\r\n            if (!currentColor) {\r\n                var letters = '0123456789ABCDEF'\r\n                var color = '#'\r\n                for (var i = 0; i < 6; i++) {\r\n                    color += letters[Math.floor(Math.random() * 16)]\r\n                }\r\n                currentColor = color\r\n                this.colorDictionary[inputName] = currentColor\r\n            }\r\n            return currentColor\r\n        },\r\n        createDocumentItemList(): iGroupDataItem[] {\r\n            let index = 0\r\n            const groupedItemList: iGroupDataItem[] = []\r\n            for (let i = 0; i < this.dataItemList.length; i++) {\r\n                if (this.dataItemList[i].triggers && this.dataItemList[i].triggers[0].executions) {\r\n                    for (let j = 0; j < this.dataItemList[i].triggers.length; j++) {\r\n                        for (let k = 0; k < this.dataItemList[i].triggers[j].executions.length; k++) {\r\n                            for (let l = 0; l < this.dataItemList[i].triggers[j].documents.length; l++) {\r\n                                let item = groupedItemList.find((x) => x.document === this.dataItemList[i].triggers[j].documents[l])\r\n                                if (!item) {\r\n                                    item = {\r\n                                        jobName: '',\r\n                                        color: 'red',\r\n                                        document: this.dataItemList[i].triggers[j].documents[l],\r\n                                        executions: [] as any\r\n                                    }\r\n                                    groupedItemList.push(item)\r\n                                }\r\n\r\n                                let execution = item.executions.find((x) => x.date == new Date(this.dataItemList[i].triggers[j].executions[k]))\r\n\r\n                                if (!execution) {\r\n                                    execution = {\r\n                                        id: index++,\r\n                                        date: this.formatDateTime(this.dataItemList[i].triggers[j].executions[k]),\r\n                                        jobName: this.dataItemList[i].triggers[j].jobName,\r\n                                        numberOfDocuments: this.dataItemList[i].triggers[j].documents.length,\r\n                                        documents: this.dataItemList[i].triggers[j].documents\r\n                                    }\r\n                                    item.executions.push(execution)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return groupedItemList\r\n        },\r\n        createPackageItemList(): iGroupDataItem[] {\r\n            let index = 0\r\n            const groupedItemList: iGroupDataItem[] = []\r\n            for (let i = 0; i < this.dataItemList.length; i++) {\r\n                if (this.dataItemList[i].triggers && this.dataItemList[i].triggers[0].executions) {\r\n                    let item = {\r\n                        jobName: this.dataItemList[i].name,\r\n                        color: 'red',\r\n                        document: '',\r\n                        executions: [] as any\r\n                    }\r\n                    for (let j = 0; j < this.dataItemList[i].triggers.length; j++) {\r\n                        for (let k = 0; k < this.dataItemList[i].triggers[j].executions.length; k++) {\r\n                            let execution = {\r\n                                id: index++,\r\n                                rawDate: new Date(this.dataItemList[i].triggers[j].executions[k]),\r\n                                date: this.formatDateTime(this.dataItemList[i].triggers[j].executions[k]),\r\n                                jobName: this.dataItemList[i].triggers[j].jobName,\r\n                                numberOfDocuments: this.dataItemList[i].triggers[j].documents.length,\r\n                                documents: this.dataItemList[i].triggers[j].documents\r\n                            }\r\n                            const executionMomentDate = moment(execution.rawDate)\r\n                            const ind = item.executions.findIndex((item) => executionMomentDate.isBefore(item.rawDate))\r\n                            if (ind >= 0) {\r\n                                item.executions.splice(ind, 0, execution)\r\n                            } else {\r\n                                item.executions.push(execution)\r\n                            }\r\n                        }\r\n                    }\r\n                    groupedItemList.push(item)\r\n                }\r\n            }\r\n            return groupedItemList\r\n        },\r\n        createTimeItemList(): iGroupDataItem[] {\r\n            let index = 0\r\n            const groupedItemList: iGroupDataItem[] = []\r\n            for (let i = 0; i < this.dataItemList.length; i++) {\r\n                if (this.dataItemList[i].triggers && this.dataItemList[i].triggers[0].executions) {\r\n                    for (let j = 0; j < this.dataItemList[i].triggers.length; j++) {\r\n                        for (let k = 0; k < this.dataItemList[i].triggers[j].executions.length; k++) {\r\n                            let item = groupedItemList.find((x) => moment(x.date).isSame(this.dataItemList[i].triggers[j].executions[k], 'day'))\r\n                            if (!item) {\r\n                                item = this.createTimeGrupItem(this.dataItemList[i].triggers[j].executions[k])\r\n                                //search for position of group item\r\n                                const itemMomentDate = moment(item.rawDate)\r\n                                const ind = groupedItemList.findIndex((groupItem) => itemMomentDate.isBefore(groupItem.rawDate))\r\n                                if (ind >= 0) {\r\n                                    groupedItemList.splice(ind, 0, item)\r\n                                } else {\r\n                                    groupedItemList.push(item)\r\n                                }\r\n                            }\r\n                            let execution = {\r\n                                id: index++,\r\n                                rawDate: new Date(this.dataItemList[i].triggers[j].executions[k]),\r\n                                date: this.dataItemList[i].triggers[j].executions[k],\r\n                                jobName: this.dataItemList[i].triggers[j].jobName,\r\n                                numberOfDocuments: this.dataItemList[i].triggers[j].documents.length,\r\n                                documents: this.dataItemList[i].triggers[j].documents\r\n                            }\r\n                            const execItemMomentDate = moment(execution.rawDate)\r\n                            const execItemInd = item.executions.findIndex((groupItem) => execItemMomentDate.isBefore(groupItem.rawDate))\r\n                            if (execItemInd >= 0) {\r\n                                item.executions.splice(execItemInd, 0, execution)\r\n                            } else {\r\n                                item.executions.push(execution)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return groupedItemList\r\n        },\r\n        createTimeGrupItem(date: string) {\r\n            return {\r\n                jobName: '',\r\n                color: 'red',\r\n                rawDate: new Date(date),\r\n                date: formatDateWithLocale(date),\r\n                dayOfWeek: formatDateWithLocale(date, { weekday: 'long' }),\r\n                monthName: formatDateWithLocale(date, { month: 'long' }),\r\n                year: new Date(date).getFullYear(),\r\n                day: new Date(date).getDate(),\r\n                document: '',\r\n                executions: [] as any\r\n            }\r\n        },\r\n        returnTime(inputDate: any) {\r\n            var date = new Date(inputDate)\r\n            if (date) {\r\n                return date.toLocaleTimeString(navigator.language, {\r\n                    hour: '2-digit',\r\n                    minute: '2-digit'\r\n                })\r\n            }\r\n        },\r\n        formatDateTime(date: any) {\r\n            return formatDate(date, 'DD/MM/YYYY HH:MM')\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.p-card:nth-child(even) {\r\n    background-color: #f2f2f2;\r\n    &:deep(.p-datatable) {\r\n        .p-datatable-tbody tr {\r\n            background-color: inherit;\r\n        }\r\n        .p-datatable-thead tr th {\r\n            background-color: inherit;\r\n        }\r\n    }\r\n}\r\n.p-large {\r\n    font-size: 2rem;\r\n}\r\n.color-left-border {\r\n    border-left: 5px solid;\r\n}\r\n.parent-card {\r\n    overflow-y: auto;\r\n    overflow-x: hidden;\r\n    flex-grow: 1;\r\n}\r\n\r\n.overflow-auto {\r\n    overflow: auto;\r\n}\r\n.flex-no-grow {\r\n    flex-grow: 0;\r\n}\r\n.flex-grow {\r\n    flex-grow: 1;\r\n}\r\n</style>\r\n"],"names":["Card","Badge","Column","DataTable","SelectButton","moment","_openBlock","_createElementBlock","_createElementVNode","_normalizeStyle","_createVNode","_Fragment","_renderList","_createBlock","_withCtx","_toDisplayString","_createCommentVNode"],"mappings":"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"}