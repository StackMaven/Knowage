{"version":3,"file":"MondrianSchemasManagementTabView-fc844546.js","sources":["../../../../modules/managers/mondrianSchemasManagement/MondrianSchemasDetailTab/MondrianSchemasDetailTab.vue","../../../../modules/managers/mondrianSchemasManagement/MondrianSchemasWorkflowTab/MondrianSchemasWorkflowTab.vue","../../../../modules/managers/mondrianSchemasManagement/MondrianSchemasManagementTabView.vue"],"sourcesContent":["<template>\r\n    <Card class=\"p-mb-3\">\r\n        <template #content>\r\n            <form class=\"p-fluid p-m-3\">\r\n                <div class=\"p-field p-mb-3\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"name\"\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            v-model.trim=\"v$.schema.name.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.schema.name.$invalid && v$.schema.name.$dirty\r\n                            }\"\r\n                            maxLength=\"100\"\r\n                            @blur=\"v$.schema.name.$touch()\"\r\n                            @input=\"onFieldChange('name', $event.target.value)\"\r\n                            data-test=\"name-input\"\r\n                        />\r\n                        <label for=\"name\" class=\"kn-material-input-label\"> {{ $t('common.name') }} * </label>\r\n                    </span>\r\n                    <KnValidationMessages :vComp=\"v$.schema.name\" :additionalTranslateParams=\"{ fieldName: $t('common.name') }\" />\r\n                </div>\r\n                <div class=\"p-field p-mb-3\">\r\n                    <span class=\"p-float-label\">\r\n                        <InputText\r\n                            id=\"description\"\r\n                            class=\"kn-material-input\"\r\n                            type=\"text\"\r\n                            v-model.trim=\"v$.schema.description.$model\"\r\n                            :class=\"{\r\n                                'p-invalid': v$.schema.description.$invalid && v$.schema.description.$dirty\r\n                            }\"\r\n                            maxLength=\"500\"\r\n                            @blur=\"v$.schema.description.$touch()\"\r\n                            @input=\"onFieldChange('description', $event.target.value)\"\r\n                            data-test=\"description-input\"\r\n                        />\r\n                        <label for=\"description\" class=\"kn-material-input-label\">\r\n                            {{ $t('common.description') }}\r\n                        </label>\r\n                    </span>\r\n                    <KnValidationMessages :vComp=\"v$.schema.description\" :additionalTranslateParams=\"{ fieldName: $t('common.description') }\" />\r\n                </div>\r\n                <div class=\"p-field\">\r\n                    <span class=\"p-float-label\">\r\n                        <KnInputFile label=\"\" :changeFunction=\"onVersionUpload\" accept=\".csv\" :visibility=\"true\" />\r\n                    </span>\r\n                </div>\r\n            </form>\r\n        </template>\r\n    </Card>\r\n    <Card>\r\n        <template #header>\r\n            <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                <template #start>\r\n                    {{ $t('managers.mondrianSchemasManagement.detail.savedVersions') }}\r\n                </template>\r\n            </Toolbar>\r\n        </template>\r\n        <template #content>\r\n            <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar\" v-if=\"loading\" />\r\n            <div>\r\n                <div class=\"p-col\">\r\n                    <DataTable\r\n                        v-if=\"!loading\"\r\n                        :value=\"versions\"\r\n                        :scrollable=\"true\"\r\n                        scrollHeight=\"40vh\"\r\n                        :loading=\"loading\"\r\n                        :rows=\"7\"\r\n                        class=\"p-datatable-sm kn-table\"\r\n                        dataKey=\"id\"\r\n                        responsiveLayout=\"stack\"\r\n                        breakpoint=\"960px\"\r\n                        v-model:selection=\"selectedVersion\"\r\n                        v-model:filters=\"filters\"\r\n                        @row-select=\"onActiveVersionChange\"\r\n                    >\r\n                        <template #header>\r\n                            <div class=\"table-header\">\r\n                                <span class=\"p-input-icon-left\">\r\n                                    <i class=\"pi pi-search\" />\r\n                                    <InputText class=\"kn-material-input\" v-model=\"filters['global'].value\" type=\"text\" :placeholder=\"$t('common.search')\" badge=\"0\" />\r\n                                </span>\r\n                            </div>\r\n                        </template>\r\n                        <template #empty>\r\n                            {{ $t('common.info.noDataFound') }}\r\n                        </template>\r\n                        <template #filter=\"{ filterModel }\">\r\n                            <InputText type=\"text\" v-model=\"filterModel.value\" class=\"p-column-filter\"></InputText>\r\n                        </template>\r\n                        <Column selectionMode=\"single\" :header=\"$t('managers.mondrianSchemasManagement.headers.active')\" headerStyle=\"width: 3em\"></Column>\r\n                        <Column v-for=\"col of columns\" :field=\"col.field\" :header=\"$t(col.header)\" :key=\"col.field\" :sortable=\"true\" :style=\"detailDescriptor.table.column.style\"> </Column>\r\n                        <Column field=\"creationDate\" :header=\"$t('managers.mondrianSchemasManagement.headers.creationDate')\" dataType=\"date\">\r\n                            <template #body=\"{ data }\">\r\n                                {{ formatDate(data.creationDate) }}\r\n                            </template>\r\n                        </Column>\r\n                        <Column :style=\"detailDescriptor.table.iconColumn.style\" @rowClick=\"false\">\r\n                            <template #body=\"slotProps\">\r\n                                <Button icon=\"pi pi-download\" class=\"p-button-link\" @click=\"downloadVersion(slotProps.data.id)\" />\r\n                                <Button icon=\"pi pi-trash\" class=\"p-button-link\" @click=\"showDeleteDialog(slotProps.data.id)\" />\r\n                            </template>\r\n                        </Column>\r\n                    </DataTable>\r\n                </div>\r\n            </div>\r\n        </template>\r\n    </Card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { createValidations } from '@/helpers/commons/validationHelper'\r\nimport { iSchema, iVersion } from '../MondrianSchemas'\r\nimport { filterDefault } from '@/helpers/commons/filterHelper'\r\nimport { downloadDirect } from '@/helpers/commons/fileHelper'\r\nimport { AxiosResponse } from 'axios'\r\nimport moment from 'moment'\r\nimport useValidate from '@vuelidate/core'\r\nimport tabViewDescriptor from '../MondrianSchemasTabViewDescriptor.json'\r\nimport detailDescriptor from './MondrianSchemasDetailDescriptor.json'\r\nimport KnValidationMessages from '@/components/UI/KnValidatonMessages.vue'\r\nimport KnInputFile from '@/components/UI/KnInputFile.vue'\r\nimport Card from 'primevue/card'\r\nimport DataTable from 'primevue/datatable'\r\nimport Column from 'primevue/column'\r\nimport { formatDateWithLocale } from '@/helpers/commons/localeHelper'\r\nimport mainStore from '../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'detail-tab',\r\n    components: {\r\n        Card,\r\n        KnValidationMessages,\r\n        DataTable,\r\n        Column,\r\n        KnInputFile\r\n    },\r\n    props: {\r\n        selectedSchema: {\r\n            type: Object,\r\n            requried: false\r\n        },\r\n        reloadTable: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n    emits: ['fieldChanged', 'activeVersionChanged', 'versionUploaded', 'versionsReloaded'],\r\n    data() {\r\n        return {\r\n            loading: false,\r\n            moment,\r\n            tabViewDescriptor,\r\n            detailDescriptor,\r\n            v$: useValidate() as any,\r\n            schema: {} as iSchema,\r\n            versions: [] as any,\r\n            selectedVersion: null as iVersion | null,\r\n            columns: detailDescriptor.columns,\r\n            filters: {\r\n                global: [filterDefault]\r\n            } as Object\r\n        }\r\n    },\r\n    validations() {\r\n        return {\r\n            schema: createValidations('schema', detailDescriptor.validations.schema)\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    mounted() {\r\n        if (this.selectedSchema) {\r\n            this.schema = { ...this.selectedSchema } as iSchema\r\n        }\r\n    },\r\n    watch: {\r\n        selectedSchema() {\r\n            this.schema = { ...this.selectedSchema } as iSchema\r\n            this.loadVersions()\r\n        },\r\n        reloadTable() {\r\n            if (this.reloadTable) {\r\n                this.loadVersions()\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        onFieldChange(fieldName: string, value: any) {\r\n            this.$emit('fieldChanged', { fieldName, value })\r\n        },\r\n        onActiveVersionChange(event) {\r\n            let versionId = event.data.id\r\n            this.$emit('activeVersionChanged', versionId)\r\n        },\r\n        async onVersionUpload(event) {\r\n            let uploadedVersion = event.target.files[0]\r\n            this.$emit('versionUploaded', uploadedVersion)\r\n        },\r\n        async loadVersions() {\r\n            if (!this.schema.id) {\r\n                this.versions = []\r\n                return\r\n            }\r\n            this.loading = true\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/mondrianSchemasResource/${this.schema.id}` + '/versions')\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.versions = response.data\r\n                    setTimeout(() => (this.selectedVersion = this.versions ? this.versions.find((version) => version.active) : null), 200)\r\n                    this.$emit('versionsReloaded')\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n        async downloadVersion(versionId) {\r\n            await this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/mondrianSchemasResource/${this.schema.id}` + `/versions/${versionId}` + `/file`, {\r\n                    headers: {\r\n                        Accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9'\r\n                    }\r\n                })\r\n                .then(\r\n                    (response: AxiosResponse<any>) => {\r\n                        if (response.data.errors) {\r\n                            this.store.setError({ title: this.$t('common.error.downloading'), msg: this.$t('common.error.errorCreatingPackage') })\r\n                        } else {\r\n                            this.store.setInfo({ title: this.$t('managers.mondrianSchemasManagement.toast.downloadFile.downloaded'), msg: this.$t('managers.mondrianSchemasManagement.toast.downloadFile.ok') })\r\n                            var contentDisposition = response.headers['content-disposition']\r\n\r\n                            var contentDispositionMatches = contentDisposition.match(/(?!([\\b attachment;filename= \\b])).*(?=)/g)\r\n                            if (contentDispositionMatches && contentDispositionMatches.length > 0) {\r\n                                var fileAndExtension = contentDispositionMatches[0]\r\n                                var completeFileName = fileAndExtension.replaceAll('\"', '')\r\n                                downloadDirect(response.data, completeFileName, 'application/zip; charset=utf-8')\r\n                            }\r\n                        }\r\n                    },\r\n                    (error) => this.store.setError({ title: this.$t('common.error.downloading'), msg: this.$t(error) })\r\n                )\r\n        },\r\n        showDeleteDialog(versionId: number) {\r\n            this.$confirm.require({\r\n                message: this.$t('common.toast.deleteMessage'),\r\n                header: this.$t('common.toast.deleteConfirmTitle'),\r\n                icon: 'pi pi-exclamation-triangle',\r\n                accept: () => this.deleteVersion(versionId)\r\n            })\r\n        },\r\n        async deleteVersion(versionId: number) {\r\n            await this.$http.delete(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/mondrianSchemasResource/${this.schema.id}` + '/versions/' + versionId).then(() => {\r\n                this.store.setInfo({\r\n                    title: this.$t('common.toast.deleteTitle'),\r\n                    msg: this.$t('common.toast.deleteSuccess')\r\n                })\r\n                this.loadVersions()\r\n            })\r\n        },\r\n        formatDate(date) {\r\n            return formatDateWithLocale(date, { dateStyle: 'short', timeStyle: 'short' })\r\n        }\r\n    }\r\n})\r\n</script>\r\n","<template>\r\n    <div class=\"workflow\">\r\n        <div class=\"p-grid\">\r\n            <div class=\"p-col\">\r\n                <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                    <template #start>\r\n                        {{ $t('managers.mondrianSchemasManagement.workFlow.availableUsers') }}\r\n                    </template>\r\n                </Toolbar>\r\n                <Listbox\r\n                    class=\"kn-list workflowContainer\"\r\n                    :options=\"availableUsersList[0]\"\r\n                    :filter=\"true\"\r\n                    :filterPlaceholder=\"$t('common.search')\"\r\n                    optionLabel=\"name\"\r\n                    filterMatchMode=\"contains\"\r\n                    :filterFields=\"workflowDescriptor.filterFields\"\r\n                    :emptyFilterMessage=\"$t('common.info.noDataFound')\"\r\n                    data-test=\"userList1\"\r\n                >\r\n                    <template #empty>{{ $t('common.info.noDataFound') }}</template>\r\n                    <template #option=\"slotProps\">\r\n                        <div class=\"kn-list-item\" :class=\"{ disableCursor: isStartedWf }\" @click=\"addUserToWfList(slotProps.option.id)\" data-test=\"userList1-item\">\r\n                            <div class=\"kn-list-item-text\">\r\n                                <span>{{ slotProps.option.userId }}</span>\r\n                                <span class=\"kn-list-item-text-secondary\">{{ slotProps.option.fullName }}</span>\r\n                            </div>\r\n                        </div>\r\n                    </template>\r\n                </Listbox>\r\n            </div>\r\n            <div class=\"p-col\">\r\n                <Toolbar class=\"kn-toolbar kn-toolbar--secondary\">\r\n                    <template #start>\r\n                        {{ $t('managers.mondrianSchemasManagement.workFlow.userWf') }}\r\n                    </template>\r\n                    <template #end>\r\n                        <span v-tooltip.top=\"$t(tooltipValue)\">\r\n                            <Button :disabled=\"disableButton\" icon=\"pi pi-play\" class=\"p-button-rounded\" @click=\"startWorkflow\" />\r\n                        </span>\r\n                    </template>\r\n                </Toolbar>\r\n                <Listbox\r\n                    class=\"kn-list workflowContainer\"\r\n                    :options=\"availableUsersList[1]\"\r\n                    :filter=\"true\"\r\n                    :filterPlaceholder=\"$t('common.search')\"\r\n                    optionLabel=\"name\"\r\n                    filterMatchMode=\"contains\"\r\n                    :filterFields=\"workflowDescriptor.filterFields\"\r\n                    :emptyFilterMessage=\"$t('common.info.noDataFound')\"\r\n                    data-test=\"userList2\"\r\n                >\r\n                    <template #empty>{{ $t('common.info.noDataFound') }}</template>\r\n                    <template #option=\"slotProps\">\r\n                        <div class=\"kn-list-item\" :class=\"{ disableCursor: isStartedWf }\" @click=\"removeUserFromWfList(slotProps.option.id)\" data-test=\"userList2-item\">\r\n                            <div class=\"kn-list-item-text\">\r\n                                <span>{{ slotProps.option.userId }}</span>\r\n                                <span class=\"kn-list-item-text-secondary\">{{ slotProps.option.fullName }}</span>\r\n                            </div>\r\n                            <div v-if=\"!isStartedWf\">\r\n                                <Button icon=\"pi pi-arrow-circle-up\" class=\"p-button-link\" @click.stop=\"moveUpList(slotProps.option.id)\" />\r\n                                <Button icon=\"pi pi-arrow-circle-down\" class=\"p-button-link\" @click.stop=\"moveDownList(slotProps.option.id)\" />\r\n                            </div>\r\n                            <div v-if=\"isStartedWf\">\r\n                                <i v-if=\"slotProps.option.id === userInProg\" class=\"pi pi-check-circle\" :style=\"workflowDescriptor.style.icon\" />\r\n                            </div>\r\n                        </div>\r\n                    </template>\r\n                </Listbox>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { iSchema } from '../MondrianSchemas'\r\nimport workflowDescriptor from './MondrianSchemasWorkflowDescriptor.json'\r\nimport Listbox from 'primevue/listbox'\r\nimport { AxiosResponse } from 'axios'\r\nimport Tooltip from 'primevue/tooltip'\r\nimport mainStore from '../../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'workflow-tab',\r\n    directives: {\r\n        tooltip: Tooltip\r\n    },\r\n    components: {\r\n        Listbox\r\n    },\r\n    props: {\r\n        usersList: Array,\r\n        selectedSchema: Object,\r\n        isChanged: Boolean\r\n    },\r\n    computed: {\r\n        disableButton() {\r\n            if (!this.schema.id || this.availableUsersList[1].length == 0 || this.isChanged || this.isStartedWf) return true\r\n            return false\r\n        },\r\n        tooltipValue() {\r\n            const key = 'managers.mondrianSchemasManagement.workFlow.tooltips'\r\n            if (!this.schema.id) return `${key}.noSchema`\r\n            if (this.availableUsersList[1].length == 0 || this.isChanged) return `${key}.noWfUsers`\r\n            if (this.isStartedWf === true) return `${key}.wfInProgress`\r\n\r\n            return ''\r\n        }\r\n    },\r\n    emits: ['changed', 'selectedUsersChanged'],\r\n    data() {\r\n        return {\r\n            workflowDescriptor,\r\n            availableUsersList: [] as any[],\r\n            schema: {} as iSchema,\r\n            isStartedWf: false,\r\n            isButtonDisabled: false,\r\n            userInProg: null as any\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    mounted() {\r\n        if (this.selectedSchema) {\r\n            this.schema = { ...this.selectedSchema } as iSchema\r\n        }\r\n        this.availableUsersList = this.usersList as any[]\r\n    },\r\n    watch: {\r\n        usersList() {\r\n            this.availableUsersList = this.usersList as any[]\r\n        },\r\n        selectedSchema() {\r\n            this.schema = { ...this.selectedSchema } as iSchema\r\n            this.isWorkflowStarted()\r\n        }\r\n    },\r\n    methods: {\r\n        onUserChange() {\r\n            let selectedUsers = this.availableUsersList[1]\r\n            this.$emit('selectedUsersChanged', selectedUsers)\r\n            this.$emit('changed')\r\n        },\r\n        async isWorkflowStarted() {\r\n            if (this.schema.id) {\r\n                await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/workflow/isStarted/${this.schema.id}`).then((response: AxiosResponse<any>) => {\r\n                    if (response.data > 0) {\r\n                        this.isStartedWf = true\r\n                        this.userInProg = response.data\r\n                    } else {\r\n                        this.isStartedWf = false\r\n                        this.userInProg = null\r\n                    }\r\n                })\r\n            } else {\r\n                this.isStartedWf = false\r\n                this.userInProg = null\r\n            }\r\n        },\r\n        async startWorkflow() {\r\n            let url = import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/workflow/startWorkflow/${this.schema.id}`\r\n            await this.$http\r\n                .put(url)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    if (response.data.errors) {\r\n                        this.store.setError({ title: this.$t('managers.mondrianSchemasManagement.toast.workflow.startFailed'), msg: response.data.errors[0].message })\r\n                    } else {\r\n                        this.store.setInfo({\r\n                            title: this.$t('managers.mondrianSchemasManagement.toast.workflow.started'),\r\n                            msg: this.$t('managers.mondrianSchemasManagement.toast.workflow.startedOk')\r\n                        })\r\n                    }\r\n                })\r\n                .then(this.isWorkflowStarted)\r\n        },\r\n        moveUpList(userId) {\r\n            const index = this.availableUsersList[1].findIndex((user) => user.id === userId)\r\n            if (index > 0) {\r\n                const user = this.availableUsersList[1][index]\r\n                this.availableUsersList[1].splice(index, 1)\r\n                this.availableUsersList[1].splice(index - 1, 0, user)\r\n                this.onUserChange()\r\n            }\r\n        },\r\n        moveDownList(userId) {\r\n            const index = this.availableUsersList[1].findIndex((user) => user.id === userId)\r\n            if (index < this.availableUsersList[1].length - 1) {\r\n                const user = this.availableUsersList[1][index]\r\n                this.availableUsersList[1].splice(index, 1)\r\n                this.availableUsersList[1].splice(index + 1, 0, user)\r\n                this.onUserChange()\r\n            }\r\n        },\r\n        removeUserFromWfList(userId) {\r\n            if (!this.isStartedWf) this.moveUser(userId, this.availableUsersList[1], this.availableUsersList[0])\r\n        },\r\n        addUserToWfList(userId) {\r\n            if (!this.isStartedWf) this.moveUser(userId, this.availableUsersList[0], this.availableUsersList[1])\r\n        },\r\n        moveUser(userId, sourceList, targetList) {\r\n            const index = sourceList.findIndex((user) => user.id === userId)\r\n            if (index >= 0) {\r\n                const user = sourceList[index]\r\n                sourceList.splice(index, 1)\r\n                targetList.push(user)\r\n                this.onUserChange()\r\n            }\r\n        }\r\n    }\r\n})\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.workflow {\r\n    :deep(.p-card-body) {\r\n        padding: 0;\r\n        .p-card-content {\r\n            padding: 0;\r\n        }\r\n    }\r\n    .workflowContainer {\r\n        border: 1px solid var(--kn-color-borders);\r\n        border-top: none;\r\n    }\r\n}\r\n.disableCursor {\r\n    cursor: not-allowed;\r\n}\r\n::v-deep(.p-toolbar-group-right) {\r\n    height: 100%;\r\n}\r\n</style>\r\n","<template>\r\n    <Toolbar class=\"kn-toolbar kn-toolbar--secondary p-m-0\">\r\n        <template #start>{{ selectedSchema.name }} </template>\r\n        <template #end>\r\n            <Button icon=\"pi pi-save\" class=\"p-button-text p-button-rounded p-button-plain\" :disabled=\"buttonDisabled\" @click=\"handleSubmit\" />\r\n            <Button icon=\"pi pi-times\" class=\"p-button-text p-button-rounded p-button-plain\" @click=\"closeTemplateConfirm\" />\r\n        </template>\r\n    </Toolbar>\r\n    <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar\" v-if=\"loading\" />\r\n    <div class=\"kn-page-content\">\r\n        <TabView class=\"kn-tab kn-tab-overflow-visible\" data-test=\"tab-view\">\r\n            <TabPanel>\r\n                <template #header>\r\n                    <span>{{ $t('managers.mondrianSchemasManagement.detail.title') }}</span>\r\n                </template>\r\n                <MondrianSchemasDetailTab :selectedSchema=\"selectedSchema\" :reloadTable=\"reloadVersionTable\" @fieldChanged=\"onFieldChange\" @activeVersionChanged=\"onVersionChange\" @versionUploaded=\"versionToSave = $event\" @versionsReloaded=\"reloadVersionTable = false\" />\r\n            </TabPanel>\r\n\r\n            <TabPanel>\r\n                <template #header>\r\n                    <span>{{ $t('managers.mondrianSchemasManagement.workFlow.title') }}</span>\r\n                </template>\r\n                <MondrianSchemasWorkflowTab :isChanged=\"isWorkflowChanged\" :selectedSchema=\"selectedSchema\" :usersList=\"availableUsersList\" @selectedUsersChanged=\"onSelectedUsersChange\" @changed=\"emitTouched\" />\r\n            </TabPanel>\r\n        </TabView>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { iSchema } from './MondrianSchemas'\r\nimport { AxiosResponse } from 'axios'\r\nimport tabViewDescriptor from './MondrianSchemasTabViewDescriptor.json'\r\nimport useValidate from '@vuelidate/core'\r\nimport TabView from 'primevue/tabview'\r\nimport TabPanel from 'primevue/tabpanel'\r\nimport MondrianSchemasDetailTab from './MondrianSchemasDetailTab/MondrianSchemasDetailTab.vue'\r\nimport MondrianSchemasWorkflowTab from './MondrianSchemasWorkflowTab/MondrianSchemasWorkflowTab.vue'\r\nimport mainStore from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    components: {\r\n        TabView,\r\n        TabPanel,\r\n        MondrianSchemasDetailTab,\r\n        MondrianSchemasWorkflowTab\r\n    },\r\n    emits: ['touched', 'closed', 'inserted'],\r\n    props: {\r\n        id: {\r\n            type: String,\r\n            required: false\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            loading: false,\r\n            tabViewDescriptor: tabViewDescriptor,\r\n            selectedSchema: {} as iSchema,\r\n            v$: useValidate() as any,\r\n            allUsers: [] as any,\r\n            wfSelectedUserList: [] as any,\r\n            availableUsersList: [] as any,\r\n            versionToSave: null as any,\r\n            reloadVersionTable: false,\r\n            touched: false,\r\n            isWorkflowChanged: false\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    async created() {\r\n        await this.loadAllUsers()\r\n        this.loadSelectedSchema()\r\n        this.clearAvailableUsersList()\r\n    },\r\n    computed: {\r\n        buttonDisabled(): any {\r\n            if (!this.selectedSchema.id && !this.versionToSave) {\r\n                return true\r\n            }\r\n            return this.v$.$invalid\r\n        },\r\n        operation() {\r\n            if (this.id) {\r\n                return 'update'\r\n            }\r\n            return 'insert'\r\n        }\r\n    },\r\n    watch: {\r\n        id() {\r\n            this.v$.$reset()\r\n            this.loadSelectedSchema()\r\n            this.touched = false\r\n            this.isWorkflowChanged = false\r\n        }\r\n    },\r\n    methods: {\r\n        emitTouched() {\r\n            this.touched = true\r\n            this.isWorkflowChanged = true\r\n            this.$emit('touched')\r\n        },\r\n        closeTemplate() {\r\n            this.$router.push('/mondrian-schemas-management')\r\n            this.$emit('closed')\r\n        },\r\n        onFieldChange(event) {\r\n            this.selectedSchema[event.fieldName] = event.value\r\n            this.touched = true\r\n            this.$emit('touched')\r\n        },\r\n        onVersionChange(event) {\r\n            this.selectedSchema.currentContentId = event\r\n            this.touched = true\r\n            this.$emit('touched')\r\n        },\r\n        onSelectedUsersChange(event) {\r\n            this.availableUsersList[1] = event\r\n            this.touched = true\r\n            this.$emit('touched')\r\n        },\r\n        closeTemplateConfirm() {\r\n            if (!this.touched) {\r\n                this.closeTemplate()\r\n            } else {\r\n                this.$confirm.require({\r\n                    message: this.$t('common.toast.unsavedChangesMessage'),\r\n                    header: this.$t('common.toast.unsavedChangesHeader'),\r\n                    icon: 'pi pi-exclamation-triangle',\r\n                    accept: () => {\r\n                        this.touched = false\r\n                        this.closeTemplate()\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        async loadAllUsers() {\r\n            await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/users`).then((response: AxiosResponse<any>) => (this.allUsers = response.data))\r\n        },\r\n        async loadSelectedSchema() {\r\n            this.loading = true\r\n            if (this.id) {\r\n                await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/mondrianSchemasResource/${this.id}`).then((response: AxiosResponse<any>) => (this.selectedSchema = response.data))\r\n                await this.$http.get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/workflow/${this.id}`).then((response: any) => (this.wfSelectedUserList = response.data.errors ? [] : response.data))\r\n            } else {\r\n                this.selectedSchema = {} as iSchema\r\n                this.wfSelectedUserList = []\r\n            }\r\n            this.createAvailableUsersList()\r\n            this.loading = false\r\n        },\r\n        createAvailableUsersList() {\r\n            const listOfSelectedUsers = this.wfSelectedUserList.map((userId) => this.allUsers.find((user) => user.id === userId))\r\n            const listOfAvailableUsers = [\r\n                ...this.allUsers.filter((user) => {\r\n                    const ind = this.wfSelectedUserList.findIndex((userId) => user.id === userId)\r\n                    return ind < 0\r\n                })\r\n            ]\r\n            this.availableUsersList = [listOfAvailableUsers, listOfSelectedUsers]\r\n        },\r\n        clearAvailableUsersList() {\r\n            this.availableUsersList = [[...this.allUsers], []]\r\n        },\r\n        async handleSubmit() {\r\n            if (this.v$.$invalid) {\r\n                return\r\n            }\r\n            this.selectedSchema.type = 'MONDRIAN_SCHEMA'\r\n            let url = import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/mondrianSchemasResource/`\r\n            if (this.selectedSchema.id) {\r\n                url += this.selectedSchema.id\r\n            }\r\n            await this.createOrUpdate(url).then((response: AxiosResponse<any>) => {\r\n                if (response.data.errors) {\r\n                    this.store.setError({ title: this.$t('managers.mondrianSchemasManagement.toast.schema.error'), msg: response.data.errors })\r\n                } else {\r\n                    this.store.setInfo({ title: this.$t(this.tabViewDescriptor.operation[this.operation].toastTitle), msg: this.$t(this.tabViewDescriptor.operation.success) })\r\n                    this.onSaveSuccess(response)\r\n                }\r\n            })\r\n        },\r\n        async createOrUpdate(url) {\r\n            return this.operation === 'update' ? this.$http.put(url, this.selectedSchema) : this.$http.post(url, this.selectedSchema)\r\n        },\r\n        async onSaveSuccess(response: AxiosResponse<any>) {\r\n            if (this.operation === 'insert') {\r\n                this.selectedSchema.id = response.data.id\r\n            }\r\n            await this.uploadFile()\r\n            if (this.isWorkflowChanged === true) {\r\n                await this.updateWorkflow(this.selectedSchema.id)\r\n            }\r\n\r\n            this.versionToSave = null\r\n            if (this.operation === 'insert') {\r\n                this.$router.push(`/mondrian-schemas-management/${this.selectedSchema.id}`)\r\n            } else {\r\n                this.reloadVersionTable = true\r\n            }\r\n            this.isWorkflowChanged = false\r\n            this.$emit('inserted')\r\n            this.touched = false\r\n        },\r\n        async updateWorkflow(schemaId) {\r\n            let url = import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/workflow/update`\r\n            await this.$http.put(url, { modelId: schemaId, workflowArr: this.availableUsersList[1] }, { headers: { Accept: 'application/json, text/plain, */*' } }).then(() => {\r\n                this.store.setInfo({\r\n                    title: this.$t('managers.mondrianSchemasManagement.toast.workflow.updated'),\r\n                    msg: this.$t('managers.mondrianSchemasManagement.toast.workflow.ok')\r\n                })\r\n            })\r\n        },\r\n        async uploadFile() {\r\n            if (!this.versionToSave) {\r\n                return\r\n            }\r\n            var formData = new FormData()\r\n            formData.append('file', this.versionToSave)\r\n            let url = import.meta.env.VITE_RESTFUL_SERVICES_PATH + `2.0/mondrianSchemasResource/${this.selectedSchema.id}` + '/versions'\r\n            await this.$http.post(url, formData, { headers: { 'Content-Type': 'multipart/form-data' } }).then((response: AxiosResponse<any>) => {\r\n                if (response.data.errors) {\r\n                    this.store.setError({ title: this.$t('managers.mondrianSchemasManagement.toast.uploadFile.error'), msg: response.data.errors })\r\n                } else {\r\n                    this.store.setInfo({ title: this.$t('managers.mondrianSchemasManagement.toast.uploadFile.uploaded'), msg: this.$t('managers.mondrianSchemasManagement.toast.uploadFile.ok') })\r\n                }\r\n            })\r\n        }\r\n    }\r\n})\r\n</script>\r\n"],"names":["_sfc_main","Card","DataTable","Column","moment","useValidate","mainStore","_hoisted_1","_hoisted_2","_hoisted_4","_hoisted_5","_hoisted_7","_hoisted_12","_openBlock","_Fragment","_createVNode","_withCtx","_createElementVNode","_hoisted_3","_normalizeClass","_toDisplayString","_hoisted_6","_hoisted_8","_hoisted_9","_createBlock","_createCommentVNode","_hoisted_10","_hoisted_11","_createElementBlock","_renderList","_normalizeStyle","Listbox","_withDirectives","_withModifiers","TabView","TabPanel"],"mappings":"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"}