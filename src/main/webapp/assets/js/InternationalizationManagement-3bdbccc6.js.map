{"version":3,"file":"InternationalizationManagement-3bdbccc6.js","sources":["../../../../modules/managers/internationalizationManagement/InternationalizationManagement.vue"],"sourcesContent":["<template>\r\n    <div class=\"kn-page\">\r\n        <ProgressBar mode=\"indeterminate\" class=\"kn-progress-bar\" v-if=\"loading\" data-test=\"progress-bar\" />\r\n        <TabView @tab-click=\"switchTabConfirm($event.index)\" v-model:activeIndex=\"activeTab\" lazy data-test=\"tab-view\" class=\"internationalization-management kn-tab kn-page-content\">\r\n            <TabPanel v-for=\"language in languages\" :key=\"language\">\r\n                <template #header>\r\n                    {{ language.language }}\r\n                    <span v-if=\"language.defaultLanguage\">{{ $t('managers.internationalizationManagement.defaultLanguage') }}</span>\r\n                </template>\r\n\r\n                <DataTable v-if=\"!loading\" editMode=\"cell\" :value=\"messages\" :loading=\"loading\" class=\"p-datatable kn-table\" dataKey=\"id\" responsiveLayout=\"stack\" breakpoint=\"960px\" v-model:filters=\"filters\" data-test=\"messages-table\">\r\n                    <template #header>\r\n                        <div class=\"table-header p-d-flex\">\r\n                            <span class=\"p-input-icon-left p-mr-3\" :style=\"intDescriptor.headerStyles.searchBoxStyle\">\r\n                                <i class=\"pi pi-search\" />\r\n                                <InputText class=\"kn-material-input\" v-model=\"filters['global'].value\" type=\"text\" :placeholder=\"$t('common.search')\" data-test=\"filterInput\" />\r\n                            </span>\r\n                            <div class=\"p-field-checkbox p-mt-4\">\r\n                                <Checkbox id=\"findEmptyFields\" :binary=\"true\" v-model=\"showOnlyEmptyFields\" @change=\"filterEmptyMessages\" data-test=\"checkbox\" />\r\n                                <label for=\"findEmptyFields\">{{ $t('managers.internationalizationManagement.showBlankMessages') }}</label>\r\n                            </div>\r\n                        </div>\r\n                    </template>\r\n                    <template #empty>\r\n                        {{ $t('common.info.noDataFound') }}\r\n                    </template>\r\n                    <template #filter=\"{ filterModel }\">\r\n                        <InputText type=\"text\" v-model=\"filterModel.value\" class=\"p-column-filter\" />\r\n                    </template>\r\n\r\n                    <Column :headerStyle=\"intDescriptor.headerStyles.dirtyHeaderStyle\">\r\n                        <template #body=\"slotProps\">\r\n                            <i class=\"pi pi-flag\" v-if=\"slotProps.data['dirty']\"></i>\r\n                        </template>\r\n                    </Column>\r\n\r\n                    <Column v-for=\"col of columns\" :field=\"col.field\" :header=\"$t(col.header)\" :key=\"col.field\" :sortable=\"true\" :class=\"{ disabledColumn: col.disabled, editableColumn: !col.disabled }\">\r\n                        <template #body=\"slotProps\">\r\n                            <InputText v-model=\"slotProps.data[slotProps.column.props.field]\" v-if=\"!col.disabled\" class=\"kn-material-input p-inputtext-sm p-p-2\" @input=\"atFieldChange(slotProps)\" :data-test=\"'input-field-' + slotProps.data['id']\" />\r\n                            <span v-else :class=\"{ disabledCell: col.disabled, 'kn-disabled-text': col.disabled, editableCell: !col.disabled }\">{{ slotProps.data[slotProps.column.props.field] }}</span>\r\n                        </template>\r\n                    </Column>\r\n\r\n                    <Column :headerStyle=\"intDescriptor.headerStyles.buttonsHeaderStyle\">\r\n                        <template #header>\r\n                            <Button v-if=\"language.defaultLanguage\" :label=\"$t('managers.internationalizationManagement.table.addLabel')\" class=\"p-button kn-button--primary\" @click=\"addEmptyLabel\" />\r\n                        </template>\r\n                        <template #body=\"slotProps\">\r\n                            <div class=\"p-d-flex p-jc-center p-ai-center\">\r\n                                <Button icon=\"pi pi-save\" class=\"p-button-link\" @click=\"saveLabel(language, slotProps.data)\" v-tooltip.top=\"$t('common.save')\" />\r\n                                <Button v-if=\"language.defaultLanguage\" icon=\"pi pi-trash\" class=\"p-button-link\" @click=\"deleteLabelConfirm(language, slotProps, true)\" v-tooltip.top=\"$t('common.delete')\" />\r\n                                <Button v-if=\"!language.defaultLanguage\" icon=\"pi pi-times\" class=\"p-button-link\" @click=\"deleteLabelConfirm(language, slotProps, false)\" v-tooltip.top=\"$t('common.cancel')\" />\r\n                            </div>\r\n                        </template>\r\n                    </Column>\r\n                </DataTable>\r\n            </TabPanel>\r\n        </TabView>\r\n    </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent } from 'vue'\r\nimport { filterDefault } from '@/helpers/commons/filterHelper'\r\nimport { iLanguage, iMessage } from './InternationalizationManagement'\r\nimport intDescriptor from './InternationalizationManagementDescriptor.json'\r\nimport { AxiosResponse } from 'axios'\r\nimport TabView from 'primevue/tabview'\r\nimport TabPanel from 'primevue/tabpanel'\r\nimport Column from 'primevue/column'\r\nimport DataTable from 'primevue/datatable'\r\nimport Checkbox from 'primevue/checkbox'\r\nimport Button from 'primevue/button'\r\nimport mainStore from '../../../App.store'\r\n\r\nexport default defineComponent({\r\n    name: 'internationalization-management',\r\n    components: {\r\n        TabView,\r\n        TabPanel,\r\n        Column,\r\n        DataTable,\r\n        Checkbox,\r\n        Button\r\n    },\r\n\r\n    computed: {\r\n        columns() {\r\n            if (this.selectedLanguage.defaultLanguage) {\r\n                return intDescriptor.defaultLanguageColumns\r\n            } else {\r\n                return intDescriptor.notDefaultLanguageColumns\r\n            }\r\n        }\r\n    },\r\n\r\n    data() {\r\n        return {\r\n            loading: false,\r\n            intDescriptor,\r\n            languages: [] as iLanguage[],\r\n            defaultLanguage: {} as iLanguage,\r\n            selectedLanguage: {} as iLanguage,\r\n            messages: [] as iMessage[],\r\n            allMessages: [] as iMessage[],\r\n            defaultLangMessages: [] as iMessage[],\r\n            showOnlyEmptyFields: false,\r\n            initialShowEmptyFields: false,\r\n            dirty: false,\r\n            activeTab: 0,\r\n            previousActiveTab: -1,\r\n            filters: {\r\n                global: [filterDefault]\r\n            } as Object\r\n        }\r\n    },\r\n    setup() {\r\n        const store = mainStore()\r\n        return { store }\r\n    },\r\n    async created() {\r\n        await this.getLanguages()\r\n        this.setDefaultLanguage()\r\n        this.getMessages(this.defaultLanguage)\r\n    },\r\n    methods: {\r\n        filterEmptyMessages() {\r\n            this.messages = this.showOnlyEmptyFields ? [...this.allMessages.filter((message) => !message.message)] : [...this.allMessages]\r\n        },\r\n\r\n        atFieldChange(slotProps) {\r\n            slotProps.data.dirty = true\r\n            this.dirty = true\r\n        },\r\n\r\n        setDefaultLanguage() {\r\n            let defaultLanguageIndex\r\n            for (var language in this.languages) {\r\n                if (this.languages[language].defaultLanguage) {\r\n                    defaultLanguageIndex = language\r\n                    this.defaultLanguage = this.languages[language]\r\n                }\r\n            }\r\n            this.languages.unshift(this.languages.splice(defaultLanguageIndex, 1)[0])\r\n            this.selectLanguage(0)\r\n        },\r\n\r\n        addEmptyLabel() {\r\n            var tempMessage = {\r\n                language: '',\r\n                label: '',\r\n                message: ''\r\n            }\r\n            this.messages.unshift(tempMessage)\r\n        },\r\n\r\n        selectLanguage(index) {\r\n            var selectedTab = this.languages[index]\r\n            this.selectedLanguage = this.languages[index]\r\n            this.getMessages(selectedTab)\r\n        },\r\n\r\n        async switchTabConfirm(index) {\r\n            if (!this.dirty) {\r\n                this.switchTab(index)\r\n                this.previousActiveTab = this.activeTab\r\n            } else {\r\n                this.$confirm.require({\r\n                    message: this.$t('common.toast.unsavedChangesMessage'),\r\n                    header: this.$t('common.toast.unsavedChangesHeader'),\r\n                    icon: 'pi pi-exclamation-triangle',\r\n                    accept: () => {\r\n                        this.switchTab(index)\r\n                        this.dirty = false\r\n                    },\r\n                    reject: () => {\r\n                        this.activeTab = this.previousActiveTab\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        switchTab(index) {\r\n            this.initialShowEmptyFields = this.showOnlyEmptyFields.valueOf()\r\n            this.showOnlyEmptyFields = false\r\n            this.activeTab = index\r\n            this.selectLanguage(index)\r\n        },\r\n\r\n        initCheck() {\r\n            if (this.initialShowEmptyFields) {\r\n                this.showOnlyEmptyFields = true\r\n                this.filterEmptyMessages()\r\n            }\r\n        },\r\n        async setDataForDefaultLanguage(response: AxiosResponse<any>) {\r\n            if (response.data.length == 0) {\r\n                this.addEmptyLabel()\r\n            } else {\r\n                await this.setDefaultLanguageValues(response)\r\n                this.initCheck()\r\n            }\r\n        },\r\n        async setDefaultLanguageValues(response: AxiosResponse<any>) {\r\n            this.defaultLangMessages = response.data\r\n            this.messages = response.data\r\n        },\r\n\r\n        async setEmptyDatatableData(selectedTab) {\r\n            this.defaultLangMessages.forEach((defMess) => {\r\n                var newMess = {} as any\r\n                newMess.language = selectedTab.languageTag\r\n                newMess.label = defMess.label\r\n                newMess.defaultMessageCode = defMess.message\r\n                newMess.message = ''\r\n                this.messages.push(newMess)\r\n            })\r\n        },\r\n\r\n        async checkForMessages(response, selectedTab) {\r\n            if (response.data.length != 0) {\r\n                await this.setFilledDatatableData(response, selectedTab)\r\n            } else {\r\n                await this.setEmptyDatatableData(selectedTab)\r\n            }\r\n            this.initCheck()\r\n        },\r\n\r\n        async setFilledDatatableData(response, selectedTab) {\r\n            this.defaultLangMessages.forEach((defMess) => {\r\n                var translatedMessage = response.data.find((item) => {\r\n                    return item.label == defMess.label\r\n                })\r\n                if (translatedMessage) {\r\n                    translatedMessage.defaultMessageCode = defMess.message\r\n                    this.messages.push(translatedMessage)\r\n                } else {\r\n                    var message = {\r\n                        language: selectedTab.languageTag,\r\n                        label: defMess.label,\r\n                        defaultMessageCode: defMess.message,\r\n                        message: ''\r\n                    }\r\n                    this.messages.push(message)\r\n                }\r\n            })\r\n        },\r\n\r\n        getMessages(selectedTab) {\r\n            this.messages = []\r\n            this.loading = true\r\n            return this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + '2.0/i18nMessages/internationalization/?currLanguage=' + selectedTab.languageTag)\r\n                .then((response: AxiosResponse<any>) => {\r\n                    if (selectedTab.defaultLanguage) {\r\n                        this.setDataForDefaultLanguage(response)\r\n                    } else {\r\n                        this.checkForMessages(response, selectedTab)\r\n                    }\r\n                    this.allMessages = [...this.messages]\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n\r\n        async getLanguages() {\r\n            this.loading = true\r\n            return this.$http\r\n                .get(import.meta.env.VITE_RESTFUL_SERVICES_PATH + '2.0/internationalization/languages')\r\n                .then((response: AxiosResponse<any>) => {\r\n                    this.languages = response.data.wrappedObject\r\n                })\r\n                .finally(() => (this.loading = false))\r\n        },\r\n\r\n        saveOrUpdateMessage(url, toSave, langObj) {\r\n            if (toSave.id) {\r\n                delete toSave.defaultMessageCode\r\n\r\n                return this.$http.put(url, toSave)\r\n            } else {\r\n                if (toSave.defaultMessageCode) delete toSave.defaultMessageCode\r\n                toSave.language = langObj.languageTag\r\n                return this.$http.post(url, toSave)\r\n            }\r\n        },\r\n\r\n        saveLabel(langObj, message) {\r\n            let url = import.meta.env.VITE_RESTFUL_SERVICES_PATH + '2.0/i18nMessages'\r\n            var toSave = { ...message } as iMessage\r\n            delete toSave.dirty\r\n            this.saveOrUpdateMessage(url, toSave, langObj).then((response: AxiosResponse<any>) => {\r\n                if (response.data.errors) {\r\n                    this.store.setError({ msg: response.data.errors })\r\n                } else {\r\n                    this.store.setInfo({ msg: this.$t('common.toast.updateSuccess') })\r\n                }\r\n                this.getMessages(langObj)\r\n            })\r\n            this.initialShowEmptyFields = false\r\n            this.showOnlyEmptyFields = false\r\n            this.dirty = false\r\n        },\r\n\r\n        deleteLabelConfirm(langObj, message, isDefault) {\r\n            let msgToDelete = message.data\r\n            let index = message.index\r\n            if (msgToDelete.id) {\r\n                let url = ''\r\n                if (msgToDelete.defaultMessageCode) {\r\n                    url = import.meta.env.VITE_RESTFUL_SERVICES_PATH + '2.0/i18nMessages/'\r\n                    this.$confirm.require({\r\n                        message: this.$t('managers.internationalizationManagement.delete.deleteMessage'),\r\n                        header: this.$t('managers.internationalizationManagement.delete.deleteMessageTitle'),\r\n                        icon: 'pi pi-exclamation-triangle',\r\n                        accept: () => this.deleteLabel(url, msgToDelete.id, langObj)\r\n                    })\r\n                } else {\r\n                    url = import.meta.env.VITE_RESTFUL_SERVICES_PATH + '2.0/i18nMessages/deletedefault/'\r\n                    this.$confirm.require({\r\n                        message: this.$t('managers.internationalizationManagement.delete.deleteDefault'),\r\n                        header: this.$t('managers.internationalizationManagement.delete.deleteDefaultTitle'),\r\n\r\n                        icon: 'pi pi-exclamation-triangle',\r\n                        accept: () => this.deleteLabel(url, msgToDelete.id, langObj)\r\n                    })\r\n                }\r\n            } else {\r\n                isDefault ? this.messages.splice(index, 1) : this.store.setError({ title: this.$t('managers.internationalizationManagement.delete.deleteDefaultTitle'), msg: this.$t('managers.internationalizationManagement.delete.cantDelete') })\r\n            }\r\n        },\r\n\r\n        async deleteLabel(url, id, langObj) {\r\n            await this.$http.delete(url + id).then((response: AxiosResponse<any>) => {\r\n                if (response.data.errors) {\r\n                    this.store.setError({ title: 'Error', msg: response.data.errors })\r\n                } else {\r\n                    this.store.setInfo({ title: this.$t('common.toast.deleteTitle'), msg: this.$t('common.toast.deleteSuccess') })\r\n                    this.getMessages(langObj)\r\n                }\r\n            })\r\n            this.initialShowEmptyFields = false\r\n            this.showOnlyEmptyFields = false\r\n        }\r\n    }\r\n})\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.internationalization-management {\r\n    .disabledCell,\r\n    .disabledColumn,\r\n    .disabledEditableField {\r\n        cursor: not-allowed;\r\n    }\r\n    .editableCell,\r\n    .editableColumn {\r\n        cursor: pointer;\r\n    }\r\n    .p-datatable .p-datatable-tbody > tr:hover {\r\n        background-color: var(--kn-color-selected);\r\n    }\r\n}\r\n</style>\r\n"],"names":["TabView","TabPanel","Column","DataTable","Checkbox","Button","mainStore","_createElementVNode","_openBlock","_createElementBlock","_createBlock","_createCommentVNode","_createVNode","_withCtx","_Fragment","_toDisplayString","_normalizeStyle","_renderList","_normalizeClass","_withDirectives"],"mappings":"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"}